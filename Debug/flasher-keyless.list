
flasher-keyless.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d534  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0010c5cc  0800d6e4  0800d6e4  0000e6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08119cb0  08119cb0  0011b080  2**0
                  CONTENTS
  4 .ARM          00000008  08119cb0  08119cb0  0011acb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08119cb8  08119cb8  0011b080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08119cb8  08119cb8  0011acb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08119cbc  08119cbc  0011acbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08119cc0  0011b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0011b080  2**0
                  CONTENTS
 10 .bss          00008fdc  20000080  20000080  0011b080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000905c  2000905c  0011b080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0011b080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029806  00000000  00000000  0011b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005d91  00000000  00000000  001448b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022d8  00000000  00000000  0014a648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b2e8  00000000  00000000  0014c920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ab79  00000000  00000000  00177c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5472  00000000  00000000  001a2781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00297bf3  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00001aec  00000000  00000000  00297c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009718  00000000  00000000  00299724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  002a2e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d6cc 	.word	0x0800d6cc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	0800d6cc 	.word	0x0800d6cc

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
 80004f6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
	...

08000514 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	4a07      	ldr	r2, [pc, #28]	@ (8000540 <vApplicationGetIdleTaskMemory+0x2c>)
 8000524:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	4a06      	ldr	r2, [pc, #24]	@ (8000544 <vApplicationGetIdleTaskMemory+0x30>)
 800052a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2280      	movs	r2, #128	@ 0x80
 8000530:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	2000009c 	.word	0x2000009c
 8000544:	200000f4 	.word	0x200000f4

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b5b0      	push	{r4, r5, r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f001 f93b 	bl	80017c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f82d 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 fac5 	bl	8000ae4 <MX_GPIO_Init>
  MX_CRC_Init();
 800055a:	f000 f893 	bl	8000684 <MX_CRC_Init>
  MX_DMA2D_Init();
 800055e:	f000 f8a5 	bl	80006ac <MX_DMA2D_Init>
  MX_FMC_Init();
 8000562:	f000 fa6f 	bl	8000a44 <MX_FMC_Init>
  MX_I2C3_Init();
 8000566:	f000 f8d3 	bl	8000710 <MX_I2C3_Init>
  MX_LTDC_Init();
 800056a:	f000 f911 	bl	8000790 <MX_LTDC_Init>
  MX_SPI5_Init();
 800056e:	f000 f98f 	bl	8000890 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000572:	f000 f9c3 	bl	80008fc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000576:	f000 fa3b 	bl	80009f0 <MX_USART1_UART_Init>
  MX_UART5_Init();
 800057a:	f000 fa0f 	bl	800099c <MX_UART5_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800057e:	4b0a      	ldr	r3, [pc, #40]	@ (80005a8 <main+0x60>)
 8000580:	1d3c      	adds	r4, r7, #4
 8000582:	461d      	mov	r5, r3
 8000584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000588:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f00a f994 	bl	800a8c2 <osThreadCreate>
 800059a:	4603      	mov	r3, r0
 800059c:	4a03      	ldr	r2, [pc, #12]	@ (80005ac <main+0x64>)
 800059e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005a0:	f00a f988 	bl	800a8b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a4:	bf00      	nop
 80005a6:	e7fd      	b.n	80005a4 <main+0x5c>
 80005a8:	0800d6f0 	.word	0x0800d6f0
 80005ac:	2000059c 	.word	0x2000059c

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b094      	sub	sp, #80	@ 0x50
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2230      	movs	r2, #48	@ 0x30
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f00c ffe8 	bl	800d594 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	4b28      	ldr	r3, [pc, #160]	@ (800067c <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	4a27      	ldr	r2, [pc, #156]	@ (800067c <SystemClock_Config+0xcc>)
 80005de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e4:	4b25      	ldr	r3, [pc, #148]	@ (800067c <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	4b22      	ldr	r3, [pc, #136]	@ (8000680 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005fc:	4a20      	ldr	r2, [pc, #128]	@ (8000680 <SystemClock_Config+0xd0>)
 80005fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b1e      	ldr	r3, [pc, #120]	@ (8000680 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000610:	2301      	movs	r3, #1
 8000612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000614:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000618:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000624:	2304      	movs	r3, #4
 8000626:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000628:	2348      	movs	r3, #72	@ 0x48
 800062a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000630:	2303      	movs	r3, #3
 8000632:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0320 	add.w	r3, r7, #32
 8000638:	4618      	mov	r0, r3
 800063a:	f004 fc37 	bl	8004eac <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000644:	f000 fbd2 	bl	8000dec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2302      	movs	r3, #2
 800064e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000654:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	2102      	movs	r1, #2
 8000664:	4618      	mov	r0, r3
 8000666:	f004 fe99 	bl	800539c <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000670:	f000 fbbc 	bl	8000dec <Error_Handler>
  }
}
 8000674:	bf00      	nop
 8000676:	3750      	adds	r7, #80	@ 0x50
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000688:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <MX_CRC_Init+0x20>)
 800068a:	4a07      	ldr	r2, [pc, #28]	@ (80006a8 <MX_CRC_Init+0x24>)
 800068c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	@ (80006a4 <MX_CRC_Init+0x20>)
 8000690:	f001 f9e2 	bl	8001a58 <HAL_CRC_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800069a:	f000 fba7 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200002f4 	.word	0x200002f4
 80006a8:	40023000 	.word	0x40023000

080006ac <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006b0:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006b2:	4a16      	ldr	r2, [pc, #88]	@ (800070c <MX_DMA2D_Init+0x60>)
 80006b4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006b6:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006bc:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006c2:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006da:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006e0:	4809      	ldr	r0, [pc, #36]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006e2:	f001 f9d5 	bl	8001a90 <HAL_DMA2D_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006ec:	f000 fb7e 	bl	8000dec <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006f0:	2101      	movs	r1, #1
 80006f2:	4805      	ldr	r0, [pc, #20]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006f4:	f001 fb26 	bl	8001d44 <HAL_DMA2D_ConfigLayer>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80006fe:	f000 fb75 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200002fc 	.word	0x200002fc
 800070c:	4002b000 	.word	0x4002b000

08000710 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <MX_I2C3_Init+0x74>)
 8000716:	4a1c      	ldr	r2, [pc, #112]	@ (8000788 <MX_I2C3_Init+0x78>)
 8000718:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <MX_I2C3_Init+0x74>)
 800071c:	4a1b      	ldr	r2, [pc, #108]	@ (800078c <MX_I2C3_Init+0x7c>)
 800071e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <MX_I2C3_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <MX_I2C3_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <MX_I2C3_Init+0x74>)
 800072e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000732:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <MX_I2C3_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800073a:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <MX_I2C3_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000740:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <MX_I2C3_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000746:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_I2C3_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800074c:	480d      	ldr	r0, [pc, #52]	@ (8000784 <MX_I2C3_Init+0x74>)
 800074e:	f003 fe85 	bl	800445c <HAL_I2C_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000758:	f000 fb48 	bl	8000dec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800075c:	2100      	movs	r1, #0
 800075e:	4809      	ldr	r0, [pc, #36]	@ (8000784 <MX_I2C3_Init+0x74>)
 8000760:	f003 ffc0 	bl	80046e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800076a:	f000 fb3f 	bl	8000dec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800076e:	2100      	movs	r1, #0
 8000770:	4804      	ldr	r0, [pc, #16]	@ (8000784 <MX_I2C3_Init+0x74>)
 8000772:	f003 fff3 	bl	800475c <HAL_I2CEx_ConfigDigitalFilter>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800077c:	f000 fb36 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	2000033c 	.word	0x2000033c
 8000788:	40005c00 	.word	0x40005c00
 800078c:	000186a0 	.word	0x000186a0

08000790 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08e      	sub	sp, #56	@ 0x38
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2234      	movs	r2, #52	@ 0x34
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f00c fef9 	bl	800d594 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007a2:	4b39      	ldr	r3, [pc, #228]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007a4:	4a39      	ldr	r2, [pc, #228]	@ (800088c <MX_LTDC_Init+0xfc>)
 80007a6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007a8:	4b37      	ldr	r3, [pc, #220]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007ae:	4b36      	ldr	r3, [pc, #216]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007b4:	4b34      	ldr	r3, [pc, #208]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007ba:	4b33      	ldr	r3, [pc, #204]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80007c0:	4b31      	ldr	r3, [pc, #196]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007c2:	2209      	movs	r2, #9
 80007c4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80007c6:	4b30      	ldr	r3, [pc, #192]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80007cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007ce:	221d      	movs	r2, #29
 80007d0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80007d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007d4:	2203      	movs	r2, #3
 80007d6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80007d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007da:	f240 120d 	movw	r2, #269	@ 0x10d
 80007de:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80007e0:	4b29      	ldr	r3, [pc, #164]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007e2:	f240 1243 	movw	r2, #323	@ 0x143
 80007e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 80007e8:	4b27      	ldr	r3, [pc, #156]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007ea:	f240 1217 	movw	r2, #279	@ 0x117
 80007ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 80007f0:	4b25      	ldr	r3, [pc, #148]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007f2:	f240 1247 	movw	r2, #327	@ 0x147
 80007f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80007f8:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000800:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <MX_LTDC_Init+0xf8>)
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000808:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <MX_LTDC_Init+0xf8>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000810:	481d      	ldr	r0, [pc, #116]	@ (8000888 <MX_LTDC_Init+0xf8>)
 8000812:	f003 ffe3 	bl	80047dc <HAL_LTDC_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800081c:	f000 fae6 	bl	8000dec <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000824:	23f0      	movs	r3, #240	@ 0xf0
 8000826:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 800082c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000830:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000832:	2302      	movs	r3, #2
 8000834:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000836:	23ff      	movs	r3, #255	@ 0xff
 8000838:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800083e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000842:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000844:	2307      	movs	r3, #7
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000848:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 800084c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 800084e:	23f0      	movs	r3, #240	@ 0xf0
 8000850:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8000852:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000856:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2200      	movs	r2, #0
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_LTDC_Init+0xf8>)
 8000872:	f004 f945 	bl	8004b00 <HAL_LTDC_ConfigLayer>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 800087c:	f000 fab6 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	3738      	adds	r7, #56	@ 0x38
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000390 	.word	0x20000390
 800088c:	40016800 	.word	0x40016800

08000890 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000894:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <MX_SPI5_Init+0x64>)
 8000896:	4a18      	ldr	r2, [pc, #96]	@ (80008f8 <MX_SPI5_Init+0x68>)
 8000898:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800089a:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <MX_SPI5_Init+0x64>)
 800089c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008a0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008a2:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008c0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008c4:	2218      	movs	r2, #24
 80008c6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d4:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008dc:	220a      	movs	r2, #10
 80008de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008e2:	f005 f9a1 	bl	8005c28 <HAL_SPI_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80008ec:	f000 fa7e 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000438 	.word	0x20000438
 80008f8:	40015000 	.word	0x40015000

080008fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000918:	4b1e      	ldr	r3, [pc, #120]	@ (8000994 <MX_TIM1_Init+0x98>)
 800091a:	4a1f      	ldr	r2, [pc, #124]	@ (8000998 <MX_TIM1_Init+0x9c>)
 800091c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800091e:	4b1d      	ldr	r3, [pc, #116]	@ (8000994 <MX_TIM1_Init+0x98>)
 8000920:	2200      	movs	r2, #0
 8000922:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000924:	4b1b      	ldr	r3, [pc, #108]	@ (8000994 <MX_TIM1_Init+0x98>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800092a:	4b1a      	ldr	r3, [pc, #104]	@ (8000994 <MX_TIM1_Init+0x98>)
 800092c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000930:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000932:	4b18      	ldr	r3, [pc, #96]	@ (8000994 <MX_TIM1_Init+0x98>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000938:	4b16      	ldr	r3, [pc, #88]	@ (8000994 <MX_TIM1_Init+0x98>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093e:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <MX_TIM1_Init+0x98>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000944:	4813      	ldr	r0, [pc, #76]	@ (8000994 <MX_TIM1_Init+0x98>)
 8000946:	f005 f9f8 	bl	8005d3a <HAL_TIM_Base_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000950:	f000 fa4c 	bl	8000dec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000954:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000958:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800095a:	f107 0308 	add.w	r3, r7, #8
 800095e:	4619      	mov	r1, r3
 8000960:	480c      	ldr	r0, [pc, #48]	@ (8000994 <MX_TIM1_Init+0x98>)
 8000962:	f005 fb99 	bl	8006098 <HAL_TIM_ConfigClockSource>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800096c:	f000 fa3e 	bl	8000dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000970:	2300      	movs	r3, #0
 8000972:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000978:	463b      	mov	r3, r7
 800097a:	4619      	mov	r1, r3
 800097c:	4805      	ldr	r0, [pc, #20]	@ (8000994 <MX_TIM1_Init+0x98>)
 800097e:	f005 fdc1 	bl	8006504 <HAL_TIMEx_MasterConfigSynchronization>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000988:	f000 fa30 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000490 	.word	0x20000490
 8000998:	40010000 	.word	0x40010000

0800099c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80009a0:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	@ (80009ec <MX_UART5_Init+0x50>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009ac:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009d4:	f005 fe26 	bl	8006624 <HAL_UART_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80009de:	f000 fa05 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200004d8 	.word	0x200004d8
 80009ec:	40005000 	.word	0x40005000

080009f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f4:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	@ (8000a40 <MX_USART1_UART_Init+0x50>)
 80009f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009fa:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 80009fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a14:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a28:	f005 fdfc 	bl	8006624 <HAL_UART_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a32:	f000 f9db 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000520 	.word	0x20000520
 8000a40:	40011000 	.word	0x40011000

08000a44 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
 8000a58:	615a      	str	r2, [r3, #20]
 8000a5a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a5e:	4a20      	ldr	r2, [pc, #128]	@ (8000ae0 <MX_FMC_Init+0x9c>)
 8000a60:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a62:	4b1e      	ldr	r3, [pc, #120]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a68:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a70:	2204      	movs	r2, #4
 8000a72:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a74:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a76:	2210      	movs	r2, #16
 8000a78:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a7a:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a7c:	2240      	movs	r2, #64	@ 0x40
 8000a7e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a80:	4b16      	ldr	r3, [pc, #88]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a82:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000a86:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a88:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a94:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a96:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aa2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000aac:	2304      	movs	r3, #4
 8000aae:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000ab0:	2307      	movs	r3, #7
 8000ab2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4805      	ldr	r0, [pc, #20]	@ (8000adc <MX_FMC_Init+0x98>)
 8000ac6:	f005 f87b 	bl	8005bc0 <HAL_SDRAM_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000ad0:	f000 f98c 	bl	8000dec <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000ad4:	bf00      	nop
 8000ad6:	3720      	adds	r7, #32
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000568 	.word	0x20000568
 8000ae0:	a0000140 	.word	0xa0000140

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08e      	sub	sp, #56	@ 0x38
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
 8000afe:	4b7b      	ldr	r3, [pc, #492]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a7a      	ldr	r2, [pc, #488]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b04:	f043 0304 	orr.w	r3, r3, #4
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b78      	ldr	r3, [pc, #480]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	623b      	str	r3, [r7, #32]
 8000b14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
 8000b1a:	4b74      	ldr	r3, [pc, #464]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a73      	ldr	r2, [pc, #460]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b20:	f043 0320 	orr.w	r3, r3, #32
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b71      	ldr	r3, [pc, #452]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0320 	and.w	r3, r3, #32
 8000b2e:	61fb      	str	r3, [r7, #28]
 8000b30:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	61bb      	str	r3, [r7, #24]
 8000b36:	4b6d      	ldr	r3, [pc, #436]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4a6c      	ldr	r2, [pc, #432]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b42:	4b6a      	ldr	r3, [pc, #424]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b4a:	61bb      	str	r3, [r7, #24]
 8000b4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	4b66      	ldr	r3, [pc, #408]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a65      	ldr	r2, [pc, #404]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b63      	ldr	r3, [pc, #396]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b5f      	ldr	r3, [pc, #380]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a5e      	ldr	r2, [pc, #376]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b5c      	ldr	r3, [pc, #368]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b58      	ldr	r3, [pc, #352]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a57      	ldr	r2, [pc, #348]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b55      	ldr	r3, [pc, #340]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	4b51      	ldr	r3, [pc, #324]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	4a50      	ldr	r2, [pc, #320]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000bac:	f043 0310 	orr.w	r3, r3, #16
 8000bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb2:	4b4e      	ldr	r3, [pc, #312]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	f003 0310 	and.w	r3, r3, #16
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b4a      	ldr	r3, [pc, #296]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a49      	ldr	r2, [pc, #292]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000bc8:	f043 0308 	orr.w	r3, r3, #8
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b47      	ldr	r3, [pc, #284]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f003 0308 	and.w	r3, r3, #8
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2116      	movs	r1, #22
 8000bde:	4844      	ldr	r0, [pc, #272]	@ (8000cf0 <MX_GPIO_Init+0x20c>)
 8000be0:	f001 faee 	bl	80021c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2180      	movs	r1, #128	@ 0x80
 8000be8:	4842      	ldr	r0, [pc, #264]	@ (8000cf4 <MX_GPIO_Init+0x210>)
 8000bea:	f001 fae9 	bl	80021c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000bf4:	4840      	ldr	r0, [pc, #256]	@ (8000cf8 <MX_GPIO_Init+0x214>)
 8000bf6:	f001 fae3 	bl	80021c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000c00:	483e      	ldr	r0, [pc, #248]	@ (8000cfc <MX_GPIO_Init+0x218>)
 8000c02:	f001 fadd 	bl	80021c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000c06:	2316      	movs	r3, #22
 8000c08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4834      	ldr	r0, [pc, #208]	@ (8000cf0 <MX_GPIO_Init+0x20c>)
 8000c1e:	f001 f923 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000c22:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c28:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	482e      	ldr	r0, [pc, #184]	@ (8000cf4 <MX_GPIO_Init+0x210>)
 8000c3a:	f001 f915 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c3e:	2380      	movs	r3, #128	@ 0x80
 8000c40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c52:	4619      	mov	r1, r3
 8000c54:	4827      	ldr	r0, [pc, #156]	@ (8000cf4 <MX_GPIO_Init+0x210>)
 8000c56:	f001 f907 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c5a:	2320      	movs	r3, #32
 8000c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c5e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4820      	ldr	r0, [pc, #128]	@ (8000cf0 <MX_GPIO_Init+0x20c>)
 8000c70:	f001 f8fa 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c74:	2304      	movs	r3, #4
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c84:	4619      	mov	r1, r3
 8000c86:	481e      	ldr	r0, [pc, #120]	@ (8000d00 <MX_GPIO_Init+0x21c>)
 8000c88:	f001 f8ee 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4815      	ldr	r0, [pc, #84]	@ (8000cf8 <MX_GPIO_Init+0x214>)
 8000ca2:	f001 f8e1 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000ca6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000caa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480e      	ldr	r0, [pc, #56]	@ (8000cf8 <MX_GPIO_Init+0x214>)
 8000cc0:	f001 f8d2 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000cc4:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4807      	ldr	r0, [pc, #28]	@ (8000cfc <MX_GPIO_Init+0x218>)
 8000cde:	f001 f8c3 	bl	8001e68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ce2:	bf00      	nop
 8000ce4:	3738      	adds	r7, #56	@ 0x38
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020800 	.word	0x40020800
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40020c00 	.word	0x40020c00
 8000cfc:	40021800 	.word	0x40021800
 8000d00:	40020400 	.word	0x40020400

08000d04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000d0c:	f00c f87a 	bl	800ce04 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d16:	4826      	ldr	r0, [pc, #152]	@ (8000db0 <StartDefaultTask+0xac>)
 8000d18:	f001 fa52 	bl	80021c0 <HAL_GPIO_WritePin>
  uint8_t sync_data[6] = {0xC0, 0xFF, 0xFE, 0xAA, 0x55, 0x90};
 8000d1c:	4a25      	ldr	r2, [pc, #148]	@ (8000db4 <StartDefaultTask+0xb0>)
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d26:	6018      	str	r0, [r3, #0]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	8019      	strh	r1, [r3, #0]
  flashstate = 1;
 8000d2c:	4b22      	ldr	r3, [pc, #136]	@ (8000db8 <StartDefaultTask+0xb4>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	601a      	str	r2, [r3, #0]
  HAL_UART_Transmit(&huart5, sync_data, sizeof(sync_data), 10);
 8000d32:	f107 010c 	add.w	r1, r7, #12
 8000d36:	230a      	movs	r3, #10
 8000d38:	2206      	movs	r2, #6
 8000d3a:	4820      	ldr	r0, [pc, #128]	@ (8000dbc <StartDefaultTask+0xb8>)
 8000d3c:	f005 fcc2 	bl	80066c4 <HAL_UART_Transmit>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d46:	481a      	ldr	r0, [pc, #104]	@ (8000db0 <StartDefaultTask+0xac>)
 8000d48:	f001 fa3a 	bl	80021c0 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	if(flashstate == 1)
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000db8 <StartDefaultTask+0xb4>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d126      	bne.n	8000da2 <StartDefaultTask+0x9e>
	{
		flashstate = 0;
 8000d54:	4b18      	ldr	r3, [pc, #96]	@ (8000db8 <StartDefaultTask+0xb4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < sizeof(ble_data); i++) {
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	e01c      	b.n	8000d9a <StartDefaultTask+0x96>
			HAL_UART_Transmit(&huart5, &ble_data[i], 1, 100);
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	4a17      	ldr	r2, [pc, #92]	@ (8000dc0 <StartDefaultTask+0xbc>)
 8000d64:	1899      	adds	r1, r3, r2
 8000d66:	2364      	movs	r3, #100	@ 0x64
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4814      	ldr	r0, [pc, #80]	@ (8000dbc <StartDefaultTask+0xb8>)
 8000d6c:	f005 fcaa 	bl	80066c4 <HAL_UART_Transmit>
			if ((i % 1024) == 0)
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d10c      	bne.n	8000d94 <StartDefaultTask+0x90>
			{
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000d7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d7e:	480c      	ldr	r0, [pc, #48]	@ (8000db0 <StartDefaultTask+0xac>)
 8000d80:	f001 fa37 	bl	80021f2 <HAL_GPIO_TogglePin>
				if(i == 1024){
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d8a:	d103      	bne.n	8000d94 <StartDefaultTask+0x90>
					osDelay(2000);
 8000d8c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d90:	f009 fde3 	bl	800a95a <osDelay>
		for (int i = 0; i < sizeof(ble_data); i++) {
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	3301      	adds	r3, #1
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	4a09      	ldr	r2, [pc, #36]	@ (8000dc4 <StartDefaultTask+0xc0>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d9de      	bls.n	8000d60 <StartDefaultTask+0x5c>
				}
			}
		}
	}
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000da8:	4801      	ldr	r0, [pc, #4]	@ (8000db0 <StartDefaultTask+0xac>)
 8000daa:	f001 fa09 	bl	80021c0 <HAL_GPIO_WritePin>
	if(flashstate == 1)
 8000dae:	e7cd      	b.n	8000d4c <StartDefaultTask+0x48>
 8000db0:	40021800 	.word	0x40021800
 8000db4:	0800d70c 	.word	0x0800d70c
 8000db8:	200005a0 	.word	0x200005a0
 8000dbc:	200004d8 	.word	0x200004d8
 8000dc0:	0800d758 	.word	0x0800d758
 8000dc4:	0010c53f 	.word	0x0010c53f

08000dc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a04      	ldr	r2, [pc, #16]	@ (8000de8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d101      	bne.n	8000dde <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dda:	f000 fd17 	bl	800180c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40001000 	.word	0x40001000

08000dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df0:	b672      	cpsid	i
}
 8000df2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <Error_Handler+0x8>

08000df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <HAL_MspInit+0x54>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e06:	4a11      	ldr	r2, [pc, #68]	@ (8000e4c <HAL_MspInit+0x54>)
 8000e08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <HAL_MspInit+0x54>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	603b      	str	r3, [r7, #0]
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e4c <HAL_MspInit+0x54>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e22:	4a0a      	ldr	r2, [pc, #40]	@ (8000e4c <HAL_MspInit+0x54>)
 8000e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e2a:	4b08      	ldr	r3, [pc, #32]	@ (8000e4c <HAL_MspInit+0x54>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	210f      	movs	r1, #15
 8000e3a:	f06f 0001 	mvn.w	r0, #1
 8000e3e:	f000 fde1 	bl	8001a04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800

08000e50 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e8c <HAL_CRC_MspInit+0x3c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d10d      	bne.n	8000e7e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <HAL_CRC_MspInit+0x40>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a09      	ldr	r2, [pc, #36]	@ (8000e90 <HAL_CRC_MspInit+0x40>)
 8000e6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b07      	ldr	r3, [pc, #28]	@ (8000e90 <HAL_CRC_MspInit+0x40>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000e7e:	bf00      	nop
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40023000 	.word	0x40023000
 8000e90:	40023800 	.word	0x40023800

08000e94 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0e      	ldr	r2, [pc, #56]	@ (8000edc <HAL_DMA2D_MspInit+0x48>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d115      	bne.n	8000ed2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee0 <HAL_DMA2D_MspInit+0x4c>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee0 <HAL_DMA2D_MspInit+0x4c>)
 8000eb0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee0 <HAL_DMA2D_MspInit+0x4c>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2105      	movs	r1, #5
 8000ec6:	205a      	movs	r0, #90	@ 0x5a
 8000ec8:	f000 fd9c 	bl	8001a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000ecc:	205a      	movs	r0, #90	@ 0x5a
 8000ece:	f000 fdb5 	bl	8001a3c <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	4002b000 	.word	0x4002b000
 8000ee0:	40023800 	.word	0x40023800

08000ee4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	@ 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a29      	ldr	r2, [pc, #164]	@ (8000fa8 <HAL_I2C_MspInit+0xc4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d14b      	bne.n	8000f9e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b28      	ldr	r3, [pc, #160]	@ (8000fac <HAL_I2C_MspInit+0xc8>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	4a27      	ldr	r2, [pc, #156]	@ (8000fac <HAL_I2C_MspInit+0xc8>)
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f16:	4b25      	ldr	r3, [pc, #148]	@ (8000fac <HAL_I2C_MspInit+0xc8>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	f003 0304 	and.w	r3, r3, #4
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b21      	ldr	r3, [pc, #132]	@ (8000fac <HAL_I2C_MspInit+0xc8>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a20      	ldr	r2, [pc, #128]	@ (8000fac <HAL_I2C_MspInit+0xc8>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b1e      	ldr	r3, [pc, #120]	@ (8000fac <HAL_I2C_MspInit+0xc8>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f44:	2312      	movs	r3, #18
 8000f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f50:	2304      	movs	r3, #4
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4815      	ldr	r0, [pc, #84]	@ (8000fb0 <HAL_I2C_MspInit+0xcc>)
 8000f5c:	f000 ff84 	bl	8001e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f66:	2312      	movs	r3, #18
 8000f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f72:	2304      	movs	r3, #4
 8000f74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480d      	ldr	r0, [pc, #52]	@ (8000fb4 <HAL_I2C_MspInit+0xd0>)
 8000f7e:	f000 ff73 	bl	8001e68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <HAL_I2C_MspInit+0xc8>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8a:	4a08      	ldr	r2, [pc, #32]	@ (8000fac <HAL_I2C_MspInit+0xc8>)
 8000f8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f92:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <HAL_I2C_MspInit+0xc8>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8000f9e:	bf00      	nop
 8000fa0:	3728      	adds	r7, #40	@ 0x28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40005c00 	.word	0x40005c00
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020800 	.word	0x40020800
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b09a      	sub	sp, #104	@ 0x68
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd4:	2230      	movs	r2, #48	@ 0x30
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f00c fadb 	bl	800d594 <memset>
  if(hltdc->Instance==LTDC)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a85      	ldr	r2, [pc, #532]	@ (80011f8 <HAL_LTDC_MspInit+0x240>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	f040 8102 	bne.w	80011ee <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000fea:	2308      	movs	r3, #8
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000fee:	2332      	movs	r3, #50	@ 0x32
 8000ff0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ffe:	4618      	mov	r0, r3
 8001000:	f004 fc1e 	bl	8005840 <HAL_RCCEx_PeriphCLKConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800100a:	f7ff feef 	bl	8000dec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
 8001012:	4b7a      	ldr	r3, [pc, #488]	@ (80011fc <HAL_LTDC_MspInit+0x244>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001016:	4a79      	ldr	r2, [pc, #484]	@ (80011fc <HAL_LTDC_MspInit+0x244>)
 8001018:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800101c:	6453      	str	r3, [r2, #68]	@ 0x44
 800101e:	4b77      	ldr	r3, [pc, #476]	@ (80011fc <HAL_LTDC_MspInit+0x244>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001022:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001026:	623b      	str	r3, [r7, #32]
 8001028:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
 800102e:	4b73      	ldr	r3, [pc, #460]	@ (80011fc <HAL_LTDC_MspInit+0x244>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a72      	ldr	r2, [pc, #456]	@ (80011fc <HAL_LTDC_MspInit+0x244>)
 8001034:	f043 0320 	orr.w	r3, r3, #32
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b70      	ldr	r3, [pc, #448]	@ (80011fc <HAL_LTDC_MspInit+0x244>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0320 	and.w	r3, r3, #32
 8001042:	61fb      	str	r3, [r7, #28]
 8001044:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]
 800104a:	4b6c      	ldr	r3, [pc, #432]	@ (80011fc <HAL_LTDC_MspInit+0x244>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a6b      	ldr	r2, [pc, #428]	@ (80011fc <HAL_LTDC_MspInit+0x244>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b69      	ldr	r3, [pc, #420]	@ (80011fc <HAL_LTDC_MspInit+0x244>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	61bb      	str	r3, [r7, #24]
 8001060:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	4b65      	ldr	r3, [pc, #404]	@ (80011fc <HAL_LTDC_MspInit+0x244>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a64      	ldr	r2, [pc, #400]	@ (80011fc <HAL_LTDC_MspInit+0x244>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b62      	ldr	r3, [pc, #392]	@ (80011fc <HAL_LTDC_MspInit+0x244>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	4b5e      	ldr	r3, [pc, #376]	@ (80011fc <HAL_LTDC_MspInit+0x244>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a5d      	ldr	r2, [pc, #372]	@ (80011fc <HAL_LTDC_MspInit+0x244>)
 8001088:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b5b      	ldr	r3, [pc, #364]	@ (80011fc <HAL_LTDC_MspInit+0x244>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b57      	ldr	r3, [pc, #348]	@ (80011fc <HAL_LTDC_MspInit+0x244>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	4a56      	ldr	r2, [pc, #344]	@ (80011fc <HAL_LTDC_MspInit+0x244>)
 80010a4:	f043 0304 	orr.w	r3, r3, #4
 80010a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010aa:	4b54      	ldr	r3, [pc, #336]	@ (80011fc <HAL_LTDC_MspInit+0x244>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	4b50      	ldr	r3, [pc, #320]	@ (80011fc <HAL_LTDC_MspInit+0x244>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a4f      	ldr	r2, [pc, #316]	@ (80011fc <HAL_LTDC_MspInit+0x244>)
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b4d      	ldr	r3, [pc, #308]	@ (80011fc <HAL_LTDC_MspInit+0x244>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80010d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010d6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010e4:	230e      	movs	r3, #14
 80010e6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80010e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010ec:	4619      	mov	r1, r3
 80010ee:	4844      	ldr	r0, [pc, #272]	@ (8001200 <HAL_LTDC_MspInit+0x248>)
 80010f0:	f000 feba 	bl	8001e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80010f4:	f641 0358 	movw	r3, #6232	@ 0x1858
 80010f8:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001106:	230e      	movs	r3, #14
 8001108:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800110e:	4619      	mov	r1, r3
 8001110:	483c      	ldr	r0, [pc, #240]	@ (8001204 <HAL_LTDC_MspInit+0x24c>)
 8001112:	f000 fea9 	bl	8001e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001116:	2303      	movs	r3, #3
 8001118:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001126:	2309      	movs	r3, #9
 8001128:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800112e:	4619      	mov	r1, r3
 8001130:	4835      	ldr	r0, [pc, #212]	@ (8001208 <HAL_LTDC_MspInit+0x250>)
 8001132:	f000 fe99 	bl	8001e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001136:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800113a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001148:	230e      	movs	r3, #14
 800114a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001150:	4619      	mov	r1, r3
 8001152:	482d      	ldr	r0, [pc, #180]	@ (8001208 <HAL_LTDC_MspInit+0x250>)
 8001154:	f000 fe88 	bl	8001e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001158:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800115c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800116a:	230e      	movs	r3, #14
 800116c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800116e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001172:	4619      	mov	r1, r3
 8001174:	4825      	ldr	r0, [pc, #148]	@ (800120c <HAL_LTDC_MspInit+0x254>)
 8001176:	f000 fe77 	bl	8001e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800117a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800117e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800118c:	230e      	movs	r3, #14
 800118e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001190:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001194:	4619      	mov	r1, r3
 8001196:	481e      	ldr	r0, [pc, #120]	@ (8001210 <HAL_LTDC_MspInit+0x258>)
 8001198:	f000 fe66 	bl	8001e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800119c:	2348      	movs	r3, #72	@ 0x48
 800119e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011ac:	230e      	movs	r3, #14
 80011ae:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011b4:	4619      	mov	r1, r3
 80011b6:	4817      	ldr	r0, [pc, #92]	@ (8001214 <HAL_LTDC_MspInit+0x25c>)
 80011b8:	f000 fe56 	bl	8001e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80011bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011c0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011ce:	2309      	movs	r3, #9
 80011d0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011d6:	4619      	mov	r1, r3
 80011d8:	480c      	ldr	r0, [pc, #48]	@ (800120c <HAL_LTDC_MspInit+0x254>)
 80011da:	f000 fe45 	bl	8001e68 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2105      	movs	r1, #5
 80011e2:	2058      	movs	r0, #88	@ 0x58
 80011e4:	f000 fc0e 	bl	8001a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011e8:	2058      	movs	r0, #88	@ 0x58
 80011ea:	f000 fc27 	bl	8001a3c <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80011ee:	bf00      	nop
 80011f0:	3768      	adds	r7, #104	@ 0x68
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40016800 	.word	0x40016800
 80011fc:	40023800 	.word	0x40023800
 8001200:	40021400 	.word	0x40021400
 8001204:	40020000 	.word	0x40020000
 8001208:	40020400 	.word	0x40020400
 800120c:	40021800 	.word	0x40021800
 8001210:	40020800 	.word	0x40020800
 8001214:	40020c00 	.word	0x40020c00

08001218 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	@ 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a19      	ldr	r2, [pc, #100]	@ (800129c <HAL_SPI_MspInit+0x84>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d12c      	bne.n	8001294 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b18      	ldr	r3, [pc, #96]	@ (80012a0 <HAL_SPI_MspInit+0x88>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001242:	4a17      	ldr	r2, [pc, #92]	@ (80012a0 <HAL_SPI_MspInit+0x88>)
 8001244:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001248:	6453      	str	r3, [r2, #68]	@ 0x44
 800124a:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <HAL_SPI_MspInit+0x88>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <HAL_SPI_MspInit+0x88>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a10      	ldr	r2, [pc, #64]	@ (80012a0 <HAL_SPI_MspInit+0x88>)
 8001260:	f043 0320 	orr.w	r3, r3, #32
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <HAL_SPI_MspInit+0x88>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0320 	and.w	r3, r3, #32
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001272:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001284:	2305      	movs	r3, #5
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <HAL_SPI_MspInit+0x8c>)
 8001290:	f000 fdea 	bl	8001e68 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001294:	bf00      	nop
 8001296:	3728      	adds	r7, #40	@ 0x28
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40015000 	.word	0x40015000
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40021400 	.word	0x40021400

080012a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0b      	ldr	r2, [pc, #44]	@ (80012e4 <HAL_TIM_Base_MspInit+0x3c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d10d      	bne.n	80012d6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <HAL_TIM_Base_MspInit+0x40>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c2:	4a09      	ldr	r2, [pc, #36]	@ (80012e8 <HAL_TIM_Base_MspInit+0x40>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ca:	4b07      	ldr	r3, [pc, #28]	@ (80012e8 <HAL_TIM_Base_MspInit+0x40>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80012d6:	bf00      	nop
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40010000 	.word	0x40010000
 80012e8:	40023800 	.word	0x40023800

080012ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08c      	sub	sp, #48	@ 0x30
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a42      	ldr	r2, [pc, #264]	@ (8001414 <HAL_UART_MspInit+0x128>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d14b      	bne.n	80013a6 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	61bb      	str	r3, [r7, #24]
 8001312:	4b41      	ldr	r3, [pc, #260]	@ (8001418 <HAL_UART_MspInit+0x12c>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001316:	4a40      	ldr	r2, [pc, #256]	@ (8001418 <HAL_UART_MspInit+0x12c>)
 8001318:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800131c:	6413      	str	r3, [r2, #64]	@ 0x40
 800131e:	4b3e      	ldr	r3, [pc, #248]	@ (8001418 <HAL_UART_MspInit+0x12c>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001326:	61bb      	str	r3, [r7, #24]
 8001328:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	4b3a      	ldr	r3, [pc, #232]	@ (8001418 <HAL_UART_MspInit+0x12c>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	4a39      	ldr	r2, [pc, #228]	@ (8001418 <HAL_UART_MspInit+0x12c>)
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	6313      	str	r3, [r2, #48]	@ 0x30
 800133a:	4b37      	ldr	r3, [pc, #220]	@ (8001418 <HAL_UART_MspInit+0x12c>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	4b33      	ldr	r3, [pc, #204]	@ (8001418 <HAL_UART_MspInit+0x12c>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	4a32      	ldr	r2, [pc, #200]	@ (8001418 <HAL_UART_MspInit+0x12c>)
 8001350:	f043 0308 	orr.w	r3, r3, #8
 8001354:	6313      	str	r3, [r2, #48]	@ 0x30
 8001356:	4b30      	ldr	r3, [pc, #192]	@ (8001418 <HAL_UART_MspInit+0x12c>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001362:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001374:	2308      	movs	r3, #8
 8001376:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4619      	mov	r1, r3
 800137e:	4827      	ldr	r0, [pc, #156]	@ (800141c <HAL_UART_MspInit+0x130>)
 8001380:	f000 fd72 	bl	8001e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001384:	2304      	movs	r3, #4
 8001386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001394:	2308      	movs	r3, #8
 8001396:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	4619      	mov	r1, r3
 800139e:	4820      	ldr	r0, [pc, #128]	@ (8001420 <HAL_UART_MspInit+0x134>)
 80013a0:	f000 fd62 	bl	8001e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013a4:	e031      	b.n	800140a <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001424 <HAL_UART_MspInit+0x138>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d12c      	bne.n	800140a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	4b18      	ldr	r3, [pc, #96]	@ (8001418 <HAL_UART_MspInit+0x12c>)
 80013b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b8:	4a17      	ldr	r2, [pc, #92]	@ (8001418 <HAL_UART_MspInit+0x12c>)
 80013ba:	f043 0310 	orr.w	r3, r3, #16
 80013be:	6453      	str	r3, [r2, #68]	@ 0x44
 80013c0:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <HAL_UART_MspInit+0x12c>)
 80013c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c4:	f003 0310 	and.w	r3, r3, #16
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <HAL_UART_MspInit+0x12c>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d4:	4a10      	ldr	r2, [pc, #64]	@ (8001418 <HAL_UART_MspInit+0x12c>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6313      	str	r3, [r2, #48]	@ 0x30
 80013dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <HAL_UART_MspInit+0x12c>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013e8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80013ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f6:	2303      	movs	r3, #3
 80013f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013fa:	2307      	movs	r3, #7
 80013fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 031c 	add.w	r3, r7, #28
 8001402:	4619      	mov	r1, r3
 8001404:	4808      	ldr	r0, [pc, #32]	@ (8001428 <HAL_UART_MspInit+0x13c>)
 8001406:	f000 fd2f 	bl	8001e68 <HAL_GPIO_Init>
}
 800140a:	bf00      	nop
 800140c:	3730      	adds	r7, #48	@ 0x30
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40005000 	.word	0x40005000
 8001418:	40023800 	.word	0x40023800
 800141c:	40020800 	.word	0x40020800
 8001420:	40020c00 	.word	0x40020c00
 8001424:	40011000 	.word	0x40011000
 8001428:	40020000 	.word	0x40020000

0800142c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001440:	4b3b      	ldr	r3, [pc, #236]	@ (8001530 <HAL_FMC_MspInit+0x104>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d16f      	bne.n	8001528 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001448:	4b39      	ldr	r3, [pc, #228]	@ (8001530 <HAL_FMC_MspInit+0x104>)
 800144a:	2201      	movs	r2, #1
 800144c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	603b      	str	r3, [r7, #0]
 8001452:	4b38      	ldr	r3, [pc, #224]	@ (8001534 <HAL_FMC_MspInit+0x108>)
 8001454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001456:	4a37      	ldr	r2, [pc, #220]	@ (8001534 <HAL_FMC_MspInit+0x108>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6393      	str	r3, [r2, #56]	@ 0x38
 800145e:	4b35      	ldr	r3, [pc, #212]	@ (8001534 <HAL_FMC_MspInit+0x108>)
 8001460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800146a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800146e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800147c:	230c      	movs	r3, #12
 800147e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	4619      	mov	r1, r3
 8001484:	482c      	ldr	r0, [pc, #176]	@ (8001538 <HAL_FMC_MspInit+0x10c>)
 8001486:	f000 fcef 	bl	8001e68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800148a:	2301      	movs	r3, #1
 800148c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800149a:	230c      	movs	r3, #12
 800149c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	4619      	mov	r1, r3
 80014a2:	4826      	ldr	r0, [pc, #152]	@ (800153c <HAL_FMC_MspInit+0x110>)
 80014a4:	f000 fce0 	bl	8001e68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80014a8:	f248 1333 	movw	r3, #33075	@ 0x8133
 80014ac:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b6:	2303      	movs	r3, #3
 80014b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014ba:	230c      	movs	r3, #12
 80014bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	4619      	mov	r1, r3
 80014c2:	481f      	ldr	r0, [pc, #124]	@ (8001540 <HAL_FMC_MspInit+0x114>)
 80014c4:	f000 fcd0 	bl	8001e68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80014c8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80014cc:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014da:	230c      	movs	r3, #12
 80014dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	4619      	mov	r1, r3
 80014e2:	4818      	ldr	r0, [pc, #96]	@ (8001544 <HAL_FMC_MspInit+0x118>)
 80014e4:	f000 fcc0 	bl	8001e68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80014e8:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80014ec:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f6:	2303      	movs	r3, #3
 80014f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014fa:	230c      	movs	r3, #12
 80014fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	4619      	mov	r1, r3
 8001502:	4811      	ldr	r0, [pc, #68]	@ (8001548 <HAL_FMC_MspInit+0x11c>)
 8001504:	f000 fcb0 	bl	8001e68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001508:	2360      	movs	r3, #96	@ 0x60
 800150a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001518:	230c      	movs	r3, #12
 800151a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	4619      	mov	r1, r3
 8001520:	480a      	ldr	r0, [pc, #40]	@ (800154c <HAL_FMC_MspInit+0x120>)
 8001522:	f000 fca1 	bl	8001e68 <HAL_GPIO_Init>
 8001526:	e000      	b.n	800152a <HAL_FMC_MspInit+0xfe>
    return;
 8001528:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	200005a4 	.word	0x200005a4
 8001534:	40023800 	.word	0x40023800
 8001538:	40021400 	.word	0x40021400
 800153c:	40020800 	.word	0x40020800
 8001540:	40021800 	.word	0x40021800
 8001544:	40021000 	.word	0x40021000
 8001548:	40020c00 	.word	0x40020c00
 800154c:	40020400 	.word	0x40020400

08001550 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001558:	f7ff ff68 	bl	800142c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08e      	sub	sp, #56	@ 0x38
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	4b33      	ldr	r3, [pc, #204]	@ (8001648 <HAL_InitTick+0xe4>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157c:	4a32      	ldr	r2, [pc, #200]	@ (8001648 <HAL_InitTick+0xe4>)
 800157e:	f043 0310 	orr.w	r3, r3, #16
 8001582:	6413      	str	r3, [r2, #64]	@ 0x40
 8001584:	4b30      	ldr	r3, [pc, #192]	@ (8001648 <HAL_InitTick+0xe4>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001588:	f003 0310 	and.w	r3, r3, #16
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001590:	f107 0210 	add.w	r2, r7, #16
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4611      	mov	r1, r2
 800159a:	4618      	mov	r0, r3
 800159c:	f004 f91e 	bl	80057dc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015a0:	6a3b      	ldr	r3, [r7, #32]
 80015a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d103      	bne.n	80015b2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015aa:	f004 f8ef 	bl	800578c <HAL_RCC_GetPCLK1Freq>
 80015ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80015b0:	e004      	b.n	80015bc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015b2:	f004 f8eb 	bl	800578c <HAL_RCC_GetPCLK1Freq>
 80015b6:	4603      	mov	r3, r0
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015be:	4a23      	ldr	r2, [pc, #140]	@ (800164c <HAL_InitTick+0xe8>)
 80015c0:	fba2 2303 	umull	r2, r3, r2, r3
 80015c4:	0c9b      	lsrs	r3, r3, #18
 80015c6:	3b01      	subs	r3, #1
 80015c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015ca:	4b21      	ldr	r3, [pc, #132]	@ (8001650 <HAL_InitTick+0xec>)
 80015cc:	4a21      	ldr	r2, [pc, #132]	@ (8001654 <HAL_InitTick+0xf0>)
 80015ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001650 <HAL_InitTick+0xec>)
 80015d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015d6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001650 <HAL_InitTick+0xec>)
 80015da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015dc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015de:	4b1c      	ldr	r3, [pc, #112]	@ (8001650 <HAL_InitTick+0xec>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001650 <HAL_InitTick+0xec>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ea:	4b19      	ldr	r3, [pc, #100]	@ (8001650 <HAL_InitTick+0xec>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80015f0:	4817      	ldr	r0, [pc, #92]	@ (8001650 <HAL_InitTick+0xec>)
 80015f2:	f004 fba2 	bl	8005d3a <HAL_TIM_Base_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80015fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001600:	2b00      	cmp	r3, #0
 8001602:	d11b      	bne.n	800163c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001604:	4812      	ldr	r0, [pc, #72]	@ (8001650 <HAL_InitTick+0xec>)
 8001606:	f004 fbe7 	bl	8005dd8 <HAL_TIM_Base_Start_IT>
 800160a:	4603      	mov	r3, r0
 800160c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001610:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001614:	2b00      	cmp	r3, #0
 8001616:	d111      	bne.n	800163c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001618:	2036      	movs	r0, #54	@ 0x36
 800161a:	f000 fa0f 	bl	8001a3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b0f      	cmp	r3, #15
 8001622:	d808      	bhi.n	8001636 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001624:	2200      	movs	r2, #0
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	2036      	movs	r0, #54	@ 0x36
 800162a:	f000 f9eb 	bl	8001a04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800162e:	4a0a      	ldr	r2, [pc, #40]	@ (8001658 <HAL_InitTick+0xf4>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	e002      	b.n	800163c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800163c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001640:	4618      	mov	r0, r3
 8001642:	3738      	adds	r7, #56	@ 0x38
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40023800 	.word	0x40023800
 800164c:	431bde83 	.word	0x431bde83
 8001650:	200005a8 	.word	0x200005a8
 8001654:	40001000 	.word	0x40001000
 8001658:	20000004 	.word	0x20000004

0800165c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <NMI_Handler+0x4>

08001664 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <HardFault_Handler+0x4>

0800166c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <MemManage_Handler+0x4>

08001674 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <BusFault_Handler+0x4>

0800167c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <UsageFault_Handler+0x4>

08001684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001698:	4802      	ldr	r0, [pc, #8]	@ (80016a4 <TIM6_DAC_IRQHandler+0x10>)
 800169a:	f004 fc0d 	bl	8005eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200005a8 	.word	0x200005a8

080016a8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80016ac:	4802      	ldr	r0, [pc, #8]	@ (80016b8 <OTG_HS_IRQHandler+0x10>)
 80016ae:	f001 f89b 	bl	80027e8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20008b34 	.word	0x20008b34

080016bc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80016c0:	4802      	ldr	r0, [pc, #8]	@ (80016cc <LTDC_IRQHandler+0x10>)
 80016c2:	f003 f95b 	bl	800497c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000390 	.word	0x20000390

080016d0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80016d4:	4802      	ldr	r0, [pc, #8]	@ (80016e0 <DMA2D_IRQHandler+0x10>)
 80016d6:	f000 fa24 	bl	8001b22 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200002fc 	.word	0x200002fc

080016e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ec:	4a14      	ldr	r2, [pc, #80]	@ (8001740 <_sbrk+0x5c>)
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <_sbrk+0x60>)
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f8:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001700:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <_sbrk+0x64>)
 8001702:	4a12      	ldr	r2, [pc, #72]	@ (800174c <_sbrk+0x68>)
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	429a      	cmp	r2, r3
 8001712:	d207      	bcs.n	8001724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001714:	f00b ff56 	bl	800d5c4 <__errno>
 8001718:	4603      	mov	r3, r0
 800171a:	220c      	movs	r2, #12
 800171c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001722:	e009      	b.n	8001738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001724:	4b08      	ldr	r3, [pc, #32]	@ (8001748 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172a:	4b07      	ldr	r3, [pc, #28]	@ (8001748 <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	4a05      	ldr	r2, [pc, #20]	@ (8001748 <_sbrk+0x64>)
 8001734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20030000 	.word	0x20030000
 8001744:	00000400 	.word	0x00000400
 8001748:	200005f0 	.word	0x200005f0
 800174c:	20009060 	.word	0x20009060

08001750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <SystemInit+0x20>)
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800175a:	4a05      	ldr	r2, [pc, #20]	@ (8001770 <SystemInit+0x20>)
 800175c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001760:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001774:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001778:	f7ff ffea 	bl	8001750 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800177c:	480c      	ldr	r0, [pc, #48]	@ (80017b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800177e:	490d      	ldr	r1, [pc, #52]	@ (80017b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001780:	4a0d      	ldr	r2, [pc, #52]	@ (80017b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001784:	e002      	b.n	800178c <LoopCopyDataInit>

08001786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178a:	3304      	adds	r3, #4

0800178c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800178c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001790:	d3f9      	bcc.n	8001786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001792:	4a0a      	ldr	r2, [pc, #40]	@ (80017bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001794:	4c0a      	ldr	r4, [pc, #40]	@ (80017c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001798:	e001      	b.n	800179e <LoopFillZerobss>

0800179a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800179c:	3204      	adds	r2, #4

0800179e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a0:	d3fb      	bcc.n	800179a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017a2:	f00b ff15 	bl	800d5d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017a6:	f7fe fecf 	bl	8000548 <main>
  bx  lr    
 80017aa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017ac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80017b8:	08119cc0 	.word	0x08119cc0
  ldr r2, =_sbss
 80017bc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80017c0:	2000905c 	.word	0x2000905c

080017c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c4:	e7fe      	b.n	80017c4 <ADC_IRQHandler>
	...

080017c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <HAL_Init+0x40>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001808 <HAL_Init+0x40>)
 80017d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001808 <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001808 <HAL_Init+0x40>)
 80017de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a07      	ldr	r2, [pc, #28]	@ (8001808 <HAL_Init+0x40>)
 80017ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f0:	2003      	movs	r0, #3
 80017f2:	f000 f8fc 	bl	80019ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f7ff feb4 	bl	8001564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017fc:	f7ff fafc 	bl	8000df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023c00 	.word	0x40023c00

0800180c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <HAL_IncTick+0x20>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_IncTick+0x24>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4413      	add	r3, r2
 800181c:	4a04      	ldr	r2, [pc, #16]	@ (8001830 <HAL_IncTick+0x24>)
 800181e:	6013      	str	r3, [r2, #0]
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000008 	.word	0x20000008
 8001830:	200005f4 	.word	0x200005f4

08001834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return uwTick;
 8001838:	4b03      	ldr	r3, [pc, #12]	@ (8001848 <HAL_GetTick+0x14>)
 800183a:	681b      	ldr	r3, [r3, #0]
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	200005f4 	.word	0x200005f4

0800184c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001854:	f7ff ffee 	bl	8001834 <HAL_GetTick>
 8001858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001864:	d005      	beq.n	8001872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001866:	4b0a      	ldr	r3, [pc, #40]	@ (8001890 <HAL_Delay+0x44>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4413      	add	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001872:	bf00      	nop
 8001874:	f7ff ffde 	bl	8001834 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	429a      	cmp	r2, r3
 8001882:	d8f7      	bhi.n	8001874 <HAL_Delay+0x28>
  {
  }
}
 8001884:	bf00      	nop
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000008 	.word	0x20000008

08001894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a4:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <__NVIC_SetPriorityGrouping+0x44>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018b0:	4013      	ands	r3, r2
 80018b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c6:	4a04      	ldr	r2, [pc, #16]	@ (80018d8 <__NVIC_SetPriorityGrouping+0x44>)
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	60d3      	str	r3, [r2, #12]
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e0:	4b04      	ldr	r3, [pc, #16]	@ (80018f4 <__NVIC_GetPriorityGrouping+0x18>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	0a1b      	lsrs	r3, r3, #8
 80018e6:	f003 0307 	and.w	r3, r3, #7
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	2b00      	cmp	r3, #0
 8001908:	db0b      	blt.n	8001922 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	f003 021f 	and.w	r2, r3, #31
 8001910:	4907      	ldr	r1, [pc, #28]	@ (8001930 <__NVIC_EnableIRQ+0x38>)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	095b      	lsrs	r3, r3, #5
 8001918:	2001      	movs	r0, #1
 800191a:	fa00 f202 	lsl.w	r2, r0, r2
 800191e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000e100 	.word	0xe000e100

08001934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	6039      	str	r1, [r7, #0]
 800193e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001944:	2b00      	cmp	r3, #0
 8001946:	db0a      	blt.n	800195e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	b2da      	uxtb	r2, r3
 800194c:	490c      	ldr	r1, [pc, #48]	@ (8001980 <__NVIC_SetPriority+0x4c>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	0112      	lsls	r2, r2, #4
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	440b      	add	r3, r1
 8001958:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800195c:	e00a      	b.n	8001974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	b2da      	uxtb	r2, r3
 8001962:	4908      	ldr	r1, [pc, #32]	@ (8001984 <__NVIC_SetPriority+0x50>)
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	3b04      	subs	r3, #4
 800196c:	0112      	lsls	r2, r2, #4
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	440b      	add	r3, r1
 8001972:	761a      	strb	r2, [r3, #24]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000e100 	.word	0xe000e100
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001988:	b480      	push	{r7}
 800198a:	b089      	sub	sp, #36	@ 0x24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f1c3 0307 	rsb	r3, r3, #7
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	bf28      	it	cs
 80019a6:	2304      	movcs	r3, #4
 80019a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3304      	adds	r3, #4
 80019ae:	2b06      	cmp	r3, #6
 80019b0:	d902      	bls.n	80019b8 <NVIC_EncodePriority+0x30>
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3b03      	subs	r3, #3
 80019b6:	e000      	b.n	80019ba <NVIC_EncodePriority+0x32>
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43da      	mvns	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	401a      	ands	r2, r3
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	fa01 f303 	lsl.w	r3, r1, r3
 80019da:	43d9      	mvns	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	4313      	orrs	r3, r2
         );
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3724      	adds	r7, #36	@ 0x24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff ff4c 	bl	8001894 <__NVIC_SetPriorityGrouping>
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a16:	f7ff ff61 	bl	80018dc <__NVIC_GetPriorityGrouping>
 8001a1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	68b9      	ldr	r1, [r7, #8]
 8001a20:	6978      	ldr	r0, [r7, #20]
 8001a22:	f7ff ffb1 	bl	8001988 <NVIC_EncodePriority>
 8001a26:	4602      	mov	r2, r0
 8001a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff ff80 	bl	8001934 <__NVIC_SetPriority>
}
 8001a34:	bf00      	nop
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff ff54 	bl	80018f8 <__NVIC_EnableIRQ>
}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00e      	b.n	8001a88 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	795b      	ldrb	r3, [r3, #5]
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d105      	bne.n	8001a80 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff f9e8 	bl	8000e50 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e03b      	b.n	8001b1a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d106      	bne.n	8001abc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff f9ec 	bl	8000e94 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ae0:	f023 0107 	bic.w	r1, r3, #7
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001afa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68d1      	ldr	r1, [r2, #12]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6812      	ldr	r2, [r2, #0]
 8001b06:	430b      	orrs	r3, r1
 8001b08:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b084      	sub	sp, #16
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d026      	beq.n	8001b92 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d021      	beq.n	8001b92 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b5c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b62:	f043 0201 	orr.w	r2, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2204      	movs	r2, #4
 8001b76:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f003 0320 	and.w	r3, r3, #32
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d026      	beq.n	8001bea <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d021      	beq.n	8001bea <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001bb4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bc2:	f043 0202 	orr.w	r2, r3, #2
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2204      	movs	r2, #4
 8001bce:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d026      	beq.n	8001c42 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d021      	beq.n	8001c42 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c0c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2208      	movs	r2, #8
 8001c14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c1a:	f043 0204 	orr.w	r2, r3, #4
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2204      	movs	r2, #4
 8001c26:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d013      	beq.n	8001c74 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00e      	beq.n	8001c74 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c64:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f853 	bl	8001d1a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d024      	beq.n	8001cc8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d01f      	beq.n	8001cc8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c96:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d01f      	beq.n	8001d12 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d01a      	beq.n	8001d12 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001cea:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2210      	movs	r2, #16
 8001cf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f80e 	bl	8001d2e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b087      	sub	sp, #28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_DMA2D_ConfigLayer+0x20>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e079      	b.n	8001e58 <HAL_DMA2D_ConfigLayer+0x114>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	3318      	adds	r3, #24
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	041b      	lsls	r3, r3, #16
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001d8e:	4b35      	ldr	r3, [pc, #212]	@ (8001e64 <HAL_DMA2D_ConfigLayer+0x120>)
 8001d90:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b0a      	cmp	r3, #10
 8001d98:	d003      	beq.n	8001da2 <HAL_DMA2D_ConfigLayer+0x5e>
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b09      	cmp	r3, #9
 8001da0:	d107      	bne.n	8001db2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	e005      	b.n	8001dbe <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	061b      	lsls	r3, r3, #24
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d120      	bne.n	8001e06 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	ea02 0103 	and.w	r1, r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b0a      	cmp	r3, #10
 8001dec:	d003      	beq.n	8001df6 <HAL_DMA2D_ConfigLayer+0xb2>
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b09      	cmp	r3, #9
 8001df4:	d127      	bne.n	8001e46 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001e02:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e04:	e01f      	b.n	8001e46 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	69da      	ldr	r2, [r3, #28]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	ea02 0103 	and.w	r1, r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	6812      	ldr	r2, [r2, #0]
 8001e26:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b0a      	cmp	r3, #10
 8001e2e:	d003      	beq.n	8001e38 <HAL_DMA2D_ConfigLayer+0xf4>
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b09      	cmp	r3, #9
 8001e36:	d106      	bne.n	8001e46 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001e44:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	371c      	adds	r7, #28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	ff03000f 	.word	0xff03000f

08001e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b089      	sub	sp, #36	@ 0x24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	e177      	b.n	8002174 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e84:	2201      	movs	r2, #1
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	f040 8166 	bne.w	800216e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d005      	beq.n	8001eba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d130      	bne.n	8001f1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	f003 0201 	and.w	r2, r3, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d017      	beq.n	8001f58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	2203      	movs	r2, #3
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d123      	bne.n	8001fac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	08da      	lsrs	r2, r3, #3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3208      	adds	r2, #8
 8001f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	220f      	movs	r2, #15
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	08da      	lsrs	r2, r3, #3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3208      	adds	r2, #8
 8001fa6:	69b9      	ldr	r1, [r7, #24]
 8001fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0203 	and.w	r2, r3, #3
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 80c0 	beq.w	800216e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	4b66      	ldr	r3, [pc, #408]	@ (800218c <HAL_GPIO_Init+0x324>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff6:	4a65      	ldr	r2, [pc, #404]	@ (800218c <HAL_GPIO_Init+0x324>)
 8001ff8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ffc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ffe:	4b63      	ldr	r3, [pc, #396]	@ (800218c <HAL_GPIO_Init+0x324>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800200a:	4a61      	ldr	r2, [pc, #388]	@ (8002190 <HAL_GPIO_Init+0x328>)
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	3302      	adds	r3, #2
 8002012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	220f      	movs	r2, #15
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4013      	ands	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a58      	ldr	r2, [pc, #352]	@ (8002194 <HAL_GPIO_Init+0x32c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d037      	beq.n	80020a6 <HAL_GPIO_Init+0x23e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a57      	ldr	r2, [pc, #348]	@ (8002198 <HAL_GPIO_Init+0x330>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d031      	beq.n	80020a2 <HAL_GPIO_Init+0x23a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a56      	ldr	r2, [pc, #344]	@ (800219c <HAL_GPIO_Init+0x334>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d02b      	beq.n	800209e <HAL_GPIO_Init+0x236>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a55      	ldr	r2, [pc, #340]	@ (80021a0 <HAL_GPIO_Init+0x338>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d025      	beq.n	800209a <HAL_GPIO_Init+0x232>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a54      	ldr	r2, [pc, #336]	@ (80021a4 <HAL_GPIO_Init+0x33c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d01f      	beq.n	8002096 <HAL_GPIO_Init+0x22e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a53      	ldr	r2, [pc, #332]	@ (80021a8 <HAL_GPIO_Init+0x340>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d019      	beq.n	8002092 <HAL_GPIO_Init+0x22a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a52      	ldr	r2, [pc, #328]	@ (80021ac <HAL_GPIO_Init+0x344>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d013      	beq.n	800208e <HAL_GPIO_Init+0x226>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a51      	ldr	r2, [pc, #324]	@ (80021b0 <HAL_GPIO_Init+0x348>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00d      	beq.n	800208a <HAL_GPIO_Init+0x222>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a50      	ldr	r2, [pc, #320]	@ (80021b4 <HAL_GPIO_Init+0x34c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0x21e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a4f      	ldr	r2, [pc, #316]	@ (80021b8 <HAL_GPIO_Init+0x350>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d101      	bne.n	8002082 <HAL_GPIO_Init+0x21a>
 800207e:	2309      	movs	r3, #9
 8002080:	e012      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 8002082:	230a      	movs	r3, #10
 8002084:	e010      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 8002086:	2308      	movs	r3, #8
 8002088:	e00e      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 800208a:	2307      	movs	r3, #7
 800208c:	e00c      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 800208e:	2306      	movs	r3, #6
 8002090:	e00a      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 8002092:	2305      	movs	r3, #5
 8002094:	e008      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 8002096:	2304      	movs	r3, #4
 8002098:	e006      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 800209a:	2303      	movs	r3, #3
 800209c:	e004      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 800209e:	2302      	movs	r3, #2
 80020a0:	e002      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <HAL_GPIO_Init+0x240>
 80020a6:	2300      	movs	r3, #0
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	f002 0203 	and.w	r2, r2, #3
 80020ae:	0092      	lsls	r2, r2, #2
 80020b0:	4093      	lsls	r3, r2
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b8:	4935      	ldr	r1, [pc, #212]	@ (8002190 <HAL_GPIO_Init+0x328>)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	3302      	adds	r3, #2
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c6:	4b3d      	ldr	r3, [pc, #244]	@ (80021bc <HAL_GPIO_Init+0x354>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ea:	4a34      	ldr	r2, [pc, #208]	@ (80021bc <HAL_GPIO_Init+0x354>)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f0:	4b32      	ldr	r3, [pc, #200]	@ (80021bc <HAL_GPIO_Init+0x354>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002114:	4a29      	ldr	r2, [pc, #164]	@ (80021bc <HAL_GPIO_Init+0x354>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800211a:	4b28      	ldr	r3, [pc, #160]	@ (80021bc <HAL_GPIO_Init+0x354>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800213e:	4a1f      	ldr	r2, [pc, #124]	@ (80021bc <HAL_GPIO_Init+0x354>)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002144:	4b1d      	ldr	r3, [pc, #116]	@ (80021bc <HAL_GPIO_Init+0x354>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002168:	4a14      	ldr	r2, [pc, #80]	@ (80021bc <HAL_GPIO_Init+0x354>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3301      	adds	r3, #1
 8002172:	61fb      	str	r3, [r7, #28]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	2b0f      	cmp	r3, #15
 8002178:	f67f ae84 	bls.w	8001e84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	3724      	adds	r7, #36	@ 0x24
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800
 8002190:	40013800 	.word	0x40013800
 8002194:	40020000 	.word	0x40020000
 8002198:	40020400 	.word	0x40020400
 800219c:	40020800 	.word	0x40020800
 80021a0:	40020c00 	.word	0x40020c00
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40021400 	.word	0x40021400
 80021ac:	40021800 	.word	0x40021800
 80021b0:	40021c00 	.word	0x40021c00
 80021b4:	40022000 	.word	0x40022000
 80021b8:	40022400 	.word	0x40022400
 80021bc:	40013c00 	.word	0x40013c00

080021c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
 80021cc:	4613      	mov	r3, r2
 80021ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021d0:	787b      	ldrb	r3, [r7, #1]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021dc:	e003      	b.n	80021e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021de:	887b      	ldrh	r3, [r7, #2]
 80021e0:	041a      	lsls	r2, r3, #16
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	619a      	str	r2, [r3, #24]
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b085      	sub	sp, #20
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	460b      	mov	r3, r1
 80021fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002204:	887a      	ldrh	r2, [r7, #2]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	4013      	ands	r3, r2
 800220a:	041a      	lsls	r2, r3, #16
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	43d9      	mvns	r1, r3
 8002210:	887b      	ldrh	r3, [r7, #2]
 8002212:	400b      	ands	r3, r1
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	619a      	str	r2, [r3, #24]
}
 800221a:	bf00      	nop
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b086      	sub	sp, #24
 800222a:	af02      	add	r7, sp, #8
 800222c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e059      	b.n	80022ec <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d106      	bne.n	8002258 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f00a fe2a 	bl	800ceac <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2203      	movs	r2, #3
 800225c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002266:	d102      	bne.n	800226e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f004 ff1d 	bl	80070b2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	7c1a      	ldrb	r2, [r3, #16]
 8002280:	f88d 2000 	strb.w	r2, [sp]
 8002284:	3304      	adds	r3, #4
 8002286:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002288:	f004 fe9e 	bl	8006fc8 <USB_CoreInit>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2202      	movs	r2, #2
 8002296:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e026      	b.n	80022ec <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2101      	movs	r1, #1
 80022a4:	4618      	mov	r0, r3
 80022a6:	f004 ff15 	bl	80070d4 <USB_SetCurrentMode>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2202      	movs	r2, #2
 80022b4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e017      	b.n	80022ec <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	7c1a      	ldrb	r2, [r3, #16]
 80022c4:	f88d 2000 	strb.w	r2, [sp]
 80022c8:	3304      	adds	r3, #4
 80022ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022cc:	f005 f8b8 	bl	8007440 <USB_HostInit>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d005      	beq.n	80022e2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2202      	movs	r2, #2
 80022da:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e004      	b.n	80022ec <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80022f4:	b590      	push	{r4, r7, lr}
 80022f6:	b08b      	sub	sp, #44	@ 0x2c
 80022f8:	af04      	add	r7, sp, #16
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	4608      	mov	r0, r1
 80022fe:	4611      	mov	r1, r2
 8002300:	461a      	mov	r2, r3
 8002302:	4603      	mov	r3, r0
 8002304:	70fb      	strb	r3, [r7, #3]
 8002306:	460b      	mov	r3, r1
 8002308:	70bb      	strb	r3, [r7, #2]
 800230a:	4613      	mov	r3, r2
 800230c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800230e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002310:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_HCD_HC_Init+0x2c>
 800231c:	2302      	movs	r3, #2
 800231e:	e09d      	b.n	800245c <HAL_HCD_HC_Init+0x168>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	3319      	adds	r3, #25
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	3314      	adds	r3, #20
 800234c:	787a      	ldrb	r2, [r7, #1]
 800234e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	1a9b      	subs	r3, r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	3315      	adds	r3, #21
 8002360:	78fa      	ldrb	r2, [r7, #3]
 8002362:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002364:	78fa      	ldrb	r2, [r7, #3]
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	011b      	lsls	r3, r3, #4
 800236c:	1a9b      	subs	r3, r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	3326      	adds	r3, #38	@ 0x26
 8002374:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002378:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800237a:	78fa      	ldrb	r2, [r7, #3]
 800237c:	78bb      	ldrb	r3, [r7, #2]
 800237e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002382:	b2d8      	uxtb	r0, r3
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	3316      	adds	r3, #22
 8002392:	4602      	mov	r2, r0
 8002394:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002396:	78fb      	ldrb	r3, [r7, #3]
 8002398:	4619      	mov	r1, r3
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 fbc8 	bl	8002b30 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80023a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	da0a      	bge.n	80023be <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80023a8:	78fa      	ldrb	r2, [r7, #3]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	3317      	adds	r3, #23
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
 80023bc:	e009      	b.n	80023d2 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80023be:	78fa      	ldrb	r2, [r7, #3]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	1a9b      	subs	r3, r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	3317      	adds	r3, #23
 80023ce:	2200      	movs	r2, #0
 80023d0:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f005 f996 	bl	8007708 <USB_GetHostSpeed>
 80023dc:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80023de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d10b      	bne.n	80023fe <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80023e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d107      	bne.n	80023fe <HAL_HCD_HC_Init+0x10a>
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d104      	bne.n	80023fe <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	2bbc      	cmp	r3, #188	@ 0xbc
 80023f8:	d901      	bls.n	80023fe <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80023fa:	23bc      	movs	r3, #188	@ 0xbc
 80023fc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80023fe:	78fa      	ldrb	r2, [r7, #3]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	3318      	adds	r3, #24
 800240e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002412:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	b298      	uxth	r0, r3
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	3328      	adds	r3, #40	@ 0x28
 8002428:	4602      	mov	r2, r0
 800242a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	b29b      	uxth	r3, r3
 8002434:	787c      	ldrb	r4, [r7, #1]
 8002436:	78ba      	ldrb	r2, [r7, #2]
 8002438:	78f9      	ldrb	r1, [r7, #3]
 800243a:	9302      	str	r3, [sp, #8]
 800243c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	4623      	mov	r3, r4
 800244a:	f005 f985 	bl	8007758 <USB_HC_Init>
 800244e:	4603      	mov	r3, r0
 8002450:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800245a:	7bfb      	ldrb	r3, [r7, #15]
}
 800245c:	4618      	mov	r0, r3
 800245e:	371c      	adds	r7, #28
 8002460:	46bd      	mov	sp, r7
 8002462:	bd90      	pop	{r4, r7, pc}

08002464 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002470:	2300      	movs	r3, #0
 8002472:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <HAL_HCD_HC_Halt+0x1e>
 800247e:	2302      	movs	r3, #2
 8002480:	e00f      	b.n	80024a2 <HAL_HCD_HC_Halt+0x3e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	78fa      	ldrb	r2, [r7, #3]
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f005 fd17 	bl	8007ec6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	4608      	mov	r0, r1
 80024b6:	4611      	mov	r1, r2
 80024b8:	461a      	mov	r2, r3
 80024ba:	4603      	mov	r3, r0
 80024bc:	70fb      	strb	r3, [r7, #3]
 80024be:	460b      	mov	r3, r1
 80024c0:	70bb      	strb	r3, [r7, #2]
 80024c2:	4613      	mov	r3, r2
 80024c4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80024c6:	78fa      	ldrb	r2, [r7, #3]
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	1a9b      	subs	r3, r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	440b      	add	r3, r1
 80024d4:	3317      	adds	r3, #23
 80024d6:	78ba      	ldrb	r2, [r7, #2]
 80024d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80024da:	78fa      	ldrb	r2, [r7, #3]
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	1a9b      	subs	r3, r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	3326      	adds	r3, #38	@ 0x26
 80024ea:	787a      	ldrb	r2, [r7, #1]
 80024ec:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80024ee:	7c3b      	ldrb	r3, [r7, #16]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d114      	bne.n	800251e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	332a      	adds	r3, #42	@ 0x2a
 8002504:	2203      	movs	r2, #3
 8002506:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	3319      	adds	r3, #25
 8002518:	7f3a      	ldrb	r2, [r7, #28]
 800251a:	701a      	strb	r2, [r3, #0]
 800251c:	e009      	b.n	8002532 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800251e:	78fa      	ldrb	r2, [r7, #3]
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	1a9b      	subs	r3, r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	332a      	adds	r3, #42	@ 0x2a
 800252e:	2202      	movs	r2, #2
 8002530:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002532:	787b      	ldrb	r3, [r7, #1]
 8002534:	2b03      	cmp	r3, #3
 8002536:	f200 8102 	bhi.w	800273e <HAL_HCD_HC_SubmitRequest+0x292>
 800253a:	a201      	add	r2, pc, #4	@ (adr r2, 8002540 <HAL_HCD_HC_SubmitRequest+0x94>)
 800253c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002540:	08002551 	.word	0x08002551
 8002544:	08002729 	.word	0x08002729
 8002548:	08002615 	.word	0x08002615
 800254c:	0800269f 	.word	0x0800269f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002550:	7c3b      	ldrb	r3, [r7, #16]
 8002552:	2b01      	cmp	r3, #1
 8002554:	f040 80f5 	bne.w	8002742 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002558:	78bb      	ldrb	r3, [r7, #2]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d12d      	bne.n	80025ba <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800255e:	8b3b      	ldrh	r3, [r7, #24]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d109      	bne.n	8002578 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002564:	78fa      	ldrb	r2, [r7, #3]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	1a9b      	subs	r3, r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	333d      	adds	r3, #61	@ 0x3d
 8002574:	2201      	movs	r2, #1
 8002576:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002578:	78fa      	ldrb	r2, [r7, #3]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	1a9b      	subs	r3, r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	333d      	adds	r3, #61	@ 0x3d
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10a      	bne.n	80025a4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800258e:	78fa      	ldrb	r2, [r7, #3]
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	1a9b      	subs	r3, r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	332a      	adds	r3, #42	@ 0x2a
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80025a2:	e0ce      	b.n	8002742 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025a4:	78fa      	ldrb	r2, [r7, #3]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	332a      	adds	r3, #42	@ 0x2a
 80025b4:	2202      	movs	r2, #2
 80025b6:	701a      	strb	r2, [r3, #0]
      break;
 80025b8:	e0c3      	b.n	8002742 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80025ba:	78fa      	ldrb	r2, [r7, #3]
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	1a9b      	subs	r3, r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	331a      	adds	r3, #26
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	f040 80b8 	bne.w	8002742 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80025d2:	78fa      	ldrb	r2, [r7, #3]
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	333c      	adds	r3, #60	@ 0x3c
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10a      	bne.n	80025fe <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025e8:	78fa      	ldrb	r2, [r7, #3]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	332a      	adds	r3, #42	@ 0x2a
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
      break;
 80025fc:	e0a1      	b.n	8002742 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025fe:	78fa      	ldrb	r2, [r7, #3]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	332a      	adds	r3, #42	@ 0x2a
 800260e:	2202      	movs	r2, #2
 8002610:	701a      	strb	r2, [r3, #0]
      break;
 8002612:	e096      	b.n	8002742 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002614:	78bb      	ldrb	r3, [r7, #2]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d120      	bne.n	800265c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	333d      	adds	r3, #61	@ 0x3d
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10a      	bne.n	8002646 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002630:	78fa      	ldrb	r2, [r7, #3]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	332a      	adds	r3, #42	@ 0x2a
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002644:	e07e      	b.n	8002744 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002646:	78fa      	ldrb	r2, [r7, #3]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	332a      	adds	r3, #42	@ 0x2a
 8002656:	2202      	movs	r2, #2
 8002658:	701a      	strb	r2, [r3, #0]
      break;
 800265a:	e073      	b.n	8002744 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	333c      	adds	r3, #60	@ 0x3c
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10a      	bne.n	8002688 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002672:	78fa      	ldrb	r2, [r7, #3]
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	1a9b      	subs	r3, r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	332a      	adds	r3, #42	@ 0x2a
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
      break;
 8002686:	e05d      	b.n	8002744 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002688:	78fa      	ldrb	r2, [r7, #3]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	332a      	adds	r3, #42	@ 0x2a
 8002698:	2202      	movs	r2, #2
 800269a:	701a      	strb	r2, [r3, #0]
      break;
 800269c:	e052      	b.n	8002744 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800269e:	78bb      	ldrb	r3, [r7, #2]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d120      	bne.n	80026e6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	333d      	adds	r3, #61	@ 0x3d
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10a      	bne.n	80026d0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026ba:	78fa      	ldrb	r2, [r7, #3]
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	332a      	adds	r3, #42	@ 0x2a
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80026ce:	e039      	b.n	8002744 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	332a      	adds	r3, #42	@ 0x2a
 80026e0:	2202      	movs	r2, #2
 80026e2:	701a      	strb	r2, [r3, #0]
      break;
 80026e4:	e02e      	b.n	8002744 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	333c      	adds	r3, #60	@ 0x3c
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10a      	bne.n	8002712 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	332a      	adds	r3, #42	@ 0x2a
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
      break;
 8002710:	e018      	b.n	8002744 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002712:	78fa      	ldrb	r2, [r7, #3]
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	1a9b      	subs	r3, r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	332a      	adds	r3, #42	@ 0x2a
 8002722:	2202      	movs	r2, #2
 8002724:	701a      	strb	r2, [r3, #0]
      break;
 8002726:	e00d      	b.n	8002744 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002728:	78fa      	ldrb	r2, [r7, #3]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	332a      	adds	r3, #42	@ 0x2a
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
      break;
 800273c:	e002      	b.n	8002744 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800273e:	bf00      	nop
 8002740:	e000      	b.n	8002744 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002742:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	332c      	adds	r3, #44	@ 0x2c
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	8b39      	ldrh	r1, [r7, #24]
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	1a9b      	subs	r3, r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4403      	add	r3, r0
 8002768:	3334      	adds	r3, #52	@ 0x34
 800276a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800276c:	78fa      	ldrb	r2, [r7, #3]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	1a9b      	subs	r3, r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	334c      	adds	r3, #76	@ 0x4c
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002780:	78fa      	ldrb	r2, [r7, #3]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	3338      	adds	r3, #56	@ 0x38
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002794:	78fa      	ldrb	r2, [r7, #3]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	1a9b      	subs	r3, r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	3315      	adds	r3, #21
 80027a4:	78fa      	ldrb	r2, [r7, #3]
 80027a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	334d      	adds	r3, #77	@ 0x4d
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	78fa      	ldrb	r2, [r7, #3]
 80027c2:	4613      	mov	r3, r2
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	1a9b      	subs	r3, r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	3310      	adds	r3, #16
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	4413      	add	r3, r2
 80027d0:	1d19      	adds	r1, r3, #4
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	799b      	ldrb	r3, [r3, #6]
 80027d6:	461a      	mov	r2, r3
 80027d8:	f005 f8ea 	bl	80079b0 <USB_HC_StartXfer>
 80027dc:	4603      	mov	r3, r0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop

080027e8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f004 fdde 	bl	80073c0 <USB_GetMode>
 8002804:	4603      	mov	r3, r0
 8002806:	2b01      	cmp	r3, #1
 8002808:	f040 80fb 	bne.w	8002a02 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f004 fda1 	bl	8007358 <USB_ReadInterrupts>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80f1 	beq.w	8002a00 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f004 fd98 	bl	8007358 <USB_ReadInterrupts>
 8002828:	4603      	mov	r3, r0
 800282a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800282e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002832:	d104      	bne.n	800283e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800283c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f004 fd88 	bl	8007358 <USB_ReadInterrupts>
 8002848:	4603      	mov	r3, r0
 800284a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800284e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002852:	d104      	bne.n	800285e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800285c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f004 fd78 	bl	8007358 <USB_ReadInterrupts>
 8002868:	4603      	mov	r3, r0
 800286a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800286e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002872:	d104      	bne.n	800287e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800287c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f004 fd68 	bl	8007358 <USB_ReadInterrupts>
 8002888:	4603      	mov	r3, r0
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b02      	cmp	r3, #2
 8002890:	d103      	bne.n	800289a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2202      	movs	r2, #2
 8002898:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f004 fd5a 	bl	8007358 <USB_ReadInterrupts>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028ae:	d120      	bne.n	80028f2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80028b8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d113      	bne.n	80028f2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80028ca:	2110      	movs	r1, #16
 80028cc:	6938      	ldr	r0, [r7, #16]
 80028ce:	f004 fc4d 	bl	800716c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80028d2:	6938      	ldr	r0, [r7, #16]
 80028d4:	f004 fc7c 	bl	80071d0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	7a5b      	ldrb	r3, [r3, #9]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d105      	bne.n	80028ec <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2101      	movs	r1, #1
 80028e6:	4618      	mov	r0, r3
 80028e8:	f004 fe6e 	bl	80075c8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f00a fb57 	bl	800cfa0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f004 fd2e 	bl	8007358 <USB_ReadInterrupts>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002902:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002906:	d102      	bne.n	800290e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f001 fd33 	bl	8004374 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f004 fd20 	bl	8007358 <USB_ReadInterrupts>
 8002918:	4603      	mov	r3, r0
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b08      	cmp	r3, #8
 8002920:	d106      	bne.n	8002930 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f00a fb20 	bl	800cf68 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2208      	movs	r2, #8
 800292e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f004 fd0f 	bl	8007358 <USB_ReadInterrupts>
 800293a:	4603      	mov	r3, r0
 800293c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002940:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002944:	d139      	bne.n	80029ba <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f005 faaa 	bl	8007ea4 <USB_HC_ReadInterrupt>
 8002950:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	e025      	b.n	80029a4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	fa22 f303 	lsr.w	r3, r2, r3
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	d018      	beq.n	800299e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4413      	add	r3, r2
 8002974:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800297e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002982:	d106      	bne.n	8002992 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	4619      	mov	r1, r3
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f905 	bl	8002b9a <HCD_HC_IN_IRQHandler>
 8002990:	e005      	b.n	800299e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	4619      	mov	r1, r3
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 ff67 	bl	800386c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	3301      	adds	r3, #1
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	795b      	ldrb	r3, [r3, #5]
 80029a8:	461a      	mov	r2, r3
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d3d3      	bcc.n	8002958 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f004 fcca 	bl	8007358 <USB_ReadInterrupts>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	2b10      	cmp	r3, #16
 80029cc:	d101      	bne.n	80029d2 <HAL_HCD_IRQHandler+0x1ea>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <HAL_HCD_IRQHandler+0x1ec>
 80029d2:	2300      	movs	r3, #0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d014      	beq.n	8002a02 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699a      	ldr	r2, [r3, #24]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0210 	bic.w	r2, r2, #16
 80029e6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f001 fbe4 	bl	80041b6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	699a      	ldr	r2, [r3, #24]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0210 	orr.w	r2, r2, #16
 80029fc:	619a      	str	r2, [r3, #24]
 80029fe:	e000      	b.n	8002a02 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002a00:	bf00      	nop
    }
  }
}
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_HCD_Start+0x16>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e013      	b.n	8002a46 <HAL_HCD_Start+0x3e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f004 fe32 	bl	8007696 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f004 fb2a 	bl	8007090 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_HCD_Stop+0x16>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e00d      	b.n	8002a80 <HAL_HCD_Stop+0x32>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f005 fb85 	bl	8008180 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f004 fdd4 	bl	8007642 <USB_ResetPort>
 8002a9a:	4603      	mov	r3, r0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002ab0:	78fa      	ldrb	r2, [r7, #3]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	1a9b      	subs	r3, r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	334c      	adds	r3, #76	@ 0x4c
 8002ac0:	781b      	ldrb	r3, [r3, #0]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002ada:	78fa      	ldrb	r2, [r7, #3]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	3338      	adds	r3, #56	@ 0x38
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f004 fe16 	bl	8007736 <USB_GetCurrentFrame>
 8002b0a:	4603      	mov	r3, r0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f004 fdf1 	bl	8007708 <USB_GetHostSpeed>
 8002b26:	4603      	mov	r3, r0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002b3c:	78fa      	ldrb	r2, [r7, #3]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	1a9b      	subs	r3, r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	331a      	adds	r3, #26
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002b50:	78fa      	ldrb	r2, [r7, #3]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	1a9b      	subs	r3, r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	331b      	adds	r3, #27
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	3325      	adds	r3, #37	@ 0x25
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	3324      	adds	r3, #36	@ 0x24
 8002b88:	2200      	movs	r2, #0
 8002b8a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b086      	sub	sp, #24
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	78fa      	ldrb	r2, [r7, #3]
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f004 fbe0 	bl	800737e <USB_ReadChInterrupts>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d11a      	bne.n	8002bfe <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	2304      	movs	r3, #4
 8002bd8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002bda:	78fa      	ldrb	r2, [r7, #3]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	1a9b      	subs	r3, r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	334d      	adds	r3, #77	@ 0x4d
 8002bea:	2207      	movs	r2, #7
 8002bec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	78fa      	ldrb	r2, [r7, #3]
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f005 f965 	bl	8007ec6 <USB_HC_Halt>
 8002bfc:	e09e      	b.n	8002d3c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	78fa      	ldrb	r2, [r7, #3]
 8002c04:	4611      	mov	r1, r2
 8002c06:	4618      	mov	r0, r3
 8002c08:	f004 fbb9 	bl	800737e <USB_ReadChInterrupts>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c16:	d11b      	bne.n	8002c50 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002c18:	78fb      	ldrb	r3, [r7, #3]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c24:	461a      	mov	r2, r3
 8002c26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002c2c:	78fa      	ldrb	r2, [r7, #3]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	334d      	adds	r3, #77	@ 0x4d
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	78fa      	ldrb	r2, [r7, #3]
 8002c46:	4611      	mov	r1, r2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f005 f93c 	bl	8007ec6 <USB_HC_Halt>
 8002c4e:	e075      	b.n	8002d3c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	4611      	mov	r1, r2
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f004 fb90 	bl	800737e <USB_ReadChInterrupts>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d11a      	bne.n	8002c9e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c74:	461a      	mov	r2, r3
 8002c76:	2308      	movs	r3, #8
 8002c78:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002c7a:	78fa      	ldrb	r2, [r7, #3]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	1a9b      	subs	r3, r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	334d      	adds	r3, #77	@ 0x4d
 8002c8a:	2206      	movs	r2, #6
 8002c8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	78fa      	ldrb	r2, [r7, #3]
 8002c94:	4611      	mov	r1, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f005 f915 	bl	8007ec6 <USB_HC_Halt>
 8002c9c:	e04e      	b.n	8002d3c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f004 fb69 	bl	800737e <USB_ReadChInterrupts>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cb6:	d11b      	bne.n	8002cf0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002ccc:	78fa      	ldrb	r2, [r7, #3]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	1a9b      	subs	r3, r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	334d      	adds	r3, #77	@ 0x4d
 8002cdc:	2209      	movs	r2, #9
 8002cde:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f005 f8ec 	bl	8007ec6 <USB_HC_Halt>
 8002cee:	e025      	b.n	8002d3c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	78fa      	ldrb	r2, [r7, #3]
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f004 fb40 	bl	800737e <USB_ReadChInterrupts>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d04:	2b80      	cmp	r3, #128	@ 0x80
 8002d06:	d119      	bne.n	8002d3c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d14:	461a      	mov	r2, r3
 8002d16:	2380      	movs	r3, #128	@ 0x80
 8002d18:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	334d      	adds	r3, #77	@ 0x4d
 8002d2a:	2207      	movs	r2, #7
 8002d2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	78fa      	ldrb	r2, [r7, #3]
 8002d34:	4611      	mov	r1, r2
 8002d36:	4618      	mov	r0, r3
 8002d38:	f005 f8c5 	bl	8007ec6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f004 fb1a 	bl	800737e <USB_ReadChInterrupts>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d54:	d112      	bne.n	8002d7c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	78fa      	ldrb	r2, [r7, #3]
 8002d5c:	4611      	mov	r1, r2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f005 f8b1 	bl	8007ec6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002d64:	78fb      	ldrb	r3, [r7, #3]
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d70:	461a      	mov	r2, r3
 8002d72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d76:	6093      	str	r3, [r2, #8]
 8002d78:	f000 bd75 	b.w	8003866 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f004 fafa 	bl	800737e <USB_ReadChInterrupts>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	f040 8128 	bne.w	8002fe6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002da2:	461a      	mov	r2, r3
 8002da4:	2320      	movs	r3, #32
 8002da6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	331b      	adds	r3, #27
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d119      	bne.n	8002df2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	331b      	adds	r3, #27
 8002dce:	2200      	movs	r2, #0
 8002dd0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	015a      	lsls	r2, r3, #5
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	0151      	lsls	r1, r2, #5
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	440a      	add	r2, r1
 8002de8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002dec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002df0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	799b      	ldrb	r3, [r3, #6]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d01b      	beq.n	8002e32 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002dfa:	78fa      	ldrb	r2, [r7, #3]
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	1a9b      	subs	r3, r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	440b      	add	r3, r1
 8002e08:	3330      	adds	r3, #48	@ 0x30
 8002e0a:	6819      	ldr	r1, [r3, #0]
 8002e0c:	78fb      	ldrb	r3, [r7, #3]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	1ac9      	subs	r1, r1, r3
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	1a9b      	subs	r3, r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4403      	add	r3, r0
 8002e2e:	3338      	adds	r3, #56	@ 0x38
 8002e30:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002e32:	78fa      	ldrb	r2, [r7, #3]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	1a9b      	subs	r3, r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	334d      	adds	r3, #77	@ 0x4d
 8002e42:	2201      	movs	r2, #1
 8002e44:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	1a9b      	subs	r3, r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	3344      	adds	r3, #68	@ 0x44
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002e5a:	78fb      	ldrb	r3, [r7, #3]
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e66:	461a      	mov	r2, r3
 8002e68:	2301      	movs	r3, #1
 8002e6a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e6c:	78fa      	ldrb	r2, [r7, #3]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	1a9b      	subs	r3, r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	3326      	adds	r3, #38	@ 0x26
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e82:	78fa      	ldrb	r2, [r7, #3]
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	4613      	mov	r3, r2
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	1a9b      	subs	r3, r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	3326      	adds	r3, #38	@ 0x26
 8002e92:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d110      	bne.n	8002eba <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	78fa      	ldrb	r2, [r7, #3]
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f005 f810 	bl	8007ec6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ea6:	78fb      	ldrb	r3, [r7, #3]
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2310      	movs	r3, #16
 8002eb6:	6093      	str	r3, [r2, #8]
 8002eb8:	e03d      	b.n	8002f36 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002eba:	78fa      	ldrb	r2, [r7, #3]
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	3326      	adds	r3, #38	@ 0x26
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d00a      	beq.n	8002ee6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	3326      	adds	r3, #38	@ 0x26
 8002ee0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d127      	bne.n	8002f36 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002ee6:	78fb      	ldrb	r3, [r7, #3]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	78fa      	ldrb	r2, [r7, #3]
 8002ef6:	0151      	lsls	r1, r2, #5
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	440a      	add	r2, r1
 8002efc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f00:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002f04:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002f06:	78fa      	ldrb	r2, [r7, #3]
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	1a9b      	subs	r3, r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	334c      	adds	r3, #76	@ 0x4c
 8002f16:	2201      	movs	r2, #1
 8002f18:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	334c      	adds	r3, #76	@ 0x4c
 8002f2a:	781a      	ldrb	r2, [r3, #0]
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f00a f843 	bl	800cfbc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	799b      	ldrb	r3, [r3, #6]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d13b      	bne.n	8002fb6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	1a9b      	subs	r3, r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	3338      	adds	r3, #56	@ 0x38
 8002f4e:	6819      	ldr	r1, [r3, #0]
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4403      	add	r3, r0
 8002f5e:	3328      	adds	r3, #40	@ 0x28
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	440b      	add	r3, r1
 8002f64:	1e59      	subs	r1, r3, #1
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4403      	add	r3, r0
 8002f74:	3328      	adds	r3, #40	@ 0x28
 8002f76:	881b      	ldrh	r3, [r3, #0]
 8002f78:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 8470 	beq.w	8003866 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002f86:	78fa      	ldrb	r2, [r7, #3]
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	1a9b      	subs	r3, r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	333c      	adds	r3, #60	@ 0x3c
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	f083 0301 	eor.w	r3, r3, #1
 8002f9e:	b2d8      	uxtb	r0, r3
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	333c      	adds	r3, #60	@ 0x3c
 8002fae:	4602      	mov	r2, r0
 8002fb0:	701a      	strb	r2, [r3, #0]
 8002fb2:	f000 bc58 	b.w	8003866 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	1a9b      	subs	r3, r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	333c      	adds	r3, #60	@ 0x3c
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	f083 0301 	eor.w	r3, r3, #1
 8002fce:	b2d8      	uxtb	r0, r3
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	1a9b      	subs	r3, r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	440b      	add	r3, r1
 8002fdc:	333c      	adds	r3, #60	@ 0x3c
 8002fde:	4602      	mov	r2, r0
 8002fe0:	701a      	strb	r2, [r3, #0]
 8002fe2:	f000 bc40 	b.w	8003866 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	4611      	mov	r1, r2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f004 f9c5 	bl	800737e <USB_ReadChInterrupts>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f003 0320 	and.w	r3, r3, #32
 8002ffa:	2b20      	cmp	r3, #32
 8002ffc:	d131      	bne.n	8003062 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4413      	add	r3, r2
 8003006:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800300a:	461a      	mov	r2, r3
 800300c:	2320      	movs	r3, #32
 800300e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003010:	78fa      	ldrb	r2, [r7, #3]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	1a9b      	subs	r3, r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	331a      	adds	r3, #26
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2b01      	cmp	r3, #1
 8003024:	f040 841f 	bne.w	8003866 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003028:	78fa      	ldrb	r2, [r7, #3]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	331b      	adds	r3, #27
 8003038:	2201      	movs	r2, #1
 800303a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	334d      	adds	r3, #77	@ 0x4d
 800304c:	2203      	movs	r2, #3
 800304e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	4611      	mov	r1, r2
 8003058:	4618      	mov	r0, r3
 800305a:	f004 ff34 	bl	8007ec6 <USB_HC_Halt>
 800305e:	f000 bc02 	b.w	8003866 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	78fa      	ldrb	r2, [r7, #3]
 8003068:	4611      	mov	r1, r2
 800306a:	4618      	mov	r0, r3
 800306c:	f004 f987 	bl	800737e <USB_ReadChInterrupts>
 8003070:	4603      	mov	r3, r0
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b02      	cmp	r3, #2
 8003078:	f040 8305 	bne.w	8003686 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4413      	add	r3, r2
 8003084:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003088:	461a      	mov	r2, r3
 800308a:	2302      	movs	r3, #2
 800308c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800308e:	78fa      	ldrb	r2, [r7, #3]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	334d      	adds	r3, #77	@ 0x4d
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d114      	bne.n	80030ce <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030a4:	78fa      	ldrb	r2, [r7, #3]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	334d      	adds	r3, #77	@ 0x4d
 80030b4:	2202      	movs	r2, #2
 80030b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80030b8:	78fa      	ldrb	r2, [r7, #3]
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	1a9b      	subs	r3, r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	334c      	adds	r3, #76	@ 0x4c
 80030c8:	2201      	movs	r2, #1
 80030ca:	701a      	strb	r2, [r3, #0]
 80030cc:	e2cc      	b.n	8003668 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80030ce:	78fa      	ldrb	r2, [r7, #3]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	334d      	adds	r3, #77	@ 0x4d
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b06      	cmp	r3, #6
 80030e2:	d114      	bne.n	800310e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	334d      	adds	r3, #77	@ 0x4d
 80030f4:	2202      	movs	r2, #2
 80030f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	334c      	adds	r3, #76	@ 0x4c
 8003108:	2205      	movs	r2, #5
 800310a:	701a      	strb	r2, [r3, #0]
 800310c:	e2ac      	b.n	8003668 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800310e:	78fa      	ldrb	r2, [r7, #3]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	334d      	adds	r3, #77	@ 0x4d
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b07      	cmp	r3, #7
 8003122:	d00b      	beq.n	800313c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	334d      	adds	r3, #77	@ 0x4d
 8003134:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003136:	2b09      	cmp	r3, #9
 8003138:	f040 80a6 	bne.w	8003288 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	334d      	adds	r3, #77	@ 0x4d
 800314c:	2202      	movs	r2, #2
 800314e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	3344      	adds	r3, #68	@ 0x44
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	1c59      	adds	r1, r3, #1
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4403      	add	r3, r0
 8003170:	3344      	adds	r3, #68	@ 0x44
 8003172:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003174:	78fa      	ldrb	r2, [r7, #3]
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	3344      	adds	r3, #68	@ 0x44
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d943      	bls.n	8003212 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	3344      	adds	r3, #68	@ 0x44
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	331a      	adds	r3, #26
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d123      	bne.n	80031fc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80031b4:	78fa      	ldrb	r2, [r7, #3]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	331b      	adds	r3, #27
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	331c      	adds	r3, #28
 80031d8:	2200      	movs	r2, #0
 80031da:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	0151      	lsls	r1, r2, #5
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	440a      	add	r2, r1
 80031f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031fa:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80031fc:	78fa      	ldrb	r2, [r7, #3]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	334c      	adds	r3, #76	@ 0x4c
 800320c:	2204      	movs	r2, #4
 800320e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003210:	e229      	b.n	8003666 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	1a9b      	subs	r3, r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	334c      	adds	r3, #76	@ 0x4c
 8003222:	2202      	movs	r2, #2
 8003224:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	440b      	add	r3, r1
 8003234:	3326      	adds	r3, #38	@ 0x26
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00b      	beq.n	8003254 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800323c:	78fa      	ldrb	r2, [r7, #3]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	3326      	adds	r3, #38	@ 0x26
 800324c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800324e:	2b02      	cmp	r3, #2
 8003250:	f040 8209 	bne.w	8003666 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003254:	78fb      	ldrb	r3, [r7, #3]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4413      	add	r3, r2
 800325c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800326a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003272:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003274:	78fb      	ldrb	r3, [r7, #3]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	4413      	add	r3, r2
 800327c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003280:	461a      	mov	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003286:	e1ee      	b.n	8003666 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	1a9b      	subs	r3, r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	334d      	adds	r3, #77	@ 0x4d
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b05      	cmp	r3, #5
 800329c:	f040 80c8 	bne.w	8003430 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	1a9b      	subs	r3, r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	334d      	adds	r3, #77	@ 0x4d
 80032b0:	2202      	movs	r2, #2
 80032b2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032b4:	78fa      	ldrb	r2, [r7, #3]
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	1a9b      	subs	r3, r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	331b      	adds	r3, #27
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	f040 81ce 	bne.w	8003668 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80032cc:	78fa      	ldrb	r2, [r7, #3]
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	1a9b      	subs	r3, r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	3326      	adds	r3, #38	@ 0x26
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d16b      	bne.n	80033ba <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80032e2:	78fa      	ldrb	r2, [r7, #3]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	1a9b      	subs	r3, r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	3348      	adds	r3, #72	@ 0x48
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	1c59      	adds	r1, r3, #1
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4403      	add	r3, r0
 8003302:	3348      	adds	r3, #72	@ 0x48
 8003304:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003306:	78fa      	ldrb	r2, [r7, #3]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	1a9b      	subs	r3, r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	3348      	adds	r3, #72	@ 0x48
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d943      	bls.n	80033a4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800331c:	78fa      	ldrb	r2, [r7, #3]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	3348      	adds	r3, #72	@ 0x48
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003330:	78fa      	ldrb	r2, [r7, #3]
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	331b      	adds	r3, #27
 8003340:	2200      	movs	r2, #0
 8003342:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003344:	78fa      	ldrb	r2, [r7, #3]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	3344      	adds	r3, #68	@ 0x44
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d809      	bhi.n	800336e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	1a9b      	subs	r3, r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	331c      	adds	r3, #28
 800336a:	2201      	movs	r2, #1
 800336c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800336e:	78fb      	ldrb	r3, [r7, #3]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	4413      	add	r3, r2
 8003376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	0151      	lsls	r1, r2, #5
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	440a      	add	r2, r1
 8003384:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003388:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800338c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	334c      	adds	r3, #76	@ 0x4c
 800339e:	2204      	movs	r2, #4
 80033a0:	701a      	strb	r2, [r3, #0]
 80033a2:	e014      	b.n	80033ce <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033a4:	78fa      	ldrb	r2, [r7, #3]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	334c      	adds	r3, #76	@ 0x4c
 80033b4:	2202      	movs	r2, #2
 80033b6:	701a      	strb	r2, [r3, #0]
 80033b8:	e009      	b.n	80033ce <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	334c      	adds	r3, #76	@ 0x4c
 80033ca:	2202      	movs	r2, #2
 80033cc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	3326      	adds	r3, #38	@ 0x26
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00b      	beq.n	80033fc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80033e4:	78fa      	ldrb	r2, [r7, #3]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	3326      	adds	r3, #38	@ 0x26
 80033f4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	f040 8136 	bne.w	8003668 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80033fc:	78fb      	ldrb	r3, [r7, #3]
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	4413      	add	r3, r2
 8003404:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003412:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800341a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4413      	add	r3, r2
 8003424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003428:	461a      	mov	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	e11b      	b.n	8003668 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	334d      	adds	r3, #77	@ 0x4d
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b03      	cmp	r3, #3
 8003444:	f040 8081 	bne.w	800354a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003448:	78fa      	ldrb	r2, [r7, #3]
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	334d      	adds	r3, #77	@ 0x4d
 8003458:	2202      	movs	r2, #2
 800345a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	331b      	adds	r3, #27
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b01      	cmp	r3, #1
 8003470:	f040 80fa 	bne.w	8003668 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	334c      	adds	r3, #76	@ 0x4c
 8003484:	2202      	movs	r2, #2
 8003486:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4413      	add	r3, r2
 8003490:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	78fa      	ldrb	r2, [r7, #3]
 8003498:	0151      	lsls	r1, r2, #5
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	440a      	add	r2, r1
 800349e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	78fa      	ldrb	r2, [r7, #3]
 80034b8:	0151      	lsls	r1, r2, #5
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	440a      	add	r2, r1
 80034be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034c6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80034c8:	78fb      	ldrb	r3, [r7, #3]
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	78fa      	ldrb	r2, [r7, #3]
 80034d8:	0151      	lsls	r1, r2, #5
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	440a      	add	r2, r1
 80034de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034e2:	f023 0320 	bic.w	r3, r3, #32
 80034e6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	3326      	adds	r3, #38	@ 0x26
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00b      	beq.n	8003516 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80034fe:	78fa      	ldrb	r2, [r7, #3]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	3326      	adds	r3, #38	@ 0x26
 800350e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003510:	2b02      	cmp	r3, #2
 8003512:	f040 80a9 	bne.w	8003668 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003516:	78fb      	ldrb	r3, [r7, #3]
 8003518:	015a      	lsls	r2, r3, #5
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	4413      	add	r3, r2
 800351e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800352c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003534:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	4413      	add	r3, r2
 800353e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003542:	461a      	mov	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	e08e      	b.n	8003668 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800354a:	78fa      	ldrb	r2, [r7, #3]
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	1a9b      	subs	r3, r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	334d      	adds	r3, #77	@ 0x4d
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b04      	cmp	r3, #4
 800355e:	d143      	bne.n	80035e8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003560:	78fa      	ldrb	r2, [r7, #3]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	334d      	adds	r3, #77	@ 0x4d
 8003570:	2202      	movs	r2, #2
 8003572:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003574:	78fa      	ldrb	r2, [r7, #3]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	334c      	adds	r3, #76	@ 0x4c
 8003584:	2202      	movs	r2, #2
 8003586:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	3326      	adds	r3, #38	@ 0x26
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800359e:	78fa      	ldrb	r2, [r7, #3]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	3326      	adds	r3, #38	@ 0x26
 80035ae:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d159      	bne.n	8003668 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80035b4:	78fb      	ldrb	r3, [r7, #3]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035ca:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035d2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035e0:	461a      	mov	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	e03f      	b.n	8003668 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80035e8:	78fa      	ldrb	r2, [r7, #3]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	334d      	adds	r3, #77	@ 0x4d
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d126      	bne.n	800364c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035fe:	78fa      	ldrb	r2, [r7, #3]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	334d      	adds	r3, #77	@ 0x4d
 800360e:	2202      	movs	r2, #2
 8003610:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003612:	78fa      	ldrb	r2, [r7, #3]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	3344      	adds	r3, #68	@ 0x44
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	1c59      	adds	r1, r3, #1
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	1a9b      	subs	r3, r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4403      	add	r3, r0
 8003632:	3344      	adds	r3, #68	@ 0x44
 8003634:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003636:	78fa      	ldrb	r2, [r7, #3]
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	1a9b      	subs	r3, r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	440b      	add	r3, r1
 8003644:	334c      	adds	r3, #76	@ 0x4c
 8003646:	2204      	movs	r2, #4
 8003648:	701a      	strb	r2, [r3, #0]
 800364a:	e00d      	b.n	8003668 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800364c:	78fa      	ldrb	r2, [r7, #3]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	334d      	adds	r3, #77	@ 0x4d
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b02      	cmp	r3, #2
 8003660:	f000 8100 	beq.w	8003864 <HCD_HC_IN_IRQHandler+0xcca>
 8003664:	e000      	b.n	8003668 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003666:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	334c      	adds	r3, #76	@ 0x4c
 8003678:	781a      	ldrb	r2, [r3, #0]
 800367a:	78fb      	ldrb	r3, [r7, #3]
 800367c:	4619      	mov	r1, r3
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f009 fc9c 	bl	800cfbc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003684:	e0ef      	b.n	8003866 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	78fa      	ldrb	r2, [r7, #3]
 800368c:	4611      	mov	r1, r2
 800368e:	4618      	mov	r0, r3
 8003690:	f003 fe75 	bl	800737e <USB_ReadChInterrupts>
 8003694:	4603      	mov	r3, r0
 8003696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800369a:	2b40      	cmp	r3, #64	@ 0x40
 800369c:	d12f      	bne.n	80036fe <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800369e:	78fb      	ldrb	r3, [r7, #3]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036aa:	461a      	mov	r2, r3
 80036ac:	2340      	movs	r3, #64	@ 0x40
 80036ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80036b0:	78fa      	ldrb	r2, [r7, #3]
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	334d      	adds	r3, #77	@ 0x4d
 80036c0:	2205      	movs	r2, #5
 80036c2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80036c4:	78fa      	ldrb	r2, [r7, #3]
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	331a      	adds	r3, #26
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d109      	bne.n	80036ee <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80036da:	78fa      	ldrb	r2, [r7, #3]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	3344      	adds	r3, #68	@ 0x44
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	4611      	mov	r1, r2
 80036f6:	4618      	mov	r0, r3
 80036f8:	f004 fbe5 	bl	8007ec6 <USB_HC_Halt>
 80036fc:	e0b3      	b.n	8003866 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	78fa      	ldrb	r2, [r7, #3]
 8003704:	4611      	mov	r1, r2
 8003706:	4618      	mov	r0, r3
 8003708:	f003 fe39 	bl	800737e <USB_ReadChInterrupts>
 800370c:	4603      	mov	r3, r0
 800370e:	f003 0310 	and.w	r3, r3, #16
 8003712:	2b10      	cmp	r3, #16
 8003714:	f040 80a7 	bne.w	8003866 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003718:	78fa      	ldrb	r2, [r7, #3]
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	4613      	mov	r3, r2
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	3326      	adds	r3, #38	@ 0x26
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b03      	cmp	r3, #3
 800372c:	d11b      	bne.n	8003766 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800372e:	78fa      	ldrb	r2, [r7, #3]
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	3344      	adds	r3, #68	@ 0x44
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003742:	78fa      	ldrb	r2, [r7, #3]
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	1a9b      	subs	r3, r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	440b      	add	r3, r1
 8003750:	334d      	adds	r3, #77	@ 0x4d
 8003752:	2204      	movs	r2, #4
 8003754:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	78fa      	ldrb	r2, [r7, #3]
 800375c:	4611      	mov	r1, r2
 800375e:	4618      	mov	r0, r3
 8003760:	f004 fbb1 	bl	8007ec6 <USB_HC_Halt>
 8003764:	e03f      	b.n	80037e6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003766:	78fa      	ldrb	r2, [r7, #3]
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	1a9b      	subs	r3, r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	3326      	adds	r3, #38	@ 0x26
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800377c:	78fa      	ldrb	r2, [r7, #3]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	3326      	adds	r3, #38	@ 0x26
 800378c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800378e:	2b02      	cmp	r3, #2
 8003790:	d129      	bne.n	80037e6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003792:	78fa      	ldrb	r2, [r7, #3]
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	1a9b      	subs	r3, r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	3344      	adds	r3, #68	@ 0x44
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	799b      	ldrb	r3, [r3, #6]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <HCD_HC_IN_IRQHandler+0xc2a>
 80037ae:	78fa      	ldrb	r2, [r7, #3]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	331b      	adds	r3, #27
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d110      	bne.n	80037e6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80037c4:	78fa      	ldrb	r2, [r7, #3]
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	1a9b      	subs	r3, r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	334d      	adds	r3, #77	@ 0x4d
 80037d4:	2204      	movs	r2, #4
 80037d6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	78fa      	ldrb	r2, [r7, #3]
 80037de:	4611      	mov	r1, r2
 80037e0:	4618      	mov	r0, r3
 80037e2:	f004 fb70 	bl	8007ec6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80037e6:	78fa      	ldrb	r2, [r7, #3]
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	4613      	mov	r3, r2
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	1a9b      	subs	r3, r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	440b      	add	r3, r1
 80037f4:	331b      	adds	r3, #27
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d129      	bne.n	8003850 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80037fc:	78fa      	ldrb	r2, [r7, #3]
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	4613      	mov	r3, r2
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	331b      	adds	r3, #27
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003810:	78fb      	ldrb	r3, [r7, #3]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4413      	add	r3, r2
 8003818:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	78fa      	ldrb	r2, [r7, #3]
 8003820:	0151      	lsls	r1, r2, #5
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	440a      	add	r2, r1
 8003826:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800382a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800382e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	4413      	add	r3, r2
 8003838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	78fa      	ldrb	r2, [r7, #3]
 8003840:	0151      	lsls	r1, r2, #5
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	440a      	add	r2, r1
 8003846:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800384a:	f043 0320 	orr.w	r3, r3, #32
 800384e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	4413      	add	r3, r2
 8003858:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800385c:	461a      	mov	r2, r3
 800385e:	2310      	movs	r3, #16
 8003860:	6093      	str	r3, [r2, #8]
 8003862:	e000      	b.n	8003866 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003864:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	4611      	mov	r1, r2
 800388a:	4618      	mov	r0, r3
 800388c:	f003 fd77 	bl	800737e <USB_ReadChInterrupts>
 8003890:	4603      	mov	r3, r0
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b04      	cmp	r3, #4
 8003898:	d11b      	bne.n	80038d2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800389a:	78fb      	ldrb	r3, [r7, #3]
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038a6:	461a      	mov	r2, r3
 80038a8:	2304      	movs	r3, #4
 80038aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	334d      	adds	r3, #77	@ 0x4d
 80038bc:	2207      	movs	r2, #7
 80038be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	78fa      	ldrb	r2, [r7, #3]
 80038c6:	4611      	mov	r1, r2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f004 fafc 	bl	8007ec6 <USB_HC_Halt>
 80038ce:	f000 bc6f 	b.w	80041b0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	78fa      	ldrb	r2, [r7, #3]
 80038d8:	4611      	mov	r1, r2
 80038da:	4618      	mov	r0, r3
 80038dc:	f003 fd4f 	bl	800737e <USB_ReadChInterrupts>
 80038e0:	4603      	mov	r3, r0
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	f040 8082 	bne.w	80039f0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038f8:	461a      	mov	r2, r3
 80038fa:	2320      	movs	r3, #32
 80038fc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80038fe:	78fa      	ldrb	r2, [r7, #3]
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	1a9b      	subs	r3, r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	3319      	adds	r3, #25
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d124      	bne.n	800395e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003914:	78fa      	ldrb	r2, [r7, #3]
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	1a9b      	subs	r3, r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	3319      	adds	r3, #25
 8003924:	2200      	movs	r2, #0
 8003926:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003928:	78fa      	ldrb	r2, [r7, #3]
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	4613      	mov	r3, r2
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	1a9b      	subs	r3, r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	334c      	adds	r3, #76	@ 0x4c
 8003938:	2202      	movs	r2, #2
 800393a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800393c:	78fa      	ldrb	r2, [r7, #3]
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	334d      	adds	r3, #77	@ 0x4d
 800394c:	2203      	movs	r2, #3
 800394e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	78fa      	ldrb	r2, [r7, #3]
 8003956:	4611      	mov	r1, r2
 8003958:	4618      	mov	r0, r3
 800395a:	f004 fab4 	bl	8007ec6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800395e:	78fa      	ldrb	r2, [r7, #3]
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	331a      	adds	r3, #26
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b01      	cmp	r3, #1
 8003972:	f040 841d 	bne.w	80041b0 <HCD_HC_OUT_IRQHandler+0x944>
 8003976:	78fa      	ldrb	r2, [r7, #3]
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	1a9b      	subs	r3, r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	331b      	adds	r3, #27
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	f040 8411 	bne.w	80041b0 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800398e:	78fa      	ldrb	r2, [r7, #3]
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	440b      	add	r3, r1
 800399c:	3326      	adds	r3, #38	@ 0x26
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d009      	beq.n	80039b8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	4613      	mov	r3, r2
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	331b      	adds	r3, #27
 80039b4:	2201      	movs	r2, #1
 80039b6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	1a9b      	subs	r3, r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	334d      	adds	r3, #77	@ 0x4d
 80039c8:	2203      	movs	r2, #3
 80039ca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	78fa      	ldrb	r2, [r7, #3]
 80039d2:	4611      	mov	r1, r2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f004 fa76 	bl	8007ec6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80039da:	78fa      	ldrb	r2, [r7, #3]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	1a9b      	subs	r3, r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	3344      	adds	r3, #68	@ 0x44
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	e3df      	b.n	80041b0 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	78fa      	ldrb	r2, [r7, #3]
 80039f6:	4611      	mov	r1, r2
 80039f8:	4618      	mov	r0, r3
 80039fa:	f003 fcc0 	bl	800737e <USB_ReadChInterrupts>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a08:	d111      	bne.n	8003a2e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003a0a:	78fb      	ldrb	r3, [r7, #3]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a16:	461a      	mov	r2, r3
 8003a18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a1c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	78fa      	ldrb	r2, [r7, #3]
 8003a24:	4611      	mov	r1, r2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f004 fa4d 	bl	8007ec6 <USB_HC_Halt>
 8003a2c:	e3c0      	b.n	80041b0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	4611      	mov	r1, r2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f003 fca1 	bl	800737e <USB_ReadChInterrupts>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d168      	bne.n	8003b18 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	3344      	adds	r3, #68	@ 0x44
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	78fa      	ldrb	r2, [r7, #3]
 8003a60:	4611      	mov	r1, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f003 fc8b 	bl	800737e <USB_ReadChInterrupts>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a6e:	2b40      	cmp	r3, #64	@ 0x40
 8003a70:	d112      	bne.n	8003a98 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	3319      	adds	r3, #25
 8003a82:	2201      	movs	r2, #1
 8003a84:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a92:	461a      	mov	r2, r3
 8003a94:	2340      	movs	r3, #64	@ 0x40
 8003a96:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003a98:	78fa      	ldrb	r2, [r7, #3]
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	331b      	adds	r3, #27
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d019      	beq.n	8003ae2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003aae:	78fa      	ldrb	r2, [r7, #3]
 8003ab0:	6879      	ldr	r1, [r7, #4]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	011b      	lsls	r3, r3, #4
 8003ab6:	1a9b      	subs	r3, r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	440b      	add	r3, r1
 8003abc:	331b      	adds	r3, #27
 8003abe:	2200      	movs	r2, #0
 8003ac0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ac2:	78fb      	ldrb	r3, [r7, #3]
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	78fa      	ldrb	r2, [r7, #3]
 8003ad2:	0151      	lsls	r1, r2, #5
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	440a      	add	r2, r1
 8003ad8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003adc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ae0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003ae2:	78fb      	ldrb	r3, [r7, #3]
 8003ae4:	015a      	lsls	r2, r3, #5
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aee:	461a      	mov	r2, r3
 8003af0:	2301      	movs	r3, #1
 8003af2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003af4:	78fa      	ldrb	r2, [r7, #3]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	334d      	adds	r3, #77	@ 0x4d
 8003b04:	2201      	movs	r2, #1
 8003b06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	78fa      	ldrb	r2, [r7, #3]
 8003b0e:	4611      	mov	r1, r2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f004 f9d8 	bl	8007ec6 <USB_HC_Halt>
 8003b16:	e34b      	b.n	80041b0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	78fa      	ldrb	r2, [r7, #3]
 8003b1e:	4611      	mov	r1, r2
 8003b20:	4618      	mov	r0, r3
 8003b22:	f003 fc2c 	bl	800737e <USB_ReadChInterrupts>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b2c:	2b40      	cmp	r3, #64	@ 0x40
 8003b2e:	d139      	bne.n	8003ba4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003b30:	78fa      	ldrb	r2, [r7, #3]
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	1a9b      	subs	r3, r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	334d      	adds	r3, #77	@ 0x4d
 8003b40:	2205      	movs	r2, #5
 8003b42:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003b44:	78fa      	ldrb	r2, [r7, #3]
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	011b      	lsls	r3, r3, #4
 8003b4c:	1a9b      	subs	r3, r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	331a      	adds	r3, #26
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d109      	bne.n	8003b6e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003b5a:	78fa      	ldrb	r2, [r7, #3]
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	1a9b      	subs	r3, r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	440b      	add	r3, r1
 8003b68:	3319      	adds	r3, #25
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003b6e:	78fa      	ldrb	r2, [r7, #3]
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	1a9b      	subs	r3, r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	3344      	adds	r3, #68	@ 0x44
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	78fa      	ldrb	r2, [r7, #3]
 8003b88:	4611      	mov	r1, r2
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f004 f99b 	bl	8007ec6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003b90:	78fb      	ldrb	r3, [r7, #3]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	2340      	movs	r3, #64	@ 0x40
 8003ba0:	6093      	str	r3, [r2, #8]
 8003ba2:	e305      	b.n	80041b0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	78fa      	ldrb	r2, [r7, #3]
 8003baa:	4611      	mov	r1, r2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f003 fbe6 	bl	800737e <USB_ReadChInterrupts>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d11a      	bne.n	8003bf2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bc8:	461a      	mov	r2, r3
 8003bca:	2308      	movs	r3, #8
 8003bcc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003bce:	78fa      	ldrb	r2, [r7, #3]
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	1a9b      	subs	r3, r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	334d      	adds	r3, #77	@ 0x4d
 8003bde:	2206      	movs	r2, #6
 8003be0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	4611      	mov	r1, r2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f004 f96b 	bl	8007ec6 <USB_HC_Halt>
 8003bf0:	e2de      	b.n	80041b0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	78fa      	ldrb	r2, [r7, #3]
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f003 fbbf 	bl	800737e <USB_ReadChInterrupts>
 8003c00:	4603      	mov	r3, r0
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	2b10      	cmp	r3, #16
 8003c08:	d144      	bne.n	8003c94 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003c0a:	78fa      	ldrb	r2, [r7, #3]
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	1a9b      	subs	r3, r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	3344      	adds	r3, #68	@ 0x44
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003c1e:	78fa      	ldrb	r2, [r7, #3]
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	4613      	mov	r3, r2
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	1a9b      	subs	r3, r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	334d      	adds	r3, #77	@ 0x4d
 8003c2e:	2204      	movs	r2, #4
 8003c30:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003c32:	78fa      	ldrb	r2, [r7, #3]
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	3319      	adds	r3, #25
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d114      	bne.n	8003c72 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003c48:	78fa      	ldrb	r2, [r7, #3]
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	1a9b      	subs	r3, r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	3318      	adds	r3, #24
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003c5e:	78fa      	ldrb	r2, [r7, #3]
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	4613      	mov	r3, r2
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	3319      	adds	r3, #25
 8003c6e:	2201      	movs	r2, #1
 8003c70:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	78fa      	ldrb	r2, [r7, #3]
 8003c78:	4611      	mov	r1, r2
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f004 f923 	bl	8007ec6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	2310      	movs	r3, #16
 8003c90:	6093      	str	r3, [r2, #8]
 8003c92:	e28d      	b.n	80041b0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	78fa      	ldrb	r2, [r7, #3]
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f003 fb6e 	bl	800737e <USB_ReadChInterrupts>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca8:	2b80      	cmp	r3, #128	@ 0x80
 8003caa:	d169      	bne.n	8003d80 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	799b      	ldrb	r3, [r3, #6]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d111      	bne.n	8003cd8 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	334d      	adds	r3, #77	@ 0x4d
 8003cc4:	2207      	movs	r2, #7
 8003cc6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	4611      	mov	r1, r2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f004 f8f8 	bl	8007ec6 <USB_HC_Halt>
 8003cd6:	e049      	b.n	8003d6c <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003cd8:	78fa      	ldrb	r2, [r7, #3]
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	1a9b      	subs	r3, r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	3344      	adds	r3, #68	@ 0x44
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	1c59      	adds	r1, r3, #1
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	1a9b      	subs	r3, r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4403      	add	r3, r0
 8003cf8:	3344      	adds	r3, #68	@ 0x44
 8003cfa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003cfc:	78fa      	ldrb	r2, [r7, #3]
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4613      	mov	r3, r2
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	1a9b      	subs	r3, r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	3344      	adds	r3, #68	@ 0x44
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d922      	bls.n	8003d58 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003d12:	78fa      	ldrb	r2, [r7, #3]
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	1a9b      	subs	r3, r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	3344      	adds	r3, #68	@ 0x44
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d26:	78fa      	ldrb	r2, [r7, #3]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	334c      	adds	r3, #76	@ 0x4c
 8003d36:	2204      	movs	r2, #4
 8003d38:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d3a:	78fa      	ldrb	r2, [r7, #3]
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	334c      	adds	r3, #76	@ 0x4c
 8003d4a:	781a      	ldrb	r2, [r3, #0]
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	4619      	mov	r1, r3
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f009 f933 	bl	800cfbc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d56:	e009      	b.n	8003d6c <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d58:	78fa      	ldrb	r2, [r7, #3]
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	1a9b      	subs	r3, r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	334c      	adds	r3, #76	@ 0x4c
 8003d68:	2202      	movs	r2, #2
 8003d6a:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003d6c:	78fb      	ldrb	r3, [r7, #3]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d78:	461a      	mov	r2, r3
 8003d7a:	2380      	movs	r3, #128	@ 0x80
 8003d7c:	6093      	str	r3, [r2, #8]
 8003d7e:	e217      	b.n	80041b0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	78fa      	ldrb	r2, [r7, #3]
 8003d86:	4611      	mov	r1, r2
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f003 faf8 	bl	800737e <USB_ReadChInterrupts>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d98:	d11b      	bne.n	8003dd2 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003d9a:	78fa      	ldrb	r2, [r7, #3]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	1a9b      	subs	r3, r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	334d      	adds	r3, #77	@ 0x4d
 8003daa:	2209      	movs	r2, #9
 8003dac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	78fa      	ldrb	r2, [r7, #3]
 8003db4:	4611      	mov	r1, r2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f004 f885 	bl	8007ec6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dc8:	461a      	mov	r2, r3
 8003dca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003dce:	6093      	str	r3, [r2, #8]
 8003dd0:	e1ee      	b.n	80041b0 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	78fa      	ldrb	r2, [r7, #3]
 8003dd8:	4611      	mov	r1, r2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f003 facf 	bl	800737e <USB_ReadChInterrupts>
 8003de0:	4603      	mov	r3, r0
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	f040 81df 	bne.w	80041aa <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003df8:	461a      	mov	r2, r3
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003dfe:	78fa      	ldrb	r2, [r7, #3]
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	4613      	mov	r3, r2
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	1a9b      	subs	r3, r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	334d      	adds	r3, #77	@ 0x4d
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	f040 8093 	bne.w	8003f3c <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e16:	78fa      	ldrb	r2, [r7, #3]
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	334d      	adds	r3, #77	@ 0x4d
 8003e26:	2202      	movs	r2, #2
 8003e28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003e2a:	78fa      	ldrb	r2, [r7, #3]
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	1a9b      	subs	r3, r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	440b      	add	r3, r1
 8003e38:	334c      	adds	r3, #76	@ 0x4c
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003e3e:	78fa      	ldrb	r2, [r7, #3]
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	4613      	mov	r3, r2
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	1a9b      	subs	r3, r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	3326      	adds	r3, #38	@ 0x26
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d00b      	beq.n	8003e6c <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003e54:	78fa      	ldrb	r2, [r7, #3]
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	3326      	adds	r3, #38	@ 0x26
 8003e64:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	f040 8190 	bne.w	800418c <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	799b      	ldrb	r3, [r3, #6]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d115      	bne.n	8003ea0 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003e74:	78fa      	ldrb	r2, [r7, #3]
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	333d      	adds	r3, #61	@ 0x3d
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	78fa      	ldrb	r2, [r7, #3]
 8003e88:	f083 0301 	eor.w	r3, r3, #1
 8003e8c:	b2d8      	uxtb	r0, r3
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	4613      	mov	r3, r2
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	1a9b      	subs	r3, r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	333d      	adds	r3, #61	@ 0x3d
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	799b      	ldrb	r3, [r3, #6]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	f040 8171 	bne.w	800418c <HCD_HC_OUT_IRQHandler+0x920>
 8003eaa:	78fa      	ldrb	r2, [r7, #3]
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	3334      	adds	r3, #52	@ 0x34
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 8165 	beq.w	800418c <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003ec2:	78fa      	ldrb	r2, [r7, #3]
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	3334      	adds	r3, #52	@ 0x34
 8003ed2:	6819      	ldr	r1, [r3, #0]
 8003ed4:	78fa      	ldrb	r2, [r7, #3]
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	1a9b      	subs	r3, r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4403      	add	r3, r0
 8003ee2:	3328      	adds	r3, #40	@ 0x28
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	440b      	add	r3, r1
 8003ee8:	1e59      	subs	r1, r3, #1
 8003eea:	78fa      	ldrb	r2, [r7, #3]
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4403      	add	r3, r0
 8003ef8:	3328      	adds	r3, #40	@ 0x28
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f00:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 813f 	beq.w	800418c <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	333d      	adds	r3, #61	@ 0x3d
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	78fa      	ldrb	r2, [r7, #3]
 8003f22:	f083 0301 	eor.w	r3, r3, #1
 8003f26:	b2d8      	uxtb	r0, r3
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	1a9b      	subs	r3, r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	440b      	add	r3, r1
 8003f34:	333d      	adds	r3, #61	@ 0x3d
 8003f36:	4602      	mov	r2, r0
 8003f38:	701a      	strb	r2, [r3, #0]
 8003f3a:	e127      	b.n	800418c <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003f3c:	78fa      	ldrb	r2, [r7, #3]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	334d      	adds	r3, #77	@ 0x4d
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d120      	bne.n	8003f94 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f52:	78fa      	ldrb	r2, [r7, #3]
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	334d      	adds	r3, #77	@ 0x4d
 8003f62:	2202      	movs	r2, #2
 8003f64:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003f66:	78fa      	ldrb	r2, [r7, #3]
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	1a9b      	subs	r3, r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	331b      	adds	r3, #27
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	f040 8107 	bne.w	800418c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f7e:	78fa      	ldrb	r2, [r7, #3]
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	334c      	adds	r3, #76	@ 0x4c
 8003f8e:	2202      	movs	r2, #2
 8003f90:	701a      	strb	r2, [r3, #0]
 8003f92:	e0fb      	b.n	800418c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003f94:	78fa      	ldrb	r2, [r7, #3]
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	334d      	adds	r3, #77	@ 0x4d
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d13a      	bne.n	8004020 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003faa:	78fa      	ldrb	r2, [r7, #3]
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	1a9b      	subs	r3, r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	440b      	add	r3, r1
 8003fb8:	334d      	adds	r3, #77	@ 0x4d
 8003fba:	2202      	movs	r2, #2
 8003fbc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003fbe:	78fa      	ldrb	r2, [r7, #3]
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	1a9b      	subs	r3, r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	334c      	adds	r3, #76	@ 0x4c
 8003fce:	2202      	movs	r2, #2
 8003fd0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003fd2:	78fa      	ldrb	r2, [r7, #3]
 8003fd4:	6879      	ldr	r1, [r7, #4]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	1a9b      	subs	r3, r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	440b      	add	r3, r1
 8003fe0:	331b      	adds	r3, #27
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	f040 80d1 	bne.w	800418c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003fea:	78fa      	ldrb	r2, [r7, #3]
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	1a9b      	subs	r3, r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	331b      	adds	r3, #27
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ffe:	78fb      	ldrb	r3, [r7, #3]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4413      	add	r3, r2
 8004006:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	78fa      	ldrb	r2, [r7, #3]
 800400e:	0151      	lsls	r1, r2, #5
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	440a      	add	r2, r1
 8004014:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004018:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800401c:	6053      	str	r3, [r2, #4]
 800401e:	e0b5      	b.n	800418c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004020:	78fa      	ldrb	r2, [r7, #3]
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	4613      	mov	r3, r2
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	1a9b      	subs	r3, r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	334d      	adds	r3, #77	@ 0x4d
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	2b05      	cmp	r3, #5
 8004034:	d114      	bne.n	8004060 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004036:	78fa      	ldrb	r2, [r7, #3]
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	1a9b      	subs	r3, r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	440b      	add	r3, r1
 8004044:	334d      	adds	r3, #77	@ 0x4d
 8004046:	2202      	movs	r2, #2
 8004048:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	1a9b      	subs	r3, r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	440b      	add	r3, r1
 8004058:	334c      	adds	r3, #76	@ 0x4c
 800405a:	2202      	movs	r2, #2
 800405c:	701a      	strb	r2, [r3, #0]
 800405e:	e095      	b.n	800418c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004060:	78fa      	ldrb	r2, [r7, #3]
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	4613      	mov	r3, r2
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	1a9b      	subs	r3, r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	440b      	add	r3, r1
 800406e:	334d      	adds	r3, #77	@ 0x4d
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	2b06      	cmp	r3, #6
 8004074:	d114      	bne.n	80040a0 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004076:	78fa      	ldrb	r2, [r7, #3]
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	1a9b      	subs	r3, r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	334d      	adds	r3, #77	@ 0x4d
 8004086:	2202      	movs	r2, #2
 8004088:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800408a:	78fa      	ldrb	r2, [r7, #3]
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	4613      	mov	r3, r2
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	1a9b      	subs	r3, r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	440b      	add	r3, r1
 8004098:	334c      	adds	r3, #76	@ 0x4c
 800409a:	2205      	movs	r2, #5
 800409c:	701a      	strb	r2, [r3, #0]
 800409e:	e075      	b.n	800418c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80040a0:	78fa      	ldrb	r2, [r7, #3]
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	334d      	adds	r3, #77	@ 0x4d
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b07      	cmp	r3, #7
 80040b4:	d00a      	beq.n	80040cc <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	4613      	mov	r3, r2
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	334d      	adds	r3, #77	@ 0x4d
 80040c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80040c8:	2b09      	cmp	r3, #9
 80040ca:	d170      	bne.n	80041ae <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040cc:	78fa      	ldrb	r2, [r7, #3]
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	334d      	adds	r3, #77	@ 0x4d
 80040dc:	2202      	movs	r2, #2
 80040de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80040e0:	78fa      	ldrb	r2, [r7, #3]
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	4613      	mov	r3, r2
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	1a9b      	subs	r3, r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	3344      	adds	r3, #68	@ 0x44
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	1c59      	adds	r1, r3, #1
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4403      	add	r3, r0
 8004100:	3344      	adds	r3, #68	@ 0x44
 8004102:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004104:	78fa      	ldrb	r2, [r7, #3]
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	4613      	mov	r3, r2
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	3344      	adds	r3, #68	@ 0x44
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b02      	cmp	r3, #2
 8004118:	d914      	bls.n	8004144 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800411a:	78fa      	ldrb	r2, [r7, #3]
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	3344      	adds	r3, #68	@ 0x44
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800412e:	78fa      	ldrb	r2, [r7, #3]
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	1a9b      	subs	r3, r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	440b      	add	r3, r1
 800413c:	334c      	adds	r3, #76	@ 0x4c
 800413e:	2204      	movs	r2, #4
 8004140:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004142:	e022      	b.n	800418a <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004144:	78fa      	ldrb	r2, [r7, #3]
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	4613      	mov	r3, r2
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	1a9b      	subs	r3, r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	334c      	adds	r3, #76	@ 0x4c
 8004154:	2202      	movs	r2, #2
 8004156:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	4413      	add	r3, r2
 8004160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800416e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004176:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	4413      	add	r3, r2
 8004180:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004184:	461a      	mov	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800418a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800418c:	78fa      	ldrb	r2, [r7, #3]
 800418e:	6879      	ldr	r1, [r7, #4]
 8004190:	4613      	mov	r3, r2
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	1a9b      	subs	r3, r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	334c      	adds	r3, #76	@ 0x4c
 800419c:	781a      	ldrb	r2, [r3, #0]
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	4619      	mov	r1, r3
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f008 ff0a 	bl	800cfbc <HAL_HCD_HC_NotifyURBChange_Callback>
 80041a8:	e002      	b.n	80041b0 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80041aa:	bf00      	nop
 80041ac:	e000      	b.n	80041b0 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80041ae:	bf00      	nop
  }
}
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b08a      	sub	sp, #40	@ 0x28
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	0c5b      	lsrs	r3, r3, #17
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	091b      	lsrs	r3, r3, #4
 80041e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041ea:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d004      	beq.n	80041fc <HCD_RXQLVL_IRQHandler+0x46>
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b05      	cmp	r3, #5
 80041f6:	f000 80b6 	beq.w	8004366 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80041fa:	e0b7      	b.n	800436c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 80b3 	beq.w	800436a <HCD_RXQLVL_IRQHandler+0x1b4>
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	4613      	mov	r3, r2
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	332c      	adds	r3, #44	@ 0x2c
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 80a7 	beq.w	800436a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4613      	mov	r3, r2
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	1a9b      	subs	r3, r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	3338      	adds	r3, #56	@ 0x38
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	18d1      	adds	r1, r2, r3
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	4613      	mov	r3, r2
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	1a9b      	subs	r3, r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4403      	add	r3, r0
 8004240:	3334      	adds	r3, #52	@ 0x34
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4299      	cmp	r1, r3
 8004246:	f200 8083 	bhi.w	8004350 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6818      	ldr	r0, [r3, #0]
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	4613      	mov	r3, r2
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	440b      	add	r3, r1
 800425c:	332c      	adds	r3, #44	@ 0x2c
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	b292      	uxth	r2, r2
 8004264:	4619      	mov	r1, r3
 8004266:	f003 f81f 	bl	80072a8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	4613      	mov	r3, r2
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	332c      	adds	r3, #44	@ 0x2c
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	18d1      	adds	r1, r2, r3
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	4613      	mov	r3, r2
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	1a9b      	subs	r3, r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4403      	add	r3, r0
 800428e:	332c      	adds	r3, #44	@ 0x2c
 8004290:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4613      	mov	r3, r2
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	1a9b      	subs	r3, r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	440b      	add	r3, r1
 80042a0:	3338      	adds	r3, #56	@ 0x38
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	18d1      	adds	r1, r2, r3
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4613      	mov	r3, r2
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	1a9b      	subs	r3, r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4403      	add	r3, r0
 80042b6:	3338      	adds	r3, #56	@ 0x38
 80042b8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	0cdb      	lsrs	r3, r3, #19
 80042ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042ce:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4613      	mov	r3, r2
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	1a9b      	subs	r3, r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	440b      	add	r3, r1
 80042de:	3328      	adds	r3, #40	@ 0x28
 80042e0:	881b      	ldrh	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d13f      	bne.n	800436a <HCD_RXQLVL_IRQHandler+0x1b4>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d03c      	beq.n	800436a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004306:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800430e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	4413      	add	r3, r2
 8004318:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800431c:	461a      	mov	r2, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	4613      	mov	r3, r2
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	1a9b      	subs	r3, r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	333c      	adds	r3, #60	@ 0x3c
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	f083 0301 	eor.w	r3, r3, #1
 8004338:	b2d8      	uxtb	r0, r3
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4613      	mov	r3, r2
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	333c      	adds	r3, #60	@ 0x3c
 800434a:	4602      	mov	r2, r0
 800434c:	701a      	strb	r2, [r3, #0]
      break;
 800434e:	e00c      	b.n	800436a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	4613      	mov	r3, r2
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	1a9b      	subs	r3, r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	334c      	adds	r3, #76	@ 0x4c
 8004360:	2204      	movs	r2, #4
 8004362:	701a      	strb	r2, [r3, #0]
      break;
 8004364:	e001      	b.n	800436a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004366:	bf00      	nop
 8004368:	e000      	b.n	800436c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800436a:	bf00      	nop
  }
}
 800436c:	bf00      	nop
 800436e:	3728      	adds	r7, #40	@ 0x28
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80043a0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d10b      	bne.n	80043c4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d102      	bne.n	80043bc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f008 fde4 	bl	800cf84 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f043 0302 	orr.w	r3, r3, #2
 80043c2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b08      	cmp	r3, #8
 80043cc:	d132      	bne.n	8004434 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	f043 0308 	orr.w	r3, r3, #8
 80043d4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d126      	bne.n	800442e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	7a5b      	ldrb	r3, [r3, #9]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d113      	bne.n	8004410 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80043ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043f2:	d106      	bne.n	8004402 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2102      	movs	r1, #2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f003 f8e4 	bl	80075c8 <USB_InitFSLSPClkSel>
 8004400:	e011      	b.n	8004426 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2101      	movs	r1, #1
 8004408:	4618      	mov	r0, r3
 800440a:	f003 f8dd 	bl	80075c8 <USB_InitFSLSPClkSel>
 800440e:	e00a      	b.n	8004426 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	79db      	ldrb	r3, [r3, #7]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d106      	bne.n	8004426 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800441e:	461a      	mov	r2, r3
 8004420:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004424:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f008 fdda 	bl	800cfe0 <HAL_HCD_PortEnabled_Callback>
 800442c:	e002      	b.n	8004434 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f008 fde4 	bl	800cffc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b20      	cmp	r3, #32
 800443c:	d103      	bne.n	8004446 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f043 0320 	orr.w	r3, r3, #32
 8004444:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800444c:	461a      	mov	r2, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	6013      	str	r3, [r2, #0]
}
 8004452:	bf00      	nop
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e12b      	b.n	80046c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d106      	bne.n	8004488 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fc fd2e 	bl	8000ee4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2224      	movs	r2, #36	@ 0x24
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0201 	bic.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044c0:	f001 f964 	bl	800578c <HAL_RCC_GetPCLK1Freq>
 80044c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	4a81      	ldr	r2, [pc, #516]	@ (80046d0 <HAL_I2C_Init+0x274>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d807      	bhi.n	80044e0 <HAL_I2C_Init+0x84>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4a80      	ldr	r2, [pc, #512]	@ (80046d4 <HAL_I2C_Init+0x278>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	bf94      	ite	ls
 80044d8:	2301      	movls	r3, #1
 80044da:	2300      	movhi	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	e006      	b.n	80044ee <HAL_I2C_Init+0x92>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4a7d      	ldr	r2, [pc, #500]	@ (80046d8 <HAL_I2C_Init+0x27c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	bf94      	ite	ls
 80044e8:	2301      	movls	r3, #1
 80044ea:	2300      	movhi	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e0e7      	b.n	80046c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4a78      	ldr	r2, [pc, #480]	@ (80046dc <HAL_I2C_Init+0x280>)
 80044fa:	fba2 2303 	umull	r2, r3, r2, r3
 80044fe:	0c9b      	lsrs	r3, r3, #18
 8004500:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	430a      	orrs	r2, r1
 8004514:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	4a6a      	ldr	r2, [pc, #424]	@ (80046d0 <HAL_I2C_Init+0x274>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d802      	bhi.n	8004530 <HAL_I2C_Init+0xd4>
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	3301      	adds	r3, #1
 800452e:	e009      	b.n	8004544 <HAL_I2C_Init+0xe8>
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004536:	fb02 f303 	mul.w	r3, r2, r3
 800453a:	4a69      	ldr	r2, [pc, #420]	@ (80046e0 <HAL_I2C_Init+0x284>)
 800453c:	fba2 2303 	umull	r2, r3, r2, r3
 8004540:	099b      	lsrs	r3, r3, #6
 8004542:	3301      	adds	r3, #1
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6812      	ldr	r2, [r2, #0]
 8004548:	430b      	orrs	r3, r1
 800454a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004556:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	495c      	ldr	r1, [pc, #368]	@ (80046d0 <HAL_I2C_Init+0x274>)
 8004560:	428b      	cmp	r3, r1
 8004562:	d819      	bhi.n	8004598 <HAL_I2C_Init+0x13c>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	1e59      	subs	r1, r3, #1
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004572:	1c59      	adds	r1, r3, #1
 8004574:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004578:	400b      	ands	r3, r1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <HAL_I2C_Init+0x138>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	1e59      	subs	r1, r3, #1
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	fbb1 f3f3 	udiv	r3, r1, r3
 800458c:	3301      	adds	r3, #1
 800458e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004592:	e051      	b.n	8004638 <HAL_I2C_Init+0x1dc>
 8004594:	2304      	movs	r3, #4
 8004596:	e04f      	b.n	8004638 <HAL_I2C_Init+0x1dc>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d111      	bne.n	80045c4 <HAL_I2C_Init+0x168>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	1e58      	subs	r0, r3, #1
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6859      	ldr	r1, [r3, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	440b      	add	r3, r1
 80045ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80045b2:	3301      	adds	r3, #1
 80045b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	bf0c      	ite	eq
 80045bc:	2301      	moveq	r3, #1
 80045be:	2300      	movne	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	e012      	b.n	80045ea <HAL_I2C_Init+0x18e>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	1e58      	subs	r0, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6859      	ldr	r1, [r3, #4]
 80045cc:	460b      	mov	r3, r1
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	0099      	lsls	r1, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045da:	3301      	adds	r3, #1
 80045dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	bf0c      	ite	eq
 80045e4:	2301      	moveq	r3, #1
 80045e6:	2300      	movne	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_I2C_Init+0x196>
 80045ee:	2301      	movs	r3, #1
 80045f0:	e022      	b.n	8004638 <HAL_I2C_Init+0x1dc>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10e      	bne.n	8004618 <HAL_I2C_Init+0x1bc>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	1e58      	subs	r0, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6859      	ldr	r1, [r3, #4]
 8004602:	460b      	mov	r3, r1
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	440b      	add	r3, r1
 8004608:	fbb0 f3f3 	udiv	r3, r0, r3
 800460c:	3301      	adds	r3, #1
 800460e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004612:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004616:	e00f      	b.n	8004638 <HAL_I2C_Init+0x1dc>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	1e58      	subs	r0, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6859      	ldr	r1, [r3, #4]
 8004620:	460b      	mov	r3, r1
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	0099      	lsls	r1, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	fbb0 f3f3 	udiv	r3, r0, r3
 800462e:	3301      	adds	r3, #1
 8004630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004634:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	6809      	ldr	r1, [r1, #0]
 800463c:	4313      	orrs	r3, r2
 800463e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69da      	ldr	r2, [r3, #28]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004666:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6911      	ldr	r1, [r2, #16]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	68d2      	ldr	r2, [r2, #12]
 8004672:	4311      	orrs	r1, r2
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	430b      	orrs	r3, r1
 800467a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695a      	ldr	r2, [r3, #20]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0201 	orr.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	000186a0 	.word	0x000186a0
 80046d4:	001e847f 	.word	0x001e847f
 80046d8:	003d08ff 	.word	0x003d08ff
 80046dc:	431bde83 	.word	0x431bde83
 80046e0:	10624dd3 	.word	0x10624dd3

080046e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b20      	cmp	r3, #32
 80046f8:	d129      	bne.n	800474e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2224      	movs	r2, #36	@ 0x24
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0201 	bic.w	r2, r2, #1
 8004710:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0210 	bic.w	r2, r2, #16
 8004720:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f042 0201 	orr.w	r2, r2, #1
 8004740:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2220      	movs	r2, #32
 8004746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	e000      	b.n	8004750 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800474e:	2302      	movs	r3, #2
  }
}
 8004750:	4618      	mov	r0, r3
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004766:	2300      	movs	r3, #0
 8004768:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b20      	cmp	r3, #32
 8004774:	d12a      	bne.n	80047cc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2224      	movs	r2, #36	@ 0x24
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0201 	bic.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004794:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004796:	89fb      	ldrh	r3, [r7, #14]
 8004798:	f023 030f 	bic.w	r3, r3, #15
 800479c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	89fb      	ldrh	r3, [r7, #14]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	89fa      	ldrh	r2, [r7, #14]
 80047ae:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2220      	movs	r2, #32
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	e000      	b.n	80047ce <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80047cc:	2302      	movs	r3, #2
  }
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
	...

080047dc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e0bf      	b.n	800496e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d106      	bne.n	8004808 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fc fbd8 	bl	8000fb8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699a      	ldr	r2, [r3, #24]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800481e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6999      	ldr	r1, [r3, #24]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004834:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6899      	ldr	r1, [r3, #8]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	4b4a      	ldr	r3, [pc, #296]	@ (8004978 <HAL_LTDC_Init+0x19c>)
 8004850:	400b      	ands	r3, r1
 8004852:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	041b      	lsls	r3, r3, #16
 800485a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6899      	ldr	r1, [r3, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699a      	ldr	r2, [r3, #24]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	431a      	orrs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68d9      	ldr	r1, [r3, #12]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	4b3e      	ldr	r3, [pc, #248]	@ (8004978 <HAL_LTDC_Init+0x19c>)
 800487e:	400b      	ands	r3, r1
 8004880:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	041b      	lsls	r3, r3, #16
 8004888:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68d9      	ldr	r1, [r3, #12]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a1a      	ldr	r2, [r3, #32]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6919      	ldr	r1, [r3, #16]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	4b33      	ldr	r3, [pc, #204]	@ (8004978 <HAL_LTDC_Init+0x19c>)
 80048ac:	400b      	ands	r3, r1
 80048ae:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b4:	041b      	lsls	r3, r3, #16
 80048b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6919      	ldr	r1, [r3, #16]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	431a      	orrs	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6959      	ldr	r1, [r3, #20]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	4b27      	ldr	r3, [pc, #156]	@ (8004978 <HAL_LTDC_Init+0x19c>)
 80048da:	400b      	ands	r3, r1
 80048dc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e2:	041b      	lsls	r3, r3, #16
 80048e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6959      	ldr	r1, [r3, #20]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004902:	021b      	lsls	r3, r3, #8
 8004904:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800490c:	041b      	lsls	r3, r3, #16
 800490e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800491e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0206 	orr.w	r2, r2, #6
 800494a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699a      	ldr	r2, [r3, #24]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0201 	orr.w	r2, r2, #1
 800495a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	f000f800 	.word	0xf000f800

0800497c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004992:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	d023      	beq.n	80049e6 <HAL_LTDC_IRQHandler+0x6a>
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d01e      	beq.n	80049e6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0204 	bic.w	r2, r2, #4
 80049b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2204      	movs	r2, #4
 80049be:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80049c6:	f043 0201 	orr.w	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2204      	movs	r2, #4
 80049d4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f86f 	bl	8004ac4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d023      	beq.n	8004a38 <HAL_LTDC_IRQHandler+0xbc>
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d01e      	beq.n	8004a38 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0202 	bic.w	r2, r2, #2
 8004a08:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a18:	f043 0202 	orr.w	r2, r3, #2
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2204      	movs	r2, #4
 8004a26:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f846 	bl	8004ac4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d01b      	beq.n	8004a7a <HAL_LTDC_IRQHandler+0xfe>
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d016      	beq.n	8004a7a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0201 	bic.w	r2, r2, #1
 8004a5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2201      	movs	r2, #1
 8004a62:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f82f 	bl	8004ad8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d01b      	beq.n	8004abc <HAL_LTDC_IRQHandler+0x140>
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d016      	beq.n	8004abc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0208 	bic.w	r2, r2, #8
 8004a9c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2208      	movs	r2, #8
 8004aa4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f818 	bl	8004aec <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004abc:	bf00      	nop
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004b00:	b5b0      	push	{r4, r5, r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d101      	bne.n	8004b1a <HAL_LTDC_ConfigLayer+0x1a>
 8004b16:	2302      	movs	r3, #2
 8004b18:	e02c      	b.n	8004b74 <HAL_LTDC_ConfigLayer+0x74>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2202      	movs	r2, #2
 8004b26:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2134      	movs	r1, #52	@ 0x34
 8004b30:	fb01 f303 	mul.w	r3, r1, r3
 8004b34:	4413      	add	r3, r2
 8004b36:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	4614      	mov	r4, r2
 8004b3e:	461d      	mov	r5, r3
 8004b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b4c:	682b      	ldr	r3, [r5, #0]
 8004b4e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 f811 	bl	8004b7c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bdb0      	pop	{r4, r5, r7, pc}

08004b7c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b089      	sub	sp, #36	@ 0x24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	0c1b      	lsrs	r3, r3, #16
 8004b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b98:	4413      	add	r3, r2
 8004b9a:	041b      	lsls	r3, r3, #16
 8004b9c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	01db      	lsls	r3, r3, #7
 8004ba8:	4413      	add	r3, r2
 8004baa:	3384      	adds	r3, #132	@ 0x84
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	6812      	ldr	r2, [r2, #0]
 8004bb2:	4611      	mov	r1, r2
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	01d2      	lsls	r2, r2, #7
 8004bb8:	440a      	add	r2, r1
 8004bba:	3284      	adds	r2, #132	@ 0x84
 8004bbc:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004bc0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	0c1b      	lsrs	r3, r3, #16
 8004bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004bd2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004bd4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	01db      	lsls	r3, r3, #7
 8004be0:	440b      	add	r3, r1
 8004be2:	3384      	adds	r3, #132	@ 0x84
 8004be4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004bea:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bfa:	4413      	add	r3, r2
 8004bfc:	041b      	lsls	r3, r3, #16
 8004bfe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	01db      	lsls	r3, r3, #7
 8004c0a:	4413      	add	r3, r2
 8004c0c:	3384      	adds	r3, #132	@ 0x84
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	6812      	ldr	r2, [r2, #0]
 8004c14:	4611      	mov	r1, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	01d2      	lsls	r2, r2, #7
 8004c1a:	440a      	add	r2, r1
 8004c1c:	3284      	adds	r2, #132	@ 0x84
 8004c1e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004c22:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c32:	4413      	add	r3, r2
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	01db      	lsls	r3, r3, #7
 8004c40:	440b      	add	r3, r1
 8004c42:	3384      	adds	r3, #132	@ 0x84
 8004c44:	4619      	mov	r1, r3
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	461a      	mov	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	01db      	lsls	r3, r3, #7
 8004c56:	4413      	add	r3, r2
 8004c58:	3384      	adds	r3, #132	@ 0x84
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	6812      	ldr	r2, [r2, #0]
 8004c60:	4611      	mov	r1, r2
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	01d2      	lsls	r2, r2, #7
 8004c66:	440a      	add	r2, r1
 8004c68:	3284      	adds	r2, #132	@ 0x84
 8004c6a:	f023 0307 	bic.w	r3, r3, #7
 8004c6e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	461a      	mov	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	01db      	lsls	r3, r3, #7
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3384      	adds	r3, #132	@ 0x84
 8004c7e:	461a      	mov	r2, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004c96:	041b      	lsls	r3, r3, #16
 8004c98:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	061b      	lsls	r3, r3, #24
 8004ca0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	01db      	lsls	r3, r3, #7
 8004cac:	4413      	add	r3, r2
 8004cae:	3384      	adds	r3, #132	@ 0x84
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	01db      	lsls	r3, r3, #7
 8004cbc:	4413      	add	r3, r2
 8004cbe:	3384      	adds	r3, #132	@ 0x84
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004ccc:	461a      	mov	r2, r3
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4619      	mov	r1, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	01db      	lsls	r3, r3, #7
 8004ce0:	440b      	add	r3, r1
 8004ce2:	3384      	adds	r3, #132	@ 0x84
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	01db      	lsls	r3, r3, #7
 8004cf6:	4413      	add	r3, r2
 8004cf8:	3384      	adds	r3, #132	@ 0x84
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	4611      	mov	r1, r2
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	01d2      	lsls	r2, r2, #7
 8004d06:	440a      	add	r2, r1
 8004d08:	3284      	adds	r2, #132	@ 0x84
 8004d0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004d0e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	01db      	lsls	r3, r3, #7
 8004d1a:	4413      	add	r3, r2
 8004d1c:	3384      	adds	r3, #132	@ 0x84
 8004d1e:	461a      	mov	r2, r3
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	01db      	lsls	r3, r3, #7
 8004d30:	4413      	add	r3, r2
 8004d32:	3384      	adds	r3, #132	@ 0x84
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	6812      	ldr	r2, [r2, #0]
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	01d2      	lsls	r2, r2, #7
 8004d40:	440a      	add	r2, r1
 8004d42:	3284      	adds	r2, #132	@ 0x84
 8004d44:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004d48:	f023 0307 	bic.w	r3, r3, #7
 8004d4c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	69da      	ldr	r2, [r3, #28]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	68f9      	ldr	r1, [r7, #12]
 8004d58:	6809      	ldr	r1, [r1, #0]
 8004d5a:	4608      	mov	r0, r1
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	01c9      	lsls	r1, r1, #7
 8004d60:	4401      	add	r1, r0
 8004d62:	3184      	adds	r1, #132	@ 0x84
 8004d64:	4313      	orrs	r3, r2
 8004d66:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	01db      	lsls	r3, r3, #7
 8004d72:	4413      	add	r3, r2
 8004d74:	3384      	adds	r3, #132	@ 0x84
 8004d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	01db      	lsls	r3, r3, #7
 8004d82:	4413      	add	r3, r2
 8004d84:	3384      	adds	r3, #132	@ 0x84
 8004d86:	461a      	mov	r2, r3
 8004d88:	2300      	movs	r3, #0
 8004d8a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	461a      	mov	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	01db      	lsls	r3, r3, #7
 8004d96:	4413      	add	r3, r2
 8004d98:	3384      	adds	r3, #132	@ 0x84
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da0:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d102      	bne.n	8004db0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004daa:	2304      	movs	r3, #4
 8004dac:	61fb      	str	r3, [r7, #28]
 8004dae:	e01b      	b.n	8004de8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d102      	bne.n	8004dbe <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004db8:	2303      	movs	r3, #3
 8004dba:	61fb      	str	r3, [r7, #28]
 8004dbc:	e014      	b.n	8004de8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d00b      	beq.n	8004dde <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d007      	beq.n	8004dde <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	d003      	beq.n	8004dde <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004dda:	2b07      	cmp	r3, #7
 8004ddc:	d102      	bne.n	8004de4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004dde:	2302      	movs	r3, #2
 8004de0:	61fb      	str	r3, [r7, #28]
 8004de2:	e001      	b.n	8004de8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004de4:	2301      	movs	r3, #1
 8004de6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	461a      	mov	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	01db      	lsls	r3, r3, #7
 8004df2:	4413      	add	r3, r2
 8004df4:	3384      	adds	r3, #132	@ 0x84
 8004df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	6812      	ldr	r2, [r2, #0]
 8004dfc:	4611      	mov	r1, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	01d2      	lsls	r2, r2, #7
 8004e02:	440a      	add	r2, r1
 8004e04:	3284      	adds	r2, #132	@ 0x84
 8004e06:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004e0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e10:	69fa      	ldr	r2, [r7, #28]
 8004e12:	fb02 f303 	mul.w	r3, r2, r3
 8004e16:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	6859      	ldr	r1, [r3, #4]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	1acb      	subs	r3, r1, r3
 8004e22:	69f9      	ldr	r1, [r7, #28]
 8004e24:	fb01 f303 	mul.w	r3, r1, r3
 8004e28:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004e2a:	68f9      	ldr	r1, [r7, #12]
 8004e2c:	6809      	ldr	r1, [r1, #0]
 8004e2e:	4608      	mov	r0, r1
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	01c9      	lsls	r1, r1, #7
 8004e34:	4401      	add	r1, r0
 8004e36:	3184      	adds	r1, #132	@ 0x84
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	461a      	mov	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	01db      	lsls	r3, r3, #7
 8004e46:	4413      	add	r3, r2
 8004e48:	3384      	adds	r3, #132	@ 0x84
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	6812      	ldr	r2, [r2, #0]
 8004e50:	4611      	mov	r1, r2
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	01d2      	lsls	r2, r2, #7
 8004e56:	440a      	add	r2, r1
 8004e58:	3284      	adds	r2, #132	@ 0x84
 8004e5a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004e5e:	f023 0307 	bic.w	r3, r3, #7
 8004e62:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	01db      	lsls	r3, r3, #7
 8004e6e:	4413      	add	r3, r2
 8004e70:	3384      	adds	r3, #132	@ 0x84
 8004e72:	461a      	mov	r2, r3
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e78:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	01db      	lsls	r3, r3, #7
 8004e84:	4413      	add	r3, r2
 8004e86:	3384      	adds	r3, #132	@ 0x84
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	6812      	ldr	r2, [r2, #0]
 8004e8e:	4611      	mov	r1, r2
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	01d2      	lsls	r2, r2, #7
 8004e94:	440a      	add	r2, r1
 8004e96:	3284      	adds	r2, #132	@ 0x84
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	6013      	str	r3, [r2, #0]
}
 8004e9e:	bf00      	nop
 8004ea0:	3724      	adds	r7, #36	@ 0x24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
	...

08004eac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e267      	b.n	800538e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d075      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eca:	4b88      	ldr	r3, [pc, #544]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 030c 	and.w	r3, r3, #12
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d00c      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ed6:	4b85      	ldr	r3, [pc, #532]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d112      	bne.n	8004f08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ee2:	4b82      	ldr	r3, [pc, #520]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004eee:	d10b      	bne.n	8004f08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef0:	4b7e      	ldr	r3, [pc, #504]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d05b      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x108>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d157      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e242      	b.n	800538e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f10:	d106      	bne.n	8004f20 <HAL_RCC_OscConfig+0x74>
 8004f12:	4b76      	ldr	r3, [pc, #472]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a75      	ldr	r2, [pc, #468]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 8004f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f1c:	6013      	str	r3, [r2, #0]
 8004f1e:	e01d      	b.n	8004f5c <HAL_RCC_OscConfig+0xb0>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f28:	d10c      	bne.n	8004f44 <HAL_RCC_OscConfig+0x98>
 8004f2a:	4b70      	ldr	r3, [pc, #448]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a6f      	ldr	r2, [pc, #444]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 8004f30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	4b6d      	ldr	r3, [pc, #436]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a6c      	ldr	r2, [pc, #432]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 8004f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	e00b      	b.n	8004f5c <HAL_RCC_OscConfig+0xb0>
 8004f44:	4b69      	ldr	r3, [pc, #420]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a68      	ldr	r2, [pc, #416]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 8004f4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f4e:	6013      	str	r3, [r2, #0]
 8004f50:	4b66      	ldr	r3, [pc, #408]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a65      	ldr	r2, [pc, #404]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 8004f56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d013      	beq.n	8004f8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f64:	f7fc fc66 	bl	8001834 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f6c:	f7fc fc62 	bl	8001834 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b64      	cmp	r3, #100	@ 0x64
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e207      	b.n	800538e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f7e:	4b5b      	ldr	r3, [pc, #364]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0f0      	beq.n	8004f6c <HAL_RCC_OscConfig+0xc0>
 8004f8a:	e014      	b.n	8004fb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f8c:	f7fc fc52 	bl	8001834 <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f94:	f7fc fc4e 	bl	8001834 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b64      	cmp	r3, #100	@ 0x64
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e1f3      	b.n	800538e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fa6:	4b51      	ldr	r3, [pc, #324]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1f0      	bne.n	8004f94 <HAL_RCC_OscConfig+0xe8>
 8004fb2:	e000      	b.n	8004fb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d063      	beq.n	800508a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fc2:	4b4a      	ldr	r3, [pc, #296]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 030c 	and.w	r3, r3, #12
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00b      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fce:	4b47      	ldr	r3, [pc, #284]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d11c      	bne.n	8005014 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fda:	4b44      	ldr	r3, [pc, #272]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d116      	bne.n	8005014 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fe6:	4b41      	ldr	r3, [pc, #260]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d005      	beq.n	8004ffe <HAL_RCC_OscConfig+0x152>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d001      	beq.n	8004ffe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e1c7      	b.n	800538e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ffe:	4b3b      	ldr	r3, [pc, #236]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	4937      	ldr	r1, [pc, #220]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 800500e:	4313      	orrs	r3, r2
 8005010:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005012:	e03a      	b.n	800508a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d020      	beq.n	800505e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800501c:	4b34      	ldr	r3, [pc, #208]	@ (80050f0 <HAL_RCC_OscConfig+0x244>)
 800501e:	2201      	movs	r2, #1
 8005020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005022:	f7fc fc07 	bl	8001834 <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005028:	e008      	b.n	800503c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800502a:	f7fc fc03 	bl	8001834 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e1a8      	b.n	800538e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800503c:	4b2b      	ldr	r3, [pc, #172]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0f0      	beq.n	800502a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005048:	4b28      	ldr	r3, [pc, #160]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	4925      	ldr	r1, [pc, #148]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 8005058:	4313      	orrs	r3, r2
 800505a:	600b      	str	r3, [r1, #0]
 800505c:	e015      	b.n	800508a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800505e:	4b24      	ldr	r3, [pc, #144]	@ (80050f0 <HAL_RCC_OscConfig+0x244>)
 8005060:	2200      	movs	r2, #0
 8005062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005064:	f7fc fbe6 	bl	8001834 <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800506c:	f7fc fbe2 	bl	8001834 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e187      	b.n	800538e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800507e:	4b1b      	ldr	r3, [pc, #108]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f0      	bne.n	800506c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0308 	and.w	r3, r3, #8
 8005092:	2b00      	cmp	r3, #0
 8005094:	d036      	beq.n	8005104 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d016      	beq.n	80050cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800509e:	4b15      	ldr	r3, [pc, #84]	@ (80050f4 <HAL_RCC_OscConfig+0x248>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a4:	f7fc fbc6 	bl	8001834 <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050ac:	f7fc fbc2 	bl	8001834 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e167      	b.n	800538e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050be:	4b0b      	ldr	r3, [pc, #44]	@ (80050ec <HAL_RCC_OscConfig+0x240>)
 80050c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0f0      	beq.n	80050ac <HAL_RCC_OscConfig+0x200>
 80050ca:	e01b      	b.n	8005104 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050cc:	4b09      	ldr	r3, [pc, #36]	@ (80050f4 <HAL_RCC_OscConfig+0x248>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050d2:	f7fc fbaf 	bl	8001834 <HAL_GetTick>
 80050d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d8:	e00e      	b.n	80050f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050da:	f7fc fbab 	bl	8001834 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d907      	bls.n	80050f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e150      	b.n	800538e <HAL_RCC_OscConfig+0x4e2>
 80050ec:	40023800 	.word	0x40023800
 80050f0:	42470000 	.word	0x42470000
 80050f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050f8:	4b88      	ldr	r3, [pc, #544]	@ (800531c <HAL_RCC_OscConfig+0x470>)
 80050fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1ea      	bne.n	80050da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 8097 	beq.w	8005240 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005112:	2300      	movs	r3, #0
 8005114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005116:	4b81      	ldr	r3, [pc, #516]	@ (800531c <HAL_RCC_OscConfig+0x470>)
 8005118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10f      	bne.n	8005142 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005122:	2300      	movs	r3, #0
 8005124:	60bb      	str	r3, [r7, #8]
 8005126:	4b7d      	ldr	r3, [pc, #500]	@ (800531c <HAL_RCC_OscConfig+0x470>)
 8005128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512a:	4a7c      	ldr	r2, [pc, #496]	@ (800531c <HAL_RCC_OscConfig+0x470>)
 800512c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005130:	6413      	str	r3, [r2, #64]	@ 0x40
 8005132:	4b7a      	ldr	r3, [pc, #488]	@ (800531c <HAL_RCC_OscConfig+0x470>)
 8005134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800513a:	60bb      	str	r3, [r7, #8]
 800513c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800513e:	2301      	movs	r3, #1
 8005140:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005142:	4b77      	ldr	r3, [pc, #476]	@ (8005320 <HAL_RCC_OscConfig+0x474>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800514a:	2b00      	cmp	r3, #0
 800514c:	d118      	bne.n	8005180 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800514e:	4b74      	ldr	r3, [pc, #464]	@ (8005320 <HAL_RCC_OscConfig+0x474>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a73      	ldr	r2, [pc, #460]	@ (8005320 <HAL_RCC_OscConfig+0x474>)
 8005154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005158:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800515a:	f7fc fb6b 	bl	8001834 <HAL_GetTick>
 800515e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005160:	e008      	b.n	8005174 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005162:	f7fc fb67 	bl	8001834 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d901      	bls.n	8005174 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e10c      	b.n	800538e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005174:	4b6a      	ldr	r3, [pc, #424]	@ (8005320 <HAL_RCC_OscConfig+0x474>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0f0      	beq.n	8005162 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d106      	bne.n	8005196 <HAL_RCC_OscConfig+0x2ea>
 8005188:	4b64      	ldr	r3, [pc, #400]	@ (800531c <HAL_RCC_OscConfig+0x470>)
 800518a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800518c:	4a63      	ldr	r2, [pc, #396]	@ (800531c <HAL_RCC_OscConfig+0x470>)
 800518e:	f043 0301 	orr.w	r3, r3, #1
 8005192:	6713      	str	r3, [r2, #112]	@ 0x70
 8005194:	e01c      	b.n	80051d0 <HAL_RCC_OscConfig+0x324>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	2b05      	cmp	r3, #5
 800519c:	d10c      	bne.n	80051b8 <HAL_RCC_OscConfig+0x30c>
 800519e:	4b5f      	ldr	r3, [pc, #380]	@ (800531c <HAL_RCC_OscConfig+0x470>)
 80051a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a2:	4a5e      	ldr	r2, [pc, #376]	@ (800531c <HAL_RCC_OscConfig+0x470>)
 80051a4:	f043 0304 	orr.w	r3, r3, #4
 80051a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80051aa:	4b5c      	ldr	r3, [pc, #368]	@ (800531c <HAL_RCC_OscConfig+0x470>)
 80051ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ae:	4a5b      	ldr	r2, [pc, #364]	@ (800531c <HAL_RCC_OscConfig+0x470>)
 80051b0:	f043 0301 	orr.w	r3, r3, #1
 80051b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80051b6:	e00b      	b.n	80051d0 <HAL_RCC_OscConfig+0x324>
 80051b8:	4b58      	ldr	r3, [pc, #352]	@ (800531c <HAL_RCC_OscConfig+0x470>)
 80051ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051bc:	4a57      	ldr	r2, [pc, #348]	@ (800531c <HAL_RCC_OscConfig+0x470>)
 80051be:	f023 0301 	bic.w	r3, r3, #1
 80051c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80051c4:	4b55      	ldr	r3, [pc, #340]	@ (800531c <HAL_RCC_OscConfig+0x470>)
 80051c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c8:	4a54      	ldr	r2, [pc, #336]	@ (800531c <HAL_RCC_OscConfig+0x470>)
 80051ca:	f023 0304 	bic.w	r3, r3, #4
 80051ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d015      	beq.n	8005204 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d8:	f7fc fb2c 	bl	8001834 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051de:	e00a      	b.n	80051f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051e0:	f7fc fb28 	bl	8001834 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e0cb      	b.n	800538e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f6:	4b49      	ldr	r3, [pc, #292]	@ (800531c <HAL_RCC_OscConfig+0x470>)
 80051f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0ee      	beq.n	80051e0 <HAL_RCC_OscConfig+0x334>
 8005202:	e014      	b.n	800522e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005204:	f7fc fb16 	bl	8001834 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800520a:	e00a      	b.n	8005222 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800520c:	f7fc fb12 	bl	8001834 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800521a:	4293      	cmp	r3, r2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e0b5      	b.n	800538e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005222:	4b3e      	ldr	r3, [pc, #248]	@ (800531c <HAL_RCC_OscConfig+0x470>)
 8005224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1ee      	bne.n	800520c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800522e:	7dfb      	ldrb	r3, [r7, #23]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d105      	bne.n	8005240 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005234:	4b39      	ldr	r3, [pc, #228]	@ (800531c <HAL_RCC_OscConfig+0x470>)
 8005236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005238:	4a38      	ldr	r2, [pc, #224]	@ (800531c <HAL_RCC_OscConfig+0x470>)
 800523a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800523e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 80a1 	beq.w	800538c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800524a:	4b34      	ldr	r3, [pc, #208]	@ (800531c <HAL_RCC_OscConfig+0x470>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 030c 	and.w	r3, r3, #12
 8005252:	2b08      	cmp	r3, #8
 8005254:	d05c      	beq.n	8005310 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	2b02      	cmp	r3, #2
 800525c:	d141      	bne.n	80052e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800525e:	4b31      	ldr	r3, [pc, #196]	@ (8005324 <HAL_RCC_OscConfig+0x478>)
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005264:	f7fc fae6 	bl	8001834 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800526c:	f7fc fae2 	bl	8001834 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e087      	b.n	800538e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800527e:	4b27      	ldr	r3, [pc, #156]	@ (800531c <HAL_RCC_OscConfig+0x470>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1f0      	bne.n	800526c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	69da      	ldr	r2, [r3, #28]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005298:	019b      	lsls	r3, r3, #6
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a0:	085b      	lsrs	r3, r3, #1
 80052a2:	3b01      	subs	r3, #1
 80052a4:	041b      	lsls	r3, r3, #16
 80052a6:	431a      	orrs	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ac:	061b      	lsls	r3, r3, #24
 80052ae:	491b      	ldr	r1, [pc, #108]	@ (800531c <HAL_RCC_OscConfig+0x470>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005324 <HAL_RCC_OscConfig+0x478>)
 80052b6:	2201      	movs	r2, #1
 80052b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ba:	f7fc fabb 	bl	8001834 <HAL_GetTick>
 80052be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052c2:	f7fc fab7 	bl	8001834 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e05c      	b.n	800538e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052d4:	4b11      	ldr	r3, [pc, #68]	@ (800531c <HAL_RCC_OscConfig+0x470>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0f0      	beq.n	80052c2 <HAL_RCC_OscConfig+0x416>
 80052e0:	e054      	b.n	800538c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e2:	4b10      	ldr	r3, [pc, #64]	@ (8005324 <HAL_RCC_OscConfig+0x478>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e8:	f7fc faa4 	bl	8001834 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052f0:	f7fc faa0 	bl	8001834 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e045      	b.n	800538e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005302:	4b06      	ldr	r3, [pc, #24]	@ (800531c <HAL_RCC_OscConfig+0x470>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1f0      	bne.n	80052f0 <HAL_RCC_OscConfig+0x444>
 800530e:	e03d      	b.n	800538c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d107      	bne.n	8005328 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e038      	b.n	800538e <HAL_RCC_OscConfig+0x4e2>
 800531c:	40023800 	.word	0x40023800
 8005320:	40007000 	.word	0x40007000
 8005324:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005328:	4b1b      	ldr	r3, [pc, #108]	@ (8005398 <HAL_RCC_OscConfig+0x4ec>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d028      	beq.n	8005388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005340:	429a      	cmp	r2, r3
 8005342:	d121      	bne.n	8005388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800534e:	429a      	cmp	r2, r3
 8005350:	d11a      	bne.n	8005388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005358:	4013      	ands	r3, r2
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800535e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005360:	4293      	cmp	r3, r2
 8005362:	d111      	bne.n	8005388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536e:	085b      	lsrs	r3, r3, #1
 8005370:	3b01      	subs	r3, #1
 8005372:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005374:	429a      	cmp	r2, r3
 8005376:	d107      	bne.n	8005388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005382:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005384:	429a      	cmp	r2, r3
 8005386:	d001      	beq.n	800538c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e000      	b.n	800538e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	40023800 	.word	0x40023800

0800539c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e0cc      	b.n	800554a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053b0:	4b68      	ldr	r3, [pc, #416]	@ (8005554 <HAL_RCC_ClockConfig+0x1b8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 030f 	and.w	r3, r3, #15
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d90c      	bls.n	80053d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053be:	4b65      	ldr	r3, [pc, #404]	@ (8005554 <HAL_RCC_ClockConfig+0x1b8>)
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	b2d2      	uxtb	r2, r2
 80053c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c6:	4b63      	ldr	r3, [pc, #396]	@ (8005554 <HAL_RCC_ClockConfig+0x1b8>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 030f 	and.w	r3, r3, #15
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d001      	beq.n	80053d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e0b8      	b.n	800554a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d020      	beq.n	8005426 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0304 	and.w	r3, r3, #4
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d005      	beq.n	80053fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053f0:	4b59      	ldr	r3, [pc, #356]	@ (8005558 <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	4a58      	ldr	r2, [pc, #352]	@ (8005558 <HAL_RCC_ClockConfig+0x1bc>)
 80053f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80053fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	2b00      	cmp	r3, #0
 8005406:	d005      	beq.n	8005414 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005408:	4b53      	ldr	r3, [pc, #332]	@ (8005558 <HAL_RCC_ClockConfig+0x1bc>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	4a52      	ldr	r2, [pc, #328]	@ (8005558 <HAL_RCC_ClockConfig+0x1bc>)
 800540e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005412:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005414:	4b50      	ldr	r3, [pc, #320]	@ (8005558 <HAL_RCC_ClockConfig+0x1bc>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	494d      	ldr	r1, [pc, #308]	@ (8005558 <HAL_RCC_ClockConfig+0x1bc>)
 8005422:	4313      	orrs	r3, r2
 8005424:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d044      	beq.n	80054bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d107      	bne.n	800544a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800543a:	4b47      	ldr	r3, [pc, #284]	@ (8005558 <HAL_RCC_ClockConfig+0x1bc>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d119      	bne.n	800547a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e07f      	b.n	800554a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2b02      	cmp	r3, #2
 8005450:	d003      	beq.n	800545a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005456:	2b03      	cmp	r3, #3
 8005458:	d107      	bne.n	800546a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800545a:	4b3f      	ldr	r3, [pc, #252]	@ (8005558 <HAL_RCC_ClockConfig+0x1bc>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d109      	bne.n	800547a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e06f      	b.n	800554a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800546a:	4b3b      	ldr	r3, [pc, #236]	@ (8005558 <HAL_RCC_ClockConfig+0x1bc>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e067      	b.n	800554a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800547a:	4b37      	ldr	r3, [pc, #220]	@ (8005558 <HAL_RCC_ClockConfig+0x1bc>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f023 0203 	bic.w	r2, r3, #3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	4934      	ldr	r1, [pc, #208]	@ (8005558 <HAL_RCC_ClockConfig+0x1bc>)
 8005488:	4313      	orrs	r3, r2
 800548a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800548c:	f7fc f9d2 	bl	8001834 <HAL_GetTick>
 8005490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005492:	e00a      	b.n	80054aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005494:	f7fc f9ce 	bl	8001834 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e04f      	b.n	800554a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054aa:	4b2b      	ldr	r3, [pc, #172]	@ (8005558 <HAL_RCC_ClockConfig+0x1bc>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 020c 	and.w	r2, r3, #12
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d1eb      	bne.n	8005494 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054bc:	4b25      	ldr	r3, [pc, #148]	@ (8005554 <HAL_RCC_ClockConfig+0x1b8>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 030f 	and.w	r3, r3, #15
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d20c      	bcs.n	80054e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ca:	4b22      	ldr	r3, [pc, #136]	@ (8005554 <HAL_RCC_ClockConfig+0x1b8>)
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054d2:	4b20      	ldr	r3, [pc, #128]	@ (8005554 <HAL_RCC_ClockConfig+0x1b8>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d001      	beq.n	80054e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e032      	b.n	800554a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d008      	beq.n	8005502 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054f0:	4b19      	ldr	r3, [pc, #100]	@ (8005558 <HAL_RCC_ClockConfig+0x1bc>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	4916      	ldr	r1, [pc, #88]	@ (8005558 <HAL_RCC_ClockConfig+0x1bc>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0308 	and.w	r3, r3, #8
 800550a:	2b00      	cmp	r3, #0
 800550c:	d009      	beq.n	8005522 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800550e:	4b12      	ldr	r3, [pc, #72]	@ (8005558 <HAL_RCC_ClockConfig+0x1bc>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	490e      	ldr	r1, [pc, #56]	@ (8005558 <HAL_RCC_ClockConfig+0x1bc>)
 800551e:	4313      	orrs	r3, r2
 8005520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005522:	f000 f821 	bl	8005568 <HAL_RCC_GetSysClockFreq>
 8005526:	4602      	mov	r2, r0
 8005528:	4b0b      	ldr	r3, [pc, #44]	@ (8005558 <HAL_RCC_ClockConfig+0x1bc>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	091b      	lsrs	r3, r3, #4
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	490a      	ldr	r1, [pc, #40]	@ (800555c <HAL_RCC_ClockConfig+0x1c0>)
 8005534:	5ccb      	ldrb	r3, [r1, r3]
 8005536:	fa22 f303 	lsr.w	r3, r2, r3
 800553a:	4a09      	ldr	r2, [pc, #36]	@ (8005560 <HAL_RCC_ClockConfig+0x1c4>)
 800553c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800553e:	4b09      	ldr	r3, [pc, #36]	@ (8005564 <HAL_RCC_ClockConfig+0x1c8>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4618      	mov	r0, r3
 8005544:	f7fc f80e 	bl	8001564 <HAL_InitTick>

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	40023c00 	.word	0x40023c00
 8005558:	40023800 	.word	0x40023800
 800555c:	08119c98 	.word	0x08119c98
 8005560:	20000000 	.word	0x20000000
 8005564:	20000004 	.word	0x20000004

08005568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800556c:	b094      	sub	sp, #80	@ 0x50
 800556e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005570:	2300      	movs	r3, #0
 8005572:	647b      	str	r3, [r7, #68]	@ 0x44
 8005574:	2300      	movs	r3, #0
 8005576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005578:	2300      	movs	r3, #0
 800557a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005580:	4b79      	ldr	r3, [pc, #484]	@ (8005768 <HAL_RCC_GetSysClockFreq+0x200>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f003 030c 	and.w	r3, r3, #12
 8005588:	2b08      	cmp	r3, #8
 800558a:	d00d      	beq.n	80055a8 <HAL_RCC_GetSysClockFreq+0x40>
 800558c:	2b08      	cmp	r3, #8
 800558e:	f200 80e1 	bhi.w	8005754 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005592:	2b00      	cmp	r3, #0
 8005594:	d002      	beq.n	800559c <HAL_RCC_GetSysClockFreq+0x34>
 8005596:	2b04      	cmp	r3, #4
 8005598:	d003      	beq.n	80055a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800559a:	e0db      	b.n	8005754 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800559c:	4b73      	ldr	r3, [pc, #460]	@ (800576c <HAL_RCC_GetSysClockFreq+0x204>)
 800559e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80055a0:	e0db      	b.n	800575a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055a2:	4b73      	ldr	r3, [pc, #460]	@ (8005770 <HAL_RCC_GetSysClockFreq+0x208>)
 80055a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055a6:	e0d8      	b.n	800575a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055a8:	4b6f      	ldr	r3, [pc, #444]	@ (8005768 <HAL_RCC_GetSysClockFreq+0x200>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055b2:	4b6d      	ldr	r3, [pc, #436]	@ (8005768 <HAL_RCC_GetSysClockFreq+0x200>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d063      	beq.n	8005686 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055be:	4b6a      	ldr	r3, [pc, #424]	@ (8005768 <HAL_RCC_GetSysClockFreq+0x200>)
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	099b      	lsrs	r3, r3, #6
 80055c4:	2200      	movs	r2, #0
 80055c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80055ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80055d2:	2300      	movs	r3, #0
 80055d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80055d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80055da:	4622      	mov	r2, r4
 80055dc:	462b      	mov	r3, r5
 80055de:	f04f 0000 	mov.w	r0, #0
 80055e2:	f04f 0100 	mov.w	r1, #0
 80055e6:	0159      	lsls	r1, r3, #5
 80055e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055ec:	0150      	lsls	r0, r2, #5
 80055ee:	4602      	mov	r2, r0
 80055f0:	460b      	mov	r3, r1
 80055f2:	4621      	mov	r1, r4
 80055f4:	1a51      	subs	r1, r2, r1
 80055f6:	6139      	str	r1, [r7, #16]
 80055f8:	4629      	mov	r1, r5
 80055fa:	eb63 0301 	sbc.w	r3, r3, r1
 80055fe:	617b      	str	r3, [r7, #20]
 8005600:	f04f 0200 	mov.w	r2, #0
 8005604:	f04f 0300 	mov.w	r3, #0
 8005608:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800560c:	4659      	mov	r1, fp
 800560e:	018b      	lsls	r3, r1, #6
 8005610:	4651      	mov	r1, sl
 8005612:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005616:	4651      	mov	r1, sl
 8005618:	018a      	lsls	r2, r1, #6
 800561a:	4651      	mov	r1, sl
 800561c:	ebb2 0801 	subs.w	r8, r2, r1
 8005620:	4659      	mov	r1, fp
 8005622:	eb63 0901 	sbc.w	r9, r3, r1
 8005626:	f04f 0200 	mov.w	r2, #0
 800562a:	f04f 0300 	mov.w	r3, #0
 800562e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005632:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005636:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800563a:	4690      	mov	r8, r2
 800563c:	4699      	mov	r9, r3
 800563e:	4623      	mov	r3, r4
 8005640:	eb18 0303 	adds.w	r3, r8, r3
 8005644:	60bb      	str	r3, [r7, #8]
 8005646:	462b      	mov	r3, r5
 8005648:	eb49 0303 	adc.w	r3, r9, r3
 800564c:	60fb      	str	r3, [r7, #12]
 800564e:	f04f 0200 	mov.w	r2, #0
 8005652:	f04f 0300 	mov.w	r3, #0
 8005656:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800565a:	4629      	mov	r1, r5
 800565c:	024b      	lsls	r3, r1, #9
 800565e:	4621      	mov	r1, r4
 8005660:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005664:	4621      	mov	r1, r4
 8005666:	024a      	lsls	r2, r1, #9
 8005668:	4610      	mov	r0, r2
 800566a:	4619      	mov	r1, r3
 800566c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800566e:	2200      	movs	r2, #0
 8005670:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005672:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005674:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005678:	f7fa fdba 	bl	80001f0 <__aeabi_uldivmod>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	4613      	mov	r3, r2
 8005682:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005684:	e058      	b.n	8005738 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005686:	4b38      	ldr	r3, [pc, #224]	@ (8005768 <HAL_RCC_GetSysClockFreq+0x200>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	099b      	lsrs	r3, r3, #6
 800568c:	2200      	movs	r2, #0
 800568e:	4618      	mov	r0, r3
 8005690:	4611      	mov	r1, r2
 8005692:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005696:	623b      	str	r3, [r7, #32]
 8005698:	2300      	movs	r3, #0
 800569a:	627b      	str	r3, [r7, #36]	@ 0x24
 800569c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80056a0:	4642      	mov	r2, r8
 80056a2:	464b      	mov	r3, r9
 80056a4:	f04f 0000 	mov.w	r0, #0
 80056a8:	f04f 0100 	mov.w	r1, #0
 80056ac:	0159      	lsls	r1, r3, #5
 80056ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056b2:	0150      	lsls	r0, r2, #5
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4641      	mov	r1, r8
 80056ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80056be:	4649      	mov	r1, r9
 80056c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80056c4:	f04f 0200 	mov.w	r2, #0
 80056c8:	f04f 0300 	mov.w	r3, #0
 80056cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80056d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80056d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80056d8:	ebb2 040a 	subs.w	r4, r2, sl
 80056dc:	eb63 050b 	sbc.w	r5, r3, fp
 80056e0:	f04f 0200 	mov.w	r2, #0
 80056e4:	f04f 0300 	mov.w	r3, #0
 80056e8:	00eb      	lsls	r3, r5, #3
 80056ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056ee:	00e2      	lsls	r2, r4, #3
 80056f0:	4614      	mov	r4, r2
 80056f2:	461d      	mov	r5, r3
 80056f4:	4643      	mov	r3, r8
 80056f6:	18e3      	adds	r3, r4, r3
 80056f8:	603b      	str	r3, [r7, #0]
 80056fa:	464b      	mov	r3, r9
 80056fc:	eb45 0303 	adc.w	r3, r5, r3
 8005700:	607b      	str	r3, [r7, #4]
 8005702:	f04f 0200 	mov.w	r2, #0
 8005706:	f04f 0300 	mov.w	r3, #0
 800570a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800570e:	4629      	mov	r1, r5
 8005710:	028b      	lsls	r3, r1, #10
 8005712:	4621      	mov	r1, r4
 8005714:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005718:	4621      	mov	r1, r4
 800571a:	028a      	lsls	r2, r1, #10
 800571c:	4610      	mov	r0, r2
 800571e:	4619      	mov	r1, r3
 8005720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005722:	2200      	movs	r2, #0
 8005724:	61bb      	str	r3, [r7, #24]
 8005726:	61fa      	str	r2, [r7, #28]
 8005728:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800572c:	f7fa fd60 	bl	80001f0 <__aeabi_uldivmod>
 8005730:	4602      	mov	r2, r0
 8005732:	460b      	mov	r3, r1
 8005734:	4613      	mov	r3, r2
 8005736:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005738:	4b0b      	ldr	r3, [pc, #44]	@ (8005768 <HAL_RCC_GetSysClockFreq+0x200>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	0c1b      	lsrs	r3, r3, #16
 800573e:	f003 0303 	and.w	r3, r3, #3
 8005742:	3301      	adds	r3, #1
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005748:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800574a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800574c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005750:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005752:	e002      	b.n	800575a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005754:	4b05      	ldr	r3, [pc, #20]	@ (800576c <HAL_RCC_GetSysClockFreq+0x204>)
 8005756:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005758:	bf00      	nop
    }
  }
  return sysclockfreq;
 800575a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800575c:	4618      	mov	r0, r3
 800575e:	3750      	adds	r7, #80	@ 0x50
 8005760:	46bd      	mov	sp, r7
 8005762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005766:	bf00      	nop
 8005768:	40023800 	.word	0x40023800
 800576c:	00f42400 	.word	0x00f42400
 8005770:	007a1200 	.word	0x007a1200

08005774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005774:	b480      	push	{r7}
 8005776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005778:	4b03      	ldr	r3, [pc, #12]	@ (8005788 <HAL_RCC_GetHCLKFreq+0x14>)
 800577a:	681b      	ldr	r3, [r3, #0]
}
 800577c:	4618      	mov	r0, r3
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	20000000 	.word	0x20000000

0800578c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005790:	f7ff fff0 	bl	8005774 <HAL_RCC_GetHCLKFreq>
 8005794:	4602      	mov	r2, r0
 8005796:	4b05      	ldr	r3, [pc, #20]	@ (80057ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	0a9b      	lsrs	r3, r3, #10
 800579c:	f003 0307 	and.w	r3, r3, #7
 80057a0:	4903      	ldr	r1, [pc, #12]	@ (80057b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057a2:	5ccb      	ldrb	r3, [r1, r3]
 80057a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	40023800 	.word	0x40023800
 80057b0:	08119ca8 	.word	0x08119ca8

080057b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057b8:	f7ff ffdc 	bl	8005774 <HAL_RCC_GetHCLKFreq>
 80057bc:	4602      	mov	r2, r0
 80057be:	4b05      	ldr	r3, [pc, #20]	@ (80057d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	0b5b      	lsrs	r3, r3, #13
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	4903      	ldr	r1, [pc, #12]	@ (80057d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057ca:	5ccb      	ldrb	r3, [r1, r3]
 80057cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	40023800 	.word	0x40023800
 80057d8:	08119ca8 	.word	0x08119ca8

080057dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	220f      	movs	r2, #15
 80057ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80057ec:	4b12      	ldr	r3, [pc, #72]	@ (8005838 <HAL_RCC_GetClockConfig+0x5c>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f003 0203 	and.w	r2, r3, #3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80057f8:	4b0f      	ldr	r3, [pc, #60]	@ (8005838 <HAL_RCC_GetClockConfig+0x5c>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005804:	4b0c      	ldr	r3, [pc, #48]	@ (8005838 <HAL_RCC_GetClockConfig+0x5c>)
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005810:	4b09      	ldr	r3, [pc, #36]	@ (8005838 <HAL_RCC_GetClockConfig+0x5c>)
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	08db      	lsrs	r3, r3, #3
 8005816:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800581e:	4b07      	ldr	r3, [pc, #28]	@ (800583c <HAL_RCC_GetClockConfig+0x60>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 020f 	and.w	r2, r3, #15
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	601a      	str	r2, [r3, #0]
}
 800582a:	bf00      	nop
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40023800 	.word	0x40023800
 800583c:	40023c00 	.word	0x40023c00

08005840 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005848:	2300      	movs	r3, #0
 800584a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10b      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005864:	2b00      	cmp	r3, #0
 8005866:	d105      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005870:	2b00      	cmp	r3, #0
 8005872:	d075      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005874:	4b91      	ldr	r3, [pc, #580]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005876:	2200      	movs	r2, #0
 8005878:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800587a:	f7fb ffdb 	bl	8001834 <HAL_GetTick>
 800587e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005880:	e008      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005882:	f7fb ffd7 	bl	8001834 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	2b02      	cmp	r3, #2
 800588e:	d901      	bls.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e189      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005894:	4b8a      	ldr	r3, [pc, #552]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1f0      	bne.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d009      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	019a      	lsls	r2, r3, #6
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	071b      	lsls	r3, r3, #28
 80058b8:	4981      	ldr	r1, [pc, #516]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d01f      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80058cc:	4b7c      	ldr	r3, [pc, #496]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058d2:	0f1b      	lsrs	r3, r3, #28
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	019a      	lsls	r2, r3, #6
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	061b      	lsls	r3, r3, #24
 80058e6:	431a      	orrs	r2, r3
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	071b      	lsls	r3, r3, #28
 80058ec:	4974      	ldr	r1, [pc, #464]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80058f4:	4b72      	ldr	r3, [pc, #456]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058fa:	f023 021f 	bic.w	r2, r3, #31
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	3b01      	subs	r3, #1
 8005904:	496e      	ldr	r1, [pc, #440]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005906:	4313      	orrs	r3, r2
 8005908:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00d      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	019a      	lsls	r2, r3, #6
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	061b      	lsls	r3, r3, #24
 8005924:	431a      	orrs	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	071b      	lsls	r3, r3, #28
 800592c:	4964      	ldr	r1, [pc, #400]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005934:	4b61      	ldr	r3, [pc, #388]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005936:	2201      	movs	r2, #1
 8005938:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800593a:	f7fb ff7b 	bl	8001834 <HAL_GetTick>
 800593e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005940:	e008      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005942:	f7fb ff77 	bl	8001834 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b02      	cmp	r3, #2
 800594e:	d901      	bls.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e129      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005954:	4b5a      	ldr	r3, [pc, #360]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0f0      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0304 	and.w	r3, r3, #4
 8005968:	2b00      	cmp	r3, #0
 800596a:	d105      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005974:	2b00      	cmp	r3, #0
 8005976:	d079      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005978:	4b52      	ldr	r3, [pc, #328]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800597e:	f7fb ff59 	bl	8001834 <HAL_GetTick>
 8005982:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005984:	e008      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005986:	f7fb ff55 	bl	8001834 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d901      	bls.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e107      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005998:	4b49      	ldr	r3, [pc, #292]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059a4:	d0ef      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d020      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80059b2:	4b43      	ldr	r3, [pc, #268]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059b8:	0f1b      	lsrs	r3, r3, #28
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	019a      	lsls	r2, r3, #6
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	061b      	lsls	r3, r3, #24
 80059cc:	431a      	orrs	r2, r3
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	071b      	lsls	r3, r3, #28
 80059d2:	493b      	ldr	r1, [pc, #236]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80059da:	4b39      	ldr	r3, [pc, #228]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059e0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	3b01      	subs	r3, #1
 80059ea:	021b      	lsls	r3, r3, #8
 80059ec:	4934      	ldr	r1, [pc, #208]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01e      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a00:	4b2f      	ldr	r3, [pc, #188]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a06:	0e1b      	lsrs	r3, r3, #24
 8005a08:	f003 030f 	and.w	r3, r3, #15
 8005a0c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	019a      	lsls	r2, r3, #6
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	061b      	lsls	r3, r3, #24
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	071b      	lsls	r3, r3, #28
 8005a20:	4927      	ldr	r1, [pc, #156]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005a28:	4b25      	ldr	r3, [pc, #148]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a2e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a36:	4922      	ldr	r1, [pc, #136]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005a3e:	4b21      	ldr	r3, [pc, #132]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005a40:	2201      	movs	r2, #1
 8005a42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a44:	f7fb fef6 	bl	8001834 <HAL_GetTick>
 8005a48:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a4a:	e008      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005a4c:	f7fb fef2 	bl	8001834 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e0a4      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a5e:	4b18      	ldr	r3, [pc, #96]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a6a:	d1ef      	bne.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0320 	and.w	r3, r3, #32
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 808b 	beq.w	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60fb      	str	r3, [r7, #12]
 8005a7e:	4b10      	ldr	r3, [pc, #64]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a82:	4a0f      	ldr	r2, [pc, #60]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005a96:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a0b      	ldr	r2, [pc, #44]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005aa0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005aa2:	f7fb fec7 	bl	8001834 <HAL_GetTick>
 8005aa6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005aa8:	e010      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005aaa:	f7fb fec3 	bl	8001834 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d909      	bls.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e075      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005abc:	42470068 	.word	0x42470068
 8005ac0:	40023800 	.word	0x40023800
 8005ac4:	42470070 	.word	0x42470070
 8005ac8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005acc:	4b38      	ldr	r3, [pc, #224]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0e8      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ad8:	4b36      	ldr	r3, [pc, #216]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005adc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ae0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d02f      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d028      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005af6:	4b2f      	ldr	r3, [pc, #188]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005afa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005afe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b00:	4b2d      	ldr	r3, [pc, #180]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005b02:	2201      	movs	r2, #1
 8005b04:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b06:	4b2c      	ldr	r3, [pc, #176]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b0c:	4a29      	ldr	r2, [pc, #164]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b12:	4b28      	ldr	r3, [pc, #160]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d114      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b1e:	f7fb fe89 	bl	8001834 <HAL_GetTick>
 8005b22:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b24:	e00a      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b26:	f7fb fe85 	bl	8001834 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e035      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0ee      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b54:	d10d      	bne.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005b56:	4b17      	ldr	r3, [pc, #92]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b62:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005b66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b6a:	4912      	ldr	r1, [pc, #72]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	608b      	str	r3, [r1, #8]
 8005b70:	e005      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005b72:	4b10      	ldr	r3, [pc, #64]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	4a0f      	ldr	r2, [pc, #60]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b78:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005b7c:	6093      	str	r3, [r2, #8]
 8005b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b80:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b8a:	490a      	ldr	r1, [pc, #40]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0310 	and.w	r3, r3, #16
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d004      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005ba2:	4b06      	ldr	r3, [pc, #24]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005ba4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3718      	adds	r7, #24
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40007000 	.word	0x40007000
 8005bb4:	40023800 	.word	0x40023800
 8005bb8:	42470e40 	.word	0x42470e40
 8005bbc:	424711e0 	.word	0x424711e0

08005bc0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e025      	b.n	8005c20 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d106      	bne.n	8005bee <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f7fb fcb1 	bl	8001550 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2202      	movs	r2, #2
 8005bf2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4610      	mov	r0, r2
 8005c02:	f001 f91b 	bl	8006e3c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6818      	ldr	r0, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	f001 f970 	bl	8006ef6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e07b      	b.n	8005d32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d108      	bne.n	8005c54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c4a:	d009      	beq.n	8005c60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	61da      	str	r2, [r3, #28]
 8005c52:	e005      	b.n	8005c60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7fb facc 	bl	8001218 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce4:	ea42 0103 	orr.w	r1, r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	0c1b      	lsrs	r3, r3, #16
 8005cfe:	f003 0104 	and.w	r1, r3, #4
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d06:	f003 0210 	and.w	r2, r3, #16
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69da      	ldr	r2, [r3, #28]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b082      	sub	sp, #8
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e041      	b.n	8005dd0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d106      	bne.n	8005d66 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7fb faa1 	bl	80012a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2202      	movs	r2, #2
 8005d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	3304      	adds	r3, #4
 8005d76:	4619      	mov	r1, r3
 8005d78:	4610      	mov	r0, r2
 8005d7a:	f000 fa7d 	bl	8006278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3708      	adds	r7, #8
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d001      	beq.n	8005df0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e04e      	b.n	8005e8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0201 	orr.w	r2, r2, #1
 8005e06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a23      	ldr	r2, [pc, #140]	@ (8005e9c <HAL_TIM_Base_Start_IT+0xc4>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d022      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x80>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e1a:	d01d      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x80>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a1f      	ldr	r2, [pc, #124]	@ (8005ea0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d018      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x80>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ea4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d013      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x80>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a1c      	ldr	r2, [pc, #112]	@ (8005ea8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00e      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x80>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a1b      	ldr	r2, [pc, #108]	@ (8005eac <HAL_TIM_Base_Start_IT+0xd4>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d009      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x80>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a19      	ldr	r2, [pc, #100]	@ (8005eb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d004      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x80>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a18      	ldr	r2, [pc, #96]	@ (8005eb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d111      	bne.n	8005e7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2b06      	cmp	r3, #6
 8005e68:	d010      	beq.n	8005e8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f042 0201 	orr.w	r2, r2, #1
 8005e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e7a:	e007      	b.n	8005e8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	40010000 	.word	0x40010000
 8005ea0:	40000400 	.word	0x40000400
 8005ea4:	40000800 	.word	0x40000800
 8005ea8:	40000c00 	.word	0x40000c00
 8005eac:	40010400 	.word	0x40010400
 8005eb0:	40014000 	.word	0x40014000
 8005eb4:	40001800 	.word	0x40001800

08005eb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d020      	beq.n	8005f1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d01b      	beq.n	8005f1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f06f 0202 	mvn.w	r2, #2
 8005eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f999 	bl	800623a <HAL_TIM_IC_CaptureCallback>
 8005f08:	e005      	b.n	8005f16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f98b 	bl	8006226 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f99c 	bl	800624e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f003 0304 	and.w	r3, r3, #4
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d020      	beq.n	8005f68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f003 0304 	and.w	r3, r3, #4
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d01b      	beq.n	8005f68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f06f 0204 	mvn.w	r2, #4
 8005f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f973 	bl	800623a <HAL_TIM_IC_CaptureCallback>
 8005f54:	e005      	b.n	8005f62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f965 	bl	8006226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f976 	bl	800624e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f003 0308 	and.w	r3, r3, #8
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d020      	beq.n	8005fb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f003 0308 	and.w	r3, r3, #8
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01b      	beq.n	8005fb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f06f 0208 	mvn.w	r2, #8
 8005f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2204      	movs	r2, #4
 8005f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f94d 	bl	800623a <HAL_TIM_IC_CaptureCallback>
 8005fa0:	e005      	b.n	8005fae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f93f 	bl	8006226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f950 	bl	800624e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f003 0310 	and.w	r3, r3, #16
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d020      	beq.n	8006000 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f003 0310 	and.w	r3, r3, #16
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d01b      	beq.n	8006000 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f06f 0210 	mvn.w	r2, #16
 8005fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2208      	movs	r2, #8
 8005fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f927 	bl	800623a <HAL_TIM_IC_CaptureCallback>
 8005fec:	e005      	b.n	8005ffa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f919 	bl	8006226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f92a 	bl	800624e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00c      	beq.n	8006024 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b00      	cmp	r3, #0
 8006012:	d007      	beq.n	8006024 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f06f 0201 	mvn.w	r2, #1
 800601c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7fa fed2 	bl	8000dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00c      	beq.n	8006048 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006034:	2b00      	cmp	r3, #0
 8006036:	d007      	beq.n	8006048 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fae4 	bl	8006610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00c      	beq.n	800606c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006058:	2b00      	cmp	r3, #0
 800605a:	d007      	beq.n	800606c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f8fb 	bl	8006262 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	f003 0320 	and.w	r3, r3, #32
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00c      	beq.n	8006090 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f003 0320 	and.w	r3, r3, #32
 800607c:	2b00      	cmp	r3, #0
 800607e:	d007      	beq.n	8006090 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f06f 0220 	mvn.w	r2, #32
 8006088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fab6 	bl	80065fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006090:	bf00      	nop
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d101      	bne.n	80060b4 <HAL_TIM_ConfigClockSource+0x1c>
 80060b0:	2302      	movs	r3, #2
 80060b2:	e0b4      	b.n	800621e <HAL_TIM_ConfigClockSource+0x186>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80060d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060ec:	d03e      	beq.n	800616c <HAL_TIM_ConfigClockSource+0xd4>
 80060ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060f2:	f200 8087 	bhi.w	8006204 <HAL_TIM_ConfigClockSource+0x16c>
 80060f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060fa:	f000 8086 	beq.w	800620a <HAL_TIM_ConfigClockSource+0x172>
 80060fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006102:	d87f      	bhi.n	8006204 <HAL_TIM_ConfigClockSource+0x16c>
 8006104:	2b70      	cmp	r3, #112	@ 0x70
 8006106:	d01a      	beq.n	800613e <HAL_TIM_ConfigClockSource+0xa6>
 8006108:	2b70      	cmp	r3, #112	@ 0x70
 800610a:	d87b      	bhi.n	8006204 <HAL_TIM_ConfigClockSource+0x16c>
 800610c:	2b60      	cmp	r3, #96	@ 0x60
 800610e:	d050      	beq.n	80061b2 <HAL_TIM_ConfigClockSource+0x11a>
 8006110:	2b60      	cmp	r3, #96	@ 0x60
 8006112:	d877      	bhi.n	8006204 <HAL_TIM_ConfigClockSource+0x16c>
 8006114:	2b50      	cmp	r3, #80	@ 0x50
 8006116:	d03c      	beq.n	8006192 <HAL_TIM_ConfigClockSource+0xfa>
 8006118:	2b50      	cmp	r3, #80	@ 0x50
 800611a:	d873      	bhi.n	8006204 <HAL_TIM_ConfigClockSource+0x16c>
 800611c:	2b40      	cmp	r3, #64	@ 0x40
 800611e:	d058      	beq.n	80061d2 <HAL_TIM_ConfigClockSource+0x13a>
 8006120:	2b40      	cmp	r3, #64	@ 0x40
 8006122:	d86f      	bhi.n	8006204 <HAL_TIM_ConfigClockSource+0x16c>
 8006124:	2b30      	cmp	r3, #48	@ 0x30
 8006126:	d064      	beq.n	80061f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006128:	2b30      	cmp	r3, #48	@ 0x30
 800612a:	d86b      	bhi.n	8006204 <HAL_TIM_ConfigClockSource+0x16c>
 800612c:	2b20      	cmp	r3, #32
 800612e:	d060      	beq.n	80061f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006130:	2b20      	cmp	r3, #32
 8006132:	d867      	bhi.n	8006204 <HAL_TIM_ConfigClockSource+0x16c>
 8006134:	2b00      	cmp	r3, #0
 8006136:	d05c      	beq.n	80061f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006138:	2b10      	cmp	r3, #16
 800613a:	d05a      	beq.n	80061f2 <HAL_TIM_ConfigClockSource+0x15a>
 800613c:	e062      	b.n	8006204 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800614e:	f000 f9b9 	bl	80064c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006160:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	609a      	str	r2, [r3, #8]
      break;
 800616a:	e04f      	b.n	800620c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800617c:	f000 f9a2 	bl	80064c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689a      	ldr	r2, [r3, #8]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800618e:	609a      	str	r2, [r3, #8]
      break;
 8006190:	e03c      	b.n	800620c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800619e:	461a      	mov	r2, r3
 80061a0:	f000 f916 	bl	80063d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2150      	movs	r1, #80	@ 0x50
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 f96f 	bl	800648e <TIM_ITRx_SetConfig>
      break;
 80061b0:	e02c      	b.n	800620c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061be:	461a      	mov	r2, r3
 80061c0:	f000 f935 	bl	800642e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2160      	movs	r1, #96	@ 0x60
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 f95f 	bl	800648e <TIM_ITRx_SetConfig>
      break;
 80061d0:	e01c      	b.n	800620c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061de:	461a      	mov	r2, r3
 80061e0:	f000 f8f6 	bl	80063d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2140      	movs	r1, #64	@ 0x40
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 f94f 	bl	800648e <TIM_ITRx_SetConfig>
      break;
 80061f0:	e00c      	b.n	800620c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4619      	mov	r1, r3
 80061fc:	4610      	mov	r0, r2
 80061fe:	f000 f946 	bl	800648e <TIM_ITRx_SetConfig>
      break;
 8006202:	e003      	b.n	800620c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	73fb      	strb	r3, [r7, #15]
      break;
 8006208:	e000      	b.n	800620c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800620a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800621c:	7bfb      	ldrb	r3, [r7, #15]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006226:	b480      	push	{r7}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800622e:	bf00      	nop
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800623a:	b480      	push	{r7}
 800623c:	b083      	sub	sp, #12
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006242:	bf00      	nop
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800624e:	b480      	push	{r7}
 8006250:	b083      	sub	sp, #12
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006256:	bf00      	nop
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
	...

08006278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a46      	ldr	r2, [pc, #280]	@ (80063a4 <TIM_Base_SetConfig+0x12c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d013      	beq.n	80062b8 <TIM_Base_SetConfig+0x40>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006296:	d00f      	beq.n	80062b8 <TIM_Base_SetConfig+0x40>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a43      	ldr	r2, [pc, #268]	@ (80063a8 <TIM_Base_SetConfig+0x130>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d00b      	beq.n	80062b8 <TIM_Base_SetConfig+0x40>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a42      	ldr	r2, [pc, #264]	@ (80063ac <TIM_Base_SetConfig+0x134>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d007      	beq.n	80062b8 <TIM_Base_SetConfig+0x40>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a41      	ldr	r2, [pc, #260]	@ (80063b0 <TIM_Base_SetConfig+0x138>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d003      	beq.n	80062b8 <TIM_Base_SetConfig+0x40>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a40      	ldr	r2, [pc, #256]	@ (80063b4 <TIM_Base_SetConfig+0x13c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d108      	bne.n	80062ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a35      	ldr	r2, [pc, #212]	@ (80063a4 <TIM_Base_SetConfig+0x12c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d02b      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062d8:	d027      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a32      	ldr	r2, [pc, #200]	@ (80063a8 <TIM_Base_SetConfig+0x130>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d023      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a31      	ldr	r2, [pc, #196]	@ (80063ac <TIM_Base_SetConfig+0x134>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d01f      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a30      	ldr	r2, [pc, #192]	@ (80063b0 <TIM_Base_SetConfig+0x138>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d01b      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a2f      	ldr	r2, [pc, #188]	@ (80063b4 <TIM_Base_SetConfig+0x13c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d017      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a2e      	ldr	r2, [pc, #184]	@ (80063b8 <TIM_Base_SetConfig+0x140>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d013      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a2d      	ldr	r2, [pc, #180]	@ (80063bc <TIM_Base_SetConfig+0x144>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d00f      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a2c      	ldr	r2, [pc, #176]	@ (80063c0 <TIM_Base_SetConfig+0x148>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00b      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a2b      	ldr	r2, [pc, #172]	@ (80063c4 <TIM_Base_SetConfig+0x14c>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d007      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a2a      	ldr	r2, [pc, #168]	@ (80063c8 <TIM_Base_SetConfig+0x150>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d003      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a29      	ldr	r2, [pc, #164]	@ (80063cc <TIM_Base_SetConfig+0x154>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d108      	bne.n	800633c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	4313      	orrs	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	4313      	orrs	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a10      	ldr	r2, [pc, #64]	@ (80063a4 <TIM_Base_SetConfig+0x12c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d003      	beq.n	8006370 <TIM_Base_SetConfig+0xf8>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a12      	ldr	r2, [pc, #72]	@ (80063b4 <TIM_Base_SetConfig+0x13c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d103      	bne.n	8006378 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	691a      	ldr	r2, [r3, #16]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b01      	cmp	r3, #1
 8006388:	d105      	bne.n	8006396 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f023 0201 	bic.w	r2, r3, #1
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	611a      	str	r2, [r3, #16]
  }
}
 8006396:	bf00      	nop
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	40010000 	.word	0x40010000
 80063a8:	40000400 	.word	0x40000400
 80063ac:	40000800 	.word	0x40000800
 80063b0:	40000c00 	.word	0x40000c00
 80063b4:	40010400 	.word	0x40010400
 80063b8:	40014000 	.word	0x40014000
 80063bc:	40014400 	.word	0x40014400
 80063c0:	40014800 	.word	0x40014800
 80063c4:	40001800 	.word	0x40001800
 80063c8:	40001c00 	.word	0x40001c00
 80063cc:	40002000 	.word	0x40002000

080063d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	f023 0201 	bic.w	r2, r3, #1
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	011b      	lsls	r3, r3, #4
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	4313      	orrs	r3, r2
 8006404:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f023 030a 	bic.w	r3, r3, #10
 800640c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	4313      	orrs	r3, r2
 8006414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	621a      	str	r2, [r3, #32]
}
 8006422:	bf00      	nop
 8006424:	371c      	adds	r7, #28
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800642e:	b480      	push	{r7}
 8006430:	b087      	sub	sp, #28
 8006432:	af00      	add	r7, sp, #0
 8006434:	60f8      	str	r0, [r7, #12]
 8006436:	60b9      	str	r1, [r7, #8]
 8006438:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	f023 0210 	bic.w	r2, r3, #16
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006458:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	031b      	lsls	r3, r3, #12
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4313      	orrs	r3, r2
 8006462:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800646a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	011b      	lsls	r3, r3, #4
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	4313      	orrs	r3, r2
 8006474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	621a      	str	r2, [r3, #32]
}
 8006482:	bf00      	nop
 8006484:	371c      	adds	r7, #28
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800648e:	b480      	push	{r7}
 8006490:	b085      	sub	sp, #20
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
 8006496:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	f043 0307 	orr.w	r3, r3, #7
 80064b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	609a      	str	r2, [r3, #8]
}
 80064b8:	bf00      	nop
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b087      	sub	sp, #28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
 80064d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	021a      	lsls	r2, r3, #8
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	431a      	orrs	r2, r3
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	609a      	str	r2, [r3, #8]
}
 80064f8:	bf00      	nop
 80064fa:	371c      	adds	r7, #28
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006514:	2b01      	cmp	r3, #1
 8006516:	d101      	bne.n	800651c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006518:	2302      	movs	r3, #2
 800651a:	e05a      	b.n	80065d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006542:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a21      	ldr	r2, [pc, #132]	@ (80065e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d022      	beq.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006568:	d01d      	beq.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a1d      	ldr	r2, [pc, #116]	@ (80065e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d018      	beq.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a1b      	ldr	r2, [pc, #108]	@ (80065e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d013      	beq.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a1a      	ldr	r2, [pc, #104]	@ (80065ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d00e      	beq.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a18      	ldr	r2, [pc, #96]	@ (80065f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d009      	beq.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a17      	ldr	r2, [pc, #92]	@ (80065f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d004      	beq.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a15      	ldr	r2, [pc, #84]	@ (80065f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d10c      	bne.n	80065c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	40010000 	.word	0x40010000
 80065e4:	40000400 	.word	0x40000400
 80065e8:	40000800 	.word	0x40000800
 80065ec:	40000c00 	.word	0x40000c00
 80065f0:	40010400 	.word	0x40010400
 80065f4:	40014000 	.word	0x40014000
 80065f8:	40001800 	.word	0x40001800

080065fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e042      	b.n	80066bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d106      	bne.n	8006650 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7fa fe4e 	bl	80012ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2224      	movs	r2, #36	@ 0x24
 8006654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006666:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f973 	bl	8006954 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	691a      	ldr	r2, [r3, #16]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800667c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	695a      	ldr	r2, [r3, #20]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800668c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68da      	ldr	r2, [r3, #12]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800669c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2220      	movs	r2, #32
 80066b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b08a      	sub	sp, #40	@ 0x28
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	603b      	str	r3, [r7, #0]
 80066d0:	4613      	mov	r3, r2
 80066d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b20      	cmp	r3, #32
 80066e2:	d175      	bne.n	80067d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <HAL_UART_Transmit+0x2c>
 80066ea:	88fb      	ldrh	r3, [r7, #6]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e06e      	b.n	80067d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2221      	movs	r2, #33	@ 0x21
 80066fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006702:	f7fb f897 	bl	8001834 <HAL_GetTick>
 8006706:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	88fa      	ldrh	r2, [r7, #6]
 800670c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	88fa      	ldrh	r2, [r7, #6]
 8006712:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800671c:	d108      	bne.n	8006730 <HAL_UART_Transmit+0x6c>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d104      	bne.n	8006730 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006726:	2300      	movs	r3, #0
 8006728:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	61bb      	str	r3, [r7, #24]
 800672e:	e003      	b.n	8006738 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006734:	2300      	movs	r3, #0
 8006736:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006738:	e02e      	b.n	8006798 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	2200      	movs	r2, #0
 8006742:	2180      	movs	r1, #128	@ 0x80
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 f848 	bl	80067da <UART_WaitOnFlagUntilTimeout>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d005      	beq.n	800675c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2220      	movs	r2, #32
 8006754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e03a      	b.n	80067d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10b      	bne.n	800677a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	461a      	mov	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006770:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	3302      	adds	r3, #2
 8006776:	61bb      	str	r3, [r7, #24]
 8006778:	e007      	b.n	800678a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	781a      	ldrb	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	3301      	adds	r3, #1
 8006788:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800678e:	b29b      	uxth	r3, r3
 8006790:	3b01      	subs	r3, #1
 8006792:	b29a      	uxth	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800679c:	b29b      	uxth	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1cb      	bne.n	800673a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	2200      	movs	r2, #0
 80067aa:	2140      	movs	r1, #64	@ 0x40
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f000 f814 	bl	80067da <UART_WaitOnFlagUntilTimeout>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d005      	beq.n	80067c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e006      	b.n	80067d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80067cc:	2300      	movs	r3, #0
 80067ce:	e000      	b.n	80067d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80067d0:	2302      	movs	r3, #2
  }
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3720      	adds	r7, #32
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b086      	sub	sp, #24
 80067de:	af00      	add	r7, sp, #0
 80067e0:	60f8      	str	r0, [r7, #12]
 80067e2:	60b9      	str	r1, [r7, #8]
 80067e4:	603b      	str	r3, [r7, #0]
 80067e6:	4613      	mov	r3, r2
 80067e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ea:	e03b      	b.n	8006864 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067f2:	d037      	beq.n	8006864 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067f4:	f7fb f81e 	bl	8001834 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	6a3a      	ldr	r2, [r7, #32]
 8006800:	429a      	cmp	r2, r3
 8006802:	d302      	bcc.n	800680a <UART_WaitOnFlagUntilTimeout+0x30>
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e03a      	b.n	8006884 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f003 0304 	and.w	r3, r3, #4
 8006818:	2b00      	cmp	r3, #0
 800681a:	d023      	beq.n	8006864 <UART_WaitOnFlagUntilTimeout+0x8a>
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	2b80      	cmp	r3, #128	@ 0x80
 8006820:	d020      	beq.n	8006864 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2b40      	cmp	r3, #64	@ 0x40
 8006826:	d01d      	beq.n	8006864 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0308 	and.w	r3, r3, #8
 8006832:	2b08      	cmp	r3, #8
 8006834:	d116      	bne.n	8006864 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006836:	2300      	movs	r3, #0
 8006838:	617b      	str	r3, [r7, #20]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	617b      	str	r3, [r7, #20]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	617b      	str	r3, [r7, #20]
 800684a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f000 f81d 	bl	800688c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2208      	movs	r2, #8
 8006856:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e00f      	b.n	8006884 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	4013      	ands	r3, r2
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	429a      	cmp	r2, r3
 8006872:	bf0c      	ite	eq
 8006874:	2301      	moveq	r3, #1
 8006876:	2300      	movne	r3, #0
 8006878:	b2db      	uxtb	r3, r3
 800687a:	461a      	mov	r2, r3
 800687c:	79fb      	ldrb	r3, [r7, #7]
 800687e:	429a      	cmp	r2, r3
 8006880:	d0b4      	beq.n	80067ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3718      	adds	r7, #24
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800688c:	b480      	push	{r7}
 800688e:	b095      	sub	sp, #84	@ 0x54
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	330c      	adds	r3, #12
 800689a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800689e:	e853 3f00 	ldrex	r3, [r3]
 80068a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	330c      	adds	r3, #12
 80068b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80068b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068bc:	e841 2300 	strex	r3, r2, [r1]
 80068c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e5      	bne.n	8006894 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3314      	adds	r3, #20
 80068ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d0:	6a3b      	ldr	r3, [r7, #32]
 80068d2:	e853 3f00 	ldrex	r3, [r3]
 80068d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	f023 0301 	bic.w	r3, r3, #1
 80068de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3314      	adds	r3, #20
 80068e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068f0:	e841 2300 	strex	r3, r2, [r1]
 80068f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1e5      	bne.n	80068c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006900:	2b01      	cmp	r3, #1
 8006902:	d119      	bne.n	8006938 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	330c      	adds	r3, #12
 800690a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	e853 3f00 	ldrex	r3, [r3]
 8006912:	60bb      	str	r3, [r7, #8]
   return(result);
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	f023 0310 	bic.w	r3, r3, #16
 800691a:	647b      	str	r3, [r7, #68]	@ 0x44
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	330c      	adds	r3, #12
 8006922:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006924:	61ba      	str	r2, [r7, #24]
 8006926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006928:	6979      	ldr	r1, [r7, #20]
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	e841 2300 	strex	r3, r2, [r1]
 8006930:	613b      	str	r3, [r7, #16]
   return(result);
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1e5      	bne.n	8006904 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2220      	movs	r2, #32
 800693c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006946:	bf00      	nop
 8006948:	3754      	adds	r7, #84	@ 0x54
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
	...

08006954 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006958:	b0c0      	sub	sp, #256	@ 0x100
 800695a:	af00      	add	r7, sp, #0
 800695c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800696c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006970:	68d9      	ldr	r1, [r3, #12]
 8006972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	ea40 0301 	orr.w	r3, r0, r1
 800697c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800697e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	431a      	orrs	r2, r3
 800698c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	431a      	orrs	r2, r3
 8006994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	4313      	orrs	r3, r2
 800699c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80069ac:	f021 010c 	bic.w	r1, r1, #12
 80069b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80069ba:	430b      	orrs	r3, r1
 80069bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80069ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ce:	6999      	ldr	r1, [r3, #24]
 80069d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	ea40 0301 	orr.w	r3, r0, r1
 80069da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	4b8f      	ldr	r3, [pc, #572]	@ (8006c20 <UART_SetConfig+0x2cc>)
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d005      	beq.n	80069f4 <UART_SetConfig+0xa0>
 80069e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	4b8d      	ldr	r3, [pc, #564]	@ (8006c24 <UART_SetConfig+0x2d0>)
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d104      	bne.n	80069fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80069f4:	f7fe fede 	bl	80057b4 <HAL_RCC_GetPCLK2Freq>
 80069f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80069fc:	e003      	b.n	8006a06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80069fe:	f7fe fec5 	bl	800578c <HAL_RCC_GetPCLK1Freq>
 8006a02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a0a:	69db      	ldr	r3, [r3, #28]
 8006a0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a10:	f040 810c 	bne.w	8006c2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006a22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006a26:	4622      	mov	r2, r4
 8006a28:	462b      	mov	r3, r5
 8006a2a:	1891      	adds	r1, r2, r2
 8006a2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006a2e:	415b      	adcs	r3, r3
 8006a30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006a36:	4621      	mov	r1, r4
 8006a38:	eb12 0801 	adds.w	r8, r2, r1
 8006a3c:	4629      	mov	r1, r5
 8006a3e:	eb43 0901 	adc.w	r9, r3, r1
 8006a42:	f04f 0200 	mov.w	r2, #0
 8006a46:	f04f 0300 	mov.w	r3, #0
 8006a4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a56:	4690      	mov	r8, r2
 8006a58:	4699      	mov	r9, r3
 8006a5a:	4623      	mov	r3, r4
 8006a5c:	eb18 0303 	adds.w	r3, r8, r3
 8006a60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a64:	462b      	mov	r3, r5
 8006a66:	eb49 0303 	adc.w	r3, r9, r3
 8006a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006a7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006a7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006a82:	460b      	mov	r3, r1
 8006a84:	18db      	adds	r3, r3, r3
 8006a86:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a88:	4613      	mov	r3, r2
 8006a8a:	eb42 0303 	adc.w	r3, r2, r3
 8006a8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006a94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006a98:	f7f9 fbaa 	bl	80001f0 <__aeabi_uldivmod>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	4b61      	ldr	r3, [pc, #388]	@ (8006c28 <UART_SetConfig+0x2d4>)
 8006aa2:	fba3 2302 	umull	r2, r3, r3, r2
 8006aa6:	095b      	lsrs	r3, r3, #5
 8006aa8:	011c      	lsls	r4, r3, #4
 8006aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ab4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006ab8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006abc:	4642      	mov	r2, r8
 8006abe:	464b      	mov	r3, r9
 8006ac0:	1891      	adds	r1, r2, r2
 8006ac2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ac4:	415b      	adcs	r3, r3
 8006ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ac8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006acc:	4641      	mov	r1, r8
 8006ace:	eb12 0a01 	adds.w	sl, r2, r1
 8006ad2:	4649      	mov	r1, r9
 8006ad4:	eb43 0b01 	adc.w	fp, r3, r1
 8006ad8:	f04f 0200 	mov.w	r2, #0
 8006adc:	f04f 0300 	mov.w	r3, #0
 8006ae0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ae4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ae8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006aec:	4692      	mov	sl, r2
 8006aee:	469b      	mov	fp, r3
 8006af0:	4643      	mov	r3, r8
 8006af2:	eb1a 0303 	adds.w	r3, sl, r3
 8006af6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006afa:	464b      	mov	r3, r9
 8006afc:	eb4b 0303 	adc.w	r3, fp, r3
 8006b00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006b14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b18:	460b      	mov	r3, r1
 8006b1a:	18db      	adds	r3, r3, r3
 8006b1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b1e:	4613      	mov	r3, r2
 8006b20:	eb42 0303 	adc.w	r3, r2, r3
 8006b24:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006b2e:	f7f9 fb5f 	bl	80001f0 <__aeabi_uldivmod>
 8006b32:	4602      	mov	r2, r0
 8006b34:	460b      	mov	r3, r1
 8006b36:	4611      	mov	r1, r2
 8006b38:	4b3b      	ldr	r3, [pc, #236]	@ (8006c28 <UART_SetConfig+0x2d4>)
 8006b3a:	fba3 2301 	umull	r2, r3, r3, r1
 8006b3e:	095b      	lsrs	r3, r3, #5
 8006b40:	2264      	movs	r2, #100	@ 0x64
 8006b42:	fb02 f303 	mul.w	r3, r2, r3
 8006b46:	1acb      	subs	r3, r1, r3
 8006b48:	00db      	lsls	r3, r3, #3
 8006b4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006b4e:	4b36      	ldr	r3, [pc, #216]	@ (8006c28 <UART_SetConfig+0x2d4>)
 8006b50:	fba3 2302 	umull	r2, r3, r3, r2
 8006b54:	095b      	lsrs	r3, r3, #5
 8006b56:	005b      	lsls	r3, r3, #1
 8006b58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006b5c:	441c      	add	r4, r3
 8006b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006b6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006b70:	4642      	mov	r2, r8
 8006b72:	464b      	mov	r3, r9
 8006b74:	1891      	adds	r1, r2, r2
 8006b76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006b78:	415b      	adcs	r3, r3
 8006b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006b80:	4641      	mov	r1, r8
 8006b82:	1851      	adds	r1, r2, r1
 8006b84:	6339      	str	r1, [r7, #48]	@ 0x30
 8006b86:	4649      	mov	r1, r9
 8006b88:	414b      	adcs	r3, r1
 8006b8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b8c:	f04f 0200 	mov.w	r2, #0
 8006b90:	f04f 0300 	mov.w	r3, #0
 8006b94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006b98:	4659      	mov	r1, fp
 8006b9a:	00cb      	lsls	r3, r1, #3
 8006b9c:	4651      	mov	r1, sl
 8006b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ba2:	4651      	mov	r1, sl
 8006ba4:	00ca      	lsls	r2, r1, #3
 8006ba6:	4610      	mov	r0, r2
 8006ba8:	4619      	mov	r1, r3
 8006baa:	4603      	mov	r3, r0
 8006bac:	4642      	mov	r2, r8
 8006bae:	189b      	adds	r3, r3, r2
 8006bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006bb4:	464b      	mov	r3, r9
 8006bb6:	460a      	mov	r2, r1
 8006bb8:	eb42 0303 	adc.w	r3, r2, r3
 8006bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006bcc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006bd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	18db      	adds	r3, r3, r3
 8006bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bda:	4613      	mov	r3, r2
 8006bdc:	eb42 0303 	adc.w	r3, r2, r3
 8006be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006be2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006be6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006bea:	f7f9 fb01 	bl	80001f0 <__aeabi_uldivmod>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c28 <UART_SetConfig+0x2d4>)
 8006bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8006bf8:	095b      	lsrs	r3, r3, #5
 8006bfa:	2164      	movs	r1, #100	@ 0x64
 8006bfc:	fb01 f303 	mul.w	r3, r1, r3
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	00db      	lsls	r3, r3, #3
 8006c04:	3332      	adds	r3, #50	@ 0x32
 8006c06:	4a08      	ldr	r2, [pc, #32]	@ (8006c28 <UART_SetConfig+0x2d4>)
 8006c08:	fba2 2303 	umull	r2, r3, r2, r3
 8006c0c:	095b      	lsrs	r3, r3, #5
 8006c0e:	f003 0207 	and.w	r2, r3, #7
 8006c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4422      	add	r2, r4
 8006c1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c1c:	e106      	b.n	8006e2c <UART_SetConfig+0x4d8>
 8006c1e:	bf00      	nop
 8006c20:	40011000 	.word	0x40011000
 8006c24:	40011400 	.word	0x40011400
 8006c28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c30:	2200      	movs	r2, #0
 8006c32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006c3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006c3e:	4642      	mov	r2, r8
 8006c40:	464b      	mov	r3, r9
 8006c42:	1891      	adds	r1, r2, r2
 8006c44:	6239      	str	r1, [r7, #32]
 8006c46:	415b      	adcs	r3, r3
 8006c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c4e:	4641      	mov	r1, r8
 8006c50:	1854      	adds	r4, r2, r1
 8006c52:	4649      	mov	r1, r9
 8006c54:	eb43 0501 	adc.w	r5, r3, r1
 8006c58:	f04f 0200 	mov.w	r2, #0
 8006c5c:	f04f 0300 	mov.w	r3, #0
 8006c60:	00eb      	lsls	r3, r5, #3
 8006c62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c66:	00e2      	lsls	r2, r4, #3
 8006c68:	4614      	mov	r4, r2
 8006c6a:	461d      	mov	r5, r3
 8006c6c:	4643      	mov	r3, r8
 8006c6e:	18e3      	adds	r3, r4, r3
 8006c70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c74:	464b      	mov	r3, r9
 8006c76:	eb45 0303 	adc.w	r3, r5, r3
 8006c7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006c8e:	f04f 0200 	mov.w	r2, #0
 8006c92:	f04f 0300 	mov.w	r3, #0
 8006c96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006c9a:	4629      	mov	r1, r5
 8006c9c:	008b      	lsls	r3, r1, #2
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ca4:	4621      	mov	r1, r4
 8006ca6:	008a      	lsls	r2, r1, #2
 8006ca8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006cac:	f7f9 faa0 	bl	80001f0 <__aeabi_uldivmod>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4b60      	ldr	r3, [pc, #384]	@ (8006e38 <UART_SetConfig+0x4e4>)
 8006cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8006cba:	095b      	lsrs	r3, r3, #5
 8006cbc:	011c      	lsls	r4, r3, #4
 8006cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006cc8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006ccc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006cd0:	4642      	mov	r2, r8
 8006cd2:	464b      	mov	r3, r9
 8006cd4:	1891      	adds	r1, r2, r2
 8006cd6:	61b9      	str	r1, [r7, #24]
 8006cd8:	415b      	adcs	r3, r3
 8006cda:	61fb      	str	r3, [r7, #28]
 8006cdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ce0:	4641      	mov	r1, r8
 8006ce2:	1851      	adds	r1, r2, r1
 8006ce4:	6139      	str	r1, [r7, #16]
 8006ce6:	4649      	mov	r1, r9
 8006ce8:	414b      	adcs	r3, r1
 8006cea:	617b      	str	r3, [r7, #20]
 8006cec:	f04f 0200 	mov.w	r2, #0
 8006cf0:	f04f 0300 	mov.w	r3, #0
 8006cf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cf8:	4659      	mov	r1, fp
 8006cfa:	00cb      	lsls	r3, r1, #3
 8006cfc:	4651      	mov	r1, sl
 8006cfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d02:	4651      	mov	r1, sl
 8006d04:	00ca      	lsls	r2, r1, #3
 8006d06:	4610      	mov	r0, r2
 8006d08:	4619      	mov	r1, r3
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	4642      	mov	r2, r8
 8006d0e:	189b      	adds	r3, r3, r2
 8006d10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d14:	464b      	mov	r3, r9
 8006d16:	460a      	mov	r2, r1
 8006d18:	eb42 0303 	adc.w	r3, r2, r3
 8006d1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006d2c:	f04f 0200 	mov.w	r2, #0
 8006d30:	f04f 0300 	mov.w	r3, #0
 8006d34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006d38:	4649      	mov	r1, r9
 8006d3a:	008b      	lsls	r3, r1, #2
 8006d3c:	4641      	mov	r1, r8
 8006d3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d42:	4641      	mov	r1, r8
 8006d44:	008a      	lsls	r2, r1, #2
 8006d46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006d4a:	f7f9 fa51 	bl	80001f0 <__aeabi_uldivmod>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	460b      	mov	r3, r1
 8006d52:	4611      	mov	r1, r2
 8006d54:	4b38      	ldr	r3, [pc, #224]	@ (8006e38 <UART_SetConfig+0x4e4>)
 8006d56:	fba3 2301 	umull	r2, r3, r3, r1
 8006d5a:	095b      	lsrs	r3, r3, #5
 8006d5c:	2264      	movs	r2, #100	@ 0x64
 8006d5e:	fb02 f303 	mul.w	r3, r2, r3
 8006d62:	1acb      	subs	r3, r1, r3
 8006d64:	011b      	lsls	r3, r3, #4
 8006d66:	3332      	adds	r3, #50	@ 0x32
 8006d68:	4a33      	ldr	r2, [pc, #204]	@ (8006e38 <UART_SetConfig+0x4e4>)
 8006d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d6e:	095b      	lsrs	r3, r3, #5
 8006d70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d74:	441c      	add	r4, r3
 8006d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006d80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006d84:	4642      	mov	r2, r8
 8006d86:	464b      	mov	r3, r9
 8006d88:	1891      	adds	r1, r2, r2
 8006d8a:	60b9      	str	r1, [r7, #8]
 8006d8c:	415b      	adcs	r3, r3
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d94:	4641      	mov	r1, r8
 8006d96:	1851      	adds	r1, r2, r1
 8006d98:	6039      	str	r1, [r7, #0]
 8006d9a:	4649      	mov	r1, r9
 8006d9c:	414b      	adcs	r3, r1
 8006d9e:	607b      	str	r3, [r7, #4]
 8006da0:	f04f 0200 	mov.w	r2, #0
 8006da4:	f04f 0300 	mov.w	r3, #0
 8006da8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006dac:	4659      	mov	r1, fp
 8006dae:	00cb      	lsls	r3, r1, #3
 8006db0:	4651      	mov	r1, sl
 8006db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006db6:	4651      	mov	r1, sl
 8006db8:	00ca      	lsls	r2, r1, #3
 8006dba:	4610      	mov	r0, r2
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	4642      	mov	r2, r8
 8006dc2:	189b      	adds	r3, r3, r2
 8006dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006dc6:	464b      	mov	r3, r9
 8006dc8:	460a      	mov	r2, r1
 8006dca:	eb42 0303 	adc.w	r3, r2, r3
 8006dce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006dda:	667a      	str	r2, [r7, #100]	@ 0x64
 8006ddc:	f04f 0200 	mov.w	r2, #0
 8006de0:	f04f 0300 	mov.w	r3, #0
 8006de4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006de8:	4649      	mov	r1, r9
 8006dea:	008b      	lsls	r3, r1, #2
 8006dec:	4641      	mov	r1, r8
 8006dee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006df2:	4641      	mov	r1, r8
 8006df4:	008a      	lsls	r2, r1, #2
 8006df6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006dfa:	f7f9 f9f9 	bl	80001f0 <__aeabi_uldivmod>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	460b      	mov	r3, r1
 8006e02:	4b0d      	ldr	r3, [pc, #52]	@ (8006e38 <UART_SetConfig+0x4e4>)
 8006e04:	fba3 1302 	umull	r1, r3, r3, r2
 8006e08:	095b      	lsrs	r3, r3, #5
 8006e0a:	2164      	movs	r1, #100	@ 0x64
 8006e0c:	fb01 f303 	mul.w	r3, r1, r3
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	011b      	lsls	r3, r3, #4
 8006e14:	3332      	adds	r3, #50	@ 0x32
 8006e16:	4a08      	ldr	r2, [pc, #32]	@ (8006e38 <UART_SetConfig+0x4e4>)
 8006e18:	fba2 2303 	umull	r2, r3, r2, r3
 8006e1c:	095b      	lsrs	r3, r3, #5
 8006e1e:	f003 020f 	and.w	r2, r3, #15
 8006e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4422      	add	r2, r4
 8006e2a:	609a      	str	r2, [r3, #8]
}
 8006e2c:	bf00      	nop
 8006e2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006e32:	46bd      	mov	sp, r7
 8006e34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e38:	51eb851f 	.word	0x51eb851f

08006e3c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d123      	bne.n	8006e96 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006e56:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	6851      	ldr	r1, [r2, #4]
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	6892      	ldr	r2, [r2, #8]
 8006e62:	4311      	orrs	r1, r2
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	68d2      	ldr	r2, [r2, #12]
 8006e68:	4311      	orrs	r1, r2
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	6912      	ldr	r2, [r2, #16]
 8006e6e:	4311      	orrs	r1, r2
 8006e70:	683a      	ldr	r2, [r7, #0]
 8006e72:	6952      	ldr	r2, [r2, #20]
 8006e74:	4311      	orrs	r1, r2
 8006e76:	683a      	ldr	r2, [r7, #0]
 8006e78:	6992      	ldr	r2, [r2, #24]
 8006e7a:	4311      	orrs	r1, r2
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	69d2      	ldr	r2, [r2, #28]
 8006e80:	4311      	orrs	r1, r2
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	6a12      	ldr	r2, [r2, #32]
 8006e86:	4311      	orrs	r1, r2
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	431a      	orrs	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	e028      	b.n	8006ee8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	69d9      	ldr	r1, [r3, #28]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	4319      	orrs	r1, r3
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eac:	430b      	orrs	r3, r1
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006ebc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	6851      	ldr	r1, [r2, #4]
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	6892      	ldr	r2, [r2, #8]
 8006ec8:	4311      	orrs	r1, r2
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	68d2      	ldr	r2, [r2, #12]
 8006ece:	4311      	orrs	r1, r2
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	6912      	ldr	r2, [r2, #16]
 8006ed4:	4311      	orrs	r1, r2
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	6952      	ldr	r2, [r2, #20]
 8006eda:	4311      	orrs	r1, r2
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	6992      	ldr	r2, [r2, #24]
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b085      	sub	sp, #20
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	60f8      	str	r0, [r7, #12]
 8006efe:	60b9      	str	r1, [r7, #8]
 8006f00:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d128      	bne.n	8006f5a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	1e59      	subs	r1, r3, #1
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	011b      	lsls	r3, r3, #4
 8006f1e:	4319      	orrs	r1, r3
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	3b01      	subs	r3, #1
 8006f26:	021b      	lsls	r3, r3, #8
 8006f28:	4319      	orrs	r1, r3
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	031b      	lsls	r3, r3, #12
 8006f32:	4319      	orrs	r1, r3
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	041b      	lsls	r3, r3, #16
 8006f3c:	4319      	orrs	r1, r3
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	051b      	lsls	r3, r3, #20
 8006f46:	4319      	orrs	r1, r3
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	061b      	lsls	r3, r3, #24
 8006f50:	430b      	orrs	r3, r1
 8006f52:	431a      	orrs	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	609a      	str	r2, [r3, #8]
 8006f58:	e02f      	b.n	8006fba <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006f62:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	68d2      	ldr	r2, [r2, #12]
 8006f6a:	3a01      	subs	r2, #1
 8006f6c:	0311      	lsls	r1, r2, #12
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	6952      	ldr	r2, [r2, #20]
 8006f72:	3a01      	subs	r2, #1
 8006f74:	0512      	lsls	r2, r2, #20
 8006f76:	430a      	orrs	r2, r1
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	1e59      	subs	r1, r3, #1
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	3b01      	subs	r3, #1
 8006f92:	011b      	lsls	r3, r3, #4
 8006f94:	4319      	orrs	r1, r3
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	021b      	lsls	r3, r3, #8
 8006f9e:	4319      	orrs	r1, r3
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	041b      	lsls	r3, r3, #16
 8006fa8:	4319      	orrs	r1, r3
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	061b      	lsls	r3, r3, #24
 8006fb2:	430b      	orrs	r3, r1
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fc8:	b084      	sub	sp, #16
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b084      	sub	sp, #16
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
 8006fd2:	f107 001c 	add.w	r0, r7, #28
 8006fd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fda:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d123      	bne.n	800702a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006ff6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800700a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800700e:	2b01      	cmp	r3, #1
 8007010:	d105      	bne.n	800701e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f9dc 	bl	80073dc <USB_CoreReset>
 8007024:	4603      	mov	r3, r0
 8007026:	73fb      	strb	r3, [r7, #15]
 8007028:	e01b      	b.n	8007062 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f9d0 	bl	80073dc <USB_CoreReset>
 800703c:	4603      	mov	r3, r0
 800703e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007040:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007044:	2b00      	cmp	r3, #0
 8007046:	d106      	bne.n	8007056 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	639a      	str	r2, [r3, #56]	@ 0x38
 8007054:	e005      	b.n	8007062 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007062:	7fbb      	ldrb	r3, [r7, #30]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d10b      	bne.n	8007080 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f043 0206 	orr.w	r2, r3, #6
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f043 0220 	orr.w	r2, r3, #32
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007080:	7bfb      	ldrb	r3, [r7, #15]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800708c:	b004      	add	sp, #16
 800708e:	4770      	bx	lr

08007090 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f043 0201 	orr.w	r2, r3, #1
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b083      	sub	sp, #12
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f023 0201 	bic.w	r2, r3, #1
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	460b      	mov	r3, r1
 80070de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070f0:	78fb      	ldrb	r3, [r7, #3]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d115      	bne.n	8007122 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007102:	200a      	movs	r0, #10
 8007104:	f7fa fba2 	bl	800184c <HAL_Delay>
      ms += 10U;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	330a      	adds	r3, #10
 800710c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f956 	bl	80073c0 <USB_GetMode>
 8007114:	4603      	mov	r3, r0
 8007116:	2b01      	cmp	r3, #1
 8007118:	d01e      	beq.n	8007158 <USB_SetCurrentMode+0x84>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2bc7      	cmp	r3, #199	@ 0xc7
 800711e:	d9f0      	bls.n	8007102 <USB_SetCurrentMode+0x2e>
 8007120:	e01a      	b.n	8007158 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007122:	78fb      	ldrb	r3, [r7, #3]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d115      	bne.n	8007154 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007134:	200a      	movs	r0, #10
 8007136:	f7fa fb89 	bl	800184c <HAL_Delay>
      ms += 10U;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	330a      	adds	r3, #10
 800713e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f93d 	bl	80073c0 <USB_GetMode>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d005      	beq.n	8007158 <USB_SetCurrentMode+0x84>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007150:	d9f0      	bls.n	8007134 <USB_SetCurrentMode+0x60>
 8007152:	e001      	b.n	8007158 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e005      	b.n	8007164 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2bc8      	cmp	r3, #200	@ 0xc8
 800715c:	d101      	bne.n	8007162 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e000      	b.n	8007164 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007176:	2300      	movs	r3, #0
 8007178:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	3301      	adds	r3, #1
 800717e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007186:	d901      	bls.n	800718c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e01b      	b.n	80071c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	daf2      	bge.n	800717a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007194:	2300      	movs	r3, #0
 8007196:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	019b      	lsls	r3, r3, #6
 800719c:	f043 0220 	orr.w	r2, r3, #32
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	3301      	adds	r3, #1
 80071a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071b0:	d901      	bls.n	80071b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e006      	b.n	80071c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	f003 0320 	and.w	r3, r3, #32
 80071be:	2b20      	cmp	r3, #32
 80071c0:	d0f0      	beq.n	80071a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071d8:	2300      	movs	r3, #0
 80071da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	3301      	adds	r3, #1
 80071e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071e8:	d901      	bls.n	80071ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e018      	b.n	8007220 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	daf2      	bge.n	80071dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80071f6:	2300      	movs	r3, #0
 80071f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2210      	movs	r2, #16
 80071fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	3301      	adds	r3, #1
 8007204:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800720c:	d901      	bls.n	8007212 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e006      	b.n	8007220 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f003 0310 	and.w	r3, r3, #16
 800721a:	2b10      	cmp	r3, #16
 800721c:	d0f0      	beq.n	8007200 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3714      	adds	r7, #20
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800722c:	b480      	push	{r7}
 800722e:	b089      	sub	sp, #36	@ 0x24
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	4611      	mov	r1, r2
 8007238:	461a      	mov	r2, r3
 800723a:	460b      	mov	r3, r1
 800723c:	71fb      	strb	r3, [r7, #7]
 800723e:	4613      	mov	r3, r2
 8007240:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800724a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800724e:	2b00      	cmp	r3, #0
 8007250:	d123      	bne.n	800729a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007252:	88bb      	ldrh	r3, [r7, #4]
 8007254:	3303      	adds	r3, #3
 8007256:	089b      	lsrs	r3, r3, #2
 8007258:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800725a:	2300      	movs	r3, #0
 800725c:	61bb      	str	r3, [r7, #24]
 800725e:	e018      	b.n	8007292 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007260:	79fb      	ldrb	r3, [r7, #7]
 8007262:	031a      	lsls	r2, r3, #12
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	4413      	add	r3, r2
 8007268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800726c:	461a      	mov	r2, r3
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	3301      	adds	r3, #1
 8007278:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	3301      	adds	r3, #1
 800727e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	3301      	adds	r3, #1
 8007284:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	3301      	adds	r3, #1
 800728a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	3301      	adds	r3, #1
 8007290:	61bb      	str	r3, [r7, #24]
 8007292:	69ba      	ldr	r2, [r7, #24]
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	429a      	cmp	r2, r3
 8007298:	d3e2      	bcc.n	8007260 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3724      	adds	r7, #36	@ 0x24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b08b      	sub	sp, #44	@ 0x2c
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	4613      	mov	r3, r2
 80072b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80072be:	88fb      	ldrh	r3, [r7, #6]
 80072c0:	089b      	lsrs	r3, r3, #2
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80072c6:	88fb      	ldrh	r3, [r7, #6]
 80072c8:	f003 0303 	and.w	r3, r3, #3
 80072cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80072ce:	2300      	movs	r3, #0
 80072d0:	623b      	str	r3, [r7, #32]
 80072d2:	e014      	b.n	80072fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072de:	601a      	str	r2, [r3, #0]
    pDest++;
 80072e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e2:	3301      	adds	r3, #1
 80072e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80072e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e8:	3301      	adds	r3, #1
 80072ea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80072ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ee:	3301      	adds	r3, #1
 80072f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80072f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f4:	3301      	adds	r3, #1
 80072f6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	3301      	adds	r3, #1
 80072fc:	623b      	str	r3, [r7, #32]
 80072fe:	6a3a      	ldr	r2, [r7, #32]
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	429a      	cmp	r2, r3
 8007304:	d3e6      	bcc.n	80072d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007306:	8bfb      	ldrh	r3, [r7, #30]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d01e      	beq.n	800734a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007316:	461a      	mov	r2, r3
 8007318:	f107 0310 	add.w	r3, r7, #16
 800731c:	6812      	ldr	r2, [r2, #0]
 800731e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	6a3b      	ldr	r3, [r7, #32]
 8007324:	b2db      	uxtb	r3, r3
 8007326:	00db      	lsls	r3, r3, #3
 8007328:	fa22 f303 	lsr.w	r3, r2, r3
 800732c:	b2da      	uxtb	r2, r3
 800732e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007330:	701a      	strb	r2, [r3, #0]
      i++;
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	3301      	adds	r3, #1
 8007336:	623b      	str	r3, [r7, #32]
      pDest++;
 8007338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733a:	3301      	adds	r3, #1
 800733c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800733e:	8bfb      	ldrh	r3, [r7, #30]
 8007340:	3b01      	subs	r3, #1
 8007342:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007344:	8bfb      	ldrh	r3, [r7, #30]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1ea      	bne.n	8007320 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800734a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800734c:	4618      	mov	r0, r3
 800734e:	372c      	adds	r7, #44	@ 0x2c
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	4013      	ands	r3, r2
 800736e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007370:	68fb      	ldr	r3, [r7, #12]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3714      	adds	r7, #20
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800737e:	b480      	push	{r7}
 8007380:	b085      	sub	sp, #20
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	460b      	mov	r3, r1
 8007388:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800738e:	78fb      	ldrb	r3, [r7, #3]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4413      	add	r3, r2
 8007396:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800739e:	78fb      	ldrb	r3, [r7, #3]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	4013      	ands	r3, r2
 80073b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073b2:	68bb      	ldr	r3, [r7, #8]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	f003 0301 	and.w	r3, r3, #1
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	3301      	adds	r3, #1
 80073ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073f4:	d901      	bls.n	80073fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	e01b      	b.n	8007432 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	daf2      	bge.n	80073e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007402:	2300      	movs	r3, #0
 8007404:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	f043 0201 	orr.w	r2, r3, #1
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3301      	adds	r3, #1
 8007416:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800741e:	d901      	bls.n	8007424 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	e006      	b.n	8007432 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	f003 0301 	and.w	r3, r3, #1
 800742c:	2b01      	cmp	r3, #1
 800742e:	d0f0      	beq.n	8007412 <USB_CoreReset+0x36>

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
	...

08007440 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007440:	b084      	sub	sp, #16
 8007442:	b580      	push	{r7, lr}
 8007444:	b086      	sub	sp, #24
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800744e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007460:	461a      	mov	r2, r3
 8007462:	2300      	movs	r3, #0
 8007464:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800746a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007476:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007482:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007492:	2b00      	cmp	r3, #0
 8007494:	d119      	bne.n	80074ca <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007496:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800749a:	2b01      	cmp	r3, #1
 800749c:	d10a      	bne.n	80074b4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80074ac:	f043 0304 	orr.w	r3, r3, #4
 80074b0:	6013      	str	r3, [r2, #0]
 80074b2:	e014      	b.n	80074de <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80074c2:	f023 0304 	bic.w	r3, r3, #4
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	e009      	b.n	80074de <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80074d8:	f023 0304 	bic.w	r3, r3, #4
 80074dc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80074de:	2110      	movs	r1, #16
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7ff fe43 	bl	800716c <USB_FlushTxFifo>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f7ff fe6d 	bl	80071d0 <USB_FlushRxFifo>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d001      	beq.n	8007500 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007500:	2300      	movs	r3, #0
 8007502:	613b      	str	r3, [r7, #16]
 8007504:	e015      	b.n	8007532 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	4413      	add	r3, r2
 800750e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007512:	461a      	mov	r2, r3
 8007514:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007518:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	4413      	add	r3, r2
 8007522:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007526:	461a      	mov	r2, r3
 8007528:	2300      	movs	r3, #0
 800752a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	3301      	adds	r3, #1
 8007530:	613b      	str	r3, [r7, #16]
 8007532:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007536:	461a      	mov	r2, r3
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	4293      	cmp	r3, r2
 800753c:	d3e3      	bcc.n	8007506 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800754a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a18      	ldr	r2, [pc, #96]	@ (80075b0 <USB_HostInit+0x170>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d10b      	bne.n	800756c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800755a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a15      	ldr	r2, [pc, #84]	@ (80075b4 <USB_HostInit+0x174>)
 8007560:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a14      	ldr	r2, [pc, #80]	@ (80075b8 <USB_HostInit+0x178>)
 8007566:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800756a:	e009      	b.n	8007580 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2280      	movs	r2, #128	@ 0x80
 8007570:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a11      	ldr	r2, [pc, #68]	@ (80075bc <USB_HostInit+0x17c>)
 8007576:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a11      	ldr	r2, [pc, #68]	@ (80075c0 <USB_HostInit+0x180>)
 800757c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007580:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007584:	2b00      	cmp	r3, #0
 8007586:	d105      	bne.n	8007594 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	f043 0210 	orr.w	r2, r3, #16
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	699a      	ldr	r2, [r3, #24]
 8007598:	4b0a      	ldr	r3, [pc, #40]	@ (80075c4 <USB_HostInit+0x184>)
 800759a:	4313      	orrs	r3, r2
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80075a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3718      	adds	r7, #24
 80075a6:	46bd      	mov	sp, r7
 80075a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075ac:	b004      	add	sp, #16
 80075ae:	4770      	bx	lr
 80075b0:	40040000 	.word	0x40040000
 80075b4:	01000200 	.word	0x01000200
 80075b8:	00e00300 	.word	0x00e00300
 80075bc:	00600080 	.word	0x00600080
 80075c0:	004000e0 	.word	0x004000e0
 80075c4:	a3200008 	.word	0xa3200008

080075c8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	460b      	mov	r3, r1
 80075d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80075e6:	f023 0303 	bic.w	r3, r3, #3
 80075ea:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	78fb      	ldrb	r3, [r7, #3]
 80075f6:	f003 0303 	and.w	r3, r3, #3
 80075fa:	68f9      	ldr	r1, [r7, #12]
 80075fc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007600:	4313      	orrs	r3, r2
 8007602:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007604:	78fb      	ldrb	r3, [r7, #3]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d107      	bne.n	800761a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007610:	461a      	mov	r2, r3
 8007612:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007616:	6053      	str	r3, [r2, #4]
 8007618:	e00c      	b.n	8007634 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800761a:	78fb      	ldrb	r3, [r7, #3]
 800761c:	2b02      	cmp	r3, #2
 800761e:	d107      	bne.n	8007630 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007626:	461a      	mov	r2, r3
 8007628:	f241 7370 	movw	r3, #6000	@ 0x1770
 800762c:	6053      	str	r3, [r2, #4]
 800762e:	e001      	b.n	8007634 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e000      	b.n	8007636 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b084      	sub	sp, #16
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800764e:	2300      	movs	r3, #0
 8007650:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007662:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800766c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007670:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007672:	2064      	movs	r0, #100	@ 0x64
 8007674:	f7fa f8ea 	bl	800184c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007680:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007684:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007686:	200a      	movs	r0, #10
 8007688:	f7fa f8e0 	bl	800184c <HAL_Delay>

  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007696:	b480      	push	{r7}
 8007698:	b085      	sub	sp, #20
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	460b      	mov	r3, r1
 80076a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80076a6:	2300      	movs	r3, #0
 80076a8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80076ba:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d109      	bne.n	80076da <USB_DriveVbus+0x44>
 80076c6:	78fb      	ldrb	r3, [r7, #3]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d106      	bne.n	80076da <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80076d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80076d8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80076e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076e4:	d109      	bne.n	80076fa <USB_DriveVbus+0x64>
 80076e6:	78fb      	ldrb	r3, [r7, #3]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d106      	bne.n	80076fa <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80076f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076f8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	0c5b      	lsrs	r3, r3, #17
 8007726:	f003 0303 	and.w	r3, r3, #3
}
 800772a:	4618      	mov	r0, r3
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007736:	b480      	push	{r7}
 8007738:	b085      	sub	sp, #20
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	b29b      	uxth	r3, r3
}
 800774c:	4618      	mov	r0, r3
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b088      	sub	sp, #32
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	4608      	mov	r0, r1
 8007762:	4611      	mov	r1, r2
 8007764:	461a      	mov	r2, r3
 8007766:	4603      	mov	r3, r0
 8007768:	70fb      	strb	r3, [r7, #3]
 800776a:	460b      	mov	r3, r1
 800776c:	70bb      	strb	r3, [r7, #2]
 800776e:	4613      	mov	r3, r2
 8007770:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800777a:	78fb      	ldrb	r3, [r7, #3]
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	4413      	add	r3, r2
 8007782:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007786:	461a      	mov	r2, r3
 8007788:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800778c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800778e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007792:	2b03      	cmp	r3, #3
 8007794:	d87c      	bhi.n	8007890 <USB_HC_Init+0x138>
 8007796:	a201      	add	r2, pc, #4	@ (adr r2, 800779c <USB_HC_Init+0x44>)
 8007798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779c:	080077ad 	.word	0x080077ad
 80077a0:	08007853 	.word	0x08007853
 80077a4:	080077ad 	.word	0x080077ad
 80077a8:	08007815 	.word	0x08007815
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80077ac:	78fb      	ldrb	r3, [r7, #3]
 80077ae:	015a      	lsls	r2, r3, #5
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	4413      	add	r3, r2
 80077b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077b8:	461a      	mov	r2, r3
 80077ba:	f240 439d 	movw	r3, #1181	@ 0x49d
 80077be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80077c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	da10      	bge.n	80077ea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80077c8:	78fb      	ldrb	r3, [r7, #3]
 80077ca:	015a      	lsls	r2, r3, #5
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	78fa      	ldrb	r2, [r7, #3]
 80077d8:	0151      	lsls	r1, r2, #5
 80077da:	693a      	ldr	r2, [r7, #16]
 80077dc:	440a      	add	r2, r1
 80077de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077e6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80077e8:	e055      	b.n	8007896 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a6f      	ldr	r2, [pc, #444]	@ (80079ac <USB_HC_Init+0x254>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d151      	bne.n	8007896 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80077f2:	78fb      	ldrb	r3, [r7, #3]
 80077f4:	015a      	lsls	r2, r3, #5
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	4413      	add	r3, r2
 80077fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	78fa      	ldrb	r2, [r7, #3]
 8007802:	0151      	lsls	r1, r2, #5
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	440a      	add	r2, r1
 8007808:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800780c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007810:	60d3      	str	r3, [r2, #12]
      break;
 8007812:	e040      	b.n	8007896 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007814:	78fb      	ldrb	r3, [r7, #3]
 8007816:	015a      	lsls	r2, r3, #5
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	4413      	add	r3, r2
 800781c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007820:	461a      	mov	r2, r3
 8007822:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007826:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007828:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800782c:	2b00      	cmp	r3, #0
 800782e:	da34      	bge.n	800789a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007830:	78fb      	ldrb	r3, [r7, #3]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	4413      	add	r3, r2
 8007838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	78fa      	ldrb	r2, [r7, #3]
 8007840:	0151      	lsls	r1, r2, #5
 8007842:	693a      	ldr	r2, [r7, #16]
 8007844:	440a      	add	r2, r1
 8007846:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800784a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800784e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007850:	e023      	b.n	800789a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007852:	78fb      	ldrb	r3, [r7, #3]
 8007854:	015a      	lsls	r2, r3, #5
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	4413      	add	r3, r2
 800785a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800785e:	461a      	mov	r2, r3
 8007860:	f240 2325 	movw	r3, #549	@ 0x225
 8007864:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007866:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800786a:	2b00      	cmp	r3, #0
 800786c:	da17      	bge.n	800789e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800786e:	78fb      	ldrb	r3, [r7, #3]
 8007870:	015a      	lsls	r2, r3, #5
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	4413      	add	r3, r2
 8007876:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	78fa      	ldrb	r2, [r7, #3]
 800787e:	0151      	lsls	r1, r2, #5
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	440a      	add	r2, r1
 8007884:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007888:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800788c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800788e:	e006      	b.n	800789e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	77fb      	strb	r3, [r7, #31]
      break;
 8007894:	e004      	b.n	80078a0 <USB_HC_Init+0x148>
      break;
 8007896:	bf00      	nop
 8007898:	e002      	b.n	80078a0 <USB_HC_Init+0x148>
      break;
 800789a:	bf00      	nop
 800789c:	e000      	b.n	80078a0 <USB_HC_Init+0x148>
      break;
 800789e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80078a0:	78fb      	ldrb	r3, [r7, #3]
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078ac:	461a      	mov	r2, r3
 80078ae:	2300      	movs	r3, #0
 80078b0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80078b2:	78fb      	ldrb	r3, [r7, #3]
 80078b4:	015a      	lsls	r2, r3, #5
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	4413      	add	r3, r2
 80078ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	78fa      	ldrb	r2, [r7, #3]
 80078c2:	0151      	lsls	r1, r2, #5
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	440a      	add	r2, r1
 80078c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078cc:	f043 0302 	orr.w	r3, r3, #2
 80078d0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078d8:	699a      	ldr	r2, [r3, #24]
 80078da:	78fb      	ldrb	r3, [r7, #3]
 80078dc:	f003 030f 	and.w	r3, r3, #15
 80078e0:	2101      	movs	r1, #1
 80078e2:	fa01 f303 	lsl.w	r3, r1, r3
 80078e6:	6939      	ldr	r1, [r7, #16]
 80078e8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80078ec:	4313      	orrs	r3, r2
 80078ee:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80078fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007900:	2b00      	cmp	r3, #0
 8007902:	da03      	bge.n	800790c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007904:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007908:	61bb      	str	r3, [r7, #24]
 800790a:	e001      	b.n	8007910 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800790c:	2300      	movs	r3, #0
 800790e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f7ff fef9 	bl	8007708 <USB_GetHostSpeed>
 8007916:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007918:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800791c:	2b02      	cmp	r3, #2
 800791e:	d106      	bne.n	800792e <USB_HC_Init+0x1d6>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2b02      	cmp	r3, #2
 8007924:	d003      	beq.n	800792e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007926:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800792a:	617b      	str	r3, [r7, #20]
 800792c:	e001      	b.n	8007932 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800792e:	2300      	movs	r3, #0
 8007930:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007932:	787b      	ldrb	r3, [r7, #1]
 8007934:	059b      	lsls	r3, r3, #22
 8007936:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800793a:	78bb      	ldrb	r3, [r7, #2]
 800793c:	02db      	lsls	r3, r3, #11
 800793e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007942:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007944:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007948:	049b      	lsls	r3, r3, #18
 800794a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800794e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007950:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007952:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007956:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	431a      	orrs	r2, r3
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007960:	78fa      	ldrb	r2, [r7, #3]
 8007962:	0151      	lsls	r1, r2, #5
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	440a      	add	r2, r1
 8007968:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800796c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007970:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007972:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007976:	2b03      	cmp	r3, #3
 8007978:	d003      	beq.n	8007982 <USB_HC_Init+0x22a>
 800797a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800797e:	2b01      	cmp	r3, #1
 8007980:	d10f      	bne.n	80079a2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007982:	78fb      	ldrb	r3, [r7, #3]
 8007984:	015a      	lsls	r2, r3, #5
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	4413      	add	r3, r2
 800798a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	78fa      	ldrb	r2, [r7, #3]
 8007992:	0151      	lsls	r1, r2, #5
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	440a      	add	r2, r1
 8007998:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800799c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80079a0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80079a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3720      	adds	r7, #32
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	40040000 	.word	0x40040000

080079b0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b08c      	sub	sp, #48	@ 0x30
 80079b4:	af02      	add	r7, sp, #8
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	4613      	mov	r3, r2
 80079bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	785b      	ldrb	r3, [r3, #1]
 80079c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80079c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80079cc:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	4a5d      	ldr	r2, [pc, #372]	@ (8007b48 <USB_HC_StartXfer+0x198>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d12f      	bne.n	8007a36 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80079d6:	79fb      	ldrb	r3, [r7, #7]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d11c      	bne.n	8007a16 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	7c9b      	ldrb	r3, [r3, #18]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d003      	beq.n	80079ec <USB_HC_StartXfer+0x3c>
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	7c9b      	ldrb	r3, [r3, #18]
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d124      	bne.n	8007a36 <USB_HC_StartXfer+0x86>
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	799b      	ldrb	r3, [r3, #6]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d120      	bne.n	8007a36 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	015a      	lsls	r2, r3, #5
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	69fa      	ldr	r2, [r7, #28]
 8007a04:	0151      	lsls	r1, r2, #5
 8007a06:	6a3a      	ldr	r2, [r7, #32]
 8007a08:	440a      	add	r2, r1
 8007a0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a12:	60d3      	str	r3, [r2, #12]
 8007a14:	e00f      	b.n	8007a36 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	791b      	ldrb	r3, [r3, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10b      	bne.n	8007a36 <USB_HC_StartXfer+0x86>
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	795b      	ldrb	r3, [r3, #5]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d107      	bne.n	8007a36 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	785b      	ldrb	r3, [r3, #1]
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 fb6b 	bl	8008108 <USB_DoPing>
        return HAL_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	e232      	b.n	8007e9c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	799b      	ldrb	r3, [r3, #6]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d158      	bne.n	8007af0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	78db      	ldrb	r3, [r3, #3]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d007      	beq.n	8007a5a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	8a92      	ldrh	r2, [r2, #20]
 8007a50:	fb03 f202 	mul.w	r2, r3, r2
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	61da      	str	r2, [r3, #28]
 8007a58:	e07c      	b.n	8007b54 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	7c9b      	ldrb	r3, [r3, #18]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d130      	bne.n	8007ac4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	6a1b      	ldr	r3, [r3, #32]
 8007a66:	2bbc      	cmp	r3, #188	@ 0xbc
 8007a68:	d918      	bls.n	8007a9c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	8a9b      	ldrh	r3, [r3, #20]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	69da      	ldr	r2, [r3, #28]
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d003      	beq.n	8007a8c <USB_HC_StartXfer+0xdc>
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d103      	bne.n	8007a94 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	60da      	str	r2, [r3, #12]
 8007a92:	e05f      	b.n	8007b54 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	2201      	movs	r2, #1
 8007a98:	60da      	str	r2, [r3, #12]
 8007a9a:	e05b      	b.n	8007b54 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	6a1a      	ldr	r2, [r3, #32]
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d007      	beq.n	8007abc <USB_HC_StartXfer+0x10c>
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d003      	beq.n	8007abc <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	2204      	movs	r2, #4
 8007ab8:	60da      	str	r2, [r3, #12]
 8007aba:	e04b      	b.n	8007b54 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	2203      	movs	r2, #3
 8007ac0:	60da      	str	r2, [r3, #12]
 8007ac2:	e047      	b.n	8007b54 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007ac4:	79fb      	ldrb	r3, [r7, #7]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d10d      	bne.n	8007ae6 <USB_HC_StartXfer+0x136>
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	8a92      	ldrh	r2, [r2, #20]
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d907      	bls.n	8007ae6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007ad6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	8a92      	ldrh	r2, [r2, #20]
 8007adc:	fb03 f202 	mul.w	r2, r3, r2
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	61da      	str	r2, [r3, #28]
 8007ae4:	e036      	b.n	8007b54 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	6a1a      	ldr	r2, [r3, #32]
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	61da      	str	r2, [r3, #28]
 8007aee:	e031      	b.n	8007b54 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	6a1b      	ldr	r3, [r3, #32]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d018      	beq.n	8007b2a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	6a1b      	ldr	r3, [r3, #32]
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	8a92      	ldrh	r2, [r2, #20]
 8007b00:	4413      	add	r3, r2
 8007b02:	3b01      	subs	r3, #1
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	8a92      	ldrh	r2, [r2, #20]
 8007b08:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b0c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007b0e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007b10:	8b7b      	ldrh	r3, [r7, #26]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d90b      	bls.n	8007b2e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007b16:	8b7b      	ldrh	r3, [r7, #26]
 8007b18:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b1a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	8a92      	ldrh	r2, [r2, #20]
 8007b20:	fb03 f202 	mul.w	r2, r3, r2
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	61da      	str	r2, [r3, #28]
 8007b28:	e001      	b.n	8007b2e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	78db      	ldrb	r3, [r3, #3]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00a      	beq.n	8007b4c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	8a92      	ldrh	r2, [r2, #20]
 8007b3c:	fb03 f202 	mul.w	r2, r3, r2
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	61da      	str	r2, [r3, #28]
 8007b44:	e006      	b.n	8007b54 <USB_HC_StartXfer+0x1a4>
 8007b46:	bf00      	nop
 8007b48:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	6a1a      	ldr	r2, [r3, #32]
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	69db      	ldr	r3, [r3, #28]
 8007b58:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b5c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007b5e:	04d9      	lsls	r1, r3, #19
 8007b60:	4ba3      	ldr	r3, [pc, #652]	@ (8007df0 <USB_HC_StartXfer+0x440>)
 8007b62:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b64:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	7d9b      	ldrb	r3, [r3, #22]
 8007b6a:	075b      	lsls	r3, r3, #29
 8007b6c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b70:	69f9      	ldr	r1, [r7, #28]
 8007b72:	0148      	lsls	r0, r1, #5
 8007b74:	6a39      	ldr	r1, [r7, #32]
 8007b76:	4401      	add	r1, r0
 8007b78:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b7c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b7e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007b80:	79fb      	ldrb	r3, [r7, #7]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d009      	beq.n	8007b9a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	6999      	ldr	r1, [r3, #24]
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	015a      	lsls	r2, r3, #5
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	4413      	add	r3, r2
 8007b92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b96:	460a      	mov	r2, r1
 8007b98:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007b9a:	6a3b      	ldr	r3, [r7, #32]
 8007b9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	bf0c      	ite	eq
 8007baa:	2301      	moveq	r3, #1
 8007bac:	2300      	movne	r3, #0
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	015a      	lsls	r2, r3, #5
 8007bb6:	6a3b      	ldr	r3, [r7, #32]
 8007bb8:	4413      	add	r3, r2
 8007bba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	69fa      	ldr	r2, [r7, #28]
 8007bc2:	0151      	lsls	r1, r2, #5
 8007bc4:	6a3a      	ldr	r2, [r7, #32]
 8007bc6:	440a      	add	r2, r1
 8007bc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bcc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007bd0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	6a3b      	ldr	r3, [r7, #32]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	7e7b      	ldrb	r3, [r7, #25]
 8007be2:	075b      	lsls	r3, r3, #29
 8007be4:	69f9      	ldr	r1, [r7, #28]
 8007be6:	0148      	lsls	r0, r1, #5
 8007be8:	6a39      	ldr	r1, [r7, #32]
 8007bea:	4401      	add	r1, r0
 8007bec:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	799b      	ldrb	r3, [r3, #6]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	f040 80c3 	bne.w	8007d84 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	7c5b      	ldrb	r3, [r3, #17]
 8007c02:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	69fa      	ldr	r2, [r7, #28]
 8007c0c:	0151      	lsls	r1, r2, #5
 8007c0e:	6a3a      	ldr	r2, [r7, #32]
 8007c10:	440a      	add	r2, r1
 8007c12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007c16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007c1a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	69fa      	ldr	r2, [r7, #28]
 8007c2c:	0151      	lsls	r1, r2, #5
 8007c2e:	6a3a      	ldr	r2, [r7, #32]
 8007c30:	440a      	add	r2, r1
 8007c32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c36:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007c3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	79db      	ldrb	r3, [r3, #7]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d123      	bne.n	8007c8c <USB_HC_StartXfer+0x2dc>
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	78db      	ldrb	r3, [r3, #3]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d11f      	bne.n	8007c8c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	015a      	lsls	r2, r3, #5
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	4413      	add	r3, r2
 8007c54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	69fa      	ldr	r2, [r7, #28]
 8007c5c:	0151      	lsls	r1, r2, #5
 8007c5e:	6a3a      	ldr	r2, [r7, #32]
 8007c60:	440a      	add	r2, r1
 8007c62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c6a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	015a      	lsls	r2, r3, #5
 8007c70:	6a3b      	ldr	r3, [r7, #32]
 8007c72:	4413      	add	r3, r2
 8007c74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	69fa      	ldr	r2, [r7, #28]
 8007c7c:	0151      	lsls	r1, r2, #5
 8007c7e:	6a3a      	ldr	r2, [r7, #32]
 8007c80:	440a      	add	r2, r1
 8007c82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c8a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	7c9b      	ldrb	r3, [r3, #18]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d003      	beq.n	8007c9c <USB_HC_StartXfer+0x2ec>
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	7c9b      	ldrb	r3, [r3, #18]
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	d117      	bne.n	8007ccc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d113      	bne.n	8007ccc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	78db      	ldrb	r3, [r3, #3]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d10f      	bne.n	8007ccc <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	015a      	lsls	r2, r3, #5
 8007cb0:	6a3b      	ldr	r3, [r7, #32]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	69fa      	ldr	r2, [r7, #28]
 8007cbc:	0151      	lsls	r1, r2, #5
 8007cbe:	6a3a      	ldr	r2, [r7, #32]
 8007cc0:	440a      	add	r2, r1
 8007cc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cca:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	7c9b      	ldrb	r3, [r3, #18]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d162      	bne.n	8007d9a <USB_HC_StartXfer+0x3ea>
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	78db      	ldrb	r3, [r3, #3]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d15e      	bne.n	8007d9a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	2b03      	cmp	r3, #3
 8007ce4:	d858      	bhi.n	8007d98 <USB_HC_StartXfer+0x3e8>
 8007ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8007cec <USB_HC_StartXfer+0x33c>)
 8007ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cec:	08007cfd 	.word	0x08007cfd
 8007cf0:	08007d1f 	.word	0x08007d1f
 8007cf4:	08007d41 	.word	0x08007d41
 8007cf8:	08007d63 	.word	0x08007d63
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	6a3b      	ldr	r3, [r7, #32]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	69fa      	ldr	r2, [r7, #28]
 8007d0c:	0151      	lsls	r1, r2, #5
 8007d0e:	6a3a      	ldr	r2, [r7, #32]
 8007d10:	440a      	add	r2, r1
 8007d12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d1a:	6053      	str	r3, [r2, #4]
          break;
 8007d1c:	e03d      	b.n	8007d9a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	6a3b      	ldr	r3, [r7, #32]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	69fa      	ldr	r2, [r7, #28]
 8007d2e:	0151      	lsls	r1, r2, #5
 8007d30:	6a3a      	ldr	r2, [r7, #32]
 8007d32:	440a      	add	r2, r1
 8007d34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d38:	f043 030e 	orr.w	r3, r3, #14
 8007d3c:	6053      	str	r3, [r2, #4]
          break;
 8007d3e:	e02c      	b.n	8007d9a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	015a      	lsls	r2, r3, #5
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	69fa      	ldr	r2, [r7, #28]
 8007d50:	0151      	lsls	r1, r2, #5
 8007d52:	6a3a      	ldr	r2, [r7, #32]
 8007d54:	440a      	add	r2, r1
 8007d56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007d5e:	6053      	str	r3, [r2, #4]
          break;
 8007d60:	e01b      	b.n	8007d9a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	015a      	lsls	r2, r3, #5
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	4413      	add	r3, r2
 8007d6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	69fa      	ldr	r2, [r7, #28]
 8007d72:	0151      	lsls	r1, r2, #5
 8007d74:	6a3a      	ldr	r2, [r7, #32]
 8007d76:	440a      	add	r2, r1
 8007d78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007d80:	6053      	str	r3, [r2, #4]
          break;
 8007d82:	e00a      	b.n	8007d9a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	015a      	lsls	r2, r3, #5
 8007d88:	6a3b      	ldr	r3, [r7, #32]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d90:	461a      	mov	r2, r3
 8007d92:	2300      	movs	r3, #0
 8007d94:	6053      	str	r3, [r2, #4]
 8007d96:	e000      	b.n	8007d9a <USB_HC_StartXfer+0x3ea>
          break;
 8007d98:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	6a3b      	ldr	r3, [r7, #32]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007db0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	78db      	ldrb	r3, [r3, #3]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d004      	beq.n	8007dc4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dc0:	613b      	str	r3, [r7, #16]
 8007dc2:	e003      	b.n	8007dcc <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007dca:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007dd2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	015a      	lsls	r2, r3, #5
 8007dd8:	6a3b      	ldr	r3, [r7, #32]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007de0:	461a      	mov	r2, r3
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007de6:	79fb      	ldrb	r3, [r7, #7]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d003      	beq.n	8007df4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007dec:	2300      	movs	r3, #0
 8007dee:	e055      	b.n	8007e9c <USB_HC_StartXfer+0x4ec>
 8007df0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	78db      	ldrb	r3, [r3, #3]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d14e      	bne.n	8007e9a <USB_HC_StartXfer+0x4ea>
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	6a1b      	ldr	r3, [r3, #32]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d04a      	beq.n	8007e9a <USB_HC_StartXfer+0x4ea>
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	79db      	ldrb	r3, [r3, #7]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d146      	bne.n	8007e9a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	7c9b      	ldrb	r3, [r3, #18]
 8007e10:	2b03      	cmp	r3, #3
 8007e12:	d831      	bhi.n	8007e78 <USB_HC_StartXfer+0x4c8>
 8007e14:	a201      	add	r2, pc, #4	@ (adr r2, 8007e1c <USB_HC_StartXfer+0x46c>)
 8007e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1a:	bf00      	nop
 8007e1c:	08007e2d 	.word	0x08007e2d
 8007e20:	08007e51 	.word	0x08007e51
 8007e24:	08007e2d 	.word	0x08007e2d
 8007e28:	08007e51 	.word	0x08007e51
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	6a1b      	ldr	r3, [r3, #32]
 8007e30:	3303      	adds	r3, #3
 8007e32:	089b      	lsrs	r3, r3, #2
 8007e34:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007e36:	8afa      	ldrh	r2, [r7, #22]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d91c      	bls.n	8007e7c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	f043 0220 	orr.w	r2, r3, #32
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	619a      	str	r2, [r3, #24]
        }
        break;
 8007e4e:	e015      	b.n	8007e7c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	6a1b      	ldr	r3, [r3, #32]
 8007e54:	3303      	adds	r3, #3
 8007e56:	089b      	lsrs	r3, r3, #2
 8007e58:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007e5a:	8afa      	ldrh	r2, [r7, #22]
 8007e5c:	6a3b      	ldr	r3, [r7, #32]
 8007e5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d90a      	bls.n	8007e80 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	619a      	str	r2, [r3, #24]
        }
        break;
 8007e76:	e003      	b.n	8007e80 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007e78:	bf00      	nop
 8007e7a:	e002      	b.n	8007e82 <USB_HC_StartXfer+0x4d2>
        break;
 8007e7c:	bf00      	nop
 8007e7e:	e000      	b.n	8007e82 <USB_HC_StartXfer+0x4d2>
        break;
 8007e80:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	6999      	ldr	r1, [r3, #24]
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	785a      	ldrb	r2, [r3, #1]
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	2000      	movs	r0, #0
 8007e92:	9000      	str	r0, [sp, #0]
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f7ff f9c9 	bl	800722c <USB_WritePacket>
  }

  return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3728      	adds	r7, #40	@ 0x28
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	b29b      	uxth	r3, r3
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3714      	adds	r7, #20
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b089      	sub	sp, #36	@ 0x24
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	460b      	mov	r3, r1
 8007ed0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007ed6:	78fb      	ldrb	r3, [r7, #3]
 8007ed8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007eda:	2300      	movs	r3, #0
 8007edc:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	015a      	lsls	r2, r3, #5
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	0c9b      	lsrs	r3, r3, #18
 8007eee:	f003 0303 	and.w	r3, r3, #3
 8007ef2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	015a      	lsls	r2, r3, #5
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	4413      	add	r3, r2
 8007efc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	0fdb      	lsrs	r3, r3, #31
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	015a      	lsls	r2, r3, #5
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	4413      	add	r3, r2
 8007f12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	0fdb      	lsrs	r3, r3, #31
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	f003 0320 	and.w	r3, r3, #32
 8007f28:	2b20      	cmp	r3, #32
 8007f2a:	d10d      	bne.n	8007f48 <USB_HC_Halt+0x82>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10a      	bne.n	8007f48 <USB_HC_Halt+0x82>
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d005      	beq.n	8007f44 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d002      	beq.n	8007f44 <USB_HC_Halt+0x7e>
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2b03      	cmp	r3, #3
 8007f42:	d101      	bne.n	8007f48 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	e0d8      	b.n	80080fa <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d002      	beq.n	8007f54 <USB_HC_Halt+0x8e>
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	d173      	bne.n	800803c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	015a      	lsls	r2, r3, #5
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	0151      	lsls	r1, r2, #5
 8007f66:	69fa      	ldr	r2, [r7, #28]
 8007f68:	440a      	add	r2, r1
 8007f6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f72:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f003 0320 	and.w	r3, r3, #32
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d14a      	bne.n	8008016 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f84:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d133      	bne.n	8007ff4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	015a      	lsls	r2, r3, #5
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	4413      	add	r3, r2
 8007f94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	69ba      	ldr	r2, [r7, #24]
 8007f9c:	0151      	lsls	r1, r2, #5
 8007f9e:	69fa      	ldr	r2, [r7, #28]
 8007fa0:	440a      	add	r2, r1
 8007fa2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fa6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007faa:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	015a      	lsls	r2, r3, #5
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	69ba      	ldr	r2, [r7, #24]
 8007fbc:	0151      	lsls	r1, r2, #5
 8007fbe:	69fa      	ldr	r2, [r7, #28]
 8007fc0:	440a      	add	r2, r1
 8007fc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007fca:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007fd8:	d82e      	bhi.n	8008038 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	015a      	lsls	r2, r3, #5
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007fec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ff0:	d0ec      	beq.n	8007fcc <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ff2:	e081      	b.n	80080f8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	015a      	lsls	r2, r3, #5
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	69ba      	ldr	r2, [r7, #24]
 8008004:	0151      	lsls	r1, r2, #5
 8008006:	69fa      	ldr	r2, [r7, #28]
 8008008:	440a      	add	r2, r1
 800800a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800800e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008012:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008014:	e070      	b.n	80080f8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	4413      	add	r3, r2
 800801e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	69ba      	ldr	r2, [r7, #24]
 8008026:	0151      	lsls	r1, r2, #5
 8008028:	69fa      	ldr	r2, [r7, #28]
 800802a:	440a      	add	r2, r1
 800802c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008030:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008034:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008036:	e05f      	b.n	80080f8 <USB_HC_Halt+0x232>
            break;
 8008038:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800803a:	e05d      	b.n	80080f8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	4413      	add	r3, r2
 8008044:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	69ba      	ldr	r2, [r7, #24]
 800804c:	0151      	lsls	r1, r2, #5
 800804e:	69fa      	ldr	r2, [r7, #28]
 8008050:	440a      	add	r2, r1
 8008052:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008056:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800805a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d133      	bne.n	80080d4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	015a      	lsls	r2, r3, #5
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	4413      	add	r3, r2
 8008074:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	69ba      	ldr	r2, [r7, #24]
 800807c:	0151      	lsls	r1, r2, #5
 800807e:	69fa      	ldr	r2, [r7, #28]
 8008080:	440a      	add	r2, r1
 8008082:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008086:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800808a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	015a      	lsls	r2, r3, #5
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	4413      	add	r3, r2
 8008094:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	69ba      	ldr	r2, [r7, #24]
 800809c:	0151      	lsls	r1, r2, #5
 800809e:	69fa      	ldr	r2, [r7, #28]
 80080a0:	440a      	add	r2, r1
 80080a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80080aa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	3301      	adds	r3, #1
 80080b0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80080b8:	d81d      	bhi.n	80080f6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	015a      	lsls	r2, r3, #5
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	4413      	add	r3, r2
 80080c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080d0:	d0ec      	beq.n	80080ac <USB_HC_Halt+0x1e6>
 80080d2:	e011      	b.n	80080f8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	015a      	lsls	r2, r3, #5
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	4413      	add	r3, r2
 80080dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	0151      	lsls	r1, r2, #5
 80080e6:	69fa      	ldr	r2, [r7, #28]
 80080e8:	440a      	add	r2, r1
 80080ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80080f2:	6013      	str	r3, [r2, #0]
 80080f4:	e000      	b.n	80080f8 <USB_HC_Halt+0x232>
          break;
 80080f6:	bf00      	nop
    }
  }

  return HAL_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3724      	adds	r7, #36	@ 0x24
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
	...

08008108 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008108:	b480      	push	{r7}
 800810a:	b087      	sub	sp, #28
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	460b      	mov	r3, r1
 8008112:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008118:	78fb      	ldrb	r3, [r7, #3]
 800811a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800811c:	2301      	movs	r3, #1
 800811e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	04da      	lsls	r2, r3, #19
 8008124:	4b15      	ldr	r3, [pc, #84]	@ (800817c <USB_DoPing+0x74>)
 8008126:	4013      	ands	r3, r2
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	0151      	lsls	r1, r2, #5
 800812c:	697a      	ldr	r2, [r7, #20]
 800812e:	440a      	add	r2, r1
 8008130:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008134:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008138:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	015a      	lsls	r2, r3, #5
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	4413      	add	r3, r2
 8008142:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008150:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008158:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	015a      	lsls	r2, r3, #5
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	4413      	add	r3, r2
 8008162:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008166:	461a      	mov	r2, r3
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	371c      	adds	r7, #28
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	1ff80000 	.word	0x1ff80000

08008180 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b088      	sub	sp, #32
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008188:	2300      	movs	r3, #0
 800818a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008190:	2300      	movs	r3, #0
 8008192:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f7fe ff8c 	bl	80070b2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800819a:	2110      	movs	r1, #16
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f7fe ffe5 	bl	800716c <USB_FlushTxFifo>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7ff f80f 	bl	80071d0 <USB_FlushRxFifo>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80081bc:	2300      	movs	r3, #0
 80081be:	61bb      	str	r3, [r7, #24]
 80081c0:	e01f      	b.n	8008202 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	015a      	lsls	r2, r3, #5
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	4413      	add	r3, r2
 80081ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80081d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80081e0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80081e8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	015a      	lsls	r2, r3, #5
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	4413      	add	r3, r2
 80081f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081f6:	461a      	mov	r2, r3
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	3301      	adds	r3, #1
 8008200:	61bb      	str	r3, [r7, #24]
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	2b0f      	cmp	r3, #15
 8008206:	d9dc      	bls.n	80081c2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008208:	2300      	movs	r3, #0
 800820a:	61bb      	str	r3, [r7, #24]
 800820c:	e034      	b.n	8008278 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	015a      	lsls	r2, r3, #5
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	4413      	add	r3, r2
 8008216:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008224:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800822c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008234:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	015a      	lsls	r2, r3, #5
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	4413      	add	r3, r2
 800823e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008242:	461a      	mov	r2, r3
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	3301      	adds	r3, #1
 800824c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008254:	d80c      	bhi.n	8008270 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	015a      	lsls	r2, r3, #5
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	4413      	add	r3, r2
 800825e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008268:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800826c:	d0ec      	beq.n	8008248 <USB_StopHost+0xc8>
 800826e:	e000      	b.n	8008272 <USB_StopHost+0xf2>
        break;
 8008270:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	3301      	adds	r3, #1
 8008276:	61bb      	str	r3, [r7, #24]
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	2b0f      	cmp	r3, #15
 800827c:	d9c7      	bls.n	800820e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008284:	461a      	mov	r2, r3
 8008286:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800828a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008292:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f7fe fefb 	bl	8007090 <USB_EnableGlobalInt>

  return ret;
 800829a:	7ffb      	ldrb	r3, [r7, #31]
}
 800829c:	4618      	mov	r0, r3
 800829e:	3720      	adds	r7, #32
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80082a4:	b590      	push	{r4, r7, lr}
 80082a6:	b089      	sub	sp, #36	@ 0x24
 80082a8:	af04      	add	r7, sp, #16
 80082aa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80082ac:	2301      	movs	r3, #1
 80082ae:	2202      	movs	r2, #2
 80082b0:	2102      	movs	r1, #2
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fcd7 	bl	8008c66 <USBH_FindInterface>
 80082b8:	4603      	mov	r3, r0
 80082ba:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
 80082be:	2bff      	cmp	r3, #255	@ 0xff
 80082c0:	d002      	beq.n	80082c8 <USBH_CDC_InterfaceInit+0x24>
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d901      	bls.n	80082cc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80082c8:	2302      	movs	r3, #2
 80082ca:	e13d      	b.n	8008548 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
 80082ce:	4619      	mov	r1, r3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 fcac 	bl	8008c2e <USBH_SelectInterface>
 80082d6:	4603      	mov	r3, r0
 80082d8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80082da:	7bbb      	ldrb	r3, [r7, #14]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80082e0:	2302      	movs	r3, #2
 80082e2:	e131      	b.n	8008548 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80082ea:	2050      	movs	r0, #80	@ 0x50
 80082ec:	f005 f894 	bl	800d418 <malloc>
 80082f0:	4603      	mov	r3, r0
 80082f2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80082fa:	69db      	ldr	r3, [r3, #28]
 80082fc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008304:	2302      	movs	r3, #2
 8008306:	e11f      	b.n	8008548 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008308:	2250      	movs	r2, #80	@ 0x50
 800830a:	2100      	movs	r1, #0
 800830c:	68b8      	ldr	r0, [r7, #8]
 800830e:	f005 f941 	bl	800d594 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008312:	7bfb      	ldrb	r3, [r7, #15]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	211a      	movs	r1, #26
 8008318:	fb01 f303 	mul.w	r3, r1, r3
 800831c:	4413      	add	r3, r2
 800831e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	b25b      	sxtb	r3, r3
 8008326:	2b00      	cmp	r3, #0
 8008328:	da15      	bge.n	8008356 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800832a:	7bfb      	ldrb	r3, [r7, #15]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	211a      	movs	r1, #26
 8008330:	fb01 f303 	mul.w	r3, r1, r3
 8008334:	4413      	add	r3, r2
 8008336:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800833a:	781a      	ldrb	r2, [r3, #0]
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008340:	7bfb      	ldrb	r3, [r7, #15]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	211a      	movs	r1, #26
 8008346:	fb01 f303 	mul.w	r3, r1, r3
 800834a:	4413      	add	r3, r2
 800834c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008350:	881a      	ldrh	r2, [r3, #0]
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	785b      	ldrb	r3, [r3, #1]
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f002 fa1c 	bl	800a79a <USBH_AllocPipe>
 8008362:	4603      	mov	r3, r0
 8008364:	461a      	mov	r2, r3
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	7819      	ldrb	r1, [r3, #0]
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	7858      	ldrb	r0, [r3, #1]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	8952      	ldrh	r2, [r2, #10]
 8008382:	9202      	str	r2, [sp, #8]
 8008384:	2203      	movs	r2, #3
 8008386:	9201      	str	r2, [sp, #4]
 8008388:	9300      	str	r3, [sp, #0]
 800838a:	4623      	mov	r3, r4
 800838c:	4602      	mov	r2, r0
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f002 f9d4 	bl	800a73c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	2200      	movs	r2, #0
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f004 ffb5 	bl	800d30c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80083a2:	2300      	movs	r3, #0
 80083a4:	2200      	movs	r2, #0
 80083a6:	210a      	movs	r1, #10
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fc5c 	bl	8008c66 <USBH_FindInterface>
 80083ae:	4603      	mov	r3, r0
 80083b0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
 80083b4:	2bff      	cmp	r3, #255	@ 0xff
 80083b6:	d002      	beq.n	80083be <USBH_CDC_InterfaceInit+0x11a>
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d901      	bls.n	80083c2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80083be:	2302      	movs	r3, #2
 80083c0:	e0c2      	b.n	8008548 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80083c2:	7bfb      	ldrb	r3, [r7, #15]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	211a      	movs	r1, #26
 80083c8:	fb01 f303 	mul.w	r3, r1, r3
 80083cc:	4413      	add	r3, r2
 80083ce:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	b25b      	sxtb	r3, r3
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	da16      	bge.n	8008408 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80083da:	7bfb      	ldrb	r3, [r7, #15]
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	211a      	movs	r1, #26
 80083e0:	fb01 f303 	mul.w	r3, r1, r3
 80083e4:	4413      	add	r3, r2
 80083e6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80083ea:	781a      	ldrb	r2, [r3, #0]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	211a      	movs	r1, #26
 80083f6:	fb01 f303 	mul.w	r3, r1, r3
 80083fa:	4413      	add	r3, r2
 80083fc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008400:	881a      	ldrh	r2, [r3, #0]
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	835a      	strh	r2, [r3, #26]
 8008406:	e015      	b.n	8008434 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008408:	7bfb      	ldrb	r3, [r7, #15]
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	211a      	movs	r1, #26
 800840e:	fb01 f303 	mul.w	r3, r1, r3
 8008412:	4413      	add	r3, r2
 8008414:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008418:	781a      	ldrb	r2, [r3, #0]
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800841e:	7bfb      	ldrb	r3, [r7, #15]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	211a      	movs	r1, #26
 8008424:	fb01 f303 	mul.w	r3, r1, r3
 8008428:	4413      	add	r3, r2
 800842a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800842e:	881a      	ldrh	r2, [r3, #0]
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008434:	7bfb      	ldrb	r3, [r7, #15]
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	211a      	movs	r1, #26
 800843a:	fb01 f303 	mul.w	r3, r1, r3
 800843e:	4413      	add	r3, r2
 8008440:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	b25b      	sxtb	r3, r3
 8008448:	2b00      	cmp	r3, #0
 800844a:	da16      	bge.n	800847a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800844c:	7bfb      	ldrb	r3, [r7, #15]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	211a      	movs	r1, #26
 8008452:	fb01 f303 	mul.w	r3, r1, r3
 8008456:	4413      	add	r3, r2
 8008458:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800845c:	781a      	ldrb	r2, [r3, #0]
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008462:	7bfb      	ldrb	r3, [r7, #15]
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	211a      	movs	r1, #26
 8008468:	fb01 f303 	mul.w	r3, r1, r3
 800846c:	4413      	add	r3, r2
 800846e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008472:	881a      	ldrh	r2, [r3, #0]
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	835a      	strh	r2, [r3, #26]
 8008478:	e015      	b.n	80084a6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800847a:	7bfb      	ldrb	r3, [r7, #15]
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	211a      	movs	r1, #26
 8008480:	fb01 f303 	mul.w	r3, r1, r3
 8008484:	4413      	add	r3, r2
 8008486:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800848a:	781a      	ldrb	r2, [r3, #0]
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008490:	7bfb      	ldrb	r3, [r7, #15]
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	211a      	movs	r1, #26
 8008496:	fb01 f303 	mul.w	r3, r1, r3
 800849a:	4413      	add	r3, r2
 800849c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80084a0:	881a      	ldrh	r2, [r3, #0]
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	7b9b      	ldrb	r3, [r3, #14]
 80084aa:	4619      	mov	r1, r3
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f002 f974 	bl	800a79a <USBH_AllocPipe>
 80084b2:	4603      	mov	r3, r0
 80084b4:	461a      	mov	r2, r3
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	7bdb      	ldrb	r3, [r3, #15]
 80084be:	4619      	mov	r1, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f002 f96a 	bl	800a79a <USBH_AllocPipe>
 80084c6:	4603      	mov	r3, r0
 80084c8:	461a      	mov	r2, r3
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	7b59      	ldrb	r1, [r3, #13]
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	7b98      	ldrb	r0, [r3, #14]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	8b12      	ldrh	r2, [r2, #24]
 80084e6:	9202      	str	r2, [sp, #8]
 80084e8:	2202      	movs	r2, #2
 80084ea:	9201      	str	r2, [sp, #4]
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	4623      	mov	r3, r4
 80084f0:	4602      	mov	r2, r0
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f002 f922 	bl	800a73c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	7b19      	ldrb	r1, [r3, #12]
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	7bd8      	ldrb	r0, [r3, #15]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	8b52      	ldrh	r2, [r2, #26]
 8008510:	9202      	str	r2, [sp, #8]
 8008512:	2202      	movs	r2, #2
 8008514:	9201      	str	r2, [sp, #4]
 8008516:	9300      	str	r3, [sp, #0]
 8008518:	4623      	mov	r3, r4
 800851a:	4602      	mov	r2, r0
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f002 f90d 	bl	800a73c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	7b5b      	ldrb	r3, [r3, #13]
 800852e:	2200      	movs	r2, #0
 8008530:	4619      	mov	r1, r3
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f004 feea 	bl	800d30c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	7b1b      	ldrb	r3, [r3, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f004 fee3 	bl	800d30c <USBH_LL_SetToggle>

  return USBH_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	bd90      	pop	{r4, r7, pc}

08008550 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800855e:	69db      	ldr	r3, [r3, #28]
 8008560:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00e      	beq.n	8008588 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	4619      	mov	r1, r3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f002 f902 	bl	800a77a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f002 f92d 	bl	800a7dc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	7b1b      	ldrb	r3, [r3, #12]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00e      	beq.n	80085ae <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	7b1b      	ldrb	r3, [r3, #12]
 8008594:	4619      	mov	r1, r3
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f002 f8ef 	bl	800a77a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	7b1b      	ldrb	r3, [r3, #12]
 80085a0:	4619      	mov	r1, r3
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f002 f91a 	bl	800a7dc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	7b5b      	ldrb	r3, [r3, #13]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00e      	beq.n	80085d4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	7b5b      	ldrb	r3, [r3, #13]
 80085ba:	4619      	mov	r1, r3
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f002 f8dc 	bl	800a77a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	7b5b      	ldrb	r3, [r3, #13]
 80085c6:	4619      	mov	r1, r3
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f002 f907 	bl	800a7dc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085da:	69db      	ldr	r3, [r3, #28]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00b      	beq.n	80085f8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085e6:	69db      	ldr	r3, [r3, #28]
 80085e8:	4618      	mov	r0, r3
 80085ea:	f004 ff1d 	bl	800d428 <free>
    phost->pActiveClass->pData = 0U;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085f4:	2200      	movs	r2, #0
 80085f6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	b084      	sub	sp, #16
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008610:	69db      	ldr	r3, [r3, #28]
 8008612:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	3340      	adds	r3, #64	@ 0x40
 8008618:	4619      	mov	r1, r3
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f8b1 	bl	8008782 <GetLineCoding>
 8008620:	4603      	mov	r3, r0
 8008622:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008624:	7afb      	ldrb	r3, [r7, #11]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d105      	bne.n	8008636 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008630:	2102      	movs	r1, #2
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008636:	7afb      	ldrb	r3, [r7, #11]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008648:	2301      	movs	r3, #1
 800864a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008656:	69db      	ldr	r3, [r3, #28]
 8008658:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008660:	2b04      	cmp	r3, #4
 8008662:	d877      	bhi.n	8008754 <USBH_CDC_Process+0x114>
 8008664:	a201      	add	r2, pc, #4	@ (adr r2, 800866c <USBH_CDC_Process+0x2c>)
 8008666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866a:	bf00      	nop
 800866c:	08008681 	.word	0x08008681
 8008670:	08008687 	.word	0x08008687
 8008674:	080086b7 	.word	0x080086b7
 8008678:	0800872b 	.word	0x0800872b
 800867c:	08008739 	.word	0x08008739
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	73fb      	strb	r3, [r7, #15]
      break;
 8008684:	e06d      	b.n	8008762 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f897 	bl	80087c0 <SetLineCoding>
 8008692:	4603      	mov	r3, r0
 8008694:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008696:	7bbb      	ldrb	r3, [r7, #14]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d104      	bne.n	80086a6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	2202      	movs	r2, #2
 80086a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80086a4:	e058      	b.n	8008758 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80086a6:	7bbb      	ldrb	r3, [r7, #14]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d055      	beq.n	8008758 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	2204      	movs	r2, #4
 80086b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80086b4:	e050      	b.n	8008758 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	3340      	adds	r3, #64	@ 0x40
 80086ba:	4619      	mov	r1, r3
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f860 	bl	8008782 <GetLineCoding>
 80086c2:	4603      	mov	r3, r0
 80086c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80086c6:	7bbb      	ldrb	r3, [r7, #14]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d126      	bne.n	800871a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086de:	791b      	ldrb	r3, [r3, #4]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d13b      	bne.n	800875c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086ee:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d133      	bne.n	800875c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086fe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008700:	429a      	cmp	r2, r3
 8008702:	d12b      	bne.n	800875c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800870c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800870e:	429a      	cmp	r2, r3
 8008710:	d124      	bne.n	800875c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f982 	bl	8008a1c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008718:	e020      	b.n	800875c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800871a:	7bbb      	ldrb	r3, [r7, #14]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d01d      	beq.n	800875c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	2204      	movs	r2, #4
 8008724:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008728:	e018      	b.n	800875c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f867 	bl	80087fe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f8f6 	bl	8008922 <CDC_ProcessReception>
      break;
 8008736:	e014      	b.n	8008762 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008738:	2100      	movs	r1, #0
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f001 f988 	bl	8009a50 <USBH_ClrFeature>
 8008740:	4603      	mov	r3, r0
 8008742:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008744:	7bbb      	ldrb	r3, [r7, #14]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10a      	bne.n	8008760 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	2200      	movs	r2, #0
 800874e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008752:	e005      	b.n	8008760 <USBH_CDC_Process+0x120>

    default:
      break;
 8008754:	bf00      	nop
 8008756:	e004      	b.n	8008762 <USBH_CDC_Process+0x122>
      break;
 8008758:	bf00      	nop
 800875a:	e002      	b.n	8008762 <USBH_CDC_Process+0x122>
      break;
 800875c:	bf00      	nop
 800875e:	e000      	b.n	8008762 <USBH_CDC_Process+0x122>
      break;
 8008760:	bf00      	nop

  }

  return status;
 8008762:	7bfb      	ldrb	r3, [r7, #15]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b082      	sub	sp, #8
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
 800878a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	22a1      	movs	r2, #161	@ 0xa1
 8008790:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2221      	movs	r2, #33	@ 0x21
 8008796:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2207      	movs	r2, #7
 80087a8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	2207      	movs	r2, #7
 80087ae:	4619      	mov	r1, r3
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f001 fc82 	bl	800a0ba <USBH_CtlReq>
 80087b6:	4603      	mov	r3, r0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2221      	movs	r2, #33	@ 0x21
 80087ce:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2220      	movs	r2, #32
 80087d4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2207      	movs	r2, #7
 80087e6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	2207      	movs	r2, #7
 80087ec:	4619      	mov	r1, r3
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f001 fc63 	bl	800a0ba <USBH_CtlReq>
 80087f4:	4603      	mov	r3, r0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3708      	adds	r7, #8
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b086      	sub	sp, #24
 8008802:	af02      	add	r7, sp, #8
 8008804:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800880c:	69db      	ldr	r3, [r3, #28]
 800880e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008810:	2300      	movs	r3, #0
 8008812:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800881a:	2b01      	cmp	r3, #1
 800881c:	d002      	beq.n	8008824 <CDC_ProcessTransmission+0x26>
 800881e:	2b02      	cmp	r3, #2
 8008820:	d023      	beq.n	800886a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008822:	e07a      	b.n	800891a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	8b12      	ldrh	r2, [r2, #24]
 800882c:	4293      	cmp	r3, r2
 800882e:	d90b      	bls.n	8008848 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	69d9      	ldr	r1, [r3, #28]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	8b1a      	ldrh	r2, [r3, #24]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	7b5b      	ldrb	r3, [r3, #13]
 800883c:	2001      	movs	r0, #1
 800883e:	9000      	str	r0, [sp, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f001 ff38 	bl	800a6b6 <USBH_BulkSendData>
 8008846:	e00b      	b.n	8008860 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008850:	b29a      	uxth	r2, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	7b5b      	ldrb	r3, [r3, #13]
 8008856:	2001      	movs	r0, #1
 8008858:	9000      	str	r0, [sp, #0]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f001 ff2b 	bl	800a6b6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2202      	movs	r2, #2
 8008864:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008868:	e057      	b.n	800891a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	7b5b      	ldrb	r3, [r3, #13]
 800886e:	4619      	mov	r1, r3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f004 fd21 	bl	800d2b8 <USBH_LL_GetURBState>
 8008876:	4603      	mov	r3, r0
 8008878:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800887a:	7afb      	ldrb	r3, [r7, #11]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d136      	bne.n	80088ee <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	8b12      	ldrh	r2, [r2, #24]
 8008888:	4293      	cmp	r3, r2
 800888a:	d90e      	bls.n	80088aa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	8b12      	ldrh	r2, [r2, #24]
 8008894:	1a9a      	subs	r2, r3, r2
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	69db      	ldr	r3, [r3, #28]
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	8b12      	ldrh	r2, [r2, #24]
 80088a2:	441a      	add	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	61da      	str	r2, [r3, #28]
 80088a8:	e002      	b.n	80088b0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d004      	beq.n	80088c2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 80088c0:	e006      	b.n	80088d0 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f892 	bl	80089f4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2204      	movs	r2, #4
 80088d4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80088e4:	2200      	movs	r2, #0
 80088e6:	4619      	mov	r1, r3
 80088e8:	f002 f874 	bl	800a9d4 <osMessagePut>
      break;
 80088ec:	e014      	b.n	8008918 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 80088ee:	7afb      	ldrb	r3, [r7, #11]
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d111      	bne.n	8008918 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2204      	movs	r2, #4
 8008900:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008910:	2200      	movs	r2, #0
 8008912:	4619      	mov	r1, r3
 8008914:	f002 f85e 	bl	800a9d4 <osMessagePut>
      break;
 8008918:	bf00      	nop
  }
}
 800891a:	bf00      	nop
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b086      	sub	sp, #24
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008930:	69db      	ldr	r3, [r3, #28]
 8008932:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008934:	2300      	movs	r3, #0
 8008936:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800893e:	2b03      	cmp	r3, #3
 8008940:	d002      	beq.n	8008948 <CDC_ProcessReception+0x26>
 8008942:	2b04      	cmp	r3, #4
 8008944:	d00e      	beq.n	8008964 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008946:	e051      	b.n	80089ec <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	6a19      	ldr	r1, [r3, #32]
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	8b5a      	ldrh	r2, [r3, #26]
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	7b1b      	ldrb	r3, [r3, #12]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f001 fed3 	bl	800a700 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	2204      	movs	r2, #4
 800895e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008962:	e043      	b.n	80089ec <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	7b1b      	ldrb	r3, [r3, #12]
 8008968:	4619      	mov	r1, r3
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f004 fca4 	bl	800d2b8 <USBH_LL_GetURBState>
 8008970:	4603      	mov	r3, r0
 8008972:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008974:	7cfb      	ldrb	r3, [r7, #19]
 8008976:	2b01      	cmp	r3, #1
 8008978:	d137      	bne.n	80089ea <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	7b1b      	ldrb	r3, [r3, #12]
 800897e:	4619      	mov	r1, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f004 fc07 	bl	800d194 <USBH_LL_GetLastXferSize>
 8008986:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	429a      	cmp	r2, r3
 8008990:	d016      	beq.n	80089c0 <CDC_ProcessReception+0x9e>
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	8b5b      	ldrh	r3, [r3, #26]
 8008996:	461a      	mov	r2, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	4293      	cmp	r3, r2
 800899c:	d910      	bls.n	80089c0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	1ad2      	subs	r2, r2, r3
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	6a1a      	ldr	r2, [r3, #32]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	441a      	add	r2, r3
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	2203      	movs	r2, #3
 80089ba:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 80089be:	e006      	b.n	80089ce <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 f81d 	bl	8008a08 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2204      	movs	r2, #4
 80089d2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80089e2:	2200      	movs	r2, #0
 80089e4:	4619      	mov	r1, r3
 80089e6:	f001 fff5 	bl	800a9d4 <osMessagePut>
      break;
 80089ea:	bf00      	nop
  }
}
 80089ec:	bf00      	nop
 80089ee:	3718      	adds	r7, #24
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80089fc:	bf00      	nop
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008a30:	b5b0      	push	{r4, r5, r7, lr}
 8008a32:	b090      	sub	sp, #64	@ 0x40
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d101      	bne.n	8008a48 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008a44:	2302      	movs	r3, #2
 8008a46:	e04d      	b.n	8008ae4 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	79fa      	ldrb	r2, [r7, #7]
 8008a4c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f000 f847 	bl	8008af4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d003      	beq.n	8008a94 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8008a94:	4b15      	ldr	r3, [pc, #84]	@ (8008aec <USBH_Init+0xbc>)
 8008a96:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8008a9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008a9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8008aa0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f001 ff6b 	bl	800a982 <osMessageCreate>
 8008aac:	4602      	mov	r2, r0
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8008ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8008af0 <USBH_Init+0xc0>)
 8008ab6:	f107 0414 	add.w	r4, r7, #20
 8008aba:	461d      	mov	r5, r3
 8008abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ac0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008ac4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8008ac8:	f107 0314 	add.w	r3, r7, #20
 8008acc:	68f9      	ldr	r1, [r7, #12]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f001 fef7 	bl	800a8c2 <osThreadCreate>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f004 fa9b 	bl	800d018 <USBH_LL_Init>

  return USBH_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3740      	adds	r7, #64	@ 0x40
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bdb0      	pop	{r4, r5, r7, pc}
 8008aec:	0800d718 	.word	0x0800d718
 8008af0:	0800d734 	.word	0x0800d734

08008af4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008afc:	2300      	movs	r3, #0
 8008afe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008b00:	2300      	movs	r3, #0
 8008b02:	60fb      	str	r3, [r7, #12]
 8008b04:	e009      	b.n	8008b1a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	33e0      	adds	r3, #224	@ 0xe0
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4413      	add	r3, r2
 8008b10:	2200      	movs	r2, #0
 8008b12:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	3301      	adds	r3, #1
 8008b18:	60fb      	str	r3, [r7, #12]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2b0f      	cmp	r3, #15
 8008b1e:	d9f2      	bls.n	8008b06 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008b20:	2300      	movs	r3, #0
 8008b22:	60fb      	str	r3, [r7, #12]
 8008b24:	e009      	b.n	8008b3a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008b30:	2200      	movs	r2, #0
 8008b32:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	3301      	adds	r3, #1
 8008b38:	60fb      	str	r3, [r7, #12]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b40:	d3f1      	bcc.n	8008b26 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2240      	movs	r2, #64	@ 0x40
 8008b66:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	331c      	adds	r3, #28
 8008b92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b96:	2100      	movs	r1, #0
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f004 fcfb 	bl	800d594 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008ba4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ba8:	2100      	movs	r1, #0
 8008baa:	4618      	mov	r0, r3
 8008bac:	f004 fcf2 	bl	800d594 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008bb6:	2212      	movs	r2, #18
 8008bb8:	2100      	movs	r1, #0
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f004 fcea 	bl	800d594 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008bc6:	223e      	movs	r2, #62	@ 0x3e
 8008bc8:	2100      	movs	r1, #0
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f004 fce2 	bl	800d594 <memset>

  return USBH_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008bda:	b480      	push	{r7}
 8008bdc:	b085      	sub	sp, #20
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
 8008be2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008be4:	2300      	movs	r3, #0
 8008be6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d016      	beq.n	8008c1c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d10e      	bne.n	8008c16 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008bfe:	1c59      	adds	r1, r3, #1
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	33de      	adds	r3, #222	@ 0xde
 8008c0a:	6839      	ldr	r1, [r7, #0]
 8008c0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	73fb      	strb	r3, [r7, #15]
 8008c14:	e004      	b.n	8008c20 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008c16:	2302      	movs	r3, #2
 8008c18:	73fb      	strb	r3, [r7, #15]
 8008c1a:	e001      	b.n	8008c20 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3714      	adds	r7, #20
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr

08008c2e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008c2e:	b480      	push	{r7}
 8008c30:	b085      	sub	sp, #20
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	460b      	mov	r3, r1
 8008c38:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008c44:	78fa      	ldrb	r2, [r7, #3]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d204      	bcs.n	8008c54 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	78fa      	ldrb	r2, [r7, #3]
 8008c4e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008c52:	e001      	b.n	8008c58 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008c54:	2302      	movs	r3, #2
 8008c56:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b087      	sub	sp, #28
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	4608      	mov	r0, r1
 8008c70:	4611      	mov	r1, r2
 8008c72:	461a      	mov	r2, r3
 8008c74:	4603      	mov	r3, r0
 8008c76:	70fb      	strb	r3, [r7, #3]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	70bb      	strb	r3, [r7, #2]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008c80:	2300      	movs	r3, #0
 8008c82:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008c84:	2300      	movs	r3, #0
 8008c86:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008c8e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008c90:	e025      	b.n	8008cde <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008c92:	7dfb      	ldrb	r3, [r7, #23]
 8008c94:	221a      	movs	r2, #26
 8008c96:	fb02 f303 	mul.w	r3, r2, r3
 8008c9a:	3308      	adds	r3, #8
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	3302      	adds	r3, #2
 8008ca2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	795b      	ldrb	r3, [r3, #5]
 8008ca8:	78fa      	ldrb	r2, [r7, #3]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d002      	beq.n	8008cb4 <USBH_FindInterface+0x4e>
 8008cae:	78fb      	ldrb	r3, [r7, #3]
 8008cb0:	2bff      	cmp	r3, #255	@ 0xff
 8008cb2:	d111      	bne.n	8008cd8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008cb8:	78ba      	ldrb	r2, [r7, #2]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d002      	beq.n	8008cc4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008cbe:	78bb      	ldrb	r3, [r7, #2]
 8008cc0:	2bff      	cmp	r3, #255	@ 0xff
 8008cc2:	d109      	bne.n	8008cd8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008cc8:	787a      	ldrb	r2, [r7, #1]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d002      	beq.n	8008cd4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008cce:	787b      	ldrb	r3, [r7, #1]
 8008cd0:	2bff      	cmp	r3, #255	@ 0xff
 8008cd2:	d101      	bne.n	8008cd8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008cd4:	7dfb      	ldrb	r3, [r7, #23]
 8008cd6:	e006      	b.n	8008ce6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008cd8:	7dfb      	ldrb	r3, [r7, #23]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008cde:	7dfb      	ldrb	r3, [r7, #23]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d9d6      	bls.n	8008c92 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008ce4:	23ff      	movs	r3, #255	@ 0xff
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	371c      	adds	r7, #28
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b082      	sub	sp, #8
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f004 f9d2 	bl	800d0a4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008d00:	2101      	movs	r1, #1
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f004 faeb 	bl	800d2de <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
	...

08008d14 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b088      	sub	sp, #32
 8008d18:	af04      	add	r7, sp, #16
 8008d1a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008d1c:	2302      	movs	r3, #2
 8008d1e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008d20:	2300      	movs	r3, #0
 8008d22:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d102      	bne.n	8008d36 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2203      	movs	r2, #3
 8008d34:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	2b0b      	cmp	r3, #11
 8008d3e:	f200 8244 	bhi.w	80091ca <USBH_Process+0x4b6>
 8008d42:	a201      	add	r2, pc, #4	@ (adr r2, 8008d48 <USBH_Process+0x34>)
 8008d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d48:	08008d79 	.word	0x08008d79
 8008d4c:	08008dc7 	.word	0x08008dc7
 8008d50:	08008e4b 	.word	0x08008e4b
 8008d54:	08009149 	.word	0x08009149
 8008d58:	080091cb 	.word	0x080091cb
 8008d5c:	08008f07 	.word	0x08008f07
 8008d60:	080090d3 	.word	0x080090d3
 8008d64:	08008f59 	.word	0x08008f59
 8008d68:	08008f95 	.word	0x08008f95
 8008d6c:	08008fcd 	.word	0x08008fcd
 8008d70:	0800902b 	.word	0x0800902b
 8008d74:	08009131 	.word	0x08009131
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f000 8224 	beq.w	80091ce <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008d8c:	20c8      	movs	r0, #200	@ 0xc8
 8008d8e:	f004 faf0 	bl	800d372 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f004 f9e3 	bl	800d15e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	f001 fe08 	bl	800a9d4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008dc4:	e203      	b.n	80091ce <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d107      	bne.n	8008de0 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2202      	movs	r2, #2
 8008ddc:	701a      	strb	r2, [r3, #0]
 8008dde:	e025      	b.n	8008e2c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008de6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008dea:	d914      	bls.n	8008e16 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008df2:	3301      	adds	r3, #1
 8008df4:	b2da      	uxtb	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d903      	bls.n	8008e0e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	220d      	movs	r2, #13
 8008e0a:	701a      	strb	r2, [r3, #0]
 8008e0c:	e00e      	b.n	8008e2c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	701a      	strb	r2, [r3, #0]
 8008e14:	e00a      	b.n	8008e2c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008e1c:	f103 020a 	add.w	r2, r3, #10
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008e26:	200a      	movs	r0, #10
 8008e28:	f004 faa3 	bl	800d372 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008e40:	2200      	movs	r2, #0
 8008e42:	4619      	mov	r1, r3
 8008e44:	f001 fdc6 	bl	800a9d4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e48:	e1c8      	b.n	80091dc <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d005      	beq.n	8008e60 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008e5a:	2104      	movs	r1, #4
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008e60:	2064      	movs	r0, #100	@ 0x64
 8008e62:	f004 fa86 	bl	800d372 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f004 f952 	bl	800d110 <USBH_LL_GetSpeed>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	461a      	mov	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2205      	movs	r2, #5
 8008e7a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f001 fc8b 	bl	800a79a <USBH_AllocPipe>
 8008e84:	4603      	mov	r3, r0
 8008e86:	461a      	mov	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008e8c:	2180      	movs	r1, #128	@ 0x80
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f001 fc83 	bl	800a79a <USBH_AllocPipe>
 8008e94:	4603      	mov	r3, r0
 8008e96:	461a      	mov	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	7919      	ldrb	r1, [r3, #4]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008eb0:	9202      	str	r2, [sp, #8]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	9201      	str	r2, [sp, #4]
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2280      	movs	r2, #128	@ 0x80
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f001 fc3d 	bl	800a73c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	7959      	ldrb	r1, [r3, #5]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008ed6:	9202      	str	r2, [sp, #8]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	9201      	str	r2, [sp, #4]
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f001 fc2a 	bl	800a73c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008efc:	2200      	movs	r2, #0
 8008efe:	4619      	mov	r1, r3
 8008f00:	f001 fd68 	bl	800a9d4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f04:	e16a      	b.n	80091dc <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f96e 	bl	80091e8 <USBH_HandleEnum>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008f10:	7bbb      	ldrb	r3, [r7, #14]
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f040 815c 	bne.w	80091d2 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d103      	bne.n	8008f34 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2208      	movs	r2, #8
 8008f30:	701a      	strb	r2, [r3, #0]
 8008f32:	e002      	b.n	8008f3a <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2207      	movs	r2, #7
 8008f38:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2205      	movs	r2, #5
 8008f3e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008f4e:	2200      	movs	r2, #0
 8008f50:	4619      	mov	r1, r3
 8008f52:	f001 fd3f 	bl	800a9d4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008f56:	e13c      	b.n	80091d2 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f000 8139 	beq.w	80091d6 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008f6a:	2101      	movs	r1, #1
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2208      	movs	r2, #8
 8008f74:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2205      	movs	r2, #5
 8008f7a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	f001 fd21 	bl	800a9d4 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008f92:	e120      	b.n	80091d6 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 fd10 	bl	80099c2 <USBH_SetCfg>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d102      	bne.n	8008fae <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2209      	movs	r2, #9
 8008fac:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	f001 fd05 	bl	800a9d4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008fca:	e107      	b.n	80091dc <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008fd2:	f003 0320 	and.w	r3, r3, #32
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d015      	beq.n	8009006 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008fda:	2101      	movs	r1, #1
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 fd13 	bl	8009a08 <USBH_SetFeature>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008fe6:	7bbb      	ldrb	r3, [r7, #14]
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d103      	bne.n	8008ff6 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	220a      	movs	r2, #10
 8008ff2:	701a      	strb	r2, [r3, #0]
 8008ff4:	e00a      	b.n	800900c <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8008ff6:	7bbb      	ldrb	r3, [r7, #14]
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	2b03      	cmp	r3, #3
 8008ffc:	d106      	bne.n	800900c <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	220a      	movs	r2, #10
 8009002:	701a      	strb	r2, [r3, #0]
 8009004:	e002      	b.n	800900c <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	220a      	movs	r2, #10
 800900a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009020:	2200      	movs	r2, #0
 8009022:	4619      	mov	r1, r3
 8009024:	f001 fcd6 	bl	800a9d4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009028:	e0d8      	b.n	80091dc <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009030:	2b00      	cmp	r3, #0
 8009032:	d03f      	beq.n	80090b4 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800903c:	2300      	movs	r3, #0
 800903e:	73fb      	strb	r3, [r7, #15]
 8009040:	e016      	b.n	8009070 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009042:	7bfa      	ldrb	r2, [r7, #15]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	32de      	adds	r2, #222	@ 0xde
 8009048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800904c:	791a      	ldrb	r2, [r3, #4]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009054:	429a      	cmp	r2, r3
 8009056:	d108      	bne.n	800906a <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009058:	7bfa      	ldrb	r2, [r7, #15]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	32de      	adds	r2, #222	@ 0xde
 800905e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009068:	e005      	b.n	8009076 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800906a:	7bfb      	ldrb	r3, [r7, #15]
 800906c:	3301      	adds	r3, #1
 800906e:	73fb      	strb	r3, [r7, #15]
 8009070:	7bfb      	ldrb	r3, [r7, #15]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d0e5      	beq.n	8009042 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800907c:	2b00      	cmp	r3, #0
 800907e:	d016      	beq.n	80090ae <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	4798      	blx	r3
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d109      	bne.n	80090a6 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2206      	movs	r2, #6
 8009096:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800909e:	2103      	movs	r1, #3
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	4798      	blx	r3
 80090a4:	e006      	b.n	80090b4 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	220d      	movs	r2, #13
 80090aa:	701a      	strb	r2, [r3, #0]
 80090ac:	e002      	b.n	80090b4 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	220d      	movs	r2, #13
 80090b2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2205      	movs	r2, #5
 80090b8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80090c8:	2200      	movs	r2, #0
 80090ca:	4619      	mov	r1, r3
 80090cc:	f001 fc82 	bl	800a9d4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80090d0:	e084      	b.n	80091dc <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d017      	beq.n	800910c <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	4798      	blx	r3
 80090e8:	4603      	mov	r3, r0
 80090ea:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80090ec:	7bbb      	ldrb	r3, [r7, #14]
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d103      	bne.n	80090fc <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	220b      	movs	r2, #11
 80090f8:	701a      	strb	r2, [r3, #0]
 80090fa:	e00a      	b.n	8009112 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 80090fc:	7bbb      	ldrb	r3, [r7, #14]
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	2b02      	cmp	r3, #2
 8009102:	d106      	bne.n	8009112 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	220d      	movs	r2, #13
 8009108:	701a      	strb	r2, [r3, #0]
 800910a:	e002      	b.n	8009112 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	220d      	movs	r2, #13
 8009110:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2205      	movs	r2, #5
 8009116:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009126:	2200      	movs	r2, #0
 8009128:	4619      	mov	r1, r3
 800912a:	f001 fc53 	bl	800a9d4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800912e:	e055      	b.n	80091dc <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009136:	2b00      	cmp	r3, #0
 8009138:	d04f      	beq.n	80091da <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009140:	695b      	ldr	r3, [r3, #20]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	4798      	blx	r3
      }
      break;
 8009146:	e048      	b.n	80091da <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f7ff fccf 	bl	8008af4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800915c:	2b00      	cmp	r3, #0
 800915e:	d009      	beq.n	8009174 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800917a:	2b00      	cmp	r3, #0
 800917c:	d005      	beq.n	800918a <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009184:	2105      	movs	r1, #5
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b01      	cmp	r3, #1
 8009194:	d107      	bne.n	80091a6 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f7ff fda7 	bl	8008cf2 <USBH_Start>
 80091a4:	e002      	b.n	80091ac <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f003 ff7c 	bl	800d0a4 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80091c0:	2200      	movs	r2, #0
 80091c2:	4619      	mov	r1, r3
 80091c4:	f001 fc06 	bl	800a9d4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80091c8:	e008      	b.n	80091dc <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 80091ca:	bf00      	nop
 80091cc:	e006      	b.n	80091dc <USBH_Process+0x4c8>
      break;
 80091ce:	bf00      	nop
 80091d0:	e004      	b.n	80091dc <USBH_Process+0x4c8>
      break;
 80091d2:	bf00      	nop
 80091d4:	e002      	b.n	80091dc <USBH_Process+0x4c8>
    break;
 80091d6:	bf00      	nop
 80091d8:	e000      	b.n	80091dc <USBH_Process+0x4c8>
      break;
 80091da:	bf00      	nop
  }
  return USBH_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop

080091e8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b088      	sub	sp, #32
 80091ec:	af04      	add	r7, sp, #16
 80091ee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80091f0:	2301      	movs	r3, #1
 80091f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80091f4:	2301      	movs	r3, #1
 80091f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	785b      	ldrb	r3, [r3, #1]
 80091fc:	2b07      	cmp	r3, #7
 80091fe:	f200 8204 	bhi.w	800960a <USBH_HandleEnum+0x422>
 8009202:	a201      	add	r2, pc, #4	@ (adr r2, 8009208 <USBH_HandleEnum+0x20>)
 8009204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009208:	08009229 	.word	0x08009229
 800920c:	080092e3 	.word	0x080092e3
 8009210:	0800934d 	.word	0x0800934d
 8009214:	080093d7 	.word	0x080093d7
 8009218:	08009441 	.word	0x08009441
 800921c:	080094b1 	.word	0x080094b1
 8009220:	0800954d 	.word	0x0800954d
 8009224:	080095cb 	.word	0x080095cb
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009228:	2108      	movs	r1, #8
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fae6 	bl	80097fc <USBH_Get_DevDesc>
 8009230:	4603      	mov	r3, r0
 8009232:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009234:	7bbb      	ldrb	r3, [r7, #14]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d12e      	bne.n	8009298 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	7919      	ldrb	r1, [r3, #4]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800925e:	9202      	str	r2, [sp, #8]
 8009260:	2200      	movs	r2, #0
 8009262:	9201      	str	r2, [sp, #4]
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	4603      	mov	r3, r0
 8009268:	2280      	movs	r2, #128	@ 0x80
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f001 fa66 	bl	800a73c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	7959      	ldrb	r1, [r3, #5]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009284:	9202      	str	r2, [sp, #8]
 8009286:	2200      	movs	r2, #0
 8009288:	9201      	str	r2, [sp, #4]
 800928a:	9300      	str	r3, [sp, #0]
 800928c:	4603      	mov	r3, r0
 800928e:	2200      	movs	r2, #0
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f001 fa53 	bl	800a73c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009296:	e1ba      	b.n	800960e <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009298:	7bbb      	ldrb	r3, [r7, #14]
 800929a:	2b03      	cmp	r3, #3
 800929c:	f040 81b7 	bne.w	800960e <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80092a6:	3301      	adds	r3, #1
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80092b6:	2b03      	cmp	r3, #3
 80092b8:	d903      	bls.n	80092c2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	220d      	movs	r2, #13
 80092be:	701a      	strb	r2, [r3, #0]
      break;
 80092c0:	e1a5      	b.n	800960e <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	795b      	ldrb	r3, [r3, #5]
 80092c6:	4619      	mov	r1, r3
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 fa87 	bl	800a7dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	791b      	ldrb	r3, [r3, #4]
 80092d2:	4619      	mov	r1, r3
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f001 fa81 	bl	800a7dc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	701a      	strb	r2, [r3, #0]
      break;
 80092e0:	e195      	b.n	800960e <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80092e2:	2112      	movs	r1, #18
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 fa89 	bl	80097fc <USBH_Get_DevDesc>
 80092ea:	4603      	mov	r3, r0
 80092ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80092ee:	7bbb      	ldrb	r3, [r7, #14]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d103      	bne.n	80092fc <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2202      	movs	r2, #2
 80092f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80092fa:	e18a      	b.n	8009612 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092fc:	7bbb      	ldrb	r3, [r7, #14]
 80092fe:	2b03      	cmp	r3, #3
 8009300:	f040 8187 	bne.w	8009612 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800930a:	3301      	adds	r3, #1
 800930c:	b2da      	uxtb	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800931a:	2b03      	cmp	r3, #3
 800931c:	d903      	bls.n	8009326 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	220d      	movs	r2, #13
 8009322:	701a      	strb	r2, [r3, #0]
      break;
 8009324:	e175      	b.n	8009612 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	795b      	ldrb	r3, [r3, #5]
 800932a:	4619      	mov	r1, r3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f001 fa55 	bl	800a7dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	791b      	ldrb	r3, [r3, #4]
 8009336:	4619      	mov	r1, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f001 fa4f 	bl	800a7dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	701a      	strb	r2, [r3, #0]
      break;
 800934a:	e162      	b.n	8009612 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800934c:	2101      	movs	r1, #1
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fb13 	bl	800997a <USBH_SetAddress>
 8009354:	4603      	mov	r3, r0
 8009356:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009358:	7bbb      	ldrb	r3, [r7, #14]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d130      	bne.n	80093c0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800935e:	2002      	movs	r0, #2
 8009360:	f004 f807 	bl	800d372 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2203      	movs	r2, #3
 8009370:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	7919      	ldrb	r1, [r3, #4]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009386:	9202      	str	r2, [sp, #8]
 8009388:	2200      	movs	r2, #0
 800938a:	9201      	str	r2, [sp, #4]
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	4603      	mov	r3, r0
 8009390:	2280      	movs	r2, #128	@ 0x80
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f001 f9d2 	bl	800a73c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	7959      	ldrb	r1, [r3, #5]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80093ac:	9202      	str	r2, [sp, #8]
 80093ae:	2200      	movs	r2, #0
 80093b0:	9201      	str	r2, [sp, #4]
 80093b2:	9300      	str	r3, [sp, #0]
 80093b4:	4603      	mov	r3, r0
 80093b6:	2200      	movs	r2, #0
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f001 f9bf 	bl	800a73c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80093be:	e12a      	b.n	8009616 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093c0:	7bbb      	ldrb	r3, [r7, #14]
 80093c2:	2b03      	cmp	r3, #3
 80093c4:	f040 8127 	bne.w	8009616 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	220d      	movs	r2, #13
 80093cc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	705a      	strb	r2, [r3, #1]
      break;
 80093d4:	e11f      	b.n	8009616 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80093d6:	2109      	movs	r1, #9
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 fa3b 	bl	8009854 <USBH_Get_CfgDesc>
 80093de:	4603      	mov	r3, r0
 80093e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80093e2:	7bbb      	ldrb	r3, [r7, #14]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d103      	bne.n	80093f0 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2204      	movs	r2, #4
 80093ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80093ee:	e114      	b.n	800961a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093f0:	7bbb      	ldrb	r3, [r7, #14]
 80093f2:	2b03      	cmp	r3, #3
 80093f4:	f040 8111 	bne.w	800961a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80093fe:	3301      	adds	r3, #1
 8009400:	b2da      	uxtb	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800940e:	2b03      	cmp	r3, #3
 8009410:	d903      	bls.n	800941a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	220d      	movs	r2, #13
 8009416:	701a      	strb	r2, [r3, #0]
      break;
 8009418:	e0ff      	b.n	800961a <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	795b      	ldrb	r3, [r3, #5]
 800941e:	4619      	mov	r1, r3
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f001 f9db 	bl	800a7dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	791b      	ldrb	r3, [r3, #4]
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f001 f9d5 	bl	800a7dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	701a      	strb	r2, [r3, #0]
      break;
 800943e:	e0ec      	b.n	800961a <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009446:	4619      	mov	r1, r3
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 fa03 	bl	8009854 <USBH_Get_CfgDesc>
 800944e:	4603      	mov	r3, r0
 8009450:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009452:	7bbb      	ldrb	r3, [r7, #14]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d103      	bne.n	8009460 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2205      	movs	r2, #5
 800945c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800945e:	e0de      	b.n	800961e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009460:	7bbb      	ldrb	r3, [r7, #14]
 8009462:	2b03      	cmp	r3, #3
 8009464:	f040 80db 	bne.w	800961e <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800946e:	3301      	adds	r3, #1
 8009470:	b2da      	uxtb	r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800947e:	2b03      	cmp	r3, #3
 8009480:	d903      	bls.n	800948a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	220d      	movs	r2, #13
 8009486:	701a      	strb	r2, [r3, #0]
      break;
 8009488:	e0c9      	b.n	800961e <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	795b      	ldrb	r3, [r3, #5]
 800948e:	4619      	mov	r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f001 f9a3 	bl	800a7dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	791b      	ldrb	r3, [r3, #4]
 800949a:	4619      	mov	r1, r3
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f001 f99d 	bl	800a7dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	701a      	strb	r2, [r3, #0]
      break;
 80094ae:	e0b6      	b.n	800961e <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d036      	beq.n	8009528 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80094c6:	23ff      	movs	r3, #255	@ 0xff
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 f9ed 	bl	80098a8 <USBH_Get_StringDesc>
 80094ce:	4603      	mov	r3, r0
 80094d0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80094d2:	7bbb      	ldrb	r3, [r7, #14]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d111      	bne.n	80094fc <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2206      	movs	r2, #6
 80094dc:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2205      	movs	r2, #5
 80094e2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80094f2:	2200      	movs	r2, #0
 80094f4:	4619      	mov	r1, r3
 80094f6:	f001 fa6d 	bl	800a9d4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80094fa:	e092      	b.n	8009622 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094fc:	7bbb      	ldrb	r3, [r7, #14]
 80094fe:	2b03      	cmp	r3, #3
 8009500:	f040 808f 	bne.w	8009622 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2206      	movs	r2, #6
 8009508:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2205      	movs	r2, #5
 800950e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800951e:	2200      	movs	r2, #0
 8009520:	4619      	mov	r1, r3
 8009522:	f001 fa57 	bl	800a9d4 <osMessagePut>
      break;
 8009526:	e07c      	b.n	8009622 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2206      	movs	r2, #6
 800952c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2205      	movs	r2, #5
 8009532:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009542:	2200      	movs	r2, #0
 8009544:	4619      	mov	r1, r3
 8009546:	f001 fa45 	bl	800a9d4 <osMessagePut>
      break;
 800954a:	e06a      	b.n	8009622 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009552:	2b00      	cmp	r3, #0
 8009554:	d027      	beq.n	80095a6 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009562:	23ff      	movs	r3, #255	@ 0xff
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 f99f 	bl	80098a8 <USBH_Get_StringDesc>
 800956a:	4603      	mov	r3, r0
 800956c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800956e:	7bbb      	ldrb	r3, [r7, #14]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d103      	bne.n	800957c <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2207      	movs	r2, #7
 8009578:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800957a:	e054      	b.n	8009626 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800957c:	7bbb      	ldrb	r3, [r7, #14]
 800957e:	2b03      	cmp	r3, #3
 8009580:	d151      	bne.n	8009626 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2207      	movs	r2, #7
 8009586:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2205      	movs	r2, #5
 800958c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800959c:	2200      	movs	r2, #0
 800959e:	4619      	mov	r1, r3
 80095a0:	f001 fa18 	bl	800a9d4 <osMessagePut>
      break;
 80095a4:	e03f      	b.n	8009626 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2207      	movs	r2, #7
 80095aa:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2205      	movs	r2, #5
 80095b0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80095c0:	2200      	movs	r2, #0
 80095c2:	4619      	mov	r1, r3
 80095c4:	f001 fa06 	bl	800a9d4 <osMessagePut>
      break;
 80095c8:	e02d      	b.n	8009626 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d017      	beq.n	8009604 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80095e0:	23ff      	movs	r3, #255	@ 0xff
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 f960 	bl	80098a8 <USBH_Get_StringDesc>
 80095e8:	4603      	mov	r3, r0
 80095ea:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80095ec:	7bbb      	ldrb	r3, [r7, #14]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d102      	bne.n	80095f8 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80095f6:	e018      	b.n	800962a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095f8:	7bbb      	ldrb	r3, [r7, #14]
 80095fa:	2b03      	cmp	r3, #3
 80095fc:	d115      	bne.n	800962a <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	73fb      	strb	r3, [r7, #15]
      break;
 8009602:	e012      	b.n	800962a <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8009604:	2300      	movs	r3, #0
 8009606:	73fb      	strb	r3, [r7, #15]
      break;
 8009608:	e00f      	b.n	800962a <USBH_HandleEnum+0x442>

    default:
      break;
 800960a:	bf00      	nop
 800960c:	e00e      	b.n	800962c <USBH_HandleEnum+0x444>
      break;
 800960e:	bf00      	nop
 8009610:	e00c      	b.n	800962c <USBH_HandleEnum+0x444>
      break;
 8009612:	bf00      	nop
 8009614:	e00a      	b.n	800962c <USBH_HandleEnum+0x444>
      break;
 8009616:	bf00      	nop
 8009618:	e008      	b.n	800962c <USBH_HandleEnum+0x444>
      break;
 800961a:	bf00      	nop
 800961c:	e006      	b.n	800962c <USBH_HandleEnum+0x444>
      break;
 800961e:	bf00      	nop
 8009620:	e004      	b.n	800962c <USBH_HandleEnum+0x444>
      break;
 8009622:	bf00      	nop
 8009624:	e002      	b.n	800962c <USBH_HandleEnum+0x444>
      break;
 8009626:	bf00      	nop
 8009628:	e000      	b.n	800962c <USBH_HandleEnum+0x444>
      break;
 800962a:	bf00      	nop
  }
  return Status;
 800962c:	7bfb      	ldrb	r3, [r7, #15]
}
 800962e:	4618      	mov	r0, r3
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop

08009638 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	683a      	ldr	r2, [r7, #0]
 8009646:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800964a:	bf00      	nop
 800964c:	370c      	adds	r7, #12
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b082      	sub	sp, #8
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009664:	1c5a      	adds	r2, r3, #1
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 f804 	bl	800967a <USBH_HandleSof>
}
 8009672:	bf00      	nop
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b082      	sub	sp, #8
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	b2db      	uxtb	r3, r3
 8009688:	2b0b      	cmp	r3, #11
 800968a:	d10a      	bne.n	80096a2 <USBH_HandleSof+0x28>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009692:	2b00      	cmp	r3, #0
 8009694:	d005      	beq.n	80096a2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800969c:	699b      	ldr	r3, [r3, #24]
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	4798      	blx	r3
  }
}
 80096a2:	bf00      	nop
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b082      	sub	sp, #8
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2201      	movs	r2, #1
 80096b6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2201      	movs	r2, #1
 80096be:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80096ce:	2200      	movs	r2, #0
 80096d0:	4619      	mov	r1, r3
 80096d2:	f001 f97f 	bl	800a9d4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80096d6:	bf00      	nop
}
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80096de:	b480      	push	{r7}
 80096e0:	b083      	sub	sp, #12
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80096ee:	bf00      	nop
}
 80096f0:	370c      	adds	r7, #12
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr

080096fa <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b082      	sub	sp, #8
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2201      	movs	r2, #1
 8009706:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2201      	movs	r2, #1
 800971e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800972e:	2200      	movs	r2, #0
 8009730:	4619      	mov	r1, r3
 8009732:	f001 f94f 	bl	800a9d4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3708      	adds	r7, #8
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f003 fcba 	bl	800d0da <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	791b      	ldrb	r3, [r3, #4]
 800976a:	4619      	mov	r1, r3
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f001 f835 	bl	800a7dc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	795b      	ldrb	r3, [r3, #5]
 8009776:	4619      	mov	r1, r3
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f001 f82f 	bl	800a7dc <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2201      	movs	r2, #1
 8009782:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009792:	2200      	movs	r2, #0
 8009794:	4619      	mov	r1, r3
 8009796:	f001 f91d 	bl	800a9d4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800979a:	2300      	movs	r3, #0
}
 800979c:	4618      	mov	r0, r3
 800979e:	3708      	adds	r7, #8
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 80097b2:	f107 030c 	add.w	r3, r7, #12
 80097b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80097ba:	4618      	mov	r0, r3
 80097bc:	f001 f94a 	bl	800aa54 <osMessageGet>
    if (event.status == osEventMessage)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2b10      	cmp	r3, #16
 80097c4:	d1f2      	bne.n	80097ac <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7ff faa4 	bl	8008d14 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80097cc:	e7ee      	b.n	80097ac <USBH_Process_OS+0x8>

080097ce <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b082      	sub	sp, #8
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2201      	movs	r2, #1
 80097da:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80097ea:	2200      	movs	r2, #0
 80097ec:	4619      	mov	r1, r3
 80097ee:	f001 f8f1 	bl	800a9d4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b086      	sub	sp, #24
 8009800:	af02      	add	r7, sp, #8
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	460b      	mov	r3, r1
 8009806:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009808:	887b      	ldrh	r3, [r7, #2]
 800980a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800980e:	d901      	bls.n	8009814 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009810:	2303      	movs	r3, #3
 8009812:	e01b      	b.n	800984c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800981a:	887b      	ldrh	r3, [r7, #2]
 800981c:	9300      	str	r3, [sp, #0]
 800981e:	4613      	mov	r3, r2
 8009820:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009824:	2100      	movs	r1, #0
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f872 	bl	8009910 <USBH_GetDescriptor>
 800982c:	4603      	mov	r3, r0
 800982e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009830:	7bfb      	ldrb	r3, [r7, #15]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d109      	bne.n	800984a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800983c:	887a      	ldrh	r2, [r7, #2]
 800983e:	4619      	mov	r1, r3
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 f929 	bl	8009a98 <USBH_ParseDevDesc>
 8009846:	4603      	mov	r3, r0
 8009848:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800984a:	7bfb      	ldrb	r3, [r7, #15]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b086      	sub	sp, #24
 8009858:	af02      	add	r7, sp, #8
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	460b      	mov	r3, r1
 800985e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	331c      	adds	r3, #28
 8009864:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009866:	887b      	ldrh	r3, [r7, #2]
 8009868:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800986c:	d901      	bls.n	8009872 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800986e:	2303      	movs	r3, #3
 8009870:	e016      	b.n	80098a0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009872:	887b      	ldrh	r3, [r7, #2]
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800987c:	2100      	movs	r1, #0
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f846 	bl	8009910 <USBH_GetDescriptor>
 8009884:	4603      	mov	r3, r0
 8009886:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009888:	7bfb      	ldrb	r3, [r7, #15]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d107      	bne.n	800989e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800988e:	887b      	ldrh	r3, [r7, #2]
 8009890:	461a      	mov	r2, r3
 8009892:	68b9      	ldr	r1, [r7, #8]
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 f9af 	bl	8009bf8 <USBH_ParseCfgDesc>
 800989a:	4603      	mov	r3, r0
 800989c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800989e:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3710      	adds	r7, #16
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b088      	sub	sp, #32
 80098ac:	af02      	add	r7, sp, #8
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	607a      	str	r2, [r7, #4]
 80098b2:	461a      	mov	r2, r3
 80098b4:	460b      	mov	r3, r1
 80098b6:	72fb      	strb	r3, [r7, #11]
 80098b8:	4613      	mov	r3, r2
 80098ba:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80098bc:	893b      	ldrh	r3, [r7, #8]
 80098be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098c2:	d802      	bhi.n	80098ca <USBH_Get_StringDesc+0x22>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d101      	bne.n	80098ce <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80098ca:	2303      	movs	r3, #3
 80098cc:	e01c      	b.n	8009908 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80098ce:	7afb      	ldrb	r3, [r7, #11]
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80098d6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80098de:	893b      	ldrh	r3, [r7, #8]
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	460b      	mov	r3, r1
 80098e4:	2100      	movs	r1, #0
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f000 f812 	bl	8009910 <USBH_GetDescriptor>
 80098ec:	4603      	mov	r3, r0
 80098ee:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80098f0:	7dfb      	ldrb	r3, [r7, #23]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d107      	bne.n	8009906 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80098fc:	893a      	ldrh	r2, [r7, #8]
 80098fe:	6879      	ldr	r1, [r7, #4]
 8009900:	4618      	mov	r0, r3
 8009902:	f000 fb8d 	bl	800a020 <USBH_ParseStringDesc>
  }

  return status;
 8009906:	7dfb      	ldrb	r3, [r7, #23]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3718      	adds	r7, #24
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	607b      	str	r3, [r7, #4]
 800991a:	460b      	mov	r3, r1
 800991c:	72fb      	strb	r3, [r7, #11]
 800991e:	4613      	mov	r3, r2
 8009920:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	789b      	ldrb	r3, [r3, #2]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d11c      	bne.n	8009964 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800992a:	7afb      	ldrb	r3, [r7, #11]
 800992c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009930:	b2da      	uxtb	r2, r3
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2206      	movs	r2, #6
 800993a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	893a      	ldrh	r2, [r7, #8]
 8009940:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009942:	893b      	ldrh	r3, [r7, #8]
 8009944:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009948:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800994c:	d104      	bne.n	8009958 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f240 4209 	movw	r2, #1033	@ 0x409
 8009954:	829a      	strh	r2, [r3, #20]
 8009956:	e002      	b.n	800995e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2200      	movs	r2, #0
 800995c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	8b3a      	ldrh	r2, [r7, #24]
 8009962:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009964:	8b3b      	ldrh	r3, [r7, #24]
 8009966:	461a      	mov	r2, r3
 8009968:	6879      	ldr	r1, [r7, #4]
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 fba5 	bl	800a0ba <USBH_CtlReq>
 8009970:	4603      	mov	r3, r0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b082      	sub	sp, #8
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	460b      	mov	r3, r1
 8009984:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	789b      	ldrb	r3, [r3, #2]
 800998a:	2b01      	cmp	r3, #1
 800998c:	d10f      	bne.n	80099ae <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2205      	movs	r2, #5
 8009998:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800999a:	78fb      	ldrb	r3, [r7, #3]
 800999c:	b29a      	uxth	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80099ae:	2200      	movs	r2, #0
 80099b0:	2100      	movs	r1, #0
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 fb81 	bl	800a0ba <USBH_CtlReq>
 80099b8:	4603      	mov	r3, r0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b082      	sub	sp, #8
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	460b      	mov	r3, r1
 80099cc:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	789b      	ldrb	r3, [r3, #2]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d10e      	bne.n	80099f4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2209      	movs	r2, #9
 80099e0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	887a      	ldrh	r2, [r7, #2]
 80099e6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80099f4:	2200      	movs	r2, #0
 80099f6:	2100      	movs	r1, #0
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fb5e 	bl	800a0ba <USBH_CtlReq>
 80099fe:	4603      	mov	r3, r0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	460b      	mov	r3, r1
 8009a12:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	789b      	ldrb	r3, [r3, #2]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d10f      	bne.n	8009a3c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2203      	movs	r2, #3
 8009a26:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009a28:	78fb      	ldrb	r3, [r7, #3]
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	2100      	movs	r1, #0
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 fb3a 	bl	800a0ba <USBH_CtlReq>
 8009a46:	4603      	mov	r3, r0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3708      	adds	r7, #8
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	460b      	mov	r3, r1
 8009a5a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	789b      	ldrb	r3, [r3, #2]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d10f      	bne.n	8009a84 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2202      	movs	r2, #2
 8009a68:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009a76:	78fb      	ldrb	r3, [r7, #3]
 8009a78:	b29a      	uxth	r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009a84:	2200      	movs	r2, #0
 8009a86:	2100      	movs	r1, #0
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 fb16 	bl	800a0ba <USBH_CtlReq>
 8009a8e:	4603      	mov	r3, r0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b087      	sub	sp, #28
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009aac:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d101      	bne.n	8009abc <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009ab8:	2302      	movs	r3, #2
 8009aba:	e094      	b.n	8009be6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	781a      	ldrb	r2, [r3, #0]
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	785a      	ldrb	r2, [r3, #1]
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	3302      	adds	r3, #2
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	3303      	adds	r3, #3
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	021b      	lsls	r3, r3, #8
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	b29a      	uxth	r2, r3
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	791a      	ldrb	r2, [r3, #4]
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	795a      	ldrb	r2, [r3, #5]
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	799a      	ldrb	r2, [r3, #6]
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	79da      	ldrb	r2, [r3, #7]
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d004      	beq.n	8009b1a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d11b      	bne.n	8009b52 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	79db      	ldrb	r3, [r3, #7]
 8009b1e:	2b20      	cmp	r3, #32
 8009b20:	dc0f      	bgt.n	8009b42 <USBH_ParseDevDesc+0xaa>
 8009b22:	2b08      	cmp	r3, #8
 8009b24:	db0f      	blt.n	8009b46 <USBH_ParseDevDesc+0xae>
 8009b26:	3b08      	subs	r3, #8
 8009b28:	4a32      	ldr	r2, [pc, #200]	@ (8009bf4 <USBH_ParseDevDesc+0x15c>)
 8009b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b2e:	f003 0301 	and.w	r3, r3, #1
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	bf14      	ite	ne
 8009b36:	2301      	movne	r3, #1
 8009b38:	2300      	moveq	r3, #0
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d106      	bne.n	8009b4e <USBH_ParseDevDesc+0xb6>
 8009b40:	e001      	b.n	8009b46 <USBH_ParseDevDesc+0xae>
 8009b42:	2b40      	cmp	r3, #64	@ 0x40
 8009b44:	d003      	beq.n	8009b4e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	2208      	movs	r2, #8
 8009b4a:	71da      	strb	r2, [r3, #7]
        break;
 8009b4c:	e000      	b.n	8009b50 <USBH_ParseDevDesc+0xb8>
        break;
 8009b4e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009b50:	e00e      	b.n	8009b70 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	d107      	bne.n	8009b6c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	79db      	ldrb	r3, [r3, #7]
 8009b60:	2b08      	cmp	r3, #8
 8009b62:	d005      	beq.n	8009b70 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	2208      	movs	r2, #8
 8009b68:	71da      	strb	r2, [r3, #7]
 8009b6a:	e001      	b.n	8009b70 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009b6c:	2303      	movs	r3, #3
 8009b6e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009b70:	88fb      	ldrh	r3, [r7, #6]
 8009b72:	2b08      	cmp	r3, #8
 8009b74:	d936      	bls.n	8009be4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	3308      	adds	r3, #8
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	3309      	adds	r3, #9
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	021b      	lsls	r3, r3, #8
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	330a      	adds	r3, #10
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	461a      	mov	r2, r3
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	330b      	adds	r3, #11
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	021b      	lsls	r3, r3, #8
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	330c      	adds	r3, #12
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	330d      	adds	r3, #13
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	021b      	lsls	r3, r3, #8
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	b29a      	uxth	r2, r3
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	7b9a      	ldrb	r2, [r3, #14]
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	7bda      	ldrb	r2, [r3, #15]
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	7c1a      	ldrb	r2, [r3, #16]
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	7c5a      	ldrb	r2, [r3, #17]
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	371c      	adds	r7, #28
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	01000101 	.word	0x01000101

08009bf8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b08c      	sub	sp, #48	@ 0x30
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	4613      	mov	r3, r2
 8009c04:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009c0c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009c14:	2300      	movs	r3, #0
 8009c16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d101      	bne.n	8009c2a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009c26:	2302      	movs	r3, #2
 8009c28:	e0da      	b.n	8009de0 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	781a      	ldrb	r2, [r3, #0]
 8009c32:	6a3b      	ldr	r3, [r7, #32]
 8009c34:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	785a      	ldrb	r2, [r3, #1]
 8009c3a:	6a3b      	ldr	r3, [r7, #32]
 8009c3c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	3302      	adds	r3, #2
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	461a      	mov	r2, r3
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	3303      	adds	r3, #3
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	021b      	lsls	r3, r3, #8
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	4313      	orrs	r3, r2
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c58:	bf28      	it	cs
 8009c5a:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009c5e:	b29a      	uxth	r2, r3
 8009c60:	6a3b      	ldr	r3, [r7, #32]
 8009c62:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	791a      	ldrb	r2, [r3, #4]
 8009c68:	6a3b      	ldr	r3, [r7, #32]
 8009c6a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	795a      	ldrb	r2, [r3, #5]
 8009c70:	6a3b      	ldr	r3, [r7, #32]
 8009c72:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	799a      	ldrb	r2, [r3, #6]
 8009c78:	6a3b      	ldr	r3, [r7, #32]
 8009c7a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	79da      	ldrb	r2, [r3, #7]
 8009c80:	6a3b      	ldr	r3, [r7, #32]
 8009c82:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	7a1a      	ldrb	r2, [r3, #8]
 8009c88:	6a3b      	ldr	r3, [r7, #32]
 8009c8a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009c8c:	6a3b      	ldr	r3, [r7, #32]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	2b09      	cmp	r3, #9
 8009c92:	d002      	beq.n	8009c9a <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009c94:	6a3b      	ldr	r3, [r7, #32]
 8009c96:	2209      	movs	r2, #9
 8009c98:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009c9a:	88fb      	ldrh	r3, [r7, #6]
 8009c9c:	2b09      	cmp	r3, #9
 8009c9e:	f240 809d 	bls.w	8009ddc <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009ca2:	2309      	movs	r3, #9
 8009ca4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009caa:	e081      	b.n	8009db0 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009cac:	f107 0316 	add.w	r3, r7, #22
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cb4:	f000 f9e7 	bl	800a086 <USBH_GetNextDesc>
 8009cb8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cbc:	785b      	ldrb	r3, [r3, #1]
 8009cbe:	2b04      	cmp	r3, #4
 8009cc0:	d176      	bne.n	8009db0 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	2b09      	cmp	r3, #9
 8009cc8:	d002      	beq.n	8009cd0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ccc:	2209      	movs	r2, #9
 8009cce:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009cd4:	221a      	movs	r2, #26
 8009cd6:	fb02 f303 	mul.w	r3, r2, r3
 8009cda:	3308      	adds	r3, #8
 8009cdc:	6a3a      	ldr	r2, [r7, #32]
 8009cde:	4413      	add	r3, r2
 8009ce0:	3302      	adds	r3, #2
 8009ce2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009ce4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ce6:	69f8      	ldr	r0, [r7, #28]
 8009ce8:	f000 f87e 	bl	8009de8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009cec:	2300      	movs	r3, #0
 8009cee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009cf6:	e043      	b.n	8009d80 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009cf8:	f107 0316 	add.w	r3, r7, #22
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d00:	f000 f9c1 	bl	800a086 <USBH_GetNextDesc>
 8009d04:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d08:	785b      	ldrb	r3, [r3, #1]
 8009d0a:	2b05      	cmp	r3, #5
 8009d0c:	d138      	bne.n	8009d80 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	795b      	ldrb	r3, [r3, #5]
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d113      	bne.n	8009d3e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009d1a:	2b02      	cmp	r3, #2
 8009d1c:	d003      	beq.n	8009d26 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	799b      	ldrb	r3, [r3, #6]
 8009d22:	2b03      	cmp	r3, #3
 8009d24:	d10b      	bne.n	8009d3e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	79db      	ldrb	r3, [r3, #7]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d10b      	bne.n	8009d46 <USBH_ParseCfgDesc+0x14e>
 8009d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	2b09      	cmp	r3, #9
 8009d34:	d007      	beq.n	8009d46 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d38:	2209      	movs	r2, #9
 8009d3a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009d3c:	e003      	b.n	8009d46 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d40:	2207      	movs	r2, #7
 8009d42:	701a      	strb	r2, [r3, #0]
 8009d44:	e000      	b.n	8009d48 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009d46:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009d48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d4c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009d50:	3201      	adds	r2, #1
 8009d52:	00d2      	lsls	r2, r2, #3
 8009d54:	211a      	movs	r1, #26
 8009d56:	fb01 f303 	mul.w	r3, r1, r3
 8009d5a:	4413      	add	r3, r2
 8009d5c:	3308      	adds	r3, #8
 8009d5e:	6a3a      	ldr	r2, [r7, #32]
 8009d60:	4413      	add	r3, r2
 8009d62:	3304      	adds	r3, #4
 8009d64:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009d66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d68:	69b9      	ldr	r1, [r7, #24]
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f000 f870 	bl	8009e50 <USBH_ParseEPDesc>
 8009d70:	4603      	mov	r3, r0
 8009d72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009d76:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	791b      	ldrb	r3, [r3, #4]
 8009d84:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d204      	bcs.n	8009d96 <USBH_ParseCfgDesc+0x19e>
 8009d8c:	6a3b      	ldr	r3, [r7, #32]
 8009d8e:	885a      	ldrh	r2, [r3, #2]
 8009d90:	8afb      	ldrh	r3, [r7, #22]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d8b0      	bhi.n	8009cf8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	791b      	ldrb	r3, [r3, #4]
 8009d9a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d201      	bcs.n	8009da6 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009da2:	2303      	movs	r3, #3
 8009da4:	e01c      	b.n	8009de0 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009da6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009daa:	3301      	adds	r3, #1
 8009dac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009db0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d805      	bhi.n	8009dc4 <USBH_ParseCfgDesc+0x1cc>
 8009db8:	6a3b      	ldr	r3, [r7, #32]
 8009dba:	885a      	ldrh	r2, [r3, #2]
 8009dbc:	8afb      	ldrh	r3, [r7, #22]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	f63f af74 	bhi.w	8009cac <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009dc4:	6a3b      	ldr	r3, [r7, #32]
 8009dc6:	791b      	ldrb	r3, [r3, #4]
 8009dc8:	2b02      	cmp	r3, #2
 8009dca:	bf28      	it	cs
 8009dcc:	2302      	movcs	r3, #2
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d201      	bcs.n	8009ddc <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009dd8:	2303      	movs	r3, #3
 8009dda:	e001      	b.n	8009de0 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009ddc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3730      	adds	r7, #48	@ 0x30
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	781a      	ldrb	r2, [r3, #0]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	785a      	ldrb	r2, [r3, #1]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	789a      	ldrb	r2, [r3, #2]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	78da      	ldrb	r2, [r3, #3]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	3304      	adds	r3, #4
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	bf28      	it	cs
 8009e1c:	2302      	movcs	r3, #2
 8009e1e:	b2da      	uxtb	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	795a      	ldrb	r2, [r3, #5]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	799a      	ldrb	r2, [r3, #6]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	79da      	ldrb	r2, [r3, #7]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	7a1a      	ldrb	r2, [r3, #8]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	721a      	strb	r2, [r3, #8]
}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b087      	sub	sp, #28
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	781a      	ldrb	r2, [r3, #0]
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	785a      	ldrb	r2, [r3, #1]
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	789a      	ldrb	r2, [r3, #2]
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	78da      	ldrb	r2, [r3, #3]
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	3304      	adds	r3, #4
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	461a      	mov	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	3305      	adds	r3, #5
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	021b      	lsls	r3, r3, #8
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	4313      	orrs	r3, r2
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	799a      	ldrb	r2, [r3, #6]
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	889b      	ldrh	r3, [r3, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d009      	beq.n	8009ebe <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009eb2:	d804      	bhi.n	8009ebe <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ebc:	d901      	bls.n	8009ec2 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009ebe:	2303      	movs	r3, #3
 8009ec0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d136      	bne.n	8009f3a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	78db      	ldrb	r3, [r3, #3]
 8009ed0:	f003 0303 	and.w	r3, r3, #3
 8009ed4:	2b02      	cmp	r3, #2
 8009ed6:	d108      	bne.n	8009eea <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	889b      	ldrh	r3, [r3, #4]
 8009edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ee0:	f240 8097 	bls.w	800a012 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	75fb      	strb	r3, [r7, #23]
 8009ee8:	e093      	b.n	800a012 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	78db      	ldrb	r3, [r3, #3]
 8009eee:	f003 0303 	and.w	r3, r3, #3
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d107      	bne.n	8009f06 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	889b      	ldrh	r3, [r3, #4]
 8009efa:	2b40      	cmp	r3, #64	@ 0x40
 8009efc:	f240 8089 	bls.w	800a012 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f00:	2303      	movs	r3, #3
 8009f02:	75fb      	strb	r3, [r7, #23]
 8009f04:	e085      	b.n	800a012 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	78db      	ldrb	r3, [r3, #3]
 8009f0a:	f003 0303 	and.w	r3, r3, #3
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d005      	beq.n	8009f1e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	78db      	ldrb	r3, [r3, #3]
 8009f16:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009f1a:	2b03      	cmp	r3, #3
 8009f1c:	d10a      	bne.n	8009f34 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	799b      	ldrb	r3, [r3, #6]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d003      	beq.n	8009f2e <USBH_ParseEPDesc+0xde>
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	799b      	ldrb	r3, [r3, #6]
 8009f2a:	2b10      	cmp	r3, #16
 8009f2c:	d970      	bls.n	800a010 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009f2e:	2303      	movs	r3, #3
 8009f30:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009f32:	e06d      	b.n	800a010 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009f34:	2303      	movs	r3, #3
 8009f36:	75fb      	strb	r3, [r7, #23]
 8009f38:	e06b      	b.n	800a012 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d13c      	bne.n	8009fbe <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	78db      	ldrb	r3, [r3, #3]
 8009f48:	f003 0303 	and.w	r3, r3, #3
 8009f4c:	2b02      	cmp	r3, #2
 8009f4e:	d005      	beq.n	8009f5c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	78db      	ldrb	r3, [r3, #3]
 8009f54:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d106      	bne.n	8009f6a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	889b      	ldrh	r3, [r3, #4]
 8009f60:	2b40      	cmp	r3, #64	@ 0x40
 8009f62:	d956      	bls.n	800a012 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f64:	2303      	movs	r3, #3
 8009f66:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009f68:	e053      	b.n	800a012 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	78db      	ldrb	r3, [r3, #3]
 8009f6e:	f003 0303 	and.w	r3, r3, #3
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d10e      	bne.n	8009f94 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	799b      	ldrb	r3, [r3, #6]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d007      	beq.n	8009f8e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009f82:	2b10      	cmp	r3, #16
 8009f84:	d803      	bhi.n	8009f8e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009f8a:	2b40      	cmp	r3, #64	@ 0x40
 8009f8c:	d941      	bls.n	800a012 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f8e:	2303      	movs	r3, #3
 8009f90:	75fb      	strb	r3, [r7, #23]
 8009f92:	e03e      	b.n	800a012 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	78db      	ldrb	r3, [r3, #3]
 8009f98:	f003 0303 	and.w	r3, r3, #3
 8009f9c:	2b03      	cmp	r3, #3
 8009f9e:	d10b      	bne.n	8009fb8 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	799b      	ldrb	r3, [r3, #6]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d004      	beq.n	8009fb2 <USBH_ParseEPDesc+0x162>
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	889b      	ldrh	r3, [r3, #4]
 8009fac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fb0:	d32f      	bcc.n	800a012 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	75fb      	strb	r3, [r7, #23]
 8009fb6:	e02c      	b.n	800a012 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009fb8:	2303      	movs	r3, #3
 8009fba:	75fb      	strb	r3, [r7, #23]
 8009fbc:	e029      	b.n	800a012 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	d120      	bne.n	800a00a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	78db      	ldrb	r3, [r3, #3]
 8009fcc:	f003 0303 	and.w	r3, r3, #3
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d106      	bne.n	8009fe2 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	889b      	ldrh	r3, [r3, #4]
 8009fd8:	2b08      	cmp	r3, #8
 8009fda:	d01a      	beq.n	800a012 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009fdc:	2303      	movs	r3, #3
 8009fde:	75fb      	strb	r3, [r7, #23]
 8009fe0:	e017      	b.n	800a012 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	78db      	ldrb	r3, [r3, #3]
 8009fe6:	f003 0303 	and.w	r3, r3, #3
 8009fea:	2b03      	cmp	r3, #3
 8009fec:	d10a      	bne.n	800a004 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	799b      	ldrb	r3, [r3, #6]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d003      	beq.n	8009ffe <USBH_ParseEPDesc+0x1ae>
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	889b      	ldrh	r3, [r3, #4]
 8009ffa:	2b08      	cmp	r3, #8
 8009ffc:	d909      	bls.n	800a012 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ffe:	2303      	movs	r3, #3
 800a000:	75fb      	strb	r3, [r7, #23]
 800a002:	e006      	b.n	800a012 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a004:	2303      	movs	r3, #3
 800a006:	75fb      	strb	r3, [r7, #23]
 800a008:	e003      	b.n	800a012 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a00a:	2303      	movs	r3, #3
 800a00c:	75fb      	strb	r3, [r7, #23]
 800a00e:	e000      	b.n	800a012 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a010:	bf00      	nop
  }

  return status;
 800a012:	7dfb      	ldrb	r3, [r7, #23]
}
 800a014:	4618      	mov	r0, r3
 800a016:	371c      	adds	r7, #28
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a020:	b480      	push	{r7}
 800a022:	b087      	sub	sp, #28
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	4613      	mov	r3, r2
 800a02c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	3301      	adds	r3, #1
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	2b03      	cmp	r3, #3
 800a036:	d120      	bne.n	800a07a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	1e9a      	subs	r2, r3, #2
 800a03e:	88fb      	ldrh	r3, [r7, #6]
 800a040:	4293      	cmp	r3, r2
 800a042:	bf28      	it	cs
 800a044:	4613      	movcs	r3, r2
 800a046:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	3302      	adds	r3, #2
 800a04c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a04e:	2300      	movs	r3, #0
 800a050:	82fb      	strh	r3, [r7, #22]
 800a052:	e00b      	b.n	800a06c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a054:	8afb      	ldrh	r3, [r7, #22]
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	4413      	add	r3, r2
 800a05a:	781a      	ldrb	r2, [r3, #0]
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	3301      	adds	r3, #1
 800a064:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a066:	8afb      	ldrh	r3, [r7, #22]
 800a068:	3302      	adds	r3, #2
 800a06a:	82fb      	strh	r3, [r7, #22]
 800a06c:	8afa      	ldrh	r2, [r7, #22]
 800a06e:	8abb      	ldrh	r3, [r7, #20]
 800a070:	429a      	cmp	r2, r3
 800a072:	d3ef      	bcc.n	800a054 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	2200      	movs	r2, #0
 800a078:	701a      	strb	r2, [r3, #0]
  }
}
 800a07a:	bf00      	nop
 800a07c:	371c      	adds	r7, #28
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr

0800a086 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a086:	b480      	push	{r7}
 800a088:	b085      	sub	sp, #20
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
 800a08e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	881b      	ldrh	r3, [r3, #0]
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	7812      	ldrb	r2, [r2, #0]
 800a098:	4413      	add	r3, r2
 800a09a:	b29a      	uxth	r2, r3
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	4413      	add	r3, r2
 800a0aa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3714      	adds	r7, #20
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr

0800a0ba <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b086      	sub	sp, #24
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	60f8      	str	r0, [r7, #12]
 800a0c2:	60b9      	str	r1, [r7, #8]
 800a0c4:	4613      	mov	r3, r2
 800a0c6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	789b      	ldrb	r3, [r3, #2]
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d002      	beq.n	800a0da <USBH_CtlReq+0x20>
 800a0d4:	2b02      	cmp	r3, #2
 800a0d6:	d01d      	beq.n	800a114 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800a0d8:	e043      	b.n	800a162 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	68ba      	ldr	r2, [r7, #8]
 800a0de:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	88fa      	ldrh	r2, [r7, #6]
 800a0e4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2203      	movs	r2, #3
 800a0fa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a10a:	2200      	movs	r2, #0
 800a10c:	4619      	mov	r1, r3
 800a10e:	f000 fc61 	bl	800a9d4 <osMessagePut>
      break;
 800a112:	e026      	b.n	800a162 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f000 f829 	bl	800a16c <USBH_HandleControl>
 800a11a:	4603      	mov	r3, r0
 800a11c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a11e:	7dfb      	ldrb	r3, [r7, #23]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d002      	beq.n	800a12a <USBH_CtlReq+0x70>
 800a124:	7dfb      	ldrb	r3, [r7, #23]
 800a126:	2b03      	cmp	r3, #3
 800a128:	d106      	bne.n	800a138 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2201      	movs	r2, #1
 800a12e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	761a      	strb	r2, [r3, #24]
 800a136:	e005      	b.n	800a144 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800a138:	7dfb      	ldrb	r3, [r7, #23]
 800a13a:	2b02      	cmp	r3, #2
 800a13c:	d102      	bne.n	800a144 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2201      	movs	r2, #1
 800a142:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2203      	movs	r2, #3
 800a148:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a158:	2200      	movs	r2, #0
 800a15a:	4619      	mov	r1, r3
 800a15c:	f000 fc3a 	bl	800a9d4 <osMessagePut>
      break;
 800a160:	bf00      	nop
  }
  return status;
 800a162:	7dfb      	ldrb	r3, [r7, #23]
}
 800a164:	4618      	mov	r0, r3
 800a166:	3718      	adds	r7, #24
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b086      	sub	sp, #24
 800a170:	af02      	add	r7, sp, #8
 800a172:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a174:	2301      	movs	r3, #1
 800a176:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a178:	2300      	movs	r3, #0
 800a17a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	7e1b      	ldrb	r3, [r3, #24]
 800a180:	3b01      	subs	r3, #1
 800a182:	2b0a      	cmp	r3, #10
 800a184:	f200 8229 	bhi.w	800a5da <USBH_HandleControl+0x46e>
 800a188:	a201      	add	r2, pc, #4	@ (adr r2, 800a190 <USBH_HandleControl+0x24>)
 800a18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a18e:	bf00      	nop
 800a190:	0800a1bd 	.word	0x0800a1bd
 800a194:	0800a1d7 	.word	0x0800a1d7
 800a198:	0800a279 	.word	0x0800a279
 800a19c:	0800a29f 	.word	0x0800a29f
 800a1a0:	0800a32b 	.word	0x0800a32b
 800a1a4:	0800a355 	.word	0x0800a355
 800a1a8:	0800a417 	.word	0x0800a417
 800a1ac:	0800a439 	.word	0x0800a439
 800a1b0:	0800a4cb 	.word	0x0800a4cb
 800a1b4:	0800a4f1 	.word	0x0800a4f1
 800a1b8:	0800a583 	.word	0x0800a583
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f103 0110 	add.w	r1, r3, #16
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	795b      	ldrb	r3, [r3, #5]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fa17 	bl	800a5fc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2202      	movs	r2, #2
 800a1d2:	761a      	strb	r2, [r3, #24]
      break;
 800a1d4:	e20c      	b.n	800a5f0 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	795b      	ldrb	r3, [r3, #5]
 800a1da:	4619      	mov	r1, r3
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f003 f86b 	bl	800d2b8 <USBH_LL_GetURBState>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a1e6:	7bbb      	ldrb	r3, [r7, #14]
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d12c      	bne.n	800a246 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	7c1b      	ldrb	r3, [r3, #16]
 800a1f0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a1f4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	8adb      	ldrh	r3, [r3, #22]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d00a      	beq.n	800a214 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a1fe:	7b7b      	ldrb	r3, [r7, #13]
 800a200:	2b80      	cmp	r3, #128	@ 0x80
 800a202:	d103      	bne.n	800a20c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2203      	movs	r2, #3
 800a208:	761a      	strb	r2, [r3, #24]
 800a20a:	e00d      	b.n	800a228 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2205      	movs	r2, #5
 800a210:	761a      	strb	r2, [r3, #24]
 800a212:	e009      	b.n	800a228 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800a214:	7b7b      	ldrb	r3, [r7, #13]
 800a216:	2b80      	cmp	r3, #128	@ 0x80
 800a218:	d103      	bne.n	800a222 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2209      	movs	r2, #9
 800a21e:	761a      	strb	r2, [r3, #24]
 800a220:	e002      	b.n	800a228 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2207      	movs	r2, #7
 800a226:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2203      	movs	r2, #3
 800a22c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a23c:	2200      	movs	r2, #0
 800a23e:	4619      	mov	r1, r3
 800a240:	f000 fbc8 	bl	800a9d4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a244:	e1cb      	b.n	800a5de <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a246:	7bbb      	ldrb	r3, [r7, #14]
 800a248:	2b04      	cmp	r3, #4
 800a24a:	d003      	beq.n	800a254 <USBH_HandleControl+0xe8>
 800a24c:	7bbb      	ldrb	r3, [r7, #14]
 800a24e:	2b02      	cmp	r3, #2
 800a250:	f040 81c5 	bne.w	800a5de <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	220b      	movs	r2, #11
 800a258:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2203      	movs	r2, #3
 800a25e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a26e:	2200      	movs	r2, #0
 800a270:	4619      	mov	r1, r3
 800a272:	f000 fbaf 	bl	800a9d4 <osMessagePut>
      break;
 800a276:	e1b2      	b.n	800a5de <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a27e:	b29a      	uxth	r2, r3
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6899      	ldr	r1, [r3, #8]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	899a      	ldrh	r2, [r3, #12]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	791b      	ldrb	r3, [r3, #4]
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 f9f2 	bl	800a67a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2204      	movs	r2, #4
 800a29a:	761a      	strb	r2, [r3, #24]
      break;
 800a29c:	e1a8      	b.n	800a5f0 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	791b      	ldrb	r3, [r3, #4]
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f003 f807 	bl	800d2b8 <USBH_LL_GetURBState>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a2ae:	7bbb      	ldrb	r3, [r7, #14]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d110      	bne.n	800a2d6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2209      	movs	r2, #9
 800a2b8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2203      	movs	r2, #3
 800a2be:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	f000 fb7f 	bl	800a9d4 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a2d6:	7bbb      	ldrb	r3, [r7, #14]
 800a2d8:	2b05      	cmp	r3, #5
 800a2da:	d110      	bne.n	800a2fe <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a2dc:	2303      	movs	r3, #3
 800a2de:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2203      	movs	r2, #3
 800a2e4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	f000 fb6c 	bl	800a9d4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a2fc:	e171      	b.n	800a5e2 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800a2fe:	7bbb      	ldrb	r3, [r7, #14]
 800a300:	2b04      	cmp	r3, #4
 800a302:	f040 816e 	bne.w	800a5e2 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	220b      	movs	r2, #11
 800a30a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2203      	movs	r2, #3
 800a310:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a320:	2200      	movs	r2, #0
 800a322:	4619      	mov	r1, r3
 800a324:	f000 fb56 	bl	800a9d4 <osMessagePut>
      break;
 800a328:	e15b      	b.n	800a5e2 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6899      	ldr	r1, [r3, #8]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	899a      	ldrh	r2, [r3, #12]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	795b      	ldrb	r3, [r3, #5]
 800a336:	2001      	movs	r0, #1
 800a338:	9000      	str	r0, [sp, #0]
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 f978 	bl	800a630 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a346:	b29a      	uxth	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2206      	movs	r2, #6
 800a350:	761a      	strb	r2, [r3, #24]
      break;
 800a352:	e14d      	b.n	800a5f0 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	795b      	ldrb	r3, [r3, #5]
 800a358:	4619      	mov	r1, r3
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f002 ffac 	bl	800d2b8 <USBH_LL_GetURBState>
 800a360:	4603      	mov	r3, r0
 800a362:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a364:	7bbb      	ldrb	r3, [r7, #14]
 800a366:	2b01      	cmp	r3, #1
 800a368:	d111      	bne.n	800a38e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2207      	movs	r2, #7
 800a36e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2203      	movs	r2, #3
 800a374:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a384:	2200      	movs	r2, #0
 800a386:	4619      	mov	r1, r3
 800a388:	f000 fb24 	bl	800a9d4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a38c:	e12b      	b.n	800a5e6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800a38e:	7bbb      	ldrb	r3, [r7, #14]
 800a390:	2b05      	cmp	r3, #5
 800a392:	d113      	bne.n	800a3bc <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	220c      	movs	r2, #12
 800a398:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a39a:	2303      	movs	r3, #3
 800a39c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2203      	movs	r2, #3
 800a3a2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	f000 fb0d 	bl	800a9d4 <osMessagePut>
      break;
 800a3ba:	e114      	b.n	800a5e6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a3bc:	7bbb      	ldrb	r3, [r7, #14]
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	d111      	bne.n	800a3e6 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2205      	movs	r2, #5
 800a3c6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2203      	movs	r2, #3
 800a3cc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a3dc:	2200      	movs	r2, #0
 800a3de:	4619      	mov	r1, r3
 800a3e0:	f000 faf8 	bl	800a9d4 <osMessagePut>
      break;
 800a3e4:	e0ff      	b.n	800a5e6 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800a3e6:	7bbb      	ldrb	r3, [r7, #14]
 800a3e8:	2b04      	cmp	r3, #4
 800a3ea:	f040 80fc 	bne.w	800a5e6 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	220b      	movs	r2, #11
 800a3f2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2203      	movs	r2, #3
 800a3fc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a40c:	2200      	movs	r2, #0
 800a40e:	4619      	mov	r1, r3
 800a410:	f000 fae0 	bl	800a9d4 <osMessagePut>
      break;
 800a414:	e0e7      	b.n	800a5e6 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	791b      	ldrb	r3, [r3, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	2100      	movs	r1, #0
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 f92b 	bl	800a67a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a42a:	b29a      	uxth	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2208      	movs	r2, #8
 800a434:	761a      	strb	r2, [r3, #24]

      break;
 800a436:	e0db      	b.n	800a5f0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	791b      	ldrb	r3, [r3, #4]
 800a43c:	4619      	mov	r1, r3
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f002 ff3a 	bl	800d2b8 <USBH_LL_GetURBState>
 800a444:	4603      	mov	r3, r0
 800a446:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a448:	7bbb      	ldrb	r3, [r7, #14]
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d113      	bne.n	800a476 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	220d      	movs	r2, #13
 800a452:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a454:	2300      	movs	r3, #0
 800a456:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2203      	movs	r2, #3
 800a45c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a46c:	2200      	movs	r2, #0
 800a46e:	4619      	mov	r1, r3
 800a470:	f000 fab0 	bl	800a9d4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a474:	e0b9      	b.n	800a5ea <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800a476:	7bbb      	ldrb	r3, [r7, #14]
 800a478:	2b04      	cmp	r3, #4
 800a47a:	d111      	bne.n	800a4a0 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	220b      	movs	r2, #11
 800a480:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2203      	movs	r2, #3
 800a486:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a496:	2200      	movs	r2, #0
 800a498:	4619      	mov	r1, r3
 800a49a:	f000 fa9b 	bl	800a9d4 <osMessagePut>
      break;
 800a49e:	e0a4      	b.n	800a5ea <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800a4a0:	7bbb      	ldrb	r3, [r7, #14]
 800a4a2:	2b05      	cmp	r3, #5
 800a4a4:	f040 80a1 	bne.w	800a5ea <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800a4a8:	2303      	movs	r3, #3
 800a4aa:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2203      	movs	r2, #3
 800a4b0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	f000 fa86 	bl	800a9d4 <osMessagePut>
      break;
 800a4c8:	e08f      	b.n	800a5ea <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	795b      	ldrb	r3, [r3, #5]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	9200      	str	r2, [sp, #0]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 f8aa 	bl	800a630 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a4e2:	b29a      	uxth	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	220a      	movs	r2, #10
 800a4ec:	761a      	strb	r2, [r3, #24]
      break;
 800a4ee:	e07f      	b.n	800a5f0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	795b      	ldrb	r3, [r3, #5]
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f002 fede 	bl	800d2b8 <USBH_LL_GetURBState>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a500:	7bbb      	ldrb	r3, [r7, #14]
 800a502:	2b01      	cmp	r3, #1
 800a504:	d113      	bne.n	800a52e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800a506:	2300      	movs	r3, #0
 800a508:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	220d      	movs	r2, #13
 800a50e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2203      	movs	r2, #3
 800a514:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a524:	2200      	movs	r2, #0
 800a526:	4619      	mov	r1, r3
 800a528:	f000 fa54 	bl	800a9d4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a52c:	e05f      	b.n	800a5ee <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a52e:	7bbb      	ldrb	r3, [r7, #14]
 800a530:	2b02      	cmp	r3, #2
 800a532:	d111      	bne.n	800a558 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2209      	movs	r2, #9
 800a538:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2203      	movs	r2, #3
 800a53e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a54e:	2200      	movs	r2, #0
 800a550:	4619      	mov	r1, r3
 800a552:	f000 fa3f 	bl	800a9d4 <osMessagePut>
      break;
 800a556:	e04a      	b.n	800a5ee <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800a558:	7bbb      	ldrb	r3, [r7, #14]
 800a55a:	2b04      	cmp	r3, #4
 800a55c:	d147      	bne.n	800a5ee <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	220b      	movs	r2, #11
 800a562:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2203      	movs	r2, #3
 800a568:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a578:	2200      	movs	r2, #0
 800a57a:	4619      	mov	r1, r3
 800a57c:	f000 fa2a 	bl	800a9d4 <osMessagePut>
      break;
 800a580:	e035      	b.n	800a5ee <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	7e5b      	ldrb	r3, [r3, #25]
 800a586:	3301      	adds	r3, #1
 800a588:	b2da      	uxtb	r2, r3
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	765a      	strb	r2, [r3, #25]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	7e5b      	ldrb	r3, [r3, #25]
 800a592:	2b02      	cmp	r3, #2
 800a594:	d806      	bhi.n	800a5a4 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2201      	movs	r2, #1
 800a59a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a5a2:	e025      	b.n	800a5f0 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a5aa:	2106      	movs	r1, #6
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	795b      	ldrb	r3, [r3, #5]
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 f90d 	bl	800a7dc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	791b      	ldrb	r3, [r3, #4]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 f907 	bl	800a7dc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a5d8:	e00a      	b.n	800a5f0 <USBH_HandleControl+0x484>

    default:
      break;
 800a5da:	bf00      	nop
 800a5dc:	e008      	b.n	800a5f0 <USBH_HandleControl+0x484>
      break;
 800a5de:	bf00      	nop
 800a5e0:	e006      	b.n	800a5f0 <USBH_HandleControl+0x484>
      break;
 800a5e2:	bf00      	nop
 800a5e4:	e004      	b.n	800a5f0 <USBH_HandleControl+0x484>
      break;
 800a5e6:	bf00      	nop
 800a5e8:	e002      	b.n	800a5f0 <USBH_HandleControl+0x484>
      break;
 800a5ea:	bf00      	nop
 800a5ec:	e000      	b.n	800a5f0 <USBH_HandleControl+0x484>
      break;
 800a5ee:	bf00      	nop
  }

  return status;
 800a5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3710      	adds	r7, #16
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop

0800a5fc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b088      	sub	sp, #32
 800a600:	af04      	add	r7, sp, #16
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	4613      	mov	r3, r2
 800a608:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a60a:	79f9      	ldrb	r1, [r7, #7]
 800a60c:	2300      	movs	r3, #0
 800a60e:	9303      	str	r3, [sp, #12]
 800a610:	2308      	movs	r3, #8
 800a612:	9302      	str	r3, [sp, #8]
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	9301      	str	r3, [sp, #4]
 800a618:	2300      	movs	r3, #0
 800a61a:	9300      	str	r3, [sp, #0]
 800a61c:	2300      	movs	r3, #0
 800a61e:	2200      	movs	r2, #0
 800a620:	68f8      	ldr	r0, [r7, #12]
 800a622:	f002 fe18 	bl	800d256 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b088      	sub	sp, #32
 800a634:	af04      	add	r7, sp, #16
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	4611      	mov	r1, r2
 800a63c:	461a      	mov	r2, r3
 800a63e:	460b      	mov	r3, r1
 800a640:	80fb      	strh	r3, [r7, #6]
 800a642:	4613      	mov	r3, r2
 800a644:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d001      	beq.n	800a654 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a650:	2300      	movs	r3, #0
 800a652:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a654:	7979      	ldrb	r1, [r7, #5]
 800a656:	7e3b      	ldrb	r3, [r7, #24]
 800a658:	9303      	str	r3, [sp, #12]
 800a65a:	88fb      	ldrh	r3, [r7, #6]
 800a65c:	9302      	str	r3, [sp, #8]
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	9301      	str	r3, [sp, #4]
 800a662:	2301      	movs	r3, #1
 800a664:	9300      	str	r3, [sp, #0]
 800a666:	2300      	movs	r3, #0
 800a668:	2200      	movs	r2, #0
 800a66a:	68f8      	ldr	r0, [r7, #12]
 800a66c:	f002 fdf3 	bl	800d256 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a670:	2300      	movs	r3, #0
}
 800a672:	4618      	mov	r0, r3
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b088      	sub	sp, #32
 800a67e:	af04      	add	r7, sp, #16
 800a680:	60f8      	str	r0, [r7, #12]
 800a682:	60b9      	str	r1, [r7, #8]
 800a684:	4611      	mov	r1, r2
 800a686:	461a      	mov	r2, r3
 800a688:	460b      	mov	r3, r1
 800a68a:	80fb      	strh	r3, [r7, #6]
 800a68c:	4613      	mov	r3, r2
 800a68e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a690:	7979      	ldrb	r1, [r7, #5]
 800a692:	2300      	movs	r3, #0
 800a694:	9303      	str	r3, [sp, #12]
 800a696:	88fb      	ldrh	r3, [r7, #6]
 800a698:	9302      	str	r3, [sp, #8]
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	9301      	str	r3, [sp, #4]
 800a69e:	2301      	movs	r3, #1
 800a6a0:	9300      	str	r3, [sp, #0]
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	f002 fdd5 	bl	800d256 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a6ac:	2300      	movs	r3, #0

}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b088      	sub	sp, #32
 800a6ba:	af04      	add	r7, sp, #16
 800a6bc:	60f8      	str	r0, [r7, #12]
 800a6be:	60b9      	str	r1, [r7, #8]
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	80fb      	strh	r3, [r7, #6]
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d001      	beq.n	800a6da <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a6da:	7979      	ldrb	r1, [r7, #5]
 800a6dc:	7e3b      	ldrb	r3, [r7, #24]
 800a6de:	9303      	str	r3, [sp, #12]
 800a6e0:	88fb      	ldrh	r3, [r7, #6]
 800a6e2:	9302      	str	r3, [sp, #8]
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	9301      	str	r3, [sp, #4]
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	9300      	str	r3, [sp, #0]
 800a6ec:	2302      	movs	r3, #2
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f002 fdb0 	bl	800d256 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a6f6:	2300      	movs	r3, #0
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3710      	adds	r7, #16
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b088      	sub	sp, #32
 800a704:	af04      	add	r7, sp, #16
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	4611      	mov	r1, r2
 800a70c:	461a      	mov	r2, r3
 800a70e:	460b      	mov	r3, r1
 800a710:	80fb      	strh	r3, [r7, #6]
 800a712:	4613      	mov	r3, r2
 800a714:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a716:	7979      	ldrb	r1, [r7, #5]
 800a718:	2300      	movs	r3, #0
 800a71a:	9303      	str	r3, [sp, #12]
 800a71c:	88fb      	ldrh	r3, [r7, #6]
 800a71e:	9302      	str	r3, [sp, #8]
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	9301      	str	r3, [sp, #4]
 800a724:	2301      	movs	r3, #1
 800a726:	9300      	str	r3, [sp, #0]
 800a728:	2302      	movs	r3, #2
 800a72a:	2201      	movs	r2, #1
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f002 fd92 	bl	800d256 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a732:	2300      	movs	r3, #0
}
 800a734:	4618      	mov	r0, r3
 800a736:	3710      	adds	r7, #16
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b086      	sub	sp, #24
 800a740:	af04      	add	r7, sp, #16
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	4608      	mov	r0, r1
 800a746:	4611      	mov	r1, r2
 800a748:	461a      	mov	r2, r3
 800a74a:	4603      	mov	r3, r0
 800a74c:	70fb      	strb	r3, [r7, #3]
 800a74e:	460b      	mov	r3, r1
 800a750:	70bb      	strb	r3, [r7, #2]
 800a752:	4613      	mov	r3, r2
 800a754:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a756:	7878      	ldrb	r0, [r7, #1]
 800a758:	78ba      	ldrb	r2, [r7, #2]
 800a75a:	78f9      	ldrb	r1, [r7, #3]
 800a75c:	8b3b      	ldrh	r3, [r7, #24]
 800a75e:	9302      	str	r3, [sp, #8]
 800a760:	7d3b      	ldrb	r3, [r7, #20]
 800a762:	9301      	str	r3, [sp, #4]
 800a764:	7c3b      	ldrb	r3, [r7, #16]
 800a766:	9300      	str	r3, [sp, #0]
 800a768:	4603      	mov	r3, r0
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f002 fd25 	bl	800d1ba <USBH_LL_OpenPipe>

  return USBH_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b082      	sub	sp, #8
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
 800a782:	460b      	mov	r3, r1
 800a784:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a786:	78fb      	ldrb	r3, [r7, #3]
 800a788:	4619      	mov	r1, r3
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f002 fd44 	bl	800d218 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a790:	2300      	movs	r3, #0
}
 800a792:	4618      	mov	r0, r3
 800a794:	3708      	adds	r7, #8
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b084      	sub	sp, #16
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 f836 	bl	800a818 <USBH_GetFreePipe>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a7b0:	89fb      	ldrh	r3, [r7, #14]
 800a7b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d00a      	beq.n	800a7d0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a7ba:	78fa      	ldrb	r2, [r7, #3]
 800a7bc:	89fb      	ldrh	r3, [r7, #14]
 800a7be:	f003 030f 	and.w	r3, r3, #15
 800a7c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a7c6:	6879      	ldr	r1, [r7, #4]
 800a7c8:	33e0      	adds	r3, #224	@ 0xe0
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	440b      	add	r3, r1
 800a7ce:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a7d0:	89fb      	ldrh	r3, [r7, #14]
 800a7d2:	b2db      	uxtb	r3, r3
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a7e8:	78fb      	ldrb	r3, [r7, #3]
 800a7ea:	2b0f      	cmp	r3, #15
 800a7ec:	d80d      	bhi.n	800a80a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a7ee:	78fb      	ldrb	r3, [r7, #3]
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	33e0      	adds	r3, #224	@ 0xe0
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	4413      	add	r3, r2
 800a7f8:	685a      	ldr	r2, [r3, #4]
 800a7fa:	78fb      	ldrb	r3, [r7, #3]
 800a7fc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a800:	6879      	ldr	r1, [r7, #4]
 800a802:	33e0      	adds	r3, #224	@ 0xe0
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	440b      	add	r3, r1
 800a808:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a820:	2300      	movs	r3, #0
 800a822:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a824:	2300      	movs	r3, #0
 800a826:	73fb      	strb	r3, [r7, #15]
 800a828:	e00f      	b.n	800a84a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a82a:	7bfb      	ldrb	r3, [r7, #15]
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	33e0      	adds	r3, #224	@ 0xe0
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	4413      	add	r3, r2
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d102      	bne.n	800a844 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a83e:	7bfb      	ldrb	r3, [r7, #15]
 800a840:	b29b      	uxth	r3, r3
 800a842:	e007      	b.n	800a854 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a844:	7bfb      	ldrb	r3, [r7, #15]
 800a846:	3301      	adds	r3, #1
 800a848:	73fb      	strb	r3, [r7, #15]
 800a84a:	7bfb      	ldrb	r3, [r7, #15]
 800a84c:	2b0f      	cmp	r3, #15
 800a84e:	d9ec      	bls.n	800a82a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a850:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a854:	4618      	mov	r0, r3
 800a856:	3714      	adds	r7, #20
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr

0800a860 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a860:	b480      	push	{r7}
 800a862:	b085      	sub	sp, #20
 800a864:	af00      	add	r7, sp, #0
 800a866:	4603      	mov	r3, r0
 800a868:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a86a:	2300      	movs	r3, #0
 800a86c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a86e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a872:	2b84      	cmp	r3, #132	@ 0x84
 800a874:	d005      	beq.n	800a882 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a876:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	4413      	add	r3, r2
 800a87e:	3303      	adds	r3, #3
 800a880:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a882:	68fb      	ldr	r3, [r7, #12]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3714      	adds	r7, #20
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a896:	f3ef 8305 	mrs	r3, IPSR
 800a89a:	607b      	str	r3, [r7, #4]
  return(result);
 800a89c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	bf14      	ite	ne
 800a8a2:	2301      	movne	r3, #1
 800a8a4:	2300      	moveq	r3, #0
 800a8a6:	b2db      	uxtb	r3, r3
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	370c      	adds	r7, #12
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a8b8:	f001 f922 	bl	800bb00 <vTaskStartScheduler>
  
  return osOK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a8c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8c4:	b089      	sub	sp, #36	@ 0x24
 800a8c6:	af04      	add	r7, sp, #16
 800a8c8:	6078      	str	r0, [r7, #4]
 800a8ca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	695b      	ldr	r3, [r3, #20]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d020      	beq.n	800a916 <osThreadCreate+0x54>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	699b      	ldr	r3, [r3, #24]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d01c      	beq.n	800a916 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	685c      	ldr	r4, [r3, #4]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	691e      	ldr	r6, [r3, #16]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7ff ffb6 	bl	800a860 <makeFreeRtosPriority>
 800a8f4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	695b      	ldr	r3, [r3, #20]
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a8fe:	9202      	str	r2, [sp, #8]
 800a900:	9301      	str	r3, [sp, #4]
 800a902:	9100      	str	r1, [sp, #0]
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	4632      	mov	r2, r6
 800a908:	4629      	mov	r1, r5
 800a90a:	4620      	mov	r0, r4
 800a90c:	f000 ff20 	bl	800b750 <xTaskCreateStatic>
 800a910:	4603      	mov	r3, r0
 800a912:	60fb      	str	r3, [r7, #12]
 800a914:	e01c      	b.n	800a950 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	685c      	ldr	r4, [r3, #4]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a922:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7ff ff98 	bl	800a860 <makeFreeRtosPriority>
 800a930:	4602      	mov	r2, r0
 800a932:	f107 030c 	add.w	r3, r7, #12
 800a936:	9301      	str	r3, [sp, #4]
 800a938:	9200      	str	r2, [sp, #0]
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	4632      	mov	r2, r6
 800a93e:	4629      	mov	r1, r5
 800a940:	4620      	mov	r0, r4
 800a942:	f000 ff65 	bl	800b810 <xTaskCreate>
 800a946:	4603      	mov	r3, r0
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d001      	beq.n	800a950 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a94c:	2300      	movs	r3, #0
 800a94e:	e000      	b.n	800a952 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a950:	68fb      	ldr	r3, [r7, #12]
}
 800a952:	4618      	mov	r0, r3
 800a954:	3714      	adds	r7, #20
 800a956:	46bd      	mov	sp, r7
 800a958:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a95a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b084      	sub	sp, #16
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d001      	beq.n	800a970 <osDelay+0x16>
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	e000      	b.n	800a972 <osDelay+0x18>
 800a970:	2301      	movs	r3, #1
 800a972:	4618      	mov	r0, r3
 800a974:	f001 f88e 	bl	800ba94 <vTaskDelay>
  
  return osOK;
 800a978:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a982:	b590      	push	{r4, r7, lr}
 800a984:	b085      	sub	sp, #20
 800a986:	af02      	add	r7, sp, #8
 800a988:	6078      	str	r0, [r7, #4]
 800a98a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d011      	beq.n	800a9b8 <osMessageCreate+0x36>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d00d      	beq.n	800a9b8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6818      	ldr	r0, [r3, #0]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6859      	ldr	r1, [r3, #4]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	689a      	ldr	r2, [r3, #8]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	2400      	movs	r4, #0
 800a9ae:	9400      	str	r4, [sp, #0]
 800a9b0:	f000 f9e2 	bl	800ad78 <xQueueGenericCreateStatic>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	e008      	b.n	800a9ca <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6818      	ldr	r0, [r3, #0]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	f000 fa55 	bl	800ae72 <xQueueGenericCreate>
 800a9c8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	370c      	adds	r7, #12
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd90      	pop	{r4, r7, pc}
	...

0800a9d4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b086      	sub	sp, #24
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d101      	bne.n	800a9f2 <osMessagePut+0x1e>
    ticks = 1;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a9f2:	f7ff ff4d 	bl	800a890 <inHandlerMode>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d018      	beq.n	800aa2e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a9fc:	f107 0210 	add.w	r2, r7, #16
 800aa00:	f107 0108 	add.w	r1, r7, #8
 800aa04:	2300      	movs	r3, #0
 800aa06:	68f8      	ldr	r0, [r7, #12]
 800aa08:	f000 fb90 	bl	800b12c <xQueueGenericSendFromISR>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d001      	beq.n	800aa16 <osMessagePut+0x42>
      return osErrorOS;
 800aa12:	23ff      	movs	r3, #255	@ 0xff
 800aa14:	e018      	b.n	800aa48 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d014      	beq.n	800aa46 <osMessagePut+0x72>
 800aa1c:	4b0c      	ldr	r3, [pc, #48]	@ (800aa50 <osMessagePut+0x7c>)
 800aa1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa22:	601a      	str	r2, [r3, #0]
 800aa24:	f3bf 8f4f 	dsb	sy
 800aa28:	f3bf 8f6f 	isb	sy
 800aa2c:	e00b      	b.n	800aa46 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800aa2e:	f107 0108 	add.w	r1, r7, #8
 800aa32:	2300      	movs	r3, #0
 800aa34:	697a      	ldr	r2, [r7, #20]
 800aa36:	68f8      	ldr	r0, [r7, #12]
 800aa38:	f000 fa76 	bl	800af28 <xQueueGenericSend>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d001      	beq.n	800aa46 <osMessagePut+0x72>
      return osErrorOS;
 800aa42:	23ff      	movs	r3, #255	@ 0xff
 800aa44:	e000      	b.n	800aa48 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800aa46:	2300      	movs	r3, #0
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3718      	adds	r7, #24
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	e000ed04 	.word	0xe000ed04

0800aa54 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800aa54:	b590      	push	{r4, r7, lr}
 800aa56:	b08b      	sub	sp, #44	@ 0x2c
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	60b9      	str	r1, [r7, #8]
 800aa5e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800aa64:	2300      	movs	r3, #0
 800aa66:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d10a      	bne.n	800aa84 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800aa6e:	2380      	movs	r3, #128	@ 0x80
 800aa70:	617b      	str	r3, [r7, #20]
    return event;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	461c      	mov	r4, r3
 800aa76:	f107 0314 	add.w	r3, r7, #20
 800aa7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aa7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aa82:	e054      	b.n	800ab2e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800aa84:	2300      	movs	r3, #0
 800aa86:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa92:	d103      	bne.n	800aa9c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800aa94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa98:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa9a:	e009      	b.n	800aab0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d006      	beq.n	800aab0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800aaa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d101      	bne.n	800aab0 <osMessageGet+0x5c>
      ticks = 1;
 800aaac:	2301      	movs	r3, #1
 800aaae:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800aab0:	f7ff feee 	bl	800a890 <inHandlerMode>
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d01c      	beq.n	800aaf4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800aaba:	f107 0220 	add.w	r2, r7, #32
 800aabe:	f107 0314 	add.w	r3, r7, #20
 800aac2:	3304      	adds	r3, #4
 800aac4:	4619      	mov	r1, r3
 800aac6:	68b8      	ldr	r0, [r7, #8]
 800aac8:	f000 fcb0 	bl	800b42c <xQueueReceiveFromISR>
 800aacc:	4603      	mov	r3, r0
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d102      	bne.n	800aad8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800aad2:	2310      	movs	r3, #16
 800aad4:	617b      	str	r3, [r7, #20]
 800aad6:	e001      	b.n	800aadc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800aad8:	2300      	movs	r3, #0
 800aada:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aadc:	6a3b      	ldr	r3, [r7, #32]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d01d      	beq.n	800ab1e <osMessageGet+0xca>
 800aae2:	4b15      	ldr	r3, [pc, #84]	@ (800ab38 <osMessageGet+0xe4>)
 800aae4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aae8:	601a      	str	r2, [r3, #0]
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	f3bf 8f6f 	isb	sy
 800aaf2:	e014      	b.n	800ab1e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800aaf4:	f107 0314 	add.w	r3, r7, #20
 800aaf8:	3304      	adds	r3, #4
 800aafa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aafc:	4619      	mov	r1, r3
 800aafe:	68b8      	ldr	r0, [r7, #8]
 800ab00:	f000 fbb2 	bl	800b268 <xQueueReceive>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d102      	bne.n	800ab10 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800ab0a:	2310      	movs	r3, #16
 800ab0c:	617b      	str	r3, [r7, #20]
 800ab0e:	e006      	b.n	800ab1e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800ab10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d101      	bne.n	800ab1a <osMessageGet+0xc6>
 800ab16:	2300      	movs	r3, #0
 800ab18:	e000      	b.n	800ab1c <osMessageGet+0xc8>
 800ab1a:	2340      	movs	r3, #64	@ 0x40
 800ab1c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	461c      	mov	r4, r3
 800ab22:	f107 0314 	add.w	r3, r7, #20
 800ab26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ab2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	372c      	adds	r7, #44	@ 0x2c
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd90      	pop	{r4, r7, pc}
 800ab36:	bf00      	nop
 800ab38:	e000ed04 	.word	0xe000ed04

0800ab3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f103 0208 	add.w	r2, r3, #8
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f103 0208 	add.w	r2, r3, #8
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f103 0208 	add.w	r2, r3, #8
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ab70:	bf00      	nop
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ab8a:	bf00      	nop
 800ab8c:	370c      	adds	r7, #12
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr

0800ab96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab96:	b480      	push	{r7}
 800ab98:	b085      	sub	sp, #20
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	689a      	ldr	r2, [r3, #8]
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	683a      	ldr	r2, [r7, #0]
 800abba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	683a      	ldr	r2, [r7, #0]
 800abc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	1c5a      	adds	r2, r3, #1
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	601a      	str	r2, [r3, #0]
}
 800abd2:	bf00      	nop
 800abd4:	3714      	adds	r7, #20
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr

0800abde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800abde:	b480      	push	{r7}
 800abe0:	b085      	sub	sp, #20
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
 800abe6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800abf4:	d103      	bne.n	800abfe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	691b      	ldr	r3, [r3, #16]
 800abfa:	60fb      	str	r3, [r7, #12]
 800abfc:	e00c      	b.n	800ac18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	3308      	adds	r3, #8
 800ac02:	60fb      	str	r3, [r7, #12]
 800ac04:	e002      	b.n	800ac0c <vListInsert+0x2e>
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	60fb      	str	r3, [r7, #12]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	68ba      	ldr	r2, [r7, #8]
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d2f6      	bcs.n	800ac06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	685a      	ldr	r2, [r3, #4]
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	683a      	ldr	r2, [r7, #0]
 800ac26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	68fa      	ldr	r2, [r7, #12]
 800ac2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	683a      	ldr	r2, [r7, #0]
 800ac32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	1c5a      	adds	r2, r3, #1
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	601a      	str	r2, [r3, #0]
}
 800ac44:	bf00      	nop
 800ac46:	3714      	adds	r7, #20
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ac50:	b480      	push	{r7}
 800ac52:	b085      	sub	sp, #20
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	6892      	ldr	r2, [r2, #8]
 800ac66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	6852      	ldr	r2, [r2, #4]
 800ac70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d103      	bne.n	800ac84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	689a      	ldr	r2, [r3, #8]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	1e5a      	subs	r2, r3, #1
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3714      	adds	r7, #20
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d10b      	bne.n	800acd0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800acb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acbc:	f383 8811 	msr	BASEPRI, r3
 800acc0:	f3bf 8f6f 	isb	sy
 800acc4:	f3bf 8f4f 	dsb	sy
 800acc8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800acca:	bf00      	nop
 800accc:	bf00      	nop
 800acce:	e7fd      	b.n	800accc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800acd0:	f001 fd82 	bl	800c7d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acdc:	68f9      	ldr	r1, [r7, #12]
 800acde:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ace0:	fb01 f303 	mul.w	r3, r1, r3
 800ace4:	441a      	add	r2, r3
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2200      	movs	r2, #0
 800acee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad00:	3b01      	subs	r3, #1
 800ad02:	68f9      	ldr	r1, [r7, #12]
 800ad04:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ad06:	fb01 f303 	mul.w	r3, r1, r3
 800ad0a:	441a      	add	r2, r3
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	22ff      	movs	r2, #255	@ 0xff
 800ad14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	22ff      	movs	r2, #255	@ 0xff
 800ad1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d114      	bne.n	800ad50 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	691b      	ldr	r3, [r3, #16]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d01a      	beq.n	800ad64 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	3310      	adds	r3, #16
 800ad32:	4618      	mov	r0, r3
 800ad34:	f001 f954 	bl	800bfe0 <xTaskRemoveFromEventList>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d012      	beq.n	800ad64 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ad3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ad74 <xQueueGenericReset+0xd0>)
 800ad40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad44:	601a      	str	r2, [r3, #0]
 800ad46:	f3bf 8f4f 	dsb	sy
 800ad4a:	f3bf 8f6f 	isb	sy
 800ad4e:	e009      	b.n	800ad64 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	3310      	adds	r3, #16
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7ff fef1 	bl	800ab3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	3324      	adds	r3, #36	@ 0x24
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7ff feec 	bl	800ab3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ad64:	f001 fd6a 	bl	800c83c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ad68:	2301      	movs	r3, #1
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	e000ed04 	.word	0xe000ed04

0800ad78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b08e      	sub	sp, #56	@ 0x38
 800ad7c:	af02      	add	r7, sp, #8
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	607a      	str	r2, [r7, #4]
 800ad84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d10b      	bne.n	800ada4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ad8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad90:	f383 8811 	msr	BASEPRI, r3
 800ad94:	f3bf 8f6f 	isb	sy
 800ad98:	f3bf 8f4f 	dsb	sy
 800ad9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ad9e:	bf00      	nop
 800ada0:	bf00      	nop
 800ada2:	e7fd      	b.n	800ada0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d10b      	bne.n	800adc2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800adaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adae:	f383 8811 	msr	BASEPRI, r3
 800adb2:	f3bf 8f6f 	isb	sy
 800adb6:	f3bf 8f4f 	dsb	sy
 800adba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800adbc:	bf00      	nop
 800adbe:	bf00      	nop
 800adc0:	e7fd      	b.n	800adbe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d002      	beq.n	800adce <xQueueGenericCreateStatic+0x56>
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d001      	beq.n	800add2 <xQueueGenericCreateStatic+0x5a>
 800adce:	2301      	movs	r3, #1
 800add0:	e000      	b.n	800add4 <xQueueGenericCreateStatic+0x5c>
 800add2:	2300      	movs	r3, #0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d10b      	bne.n	800adf0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800add8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800addc:	f383 8811 	msr	BASEPRI, r3
 800ade0:	f3bf 8f6f 	isb	sy
 800ade4:	f3bf 8f4f 	dsb	sy
 800ade8:	623b      	str	r3, [r7, #32]
}
 800adea:	bf00      	nop
 800adec:	bf00      	nop
 800adee:	e7fd      	b.n	800adec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d102      	bne.n	800adfc <xQueueGenericCreateStatic+0x84>
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d101      	bne.n	800ae00 <xQueueGenericCreateStatic+0x88>
 800adfc:	2301      	movs	r3, #1
 800adfe:	e000      	b.n	800ae02 <xQueueGenericCreateStatic+0x8a>
 800ae00:	2300      	movs	r3, #0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d10b      	bne.n	800ae1e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ae06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae0a:	f383 8811 	msr	BASEPRI, r3
 800ae0e:	f3bf 8f6f 	isb	sy
 800ae12:	f3bf 8f4f 	dsb	sy
 800ae16:	61fb      	str	r3, [r7, #28]
}
 800ae18:	bf00      	nop
 800ae1a:	bf00      	nop
 800ae1c:	e7fd      	b.n	800ae1a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ae1e:	2348      	movs	r3, #72	@ 0x48
 800ae20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	2b48      	cmp	r3, #72	@ 0x48
 800ae26:	d00b      	beq.n	800ae40 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ae28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae2c:	f383 8811 	msr	BASEPRI, r3
 800ae30:	f3bf 8f6f 	isb	sy
 800ae34:	f3bf 8f4f 	dsb	sy
 800ae38:	61bb      	str	r3, [r7, #24]
}
 800ae3a:	bf00      	nop
 800ae3c:	bf00      	nop
 800ae3e:	e7fd      	b.n	800ae3c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ae40:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ae46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d00d      	beq.n	800ae68 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ae4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae4e:	2201      	movs	r2, #1
 800ae50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae54:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ae58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae5a:	9300      	str	r3, [sp, #0]
 800ae5c:	4613      	mov	r3, r2
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	68b9      	ldr	r1, [r7, #8]
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f000 f840 	bl	800aee8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ae68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3730      	adds	r7, #48	@ 0x30
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b08a      	sub	sp, #40	@ 0x28
 800ae76:	af02      	add	r7, sp, #8
 800ae78:	60f8      	str	r0, [r7, #12]
 800ae7a:	60b9      	str	r1, [r7, #8]
 800ae7c:	4613      	mov	r3, r2
 800ae7e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d10b      	bne.n	800ae9e <xQueueGenericCreate+0x2c>
	__asm volatile
 800ae86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae8a:	f383 8811 	msr	BASEPRI, r3
 800ae8e:	f3bf 8f6f 	isb	sy
 800ae92:	f3bf 8f4f 	dsb	sy
 800ae96:	613b      	str	r3, [r7, #16]
}
 800ae98:	bf00      	nop
 800ae9a:	bf00      	nop
 800ae9c:	e7fd      	b.n	800ae9a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	68ba      	ldr	r2, [r7, #8]
 800aea2:	fb02 f303 	mul.w	r3, r2, r3
 800aea6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	3348      	adds	r3, #72	@ 0x48
 800aeac:	4618      	mov	r0, r3
 800aeae:	f001 fdb5 	bl	800ca1c <pvPortMalloc>
 800aeb2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aeb4:	69bb      	ldr	r3, [r7, #24]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d011      	beq.n	800aede <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	3348      	adds	r3, #72	@ 0x48
 800aec2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aec4:	69bb      	ldr	r3, [r7, #24]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aecc:	79fa      	ldrb	r2, [r7, #7]
 800aece:	69bb      	ldr	r3, [r7, #24]
 800aed0:	9300      	str	r3, [sp, #0]
 800aed2:	4613      	mov	r3, r2
 800aed4:	697a      	ldr	r2, [r7, #20]
 800aed6:	68b9      	ldr	r1, [r7, #8]
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f000 f805 	bl	800aee8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aede:	69bb      	ldr	r3, [r7, #24]
	}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3720      	adds	r7, #32
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	607a      	str	r2, [r7, #4]
 800aef4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d103      	bne.n	800af04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	69ba      	ldr	r2, [r7, #24]
 800af00:	601a      	str	r2, [r3, #0]
 800af02:	e002      	b.n	800af0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800af04:	69bb      	ldr	r3, [r7, #24]
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800af0a:	69bb      	ldr	r3, [r7, #24]
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800af10:	69bb      	ldr	r3, [r7, #24]
 800af12:	68ba      	ldr	r2, [r7, #8]
 800af14:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800af16:	2101      	movs	r1, #1
 800af18:	69b8      	ldr	r0, [r7, #24]
 800af1a:	f7ff fec3 	bl	800aca4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800af1e:	bf00      	nop
 800af20:	3710      	adds	r7, #16
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
	...

0800af28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b08e      	sub	sp, #56	@ 0x38
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	60b9      	str	r1, [r7, #8]
 800af32:	607a      	str	r2, [r7, #4]
 800af34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800af36:	2300      	movs	r3, #0
 800af38:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800af3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10b      	bne.n	800af5c <xQueueGenericSend+0x34>
	__asm volatile
 800af44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af48:	f383 8811 	msr	BASEPRI, r3
 800af4c:	f3bf 8f6f 	isb	sy
 800af50:	f3bf 8f4f 	dsb	sy
 800af54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800af56:	bf00      	nop
 800af58:	bf00      	nop
 800af5a:	e7fd      	b.n	800af58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d103      	bne.n	800af6a <xQueueGenericSend+0x42>
 800af62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af66:	2b00      	cmp	r3, #0
 800af68:	d101      	bne.n	800af6e <xQueueGenericSend+0x46>
 800af6a:	2301      	movs	r3, #1
 800af6c:	e000      	b.n	800af70 <xQueueGenericSend+0x48>
 800af6e:	2300      	movs	r3, #0
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10b      	bne.n	800af8c <xQueueGenericSend+0x64>
	__asm volatile
 800af74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af78:	f383 8811 	msr	BASEPRI, r3
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f3bf 8f4f 	dsb	sy
 800af84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800af86:	bf00      	nop
 800af88:	bf00      	nop
 800af8a:	e7fd      	b.n	800af88 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d103      	bne.n	800af9a <xQueueGenericSend+0x72>
 800af92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af96:	2b01      	cmp	r3, #1
 800af98:	d101      	bne.n	800af9e <xQueueGenericSend+0x76>
 800af9a:	2301      	movs	r3, #1
 800af9c:	e000      	b.n	800afa0 <xQueueGenericSend+0x78>
 800af9e:	2300      	movs	r3, #0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10b      	bne.n	800afbc <xQueueGenericSend+0x94>
	__asm volatile
 800afa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa8:	f383 8811 	msr	BASEPRI, r3
 800afac:	f3bf 8f6f 	isb	sy
 800afb0:	f3bf 8f4f 	dsb	sy
 800afb4:	623b      	str	r3, [r7, #32]
}
 800afb6:	bf00      	nop
 800afb8:	bf00      	nop
 800afba:	e7fd      	b.n	800afb8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800afbc:	f001 f9d2 	bl	800c364 <xTaskGetSchedulerState>
 800afc0:	4603      	mov	r3, r0
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d102      	bne.n	800afcc <xQueueGenericSend+0xa4>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d101      	bne.n	800afd0 <xQueueGenericSend+0xa8>
 800afcc:	2301      	movs	r3, #1
 800afce:	e000      	b.n	800afd2 <xQueueGenericSend+0xaa>
 800afd0:	2300      	movs	r3, #0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d10b      	bne.n	800afee <xQueueGenericSend+0xc6>
	__asm volatile
 800afd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afda:	f383 8811 	msr	BASEPRI, r3
 800afde:	f3bf 8f6f 	isb	sy
 800afe2:	f3bf 8f4f 	dsb	sy
 800afe6:	61fb      	str	r3, [r7, #28]
}
 800afe8:	bf00      	nop
 800afea:	bf00      	nop
 800afec:	e7fd      	b.n	800afea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800afee:	f001 fbf3 	bl	800c7d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800affa:	429a      	cmp	r2, r3
 800affc:	d302      	bcc.n	800b004 <xQueueGenericSend+0xdc>
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	2b02      	cmp	r3, #2
 800b002:	d129      	bne.n	800b058 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b004:	683a      	ldr	r2, [r7, #0]
 800b006:	68b9      	ldr	r1, [r7, #8]
 800b008:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b00a:	f000 fa91 	bl	800b530 <prvCopyDataToQueue>
 800b00e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b014:	2b00      	cmp	r3, #0
 800b016:	d010      	beq.n	800b03a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b01a:	3324      	adds	r3, #36	@ 0x24
 800b01c:	4618      	mov	r0, r3
 800b01e:	f000 ffdf 	bl	800bfe0 <xTaskRemoveFromEventList>
 800b022:	4603      	mov	r3, r0
 800b024:	2b00      	cmp	r3, #0
 800b026:	d013      	beq.n	800b050 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b028:	4b3f      	ldr	r3, [pc, #252]	@ (800b128 <xQueueGenericSend+0x200>)
 800b02a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b02e:	601a      	str	r2, [r3, #0]
 800b030:	f3bf 8f4f 	dsb	sy
 800b034:	f3bf 8f6f 	isb	sy
 800b038:	e00a      	b.n	800b050 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b03a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d007      	beq.n	800b050 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b040:	4b39      	ldr	r3, [pc, #228]	@ (800b128 <xQueueGenericSend+0x200>)
 800b042:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b046:	601a      	str	r2, [r3, #0]
 800b048:	f3bf 8f4f 	dsb	sy
 800b04c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b050:	f001 fbf4 	bl	800c83c <vPortExitCritical>
				return pdPASS;
 800b054:	2301      	movs	r3, #1
 800b056:	e063      	b.n	800b120 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d103      	bne.n	800b066 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b05e:	f001 fbed 	bl	800c83c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b062:	2300      	movs	r3, #0
 800b064:	e05c      	b.n	800b120 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d106      	bne.n	800b07a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b06c:	f107 0314 	add.w	r3, r7, #20
 800b070:	4618      	mov	r0, r3
 800b072:	f001 f819 	bl	800c0a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b076:	2301      	movs	r3, #1
 800b078:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b07a:	f001 fbdf 	bl	800c83c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b07e:	f000 fda1 	bl	800bbc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b082:	f001 fba9 	bl	800c7d8 <vPortEnterCritical>
 800b086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b088:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b08c:	b25b      	sxtb	r3, r3
 800b08e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b092:	d103      	bne.n	800b09c <xQueueGenericSend+0x174>
 800b094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b096:	2200      	movs	r2, #0
 800b098:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b09e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b0a2:	b25b      	sxtb	r3, r3
 800b0a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0a8:	d103      	bne.n	800b0b2 <xQueueGenericSend+0x18a>
 800b0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b0b2:	f001 fbc3 	bl	800c83c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b0b6:	1d3a      	adds	r2, r7, #4
 800b0b8:	f107 0314 	add.w	r3, r7, #20
 800b0bc:	4611      	mov	r1, r2
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f001 f808 	bl	800c0d4 <xTaskCheckForTimeOut>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d124      	bne.n	800b114 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b0ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b0cc:	f000 fb28 	bl	800b720 <prvIsQueueFull>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d018      	beq.n	800b108 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d8:	3310      	adds	r3, #16
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	4611      	mov	r1, r2
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f000 ff58 	bl	800bf94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b0e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b0e6:	f000 fab3 	bl	800b650 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b0ea:	f000 fd79 	bl	800bbe0 <xTaskResumeAll>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f47f af7c 	bne.w	800afee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b0f6:	4b0c      	ldr	r3, [pc, #48]	@ (800b128 <xQueueGenericSend+0x200>)
 800b0f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0fc:	601a      	str	r2, [r3, #0]
 800b0fe:	f3bf 8f4f 	dsb	sy
 800b102:	f3bf 8f6f 	isb	sy
 800b106:	e772      	b.n	800afee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b108:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b10a:	f000 faa1 	bl	800b650 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b10e:	f000 fd67 	bl	800bbe0 <xTaskResumeAll>
 800b112:	e76c      	b.n	800afee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b114:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b116:	f000 fa9b 	bl	800b650 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b11a:	f000 fd61 	bl	800bbe0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b11e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b120:	4618      	mov	r0, r3
 800b122:	3738      	adds	r7, #56	@ 0x38
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	e000ed04 	.word	0xe000ed04

0800b12c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b090      	sub	sp, #64	@ 0x40
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]
 800b138:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b140:	2b00      	cmp	r3, #0
 800b142:	d10b      	bne.n	800b15c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b148:	f383 8811 	msr	BASEPRI, r3
 800b14c:	f3bf 8f6f 	isb	sy
 800b150:	f3bf 8f4f 	dsb	sy
 800b154:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b156:	bf00      	nop
 800b158:	bf00      	nop
 800b15a:	e7fd      	b.n	800b158 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d103      	bne.n	800b16a <xQueueGenericSendFromISR+0x3e>
 800b162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b166:	2b00      	cmp	r3, #0
 800b168:	d101      	bne.n	800b16e <xQueueGenericSendFromISR+0x42>
 800b16a:	2301      	movs	r3, #1
 800b16c:	e000      	b.n	800b170 <xQueueGenericSendFromISR+0x44>
 800b16e:	2300      	movs	r3, #0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d10b      	bne.n	800b18c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b178:	f383 8811 	msr	BASEPRI, r3
 800b17c:	f3bf 8f6f 	isb	sy
 800b180:	f3bf 8f4f 	dsb	sy
 800b184:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b186:	bf00      	nop
 800b188:	bf00      	nop
 800b18a:	e7fd      	b.n	800b188 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	2b02      	cmp	r3, #2
 800b190:	d103      	bne.n	800b19a <xQueueGenericSendFromISR+0x6e>
 800b192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b196:	2b01      	cmp	r3, #1
 800b198:	d101      	bne.n	800b19e <xQueueGenericSendFromISR+0x72>
 800b19a:	2301      	movs	r3, #1
 800b19c:	e000      	b.n	800b1a0 <xQueueGenericSendFromISR+0x74>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d10b      	bne.n	800b1bc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b1a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1a8:	f383 8811 	msr	BASEPRI, r3
 800b1ac:	f3bf 8f6f 	isb	sy
 800b1b0:	f3bf 8f4f 	dsb	sy
 800b1b4:	623b      	str	r3, [r7, #32]
}
 800b1b6:	bf00      	nop
 800b1b8:	bf00      	nop
 800b1ba:	e7fd      	b.n	800b1b8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b1bc:	f001 fbec 	bl	800c998 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b1c0:	f3ef 8211 	mrs	r2, BASEPRI
 800b1c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c8:	f383 8811 	msr	BASEPRI, r3
 800b1cc:	f3bf 8f6f 	isb	sy
 800b1d0:	f3bf 8f4f 	dsb	sy
 800b1d4:	61fa      	str	r2, [r7, #28]
 800b1d6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b1d8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b1da:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d302      	bcc.n	800b1ee <xQueueGenericSendFromISR+0xc2>
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	2b02      	cmp	r3, #2
 800b1ec:	d12f      	bne.n	800b24e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b1f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b1fe:	683a      	ldr	r2, [r7, #0]
 800b200:	68b9      	ldr	r1, [r7, #8]
 800b202:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b204:	f000 f994 	bl	800b530 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b208:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b20c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b210:	d112      	bne.n	800b238 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b216:	2b00      	cmp	r3, #0
 800b218:	d016      	beq.n	800b248 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b21c:	3324      	adds	r3, #36	@ 0x24
 800b21e:	4618      	mov	r0, r3
 800b220:	f000 fede 	bl	800bfe0 <xTaskRemoveFromEventList>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00e      	beq.n	800b248 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d00b      	beq.n	800b248 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2201      	movs	r2, #1
 800b234:	601a      	str	r2, [r3, #0]
 800b236:	e007      	b.n	800b248 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b238:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b23c:	3301      	adds	r3, #1
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	b25a      	sxtb	r2, r3
 800b242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b248:	2301      	movs	r3, #1
 800b24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b24c:	e001      	b.n	800b252 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b24e:	2300      	movs	r3, #0
 800b250:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b254:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b25c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b25e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b260:	4618      	mov	r0, r3
 800b262:	3740      	adds	r7, #64	@ 0x40
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b08c      	sub	sp, #48	@ 0x30
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b274:	2300      	movs	r3, #0
 800b276:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d10b      	bne.n	800b29a <xQueueReceive+0x32>
	__asm volatile
 800b282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	623b      	str	r3, [r7, #32]
}
 800b294:	bf00      	nop
 800b296:	bf00      	nop
 800b298:	e7fd      	b.n	800b296 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d103      	bne.n	800b2a8 <xQueueReceive+0x40>
 800b2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d101      	bne.n	800b2ac <xQueueReceive+0x44>
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	e000      	b.n	800b2ae <xQueueReceive+0x46>
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d10b      	bne.n	800b2ca <xQueueReceive+0x62>
	__asm volatile
 800b2b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b6:	f383 8811 	msr	BASEPRI, r3
 800b2ba:	f3bf 8f6f 	isb	sy
 800b2be:	f3bf 8f4f 	dsb	sy
 800b2c2:	61fb      	str	r3, [r7, #28]
}
 800b2c4:	bf00      	nop
 800b2c6:	bf00      	nop
 800b2c8:	e7fd      	b.n	800b2c6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b2ca:	f001 f84b 	bl	800c364 <xTaskGetSchedulerState>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d102      	bne.n	800b2da <xQueueReceive+0x72>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d101      	bne.n	800b2de <xQueueReceive+0x76>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	e000      	b.n	800b2e0 <xQueueReceive+0x78>
 800b2de:	2300      	movs	r3, #0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d10b      	bne.n	800b2fc <xQueueReceive+0x94>
	__asm volatile
 800b2e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2e8:	f383 8811 	msr	BASEPRI, r3
 800b2ec:	f3bf 8f6f 	isb	sy
 800b2f0:	f3bf 8f4f 	dsb	sy
 800b2f4:	61bb      	str	r3, [r7, #24]
}
 800b2f6:	bf00      	nop
 800b2f8:	bf00      	nop
 800b2fa:	e7fd      	b.n	800b2f8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b2fc:	f001 fa6c 	bl	800c7d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b304:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d01f      	beq.n	800b34c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b30c:	68b9      	ldr	r1, [r7, #8]
 800b30e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b310:	f000 f978 	bl	800b604 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b316:	1e5a      	subs	r2, r3, #1
 800b318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b31a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b31c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b31e:	691b      	ldr	r3, [r3, #16]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00f      	beq.n	800b344 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b326:	3310      	adds	r3, #16
 800b328:	4618      	mov	r0, r3
 800b32a:	f000 fe59 	bl	800bfe0 <xTaskRemoveFromEventList>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d007      	beq.n	800b344 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b334:	4b3c      	ldr	r3, [pc, #240]	@ (800b428 <xQueueReceive+0x1c0>)
 800b336:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b33a:	601a      	str	r2, [r3, #0]
 800b33c:	f3bf 8f4f 	dsb	sy
 800b340:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b344:	f001 fa7a 	bl	800c83c <vPortExitCritical>
				return pdPASS;
 800b348:	2301      	movs	r3, #1
 800b34a:	e069      	b.n	800b420 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d103      	bne.n	800b35a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b352:	f001 fa73 	bl	800c83c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b356:	2300      	movs	r3, #0
 800b358:	e062      	b.n	800b420 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b35a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d106      	bne.n	800b36e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b360:	f107 0310 	add.w	r3, r7, #16
 800b364:	4618      	mov	r0, r3
 800b366:	f000 fe9f 	bl	800c0a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b36a:	2301      	movs	r3, #1
 800b36c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b36e:	f001 fa65 	bl	800c83c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b372:	f000 fc27 	bl	800bbc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b376:	f001 fa2f 	bl	800c7d8 <vPortEnterCritical>
 800b37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b37c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b380:	b25b      	sxtb	r3, r3
 800b382:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b386:	d103      	bne.n	800b390 <xQueueReceive+0x128>
 800b388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b38a:	2200      	movs	r2, #0
 800b38c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b392:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b396:	b25b      	sxtb	r3, r3
 800b398:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b39c:	d103      	bne.n	800b3a6 <xQueueReceive+0x13e>
 800b39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b3a6:	f001 fa49 	bl	800c83c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3aa:	1d3a      	adds	r2, r7, #4
 800b3ac:	f107 0310 	add.w	r3, r7, #16
 800b3b0:	4611      	mov	r1, r2
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f000 fe8e 	bl	800c0d4 <xTaskCheckForTimeOut>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d123      	bne.n	800b406 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3c0:	f000 f998 	bl	800b6f4 <prvIsQueueEmpty>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d017      	beq.n	800b3fa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3cc:	3324      	adds	r3, #36	@ 0x24
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	4611      	mov	r1, r2
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f000 fdde 	bl	800bf94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b3d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3da:	f000 f939 	bl	800b650 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b3de:	f000 fbff 	bl	800bbe0 <xTaskResumeAll>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d189      	bne.n	800b2fc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b3e8:	4b0f      	ldr	r3, [pc, #60]	@ (800b428 <xQueueReceive+0x1c0>)
 800b3ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3ee:	601a      	str	r2, [r3, #0]
 800b3f0:	f3bf 8f4f 	dsb	sy
 800b3f4:	f3bf 8f6f 	isb	sy
 800b3f8:	e780      	b.n	800b2fc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b3fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3fc:	f000 f928 	bl	800b650 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b400:	f000 fbee 	bl	800bbe0 <xTaskResumeAll>
 800b404:	e77a      	b.n	800b2fc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b406:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b408:	f000 f922 	bl	800b650 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b40c:	f000 fbe8 	bl	800bbe0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b410:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b412:	f000 f96f 	bl	800b6f4 <prvIsQueueEmpty>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	f43f af6f 	beq.w	800b2fc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b41e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b420:	4618      	mov	r0, r3
 800b422:	3730      	adds	r7, #48	@ 0x30
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}
 800b428:	e000ed04 	.word	0xe000ed04

0800b42c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b08e      	sub	sp, #56	@ 0x38
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d10b      	bne.n	800b45a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b446:	f383 8811 	msr	BASEPRI, r3
 800b44a:	f3bf 8f6f 	isb	sy
 800b44e:	f3bf 8f4f 	dsb	sy
 800b452:	623b      	str	r3, [r7, #32]
}
 800b454:	bf00      	nop
 800b456:	bf00      	nop
 800b458:	e7fd      	b.n	800b456 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d103      	bne.n	800b468 <xQueueReceiveFromISR+0x3c>
 800b460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b464:	2b00      	cmp	r3, #0
 800b466:	d101      	bne.n	800b46c <xQueueReceiveFromISR+0x40>
 800b468:	2301      	movs	r3, #1
 800b46a:	e000      	b.n	800b46e <xQueueReceiveFromISR+0x42>
 800b46c:	2300      	movs	r3, #0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d10b      	bne.n	800b48a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b476:	f383 8811 	msr	BASEPRI, r3
 800b47a:	f3bf 8f6f 	isb	sy
 800b47e:	f3bf 8f4f 	dsb	sy
 800b482:	61fb      	str	r3, [r7, #28]
}
 800b484:	bf00      	nop
 800b486:	bf00      	nop
 800b488:	e7fd      	b.n	800b486 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b48a:	f001 fa85 	bl	800c998 <vPortValidateInterruptPriority>
	__asm volatile
 800b48e:	f3ef 8211 	mrs	r2, BASEPRI
 800b492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b496:	f383 8811 	msr	BASEPRI, r3
 800b49a:	f3bf 8f6f 	isb	sy
 800b49e:	f3bf 8f4f 	dsb	sy
 800b4a2:	61ba      	str	r2, [r7, #24]
 800b4a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b4a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b4a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4ae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d02f      	beq.n	800b516 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b4bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b4c0:	68b9      	ldr	r1, [r7, #8]
 800b4c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b4c4:	f000 f89e 	bl	800b604 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b4c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ca:	1e5a      	subs	r2, r3, #1
 800b4cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ce:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b4d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b4d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4d8:	d112      	bne.n	800b500 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4dc:	691b      	ldr	r3, [r3, #16]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d016      	beq.n	800b510 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e4:	3310      	adds	r3, #16
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f000 fd7a 	bl	800bfe0 <xTaskRemoveFromEventList>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d00e      	beq.n	800b510 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d00b      	beq.n	800b510 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	601a      	str	r2, [r3, #0]
 800b4fe:	e007      	b.n	800b510 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b500:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b504:	3301      	adds	r3, #1
 800b506:	b2db      	uxtb	r3, r3
 800b508:	b25a      	sxtb	r2, r3
 800b50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b50c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b510:	2301      	movs	r3, #1
 800b512:	637b      	str	r3, [r7, #52]	@ 0x34
 800b514:	e001      	b.n	800b51a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b516:	2300      	movs	r3, #0
 800b518:	637b      	str	r3, [r7, #52]	@ 0x34
 800b51a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b51c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	f383 8811 	msr	BASEPRI, r3
}
 800b524:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3738      	adds	r7, #56	@ 0x38
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b086      	sub	sp, #24
 800b534:	af00      	add	r7, sp, #0
 800b536:	60f8      	str	r0, [r7, #12]
 800b538:	60b9      	str	r1, [r7, #8]
 800b53a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b53c:	2300      	movs	r3, #0
 800b53e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b544:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d10d      	bne.n	800b56a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d14d      	bne.n	800b5f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	4618      	mov	r0, r3
 800b55c:	f000 ff20 	bl	800c3a0 <xTaskPriorityDisinherit>
 800b560:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2200      	movs	r2, #0
 800b566:	609a      	str	r2, [r3, #8]
 800b568:	e043      	b.n	800b5f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d119      	bne.n	800b5a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	6858      	ldr	r0, [r3, #4]
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b578:	461a      	mov	r2, r3
 800b57a:	68b9      	ldr	r1, [r7, #8]
 800b57c:	f002 f84e 	bl	800d61c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	685a      	ldr	r2, [r3, #4]
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b588:	441a      	add	r2, r3
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	685a      	ldr	r2, [r3, #4]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	689b      	ldr	r3, [r3, #8]
 800b596:	429a      	cmp	r2, r3
 800b598:	d32b      	bcc.n	800b5f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	605a      	str	r2, [r3, #4]
 800b5a2:	e026      	b.n	800b5f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	68d8      	ldr	r0, [r3, #12]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	68b9      	ldr	r1, [r7, #8]
 800b5b0:	f002 f834 	bl	800d61c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	68da      	ldr	r2, [r3, #12]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5bc:	425b      	negs	r3, r3
 800b5be:	441a      	add	r2, r3
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	68da      	ldr	r2, [r3, #12]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d207      	bcs.n	800b5e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	689a      	ldr	r2, [r3, #8]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5d8:	425b      	negs	r3, r3
 800b5da:	441a      	add	r2, r3
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2b02      	cmp	r3, #2
 800b5e4:	d105      	bne.n	800b5f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d002      	beq.n	800b5f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	3b01      	subs	r3, #1
 800b5f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	1c5a      	adds	r2, r3, #1
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b5fa:	697b      	ldr	r3, [r7, #20]
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3718      	adds	r7, #24
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b612:	2b00      	cmp	r3, #0
 800b614:	d018      	beq.n	800b648 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	68da      	ldr	r2, [r3, #12]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b61e:	441a      	add	r2, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	68da      	ldr	r2, [r3, #12]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	689b      	ldr	r3, [r3, #8]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d303      	bcc.n	800b638 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	68d9      	ldr	r1, [r3, #12]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b640:	461a      	mov	r2, r3
 800b642:	6838      	ldr	r0, [r7, #0]
 800b644:	f001 ffea 	bl	800d61c <memcpy>
	}
}
 800b648:	bf00      	nop
 800b64a:	3708      	adds	r7, #8
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b658:	f001 f8be 	bl	800c7d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b662:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b664:	e011      	b.n	800b68a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d012      	beq.n	800b694 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	3324      	adds	r3, #36	@ 0x24
 800b672:	4618      	mov	r0, r3
 800b674:	f000 fcb4 	bl	800bfe0 <xTaskRemoveFromEventList>
 800b678:	4603      	mov	r3, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d001      	beq.n	800b682 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b67e:	f000 fd8d 	bl	800c19c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b682:	7bfb      	ldrb	r3, [r7, #15]
 800b684:	3b01      	subs	r3, #1
 800b686:	b2db      	uxtb	r3, r3
 800b688:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b68a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	dce9      	bgt.n	800b666 <prvUnlockQueue+0x16>
 800b692:	e000      	b.n	800b696 <prvUnlockQueue+0x46>
					break;
 800b694:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	22ff      	movs	r2, #255	@ 0xff
 800b69a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b69e:	f001 f8cd 	bl	800c83c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b6a2:	f001 f899 	bl	800c7d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b6ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b6ae:	e011      	b.n	800b6d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	691b      	ldr	r3, [r3, #16]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d012      	beq.n	800b6de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	3310      	adds	r3, #16
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f000 fc8f 	bl	800bfe0 <xTaskRemoveFromEventList>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d001      	beq.n	800b6cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b6c8:	f000 fd68 	bl	800c19c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b6cc:	7bbb      	ldrb	r3, [r7, #14]
 800b6ce:	3b01      	subs	r3, #1
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b6d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	dce9      	bgt.n	800b6b0 <prvUnlockQueue+0x60>
 800b6dc:	e000      	b.n	800b6e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b6de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	22ff      	movs	r2, #255	@ 0xff
 800b6e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b6e8:	f001 f8a8 	bl	800c83c <vPortExitCritical>
}
 800b6ec:	bf00      	nop
 800b6ee:	3710      	adds	r7, #16
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b6fc:	f001 f86c 	bl	800c7d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b704:	2b00      	cmp	r3, #0
 800b706:	d102      	bne.n	800b70e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b708:	2301      	movs	r3, #1
 800b70a:	60fb      	str	r3, [r7, #12]
 800b70c:	e001      	b.n	800b712 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b70e:	2300      	movs	r3, #0
 800b710:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b712:	f001 f893 	bl	800c83c <vPortExitCritical>

	return xReturn;
 800b716:	68fb      	ldr	r3, [r7, #12]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3710      	adds	r7, #16
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b728:	f001 f856 	bl	800c7d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b734:	429a      	cmp	r2, r3
 800b736:	d102      	bne.n	800b73e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b738:	2301      	movs	r3, #1
 800b73a:	60fb      	str	r3, [r7, #12]
 800b73c:	e001      	b.n	800b742 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b73e:	2300      	movs	r3, #0
 800b740:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b742:	f001 f87b 	bl	800c83c <vPortExitCritical>

	return xReturn;
 800b746:	68fb      	ldr	r3, [r7, #12]
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3710      	adds	r7, #16
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b750:	b580      	push	{r7, lr}
 800b752:	b08e      	sub	sp, #56	@ 0x38
 800b754:	af04      	add	r7, sp, #16
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	60b9      	str	r1, [r7, #8]
 800b75a:	607a      	str	r2, [r7, #4]
 800b75c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b75e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b760:	2b00      	cmp	r3, #0
 800b762:	d10b      	bne.n	800b77c <xTaskCreateStatic+0x2c>
	__asm volatile
 800b764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b768:	f383 8811 	msr	BASEPRI, r3
 800b76c:	f3bf 8f6f 	isb	sy
 800b770:	f3bf 8f4f 	dsb	sy
 800b774:	623b      	str	r3, [r7, #32]
}
 800b776:	bf00      	nop
 800b778:	bf00      	nop
 800b77a:	e7fd      	b.n	800b778 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b77c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d10b      	bne.n	800b79a <xTaskCreateStatic+0x4a>
	__asm volatile
 800b782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b786:	f383 8811 	msr	BASEPRI, r3
 800b78a:	f3bf 8f6f 	isb	sy
 800b78e:	f3bf 8f4f 	dsb	sy
 800b792:	61fb      	str	r3, [r7, #28]
}
 800b794:	bf00      	nop
 800b796:	bf00      	nop
 800b798:	e7fd      	b.n	800b796 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b79a:	2358      	movs	r3, #88	@ 0x58
 800b79c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	2b58      	cmp	r3, #88	@ 0x58
 800b7a2:	d00b      	beq.n	800b7bc <xTaskCreateStatic+0x6c>
	__asm volatile
 800b7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7a8:	f383 8811 	msr	BASEPRI, r3
 800b7ac:	f3bf 8f6f 	isb	sy
 800b7b0:	f3bf 8f4f 	dsb	sy
 800b7b4:	61bb      	str	r3, [r7, #24]
}
 800b7b6:	bf00      	nop
 800b7b8:	bf00      	nop
 800b7ba:	e7fd      	b.n	800b7b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b7bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d01e      	beq.n	800b802 <xTaskCreateStatic+0xb2>
 800b7c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d01b      	beq.n	800b802 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b7d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d6:	2202      	movs	r2, #2
 800b7d8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b7dc:	2300      	movs	r3, #0
 800b7de:	9303      	str	r3, [sp, #12]
 800b7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e2:	9302      	str	r3, [sp, #8]
 800b7e4:	f107 0314 	add.w	r3, r7, #20
 800b7e8:	9301      	str	r3, [sp, #4]
 800b7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ec:	9300      	str	r3, [sp, #0]
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	68b9      	ldr	r1, [r7, #8]
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	f000 f850 	bl	800b89a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b7fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b7fc:	f000 f8e0 	bl	800b9c0 <prvAddNewTaskToReadyList>
 800b800:	e001      	b.n	800b806 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b802:	2300      	movs	r3, #0
 800b804:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b806:	697b      	ldr	r3, [r7, #20]
	}
 800b808:	4618      	mov	r0, r3
 800b80a:	3728      	adds	r7, #40	@ 0x28
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b810:	b580      	push	{r7, lr}
 800b812:	b08c      	sub	sp, #48	@ 0x30
 800b814:	af04      	add	r7, sp, #16
 800b816:	60f8      	str	r0, [r7, #12]
 800b818:	60b9      	str	r1, [r7, #8]
 800b81a:	603b      	str	r3, [r7, #0]
 800b81c:	4613      	mov	r3, r2
 800b81e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b820:	88fb      	ldrh	r3, [r7, #6]
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	4618      	mov	r0, r3
 800b826:	f001 f8f9 	bl	800ca1c <pvPortMalloc>
 800b82a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d00e      	beq.n	800b850 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b832:	2058      	movs	r0, #88	@ 0x58
 800b834:	f001 f8f2 	bl	800ca1c <pvPortMalloc>
 800b838:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b83a:	69fb      	ldr	r3, [r7, #28]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d003      	beq.n	800b848 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b840:	69fb      	ldr	r3, [r7, #28]
 800b842:	697a      	ldr	r2, [r7, #20]
 800b844:	631a      	str	r2, [r3, #48]	@ 0x30
 800b846:	e005      	b.n	800b854 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b848:	6978      	ldr	r0, [r7, #20]
 800b84a:	f001 f9bb 	bl	800cbc4 <vPortFree>
 800b84e:	e001      	b.n	800b854 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b850:	2300      	movs	r3, #0
 800b852:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b854:	69fb      	ldr	r3, [r7, #28]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d017      	beq.n	800b88a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	2200      	movs	r2, #0
 800b85e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b862:	88fa      	ldrh	r2, [r7, #6]
 800b864:	2300      	movs	r3, #0
 800b866:	9303      	str	r3, [sp, #12]
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	9302      	str	r3, [sp, #8]
 800b86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b86e:	9301      	str	r3, [sp, #4]
 800b870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b872:	9300      	str	r3, [sp, #0]
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	68b9      	ldr	r1, [r7, #8]
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f000 f80e 	bl	800b89a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b87e:	69f8      	ldr	r0, [r7, #28]
 800b880:	f000 f89e 	bl	800b9c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b884:	2301      	movs	r3, #1
 800b886:	61bb      	str	r3, [r7, #24]
 800b888:	e002      	b.n	800b890 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b88a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b88e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b890:	69bb      	ldr	r3, [r7, #24]
	}
 800b892:	4618      	mov	r0, r3
 800b894:	3720      	adds	r7, #32
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b088      	sub	sp, #32
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	60f8      	str	r0, [r7, #12]
 800b8a2:	60b9      	str	r1, [r7, #8]
 800b8a4:	607a      	str	r2, [r7, #4]
 800b8a6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8aa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	21a5      	movs	r1, #165	@ 0xa5
 800b8b4:	f001 fe6e 	bl	800d594 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b8b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b8c2:	3b01      	subs	r3, #1
 800b8c4:	009b      	lsls	r3, r3, #2
 800b8c6:	4413      	add	r3, r2
 800b8c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	f023 0307 	bic.w	r3, r3, #7
 800b8d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	f003 0307 	and.w	r3, r3, #7
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d00b      	beq.n	800b8f4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b8dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8e0:	f383 8811 	msr	BASEPRI, r3
 800b8e4:	f3bf 8f6f 	isb	sy
 800b8e8:	f3bf 8f4f 	dsb	sy
 800b8ec:	617b      	str	r3, [r7, #20]
}
 800b8ee:	bf00      	nop
 800b8f0:	bf00      	nop
 800b8f2:	e7fd      	b.n	800b8f0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d01f      	beq.n	800b93a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	61fb      	str	r3, [r7, #28]
 800b8fe:	e012      	b.n	800b926 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b900:	68ba      	ldr	r2, [r7, #8]
 800b902:	69fb      	ldr	r3, [r7, #28]
 800b904:	4413      	add	r3, r2
 800b906:	7819      	ldrb	r1, [r3, #0]
 800b908:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b90a:	69fb      	ldr	r3, [r7, #28]
 800b90c:	4413      	add	r3, r2
 800b90e:	3334      	adds	r3, #52	@ 0x34
 800b910:	460a      	mov	r2, r1
 800b912:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b914:	68ba      	ldr	r2, [r7, #8]
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	4413      	add	r3, r2
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d006      	beq.n	800b92e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	3301      	adds	r3, #1
 800b924:	61fb      	str	r3, [r7, #28]
 800b926:	69fb      	ldr	r3, [r7, #28]
 800b928:	2b0f      	cmp	r3, #15
 800b92a:	d9e9      	bls.n	800b900 <prvInitialiseNewTask+0x66>
 800b92c:	e000      	b.n	800b930 <prvInitialiseNewTask+0x96>
			{
				break;
 800b92e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b932:	2200      	movs	r2, #0
 800b934:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b938:	e003      	b.n	800b942 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b93c:	2200      	movs	r2, #0
 800b93e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b944:	2b06      	cmp	r3, #6
 800b946:	d901      	bls.n	800b94c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b948:	2306      	movs	r3, #6
 800b94a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b94c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b94e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b950:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b954:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b956:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b95a:	2200      	movs	r2, #0
 800b95c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b960:	3304      	adds	r3, #4
 800b962:	4618      	mov	r0, r3
 800b964:	f7ff f90a 	bl	800ab7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b96a:	3318      	adds	r3, #24
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7ff f905 	bl	800ab7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b976:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b97a:	f1c3 0207 	rsb	r2, r3, #7
 800b97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b980:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b984:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b986:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800b988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b98a:	2200      	movs	r2, #0
 800b98c:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b990:	2200      	movs	r2, #0
 800b992:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b996:	2200      	movs	r2, #0
 800b998:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b99c:	683a      	ldr	r2, [r7, #0]
 800b99e:	68f9      	ldr	r1, [r7, #12]
 800b9a0:	69b8      	ldr	r0, [r7, #24]
 800b9a2:	f000 fdeb 	bl	800c57c <pxPortInitialiseStack>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b9ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d002      	beq.n	800b9b8 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9b8:	bf00      	nop
 800b9ba:	3720      	adds	r7, #32
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b9c8:	f000 ff06 	bl	800c7d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b9cc:	4b2a      	ldr	r3, [pc, #168]	@ (800ba78 <prvAddNewTaskToReadyList+0xb8>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	4a29      	ldr	r2, [pc, #164]	@ (800ba78 <prvAddNewTaskToReadyList+0xb8>)
 800b9d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b9d6:	4b29      	ldr	r3, [pc, #164]	@ (800ba7c <prvAddNewTaskToReadyList+0xbc>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d109      	bne.n	800b9f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b9de:	4a27      	ldr	r2, [pc, #156]	@ (800ba7c <prvAddNewTaskToReadyList+0xbc>)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b9e4:	4b24      	ldr	r3, [pc, #144]	@ (800ba78 <prvAddNewTaskToReadyList+0xb8>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d110      	bne.n	800ba0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b9ec:	f000 fbfc 	bl	800c1e8 <prvInitialiseTaskLists>
 800b9f0:	e00d      	b.n	800ba0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b9f2:	4b23      	ldr	r3, [pc, #140]	@ (800ba80 <prvAddNewTaskToReadyList+0xc0>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d109      	bne.n	800ba0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b9fa:	4b20      	ldr	r3, [pc, #128]	@ (800ba7c <prvAddNewTaskToReadyList+0xbc>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d802      	bhi.n	800ba0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ba08:	4a1c      	ldr	r2, [pc, #112]	@ (800ba7c <prvAddNewTaskToReadyList+0xbc>)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ba0e:	4b1d      	ldr	r3, [pc, #116]	@ (800ba84 <prvAddNewTaskToReadyList+0xc4>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	3301      	adds	r3, #1
 800ba14:	4a1b      	ldr	r2, [pc, #108]	@ (800ba84 <prvAddNewTaskToReadyList+0xc4>)
 800ba16:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	409a      	lsls	r2, r3
 800ba20:	4b19      	ldr	r3, [pc, #100]	@ (800ba88 <prvAddNewTaskToReadyList+0xc8>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4313      	orrs	r3, r2
 800ba26:	4a18      	ldr	r2, [pc, #96]	@ (800ba88 <prvAddNewTaskToReadyList+0xc8>)
 800ba28:	6013      	str	r3, [r2, #0]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba2e:	4613      	mov	r3, r2
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	4413      	add	r3, r2
 800ba34:	009b      	lsls	r3, r3, #2
 800ba36:	4a15      	ldr	r2, [pc, #84]	@ (800ba8c <prvAddNewTaskToReadyList+0xcc>)
 800ba38:	441a      	add	r2, r3
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	3304      	adds	r3, #4
 800ba3e:	4619      	mov	r1, r3
 800ba40:	4610      	mov	r0, r2
 800ba42:	f7ff f8a8 	bl	800ab96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ba46:	f000 fef9 	bl	800c83c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ba4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ba80 <prvAddNewTaskToReadyList+0xc0>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00e      	beq.n	800ba70 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ba52:	4b0a      	ldr	r3, [pc, #40]	@ (800ba7c <prvAddNewTaskToReadyList+0xbc>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d207      	bcs.n	800ba70 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ba60:	4b0b      	ldr	r3, [pc, #44]	@ (800ba90 <prvAddNewTaskToReadyList+0xd0>)
 800ba62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba66:	601a      	str	r2, [r3, #0]
 800ba68:	f3bf 8f4f 	dsb	sy
 800ba6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba70:	bf00      	nop
 800ba72:	3708      	adds	r7, #8
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	200006f8 	.word	0x200006f8
 800ba7c:	200005f8 	.word	0x200005f8
 800ba80:	20000704 	.word	0x20000704
 800ba84:	20000714 	.word	0x20000714
 800ba88:	20000700 	.word	0x20000700
 800ba8c:	200005fc 	.word	0x200005fc
 800ba90:	e000ed04 	.word	0xe000ed04

0800ba94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b084      	sub	sp, #16
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d018      	beq.n	800bad8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800baa6:	4b14      	ldr	r3, [pc, #80]	@ (800baf8 <vTaskDelay+0x64>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d00b      	beq.n	800bac6 <vTaskDelay+0x32>
	__asm volatile
 800baae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	60bb      	str	r3, [r7, #8]
}
 800bac0:	bf00      	nop
 800bac2:	bf00      	nop
 800bac4:	e7fd      	b.n	800bac2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bac6:	f000 f87d 	bl	800bbc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800baca:	2100      	movs	r1, #0
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 fcef 	bl	800c4b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bad2:	f000 f885 	bl	800bbe0 <xTaskResumeAll>
 800bad6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d107      	bne.n	800baee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bade:	4b07      	ldr	r3, [pc, #28]	@ (800bafc <vTaskDelay+0x68>)
 800bae0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bae4:	601a      	str	r2, [r3, #0]
 800bae6:	f3bf 8f4f 	dsb	sy
 800baea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800baee:	bf00      	nop
 800baf0:	3710      	adds	r7, #16
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
 800baf6:	bf00      	nop
 800baf8:	20000720 	.word	0x20000720
 800bafc:	e000ed04 	.word	0xe000ed04

0800bb00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b08a      	sub	sp, #40	@ 0x28
 800bb04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bb06:	2300      	movs	r3, #0
 800bb08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bb0e:	463a      	mov	r2, r7
 800bb10:	1d39      	adds	r1, r7, #4
 800bb12:	f107 0308 	add.w	r3, r7, #8
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7f4 fcfc 	bl	8000514 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bb1c:	6839      	ldr	r1, [r7, #0]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	68ba      	ldr	r2, [r7, #8]
 800bb22:	9202      	str	r2, [sp, #8]
 800bb24:	9301      	str	r3, [sp, #4]
 800bb26:	2300      	movs	r3, #0
 800bb28:	9300      	str	r3, [sp, #0]
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	460a      	mov	r2, r1
 800bb2e:	491f      	ldr	r1, [pc, #124]	@ (800bbac <vTaskStartScheduler+0xac>)
 800bb30:	481f      	ldr	r0, [pc, #124]	@ (800bbb0 <vTaskStartScheduler+0xb0>)
 800bb32:	f7ff fe0d 	bl	800b750 <xTaskCreateStatic>
 800bb36:	4603      	mov	r3, r0
 800bb38:	4a1e      	ldr	r2, [pc, #120]	@ (800bbb4 <vTaskStartScheduler+0xb4>)
 800bb3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bb3c:	4b1d      	ldr	r3, [pc, #116]	@ (800bbb4 <vTaskStartScheduler+0xb4>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d002      	beq.n	800bb4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bb44:	2301      	movs	r3, #1
 800bb46:	617b      	str	r3, [r7, #20]
 800bb48:	e001      	b.n	800bb4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	2b01      	cmp	r3, #1
 800bb52:	d116      	bne.n	800bb82 <vTaskStartScheduler+0x82>
	__asm volatile
 800bb54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb58:	f383 8811 	msr	BASEPRI, r3
 800bb5c:	f3bf 8f6f 	isb	sy
 800bb60:	f3bf 8f4f 	dsb	sy
 800bb64:	613b      	str	r3, [r7, #16]
}
 800bb66:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bb68:	4b13      	ldr	r3, [pc, #76]	@ (800bbb8 <vTaskStartScheduler+0xb8>)
 800bb6a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bb6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bb70:	4b12      	ldr	r3, [pc, #72]	@ (800bbbc <vTaskStartScheduler+0xbc>)
 800bb72:	2201      	movs	r2, #1
 800bb74:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bb76:	4b12      	ldr	r3, [pc, #72]	@ (800bbc0 <vTaskStartScheduler+0xc0>)
 800bb78:	2200      	movs	r2, #0
 800bb7a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bb7c:	f000 fd88 	bl	800c690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bb80:	e00f      	b.n	800bba2 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb88:	d10b      	bne.n	800bba2 <vTaskStartScheduler+0xa2>
	__asm volatile
 800bb8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb8e:	f383 8811 	msr	BASEPRI, r3
 800bb92:	f3bf 8f6f 	isb	sy
 800bb96:	f3bf 8f4f 	dsb	sy
 800bb9a:	60fb      	str	r3, [r7, #12]
}
 800bb9c:	bf00      	nop
 800bb9e:	bf00      	nop
 800bba0:	e7fd      	b.n	800bb9e <vTaskStartScheduler+0x9e>
}
 800bba2:	bf00      	nop
 800bba4:	3718      	adds	r7, #24
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	0800d750 	.word	0x0800d750
 800bbb0:	0800c1b5 	.word	0x0800c1b5
 800bbb4:	2000071c 	.word	0x2000071c
 800bbb8:	20000718 	.word	0x20000718
 800bbbc:	20000704 	.word	0x20000704
 800bbc0:	200006fc 	.word	0x200006fc

0800bbc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bbc8:	4b04      	ldr	r3, [pc, #16]	@ (800bbdc <vTaskSuspendAll+0x18>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	4a03      	ldr	r2, [pc, #12]	@ (800bbdc <vTaskSuspendAll+0x18>)
 800bbd0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bbd2:	bf00      	nop
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr
 800bbdc:	20000720 	.word	0x20000720

0800bbe0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bbea:	2300      	movs	r3, #0
 800bbec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bbee:	4b42      	ldr	r3, [pc, #264]	@ (800bcf8 <xTaskResumeAll+0x118>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d10b      	bne.n	800bc0e <xTaskResumeAll+0x2e>
	__asm volatile
 800bbf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbfa:	f383 8811 	msr	BASEPRI, r3
 800bbfe:	f3bf 8f6f 	isb	sy
 800bc02:	f3bf 8f4f 	dsb	sy
 800bc06:	603b      	str	r3, [r7, #0]
}
 800bc08:	bf00      	nop
 800bc0a:	bf00      	nop
 800bc0c:	e7fd      	b.n	800bc0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bc0e:	f000 fde3 	bl	800c7d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bc12:	4b39      	ldr	r3, [pc, #228]	@ (800bcf8 <xTaskResumeAll+0x118>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	3b01      	subs	r3, #1
 800bc18:	4a37      	ldr	r2, [pc, #220]	@ (800bcf8 <xTaskResumeAll+0x118>)
 800bc1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc1c:	4b36      	ldr	r3, [pc, #216]	@ (800bcf8 <xTaskResumeAll+0x118>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d161      	bne.n	800bce8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bc24:	4b35      	ldr	r3, [pc, #212]	@ (800bcfc <xTaskResumeAll+0x11c>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d05d      	beq.n	800bce8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc2c:	e02e      	b.n	800bc8c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc2e:	4b34      	ldr	r3, [pc, #208]	@ (800bd00 <xTaskResumeAll+0x120>)
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	3318      	adds	r3, #24
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7ff f808 	bl	800ac50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	3304      	adds	r3, #4
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7ff f803 	bl	800ac50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc4e:	2201      	movs	r2, #1
 800bc50:	409a      	lsls	r2, r3
 800bc52:	4b2c      	ldr	r3, [pc, #176]	@ (800bd04 <xTaskResumeAll+0x124>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4313      	orrs	r3, r2
 800bc58:	4a2a      	ldr	r2, [pc, #168]	@ (800bd04 <xTaskResumeAll+0x124>)
 800bc5a:	6013      	str	r3, [r2, #0]
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc60:	4613      	mov	r3, r2
 800bc62:	009b      	lsls	r3, r3, #2
 800bc64:	4413      	add	r3, r2
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	4a27      	ldr	r2, [pc, #156]	@ (800bd08 <xTaskResumeAll+0x128>)
 800bc6a:	441a      	add	r2, r3
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	3304      	adds	r3, #4
 800bc70:	4619      	mov	r1, r3
 800bc72:	4610      	mov	r0, r2
 800bc74:	f7fe ff8f 	bl	800ab96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc7c:	4b23      	ldr	r3, [pc, #140]	@ (800bd0c <xTaskResumeAll+0x12c>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d302      	bcc.n	800bc8c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bc86:	4b22      	ldr	r3, [pc, #136]	@ (800bd10 <xTaskResumeAll+0x130>)
 800bc88:	2201      	movs	r2, #1
 800bc8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc8c:	4b1c      	ldr	r3, [pc, #112]	@ (800bd00 <xTaskResumeAll+0x120>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1cc      	bne.n	800bc2e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d001      	beq.n	800bc9e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bc9a:	f000 fb43 	bl	800c324 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bc9e:	4b1d      	ldr	r3, [pc, #116]	@ (800bd14 <xTaskResumeAll+0x134>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d010      	beq.n	800bccc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bcaa:	f000 f837 	bl	800bd1c <xTaskIncrementTick>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d002      	beq.n	800bcba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bcb4:	4b16      	ldr	r3, [pc, #88]	@ (800bd10 <xTaskResumeAll+0x130>)
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	3b01      	subs	r3, #1
 800bcbe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1f1      	bne.n	800bcaa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bcc6:	4b13      	ldr	r3, [pc, #76]	@ (800bd14 <xTaskResumeAll+0x134>)
 800bcc8:	2200      	movs	r2, #0
 800bcca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bccc:	4b10      	ldr	r3, [pc, #64]	@ (800bd10 <xTaskResumeAll+0x130>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d009      	beq.n	800bce8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bcd8:	4b0f      	ldr	r3, [pc, #60]	@ (800bd18 <xTaskResumeAll+0x138>)
 800bcda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcde:	601a      	str	r2, [r3, #0]
 800bce0:	f3bf 8f4f 	dsb	sy
 800bce4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bce8:	f000 fda8 	bl	800c83c <vPortExitCritical>

	return xAlreadyYielded;
 800bcec:	68bb      	ldr	r3, [r7, #8]
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3710      	adds	r7, #16
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	20000720 	.word	0x20000720
 800bcfc:	200006f8 	.word	0x200006f8
 800bd00:	200006b8 	.word	0x200006b8
 800bd04:	20000700 	.word	0x20000700
 800bd08:	200005fc 	.word	0x200005fc
 800bd0c:	200005f8 	.word	0x200005f8
 800bd10:	2000070c 	.word	0x2000070c
 800bd14:	20000708 	.word	0x20000708
 800bd18:	e000ed04 	.word	0xe000ed04

0800bd1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b086      	sub	sp, #24
 800bd20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bd22:	2300      	movs	r3, #0
 800bd24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd26:	4b4f      	ldr	r3, [pc, #316]	@ (800be64 <xTaskIncrementTick+0x148>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f040 808f 	bne.w	800be4e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bd30:	4b4d      	ldr	r3, [pc, #308]	@ (800be68 <xTaskIncrementTick+0x14c>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	3301      	adds	r3, #1
 800bd36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bd38:	4a4b      	ldr	r2, [pc, #300]	@ (800be68 <xTaskIncrementTick+0x14c>)
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d121      	bne.n	800bd88 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bd44:	4b49      	ldr	r3, [pc, #292]	@ (800be6c <xTaskIncrementTick+0x150>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d00b      	beq.n	800bd66 <xTaskIncrementTick+0x4a>
	__asm volatile
 800bd4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd52:	f383 8811 	msr	BASEPRI, r3
 800bd56:	f3bf 8f6f 	isb	sy
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	603b      	str	r3, [r7, #0]
}
 800bd60:	bf00      	nop
 800bd62:	bf00      	nop
 800bd64:	e7fd      	b.n	800bd62 <xTaskIncrementTick+0x46>
 800bd66:	4b41      	ldr	r3, [pc, #260]	@ (800be6c <xTaskIncrementTick+0x150>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	60fb      	str	r3, [r7, #12]
 800bd6c:	4b40      	ldr	r3, [pc, #256]	@ (800be70 <xTaskIncrementTick+0x154>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a3e      	ldr	r2, [pc, #248]	@ (800be6c <xTaskIncrementTick+0x150>)
 800bd72:	6013      	str	r3, [r2, #0]
 800bd74:	4a3e      	ldr	r2, [pc, #248]	@ (800be70 <xTaskIncrementTick+0x154>)
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	6013      	str	r3, [r2, #0]
 800bd7a:	4b3e      	ldr	r3, [pc, #248]	@ (800be74 <xTaskIncrementTick+0x158>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	4a3c      	ldr	r2, [pc, #240]	@ (800be74 <xTaskIncrementTick+0x158>)
 800bd82:	6013      	str	r3, [r2, #0]
 800bd84:	f000 face 	bl	800c324 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bd88:	4b3b      	ldr	r3, [pc, #236]	@ (800be78 <xTaskIncrementTick+0x15c>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	693a      	ldr	r2, [r7, #16]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d348      	bcc.n	800be24 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd92:	4b36      	ldr	r3, [pc, #216]	@ (800be6c <xTaskIncrementTick+0x150>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d104      	bne.n	800bda6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd9c:	4b36      	ldr	r3, [pc, #216]	@ (800be78 <xTaskIncrementTick+0x15c>)
 800bd9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bda2:	601a      	str	r2, [r3, #0]
					break;
 800bda4:	e03e      	b.n	800be24 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bda6:	4b31      	ldr	r3, [pc, #196]	@ (800be6c <xTaskIncrementTick+0x150>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	68db      	ldr	r3, [r3, #12]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bdb6:	693a      	ldr	r2, [r7, #16]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d203      	bcs.n	800bdc6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bdbe:	4a2e      	ldr	r2, [pc, #184]	@ (800be78 <xTaskIncrementTick+0x15c>)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bdc4:	e02e      	b.n	800be24 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	3304      	adds	r3, #4
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fe ff40 	bl	800ac50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d004      	beq.n	800bde2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	3318      	adds	r3, #24
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7fe ff37 	bl	800ac50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bde6:	2201      	movs	r2, #1
 800bde8:	409a      	lsls	r2, r3
 800bdea:	4b24      	ldr	r3, [pc, #144]	@ (800be7c <xTaskIncrementTick+0x160>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	4a22      	ldr	r2, [pc, #136]	@ (800be7c <xTaskIncrementTick+0x160>)
 800bdf2:	6013      	str	r3, [r2, #0]
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdf8:	4613      	mov	r3, r2
 800bdfa:	009b      	lsls	r3, r3, #2
 800bdfc:	4413      	add	r3, r2
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	4a1f      	ldr	r2, [pc, #124]	@ (800be80 <xTaskIncrementTick+0x164>)
 800be02:	441a      	add	r2, r3
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	3304      	adds	r3, #4
 800be08:	4619      	mov	r1, r3
 800be0a:	4610      	mov	r0, r2
 800be0c:	f7fe fec3 	bl	800ab96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be14:	4b1b      	ldr	r3, [pc, #108]	@ (800be84 <xTaskIncrementTick+0x168>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d3b9      	bcc.n	800bd92 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800be1e:	2301      	movs	r3, #1
 800be20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be22:	e7b6      	b.n	800bd92 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800be24:	4b17      	ldr	r3, [pc, #92]	@ (800be84 <xTaskIncrementTick+0x168>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be2a:	4915      	ldr	r1, [pc, #84]	@ (800be80 <xTaskIncrementTick+0x164>)
 800be2c:	4613      	mov	r3, r2
 800be2e:	009b      	lsls	r3, r3, #2
 800be30:	4413      	add	r3, r2
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	440b      	add	r3, r1
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d901      	bls.n	800be40 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800be3c:	2301      	movs	r3, #1
 800be3e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800be40:	4b11      	ldr	r3, [pc, #68]	@ (800be88 <xTaskIncrementTick+0x16c>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d007      	beq.n	800be58 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800be48:	2301      	movs	r3, #1
 800be4a:	617b      	str	r3, [r7, #20]
 800be4c:	e004      	b.n	800be58 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800be4e:	4b0f      	ldr	r3, [pc, #60]	@ (800be8c <xTaskIncrementTick+0x170>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	3301      	adds	r3, #1
 800be54:	4a0d      	ldr	r2, [pc, #52]	@ (800be8c <xTaskIncrementTick+0x170>)
 800be56:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800be58:	697b      	ldr	r3, [r7, #20]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3718      	adds	r7, #24
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	20000720 	.word	0x20000720
 800be68:	200006fc 	.word	0x200006fc
 800be6c:	200006b0 	.word	0x200006b0
 800be70:	200006b4 	.word	0x200006b4
 800be74:	20000710 	.word	0x20000710
 800be78:	20000718 	.word	0x20000718
 800be7c:	20000700 	.word	0x20000700
 800be80:	200005fc 	.word	0x200005fc
 800be84:	200005f8 	.word	0x200005f8
 800be88:	2000070c 	.word	0x2000070c
 800be8c:	20000708 	.word	0x20000708

0800be90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b088      	sub	sp, #32
 800be94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800be96:	4b3a      	ldr	r3, [pc, #232]	@ (800bf80 <vTaskSwitchContext+0xf0>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d003      	beq.n	800bea6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800be9e:	4b39      	ldr	r3, [pc, #228]	@ (800bf84 <vTaskSwitchContext+0xf4>)
 800bea0:	2201      	movs	r2, #1
 800bea2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bea4:	e067      	b.n	800bf76 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800bea6:	4b37      	ldr	r3, [pc, #220]	@ (800bf84 <vTaskSwitchContext+0xf4>)
 800bea8:	2200      	movs	r2, #0
 800beaa:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800beac:	4b36      	ldr	r3, [pc, #216]	@ (800bf88 <vTaskSwitchContext+0xf8>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800beb2:	61fb      	str	r3, [r7, #28]
 800beb4:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800beb8:	61bb      	str	r3, [r7, #24]
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	69ba      	ldr	r2, [r7, #24]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d111      	bne.n	800bee8 <vTaskSwitchContext+0x58>
 800bec4:	69fb      	ldr	r3, [r7, #28]
 800bec6:	3304      	adds	r3, #4
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	69ba      	ldr	r2, [r7, #24]
 800becc:	429a      	cmp	r2, r3
 800bece:	d10b      	bne.n	800bee8 <vTaskSwitchContext+0x58>
 800bed0:	69fb      	ldr	r3, [r7, #28]
 800bed2:	3308      	adds	r3, #8
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	69ba      	ldr	r2, [r7, #24]
 800bed8:	429a      	cmp	r2, r3
 800beda:	d105      	bne.n	800bee8 <vTaskSwitchContext+0x58>
 800bedc:	69fb      	ldr	r3, [r7, #28]
 800bede:	330c      	adds	r3, #12
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	69ba      	ldr	r2, [r7, #24]
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d008      	beq.n	800befa <vTaskSwitchContext+0x6a>
 800bee8:	4b27      	ldr	r3, [pc, #156]	@ (800bf88 <vTaskSwitchContext+0xf8>)
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	4b26      	ldr	r3, [pc, #152]	@ (800bf88 <vTaskSwitchContext+0xf8>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	3334      	adds	r3, #52	@ 0x34
 800bef2:	4619      	mov	r1, r3
 800bef4:	4610      	mov	r0, r2
 800bef6:	f7f4 fafa 	bl	80004ee <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800befa:	4b24      	ldr	r3, [pc, #144]	@ (800bf8c <vTaskSwitchContext+0xfc>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	fab3 f383 	clz	r3, r3
 800bf06:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bf08:	7afb      	ldrb	r3, [r7, #11]
 800bf0a:	f1c3 031f 	rsb	r3, r3, #31
 800bf0e:	617b      	str	r3, [r7, #20]
 800bf10:	491f      	ldr	r1, [pc, #124]	@ (800bf90 <vTaskSwitchContext+0x100>)
 800bf12:	697a      	ldr	r2, [r7, #20]
 800bf14:	4613      	mov	r3, r2
 800bf16:	009b      	lsls	r3, r3, #2
 800bf18:	4413      	add	r3, r2
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	440b      	add	r3, r1
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d10b      	bne.n	800bf3c <vTaskSwitchContext+0xac>
	__asm volatile
 800bf24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf28:	f383 8811 	msr	BASEPRI, r3
 800bf2c:	f3bf 8f6f 	isb	sy
 800bf30:	f3bf 8f4f 	dsb	sy
 800bf34:	607b      	str	r3, [r7, #4]
}
 800bf36:	bf00      	nop
 800bf38:	bf00      	nop
 800bf3a:	e7fd      	b.n	800bf38 <vTaskSwitchContext+0xa8>
 800bf3c:	697a      	ldr	r2, [r7, #20]
 800bf3e:	4613      	mov	r3, r2
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	4413      	add	r3, r2
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	4a12      	ldr	r2, [pc, #72]	@ (800bf90 <vTaskSwitchContext+0x100>)
 800bf48:	4413      	add	r3, r2
 800bf4a:	613b      	str	r3, [r7, #16]
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	685a      	ldr	r2, [r3, #4]
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	605a      	str	r2, [r3, #4]
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	685a      	ldr	r2, [r3, #4]
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	3308      	adds	r3, #8
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d104      	bne.n	800bf6c <vTaskSwitchContext+0xdc>
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	685a      	ldr	r2, [r3, #4]
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	605a      	str	r2, [r3, #4]
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	68db      	ldr	r3, [r3, #12]
 800bf72:	4a05      	ldr	r2, [pc, #20]	@ (800bf88 <vTaskSwitchContext+0xf8>)
 800bf74:	6013      	str	r3, [r2, #0]
}
 800bf76:	bf00      	nop
 800bf78:	3720      	adds	r7, #32
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	20000720 	.word	0x20000720
 800bf84:	2000070c 	.word	0x2000070c
 800bf88:	200005f8 	.word	0x200005f8
 800bf8c:	20000700 	.word	0x20000700
 800bf90:	200005fc 	.word	0x200005fc

0800bf94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d10b      	bne.n	800bfbc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bfa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfa8:	f383 8811 	msr	BASEPRI, r3
 800bfac:	f3bf 8f6f 	isb	sy
 800bfb0:	f3bf 8f4f 	dsb	sy
 800bfb4:	60fb      	str	r3, [r7, #12]
}
 800bfb6:	bf00      	nop
 800bfb8:	bf00      	nop
 800bfba:	e7fd      	b.n	800bfb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bfbc:	4b07      	ldr	r3, [pc, #28]	@ (800bfdc <vTaskPlaceOnEventList+0x48>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	3318      	adds	r3, #24
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f7fe fe0a 	bl	800abde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bfca:	2101      	movs	r1, #1
 800bfcc:	6838      	ldr	r0, [r7, #0]
 800bfce:	f000 fa6f 	bl	800c4b0 <prvAddCurrentTaskToDelayedList>
}
 800bfd2:	bf00      	nop
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	200005f8 	.word	0x200005f8

0800bfe0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b086      	sub	sp, #24
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	68db      	ldr	r3, [r3, #12]
 800bfee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d10b      	bne.n	800c00e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bffa:	f383 8811 	msr	BASEPRI, r3
 800bffe:	f3bf 8f6f 	isb	sy
 800c002:	f3bf 8f4f 	dsb	sy
 800c006:	60fb      	str	r3, [r7, #12]
}
 800c008:	bf00      	nop
 800c00a:	bf00      	nop
 800c00c:	e7fd      	b.n	800c00a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	3318      	adds	r3, #24
 800c012:	4618      	mov	r0, r3
 800c014:	f7fe fe1c 	bl	800ac50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c018:	4b1d      	ldr	r3, [pc, #116]	@ (800c090 <xTaskRemoveFromEventList+0xb0>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d11c      	bne.n	800c05a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	3304      	adds	r3, #4
 800c024:	4618      	mov	r0, r3
 800c026:	f7fe fe13 	bl	800ac50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c02e:	2201      	movs	r2, #1
 800c030:	409a      	lsls	r2, r3
 800c032:	4b18      	ldr	r3, [pc, #96]	@ (800c094 <xTaskRemoveFromEventList+0xb4>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4313      	orrs	r3, r2
 800c038:	4a16      	ldr	r2, [pc, #88]	@ (800c094 <xTaskRemoveFromEventList+0xb4>)
 800c03a:	6013      	str	r3, [r2, #0]
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c040:	4613      	mov	r3, r2
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	4413      	add	r3, r2
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	4a13      	ldr	r2, [pc, #76]	@ (800c098 <xTaskRemoveFromEventList+0xb8>)
 800c04a:	441a      	add	r2, r3
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	3304      	adds	r3, #4
 800c050:	4619      	mov	r1, r3
 800c052:	4610      	mov	r0, r2
 800c054:	f7fe fd9f 	bl	800ab96 <vListInsertEnd>
 800c058:	e005      	b.n	800c066 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	3318      	adds	r3, #24
 800c05e:	4619      	mov	r1, r3
 800c060:	480e      	ldr	r0, [pc, #56]	@ (800c09c <xTaskRemoveFromEventList+0xbc>)
 800c062:	f7fe fd98 	bl	800ab96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c06a:	4b0d      	ldr	r3, [pc, #52]	@ (800c0a0 <xTaskRemoveFromEventList+0xc0>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c070:	429a      	cmp	r2, r3
 800c072:	d905      	bls.n	800c080 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c074:	2301      	movs	r3, #1
 800c076:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c078:	4b0a      	ldr	r3, [pc, #40]	@ (800c0a4 <xTaskRemoveFromEventList+0xc4>)
 800c07a:	2201      	movs	r2, #1
 800c07c:	601a      	str	r2, [r3, #0]
 800c07e:	e001      	b.n	800c084 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c080:	2300      	movs	r3, #0
 800c082:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c084:	697b      	ldr	r3, [r7, #20]
}
 800c086:	4618      	mov	r0, r3
 800c088:	3718      	adds	r7, #24
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	20000720 	.word	0x20000720
 800c094:	20000700 	.word	0x20000700
 800c098:	200005fc 	.word	0x200005fc
 800c09c:	200006b8 	.word	0x200006b8
 800c0a0:	200005f8 	.word	0x200005f8
 800c0a4:	2000070c 	.word	0x2000070c

0800c0a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c0b0:	4b06      	ldr	r3, [pc, #24]	@ (800c0cc <vTaskInternalSetTimeOutState+0x24>)
 800c0b2:	681a      	ldr	r2, [r3, #0]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c0b8:	4b05      	ldr	r3, [pc, #20]	@ (800c0d0 <vTaskInternalSetTimeOutState+0x28>)
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	605a      	str	r2, [r3, #4]
}
 800c0c0:	bf00      	nop
 800c0c2:	370c      	adds	r7, #12
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr
 800c0cc:	20000710 	.word	0x20000710
 800c0d0:	200006fc 	.word	0x200006fc

0800c0d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b088      	sub	sp, #32
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d10b      	bne.n	800c0fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c0e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0e8:	f383 8811 	msr	BASEPRI, r3
 800c0ec:	f3bf 8f6f 	isb	sy
 800c0f0:	f3bf 8f4f 	dsb	sy
 800c0f4:	613b      	str	r3, [r7, #16]
}
 800c0f6:	bf00      	nop
 800c0f8:	bf00      	nop
 800c0fa:	e7fd      	b.n	800c0f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d10b      	bne.n	800c11a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c106:	f383 8811 	msr	BASEPRI, r3
 800c10a:	f3bf 8f6f 	isb	sy
 800c10e:	f3bf 8f4f 	dsb	sy
 800c112:	60fb      	str	r3, [r7, #12]
}
 800c114:	bf00      	nop
 800c116:	bf00      	nop
 800c118:	e7fd      	b.n	800c116 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c11a:	f000 fb5d 	bl	800c7d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c11e:	4b1d      	ldr	r3, [pc, #116]	@ (800c194 <xTaskCheckForTimeOut+0xc0>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	69ba      	ldr	r2, [r7, #24]
 800c12a:	1ad3      	subs	r3, r2, r3
 800c12c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c136:	d102      	bne.n	800c13e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c138:	2300      	movs	r3, #0
 800c13a:	61fb      	str	r3, [r7, #28]
 800c13c:	e023      	b.n	800c186 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681a      	ldr	r2, [r3, #0]
 800c142:	4b15      	ldr	r3, [pc, #84]	@ (800c198 <xTaskCheckForTimeOut+0xc4>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	429a      	cmp	r2, r3
 800c148:	d007      	beq.n	800c15a <xTaskCheckForTimeOut+0x86>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	685b      	ldr	r3, [r3, #4]
 800c14e:	69ba      	ldr	r2, [r7, #24]
 800c150:	429a      	cmp	r2, r3
 800c152:	d302      	bcc.n	800c15a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c154:	2301      	movs	r3, #1
 800c156:	61fb      	str	r3, [r7, #28]
 800c158:	e015      	b.n	800c186 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	697a      	ldr	r2, [r7, #20]
 800c160:	429a      	cmp	r2, r3
 800c162:	d20b      	bcs.n	800c17c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	681a      	ldr	r2, [r3, #0]
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	1ad2      	subs	r2, r2, r3
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f7ff ff99 	bl	800c0a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c176:	2300      	movs	r3, #0
 800c178:	61fb      	str	r3, [r7, #28]
 800c17a:	e004      	b.n	800c186 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	2200      	movs	r2, #0
 800c180:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c182:	2301      	movs	r3, #1
 800c184:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c186:	f000 fb59 	bl	800c83c <vPortExitCritical>

	return xReturn;
 800c18a:	69fb      	ldr	r3, [r7, #28]
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3720      	adds	r7, #32
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}
 800c194:	200006fc 	.word	0x200006fc
 800c198:	20000710 	.word	0x20000710

0800c19c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c19c:	b480      	push	{r7}
 800c19e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c1a0:	4b03      	ldr	r3, [pc, #12]	@ (800c1b0 <vTaskMissedYield+0x14>)
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	601a      	str	r2, [r3, #0]
}
 800c1a6:	bf00      	nop
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr
 800c1b0:	2000070c 	.word	0x2000070c

0800c1b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b082      	sub	sp, #8
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c1bc:	f000 f854 	bl	800c268 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c1c0:	4b07      	ldr	r3, [pc, #28]	@ (800c1e0 <prvIdleTask+0x2c>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d907      	bls.n	800c1d8 <prvIdleTask+0x24>
			{
				taskYIELD();
 800c1c8:	4b06      	ldr	r3, [pc, #24]	@ (800c1e4 <prvIdleTask+0x30>)
 800c1ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1ce:	601a      	str	r2, [r3, #0]
 800c1d0:	f3bf 8f4f 	dsb	sy
 800c1d4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800c1d8:	f7f4 f982 	bl	80004e0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800c1dc:	e7ee      	b.n	800c1bc <prvIdleTask+0x8>
 800c1de:	bf00      	nop
 800c1e0:	200005fc 	.word	0x200005fc
 800c1e4:	e000ed04 	.word	0xe000ed04

0800c1e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	607b      	str	r3, [r7, #4]
 800c1f2:	e00c      	b.n	800c20e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	4613      	mov	r3, r2
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	4413      	add	r3, r2
 800c1fc:	009b      	lsls	r3, r3, #2
 800c1fe:	4a12      	ldr	r2, [pc, #72]	@ (800c248 <prvInitialiseTaskLists+0x60>)
 800c200:	4413      	add	r3, r2
 800c202:	4618      	mov	r0, r3
 800c204:	f7fe fc9a 	bl	800ab3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	3301      	adds	r3, #1
 800c20c:	607b      	str	r3, [r7, #4]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2b06      	cmp	r3, #6
 800c212:	d9ef      	bls.n	800c1f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c214:	480d      	ldr	r0, [pc, #52]	@ (800c24c <prvInitialiseTaskLists+0x64>)
 800c216:	f7fe fc91 	bl	800ab3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c21a:	480d      	ldr	r0, [pc, #52]	@ (800c250 <prvInitialiseTaskLists+0x68>)
 800c21c:	f7fe fc8e 	bl	800ab3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c220:	480c      	ldr	r0, [pc, #48]	@ (800c254 <prvInitialiseTaskLists+0x6c>)
 800c222:	f7fe fc8b 	bl	800ab3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c226:	480c      	ldr	r0, [pc, #48]	@ (800c258 <prvInitialiseTaskLists+0x70>)
 800c228:	f7fe fc88 	bl	800ab3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c22c:	480b      	ldr	r0, [pc, #44]	@ (800c25c <prvInitialiseTaskLists+0x74>)
 800c22e:	f7fe fc85 	bl	800ab3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c232:	4b0b      	ldr	r3, [pc, #44]	@ (800c260 <prvInitialiseTaskLists+0x78>)
 800c234:	4a05      	ldr	r2, [pc, #20]	@ (800c24c <prvInitialiseTaskLists+0x64>)
 800c236:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c238:	4b0a      	ldr	r3, [pc, #40]	@ (800c264 <prvInitialiseTaskLists+0x7c>)
 800c23a:	4a05      	ldr	r2, [pc, #20]	@ (800c250 <prvInitialiseTaskLists+0x68>)
 800c23c:	601a      	str	r2, [r3, #0]
}
 800c23e:	bf00      	nop
 800c240:	3708      	adds	r7, #8
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
 800c246:	bf00      	nop
 800c248:	200005fc 	.word	0x200005fc
 800c24c:	20000688 	.word	0x20000688
 800c250:	2000069c 	.word	0x2000069c
 800c254:	200006b8 	.word	0x200006b8
 800c258:	200006cc 	.word	0x200006cc
 800c25c:	200006e4 	.word	0x200006e4
 800c260:	200006b0 	.word	0x200006b0
 800c264:	200006b4 	.word	0x200006b4

0800c268 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c26e:	e019      	b.n	800c2a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c270:	f000 fab2 	bl	800c7d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c274:	4b10      	ldr	r3, [pc, #64]	@ (800c2b8 <prvCheckTasksWaitingTermination+0x50>)
 800c276:	68db      	ldr	r3, [r3, #12]
 800c278:	68db      	ldr	r3, [r3, #12]
 800c27a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	3304      	adds	r3, #4
 800c280:	4618      	mov	r0, r3
 800c282:	f7fe fce5 	bl	800ac50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c286:	4b0d      	ldr	r3, [pc, #52]	@ (800c2bc <prvCheckTasksWaitingTermination+0x54>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	3b01      	subs	r3, #1
 800c28c:	4a0b      	ldr	r2, [pc, #44]	@ (800c2bc <prvCheckTasksWaitingTermination+0x54>)
 800c28e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c290:	4b0b      	ldr	r3, [pc, #44]	@ (800c2c0 <prvCheckTasksWaitingTermination+0x58>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	3b01      	subs	r3, #1
 800c296:	4a0a      	ldr	r2, [pc, #40]	@ (800c2c0 <prvCheckTasksWaitingTermination+0x58>)
 800c298:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c29a:	f000 facf 	bl	800c83c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 f810 	bl	800c2c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c2a4:	4b06      	ldr	r3, [pc, #24]	@ (800c2c0 <prvCheckTasksWaitingTermination+0x58>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d1e1      	bne.n	800c270 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c2ac:	bf00      	nop
 800c2ae:	bf00      	nop
 800c2b0:	3708      	adds	r7, #8
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	200006cc 	.word	0x200006cc
 800c2bc:	200006f8 	.word	0x200006f8
 800c2c0:	200006e0 	.word	0x200006e0

0800c2c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d108      	bne.n	800c2e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f000 fc72 	bl	800cbc4 <vPortFree>
				vPortFree( pxTCB );
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f000 fc6f 	bl	800cbc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c2e6:	e019      	b.n	800c31c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	d103      	bne.n	800c2fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 fc66 	bl	800cbc4 <vPortFree>
	}
 800c2f8:	e010      	b.n	800c31c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800c300:	2b02      	cmp	r3, #2
 800c302:	d00b      	beq.n	800c31c <prvDeleteTCB+0x58>
	__asm volatile
 800c304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c308:	f383 8811 	msr	BASEPRI, r3
 800c30c:	f3bf 8f6f 	isb	sy
 800c310:	f3bf 8f4f 	dsb	sy
 800c314:	60fb      	str	r3, [r7, #12]
}
 800c316:	bf00      	nop
 800c318:	bf00      	nop
 800c31a:	e7fd      	b.n	800c318 <prvDeleteTCB+0x54>
	}
 800c31c:	bf00      	nop
 800c31e:	3710      	adds	r7, #16
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c32a:	4b0c      	ldr	r3, [pc, #48]	@ (800c35c <prvResetNextTaskUnblockTime+0x38>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d104      	bne.n	800c33e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c334:	4b0a      	ldr	r3, [pc, #40]	@ (800c360 <prvResetNextTaskUnblockTime+0x3c>)
 800c336:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c33a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c33c:	e008      	b.n	800c350 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c33e:	4b07      	ldr	r3, [pc, #28]	@ (800c35c <prvResetNextTaskUnblockTime+0x38>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	68db      	ldr	r3, [r3, #12]
 800c346:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	4a04      	ldr	r2, [pc, #16]	@ (800c360 <prvResetNextTaskUnblockTime+0x3c>)
 800c34e:	6013      	str	r3, [r2, #0]
}
 800c350:	bf00      	nop
 800c352:	370c      	adds	r7, #12
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr
 800c35c:	200006b0 	.word	0x200006b0
 800c360:	20000718 	.word	0x20000718

0800c364 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c36a:	4b0b      	ldr	r3, [pc, #44]	@ (800c398 <xTaskGetSchedulerState+0x34>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d102      	bne.n	800c378 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c372:	2301      	movs	r3, #1
 800c374:	607b      	str	r3, [r7, #4]
 800c376:	e008      	b.n	800c38a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c378:	4b08      	ldr	r3, [pc, #32]	@ (800c39c <xTaskGetSchedulerState+0x38>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d102      	bne.n	800c386 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c380:	2302      	movs	r3, #2
 800c382:	607b      	str	r3, [r7, #4]
 800c384:	e001      	b.n	800c38a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c386:	2300      	movs	r3, #0
 800c388:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c38a:	687b      	ldr	r3, [r7, #4]
	}
 800c38c:	4618      	mov	r0, r3
 800c38e:	370c      	adds	r7, #12
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr
 800c398:	20000704 	.word	0x20000704
 800c39c:	20000720 	.word	0x20000720

0800c3a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b086      	sub	sp, #24
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d070      	beq.n	800c498 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c3b6:	4b3b      	ldr	r3, [pc, #236]	@ (800c4a4 <xTaskPriorityDisinherit+0x104>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	693a      	ldr	r2, [r7, #16]
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d00b      	beq.n	800c3d8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c4:	f383 8811 	msr	BASEPRI, r3
 800c3c8:	f3bf 8f6f 	isb	sy
 800c3cc:	f3bf 8f4f 	dsb	sy
 800c3d0:	60fb      	str	r3, [r7, #12]
}
 800c3d2:	bf00      	nop
 800c3d4:	bf00      	nop
 800c3d6:	e7fd      	b.n	800c3d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d10b      	bne.n	800c3f8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e4:	f383 8811 	msr	BASEPRI, r3
 800c3e8:	f3bf 8f6f 	isb	sy
 800c3ec:	f3bf 8f4f 	dsb	sy
 800c3f0:	60bb      	str	r3, [r7, #8]
}
 800c3f2:	bf00      	nop
 800c3f4:	bf00      	nop
 800c3f6:	e7fd      	b.n	800c3f4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c3fc:	1e5a      	subs	r2, r3, #1
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d044      	beq.n	800c498 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c412:	2b00      	cmp	r3, #0
 800c414:	d140      	bne.n	800c498 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	3304      	adds	r3, #4
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7fe fc18 	bl	800ac50 <uxListRemove>
 800c420:	4603      	mov	r3, r0
 800c422:	2b00      	cmp	r3, #0
 800c424:	d115      	bne.n	800c452 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c42a:	491f      	ldr	r1, [pc, #124]	@ (800c4a8 <xTaskPriorityDisinherit+0x108>)
 800c42c:	4613      	mov	r3, r2
 800c42e:	009b      	lsls	r3, r3, #2
 800c430:	4413      	add	r3, r2
 800c432:	009b      	lsls	r3, r3, #2
 800c434:	440b      	add	r3, r1
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d10a      	bne.n	800c452 <xTaskPriorityDisinherit+0xb2>
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c440:	2201      	movs	r2, #1
 800c442:	fa02 f303 	lsl.w	r3, r2, r3
 800c446:	43da      	mvns	r2, r3
 800c448:	4b18      	ldr	r3, [pc, #96]	@ (800c4ac <xTaskPriorityDisinherit+0x10c>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4013      	ands	r3, r2
 800c44e:	4a17      	ldr	r2, [pc, #92]	@ (800c4ac <xTaskPriorityDisinherit+0x10c>)
 800c450:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c45e:	f1c3 0207 	rsb	r2, r3, #7
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c46a:	2201      	movs	r2, #1
 800c46c:	409a      	lsls	r2, r3
 800c46e:	4b0f      	ldr	r3, [pc, #60]	@ (800c4ac <xTaskPriorityDisinherit+0x10c>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4313      	orrs	r3, r2
 800c474:	4a0d      	ldr	r2, [pc, #52]	@ (800c4ac <xTaskPriorityDisinherit+0x10c>)
 800c476:	6013      	str	r3, [r2, #0]
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c47c:	4613      	mov	r3, r2
 800c47e:	009b      	lsls	r3, r3, #2
 800c480:	4413      	add	r3, r2
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	4a08      	ldr	r2, [pc, #32]	@ (800c4a8 <xTaskPriorityDisinherit+0x108>)
 800c486:	441a      	add	r2, r3
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	3304      	adds	r3, #4
 800c48c:	4619      	mov	r1, r3
 800c48e:	4610      	mov	r0, r2
 800c490:	f7fe fb81 	bl	800ab96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c494:	2301      	movs	r3, #1
 800c496:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c498:	697b      	ldr	r3, [r7, #20]
	}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3718      	adds	r7, #24
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	200005f8 	.word	0x200005f8
 800c4a8:	200005fc 	.word	0x200005fc
 800c4ac:	20000700 	.word	0x20000700

0800c4b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c4ba:	4b29      	ldr	r3, [pc, #164]	@ (800c560 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4c0:	4b28      	ldr	r3, [pc, #160]	@ (800c564 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	3304      	adds	r3, #4
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7fe fbc2 	bl	800ac50 <uxListRemove>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d10b      	bne.n	800c4ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c4d2:	4b24      	ldr	r3, [pc, #144]	@ (800c564 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4d8:	2201      	movs	r2, #1
 800c4da:	fa02 f303 	lsl.w	r3, r2, r3
 800c4de:	43da      	mvns	r2, r3
 800c4e0:	4b21      	ldr	r3, [pc, #132]	@ (800c568 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4013      	ands	r3, r2
 800c4e6:	4a20      	ldr	r2, [pc, #128]	@ (800c568 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c4e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c4f0:	d10a      	bne.n	800c508 <prvAddCurrentTaskToDelayedList+0x58>
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d007      	beq.n	800c508 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4f8:	4b1a      	ldr	r3, [pc, #104]	@ (800c564 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	3304      	adds	r3, #4
 800c4fe:	4619      	mov	r1, r3
 800c500:	481a      	ldr	r0, [pc, #104]	@ (800c56c <prvAddCurrentTaskToDelayedList+0xbc>)
 800c502:	f7fe fb48 	bl	800ab96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c506:	e026      	b.n	800c556 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c508:	68fa      	ldr	r2, [r7, #12]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	4413      	add	r3, r2
 800c50e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c510:	4b14      	ldr	r3, [pc, #80]	@ (800c564 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	68ba      	ldr	r2, [r7, #8]
 800c516:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c518:	68ba      	ldr	r2, [r7, #8]
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d209      	bcs.n	800c534 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c520:	4b13      	ldr	r3, [pc, #76]	@ (800c570 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c522:	681a      	ldr	r2, [r3, #0]
 800c524:	4b0f      	ldr	r3, [pc, #60]	@ (800c564 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	3304      	adds	r3, #4
 800c52a:	4619      	mov	r1, r3
 800c52c:	4610      	mov	r0, r2
 800c52e:	f7fe fb56 	bl	800abde <vListInsert>
}
 800c532:	e010      	b.n	800c556 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c534:	4b0f      	ldr	r3, [pc, #60]	@ (800c574 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	4b0a      	ldr	r3, [pc, #40]	@ (800c564 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	3304      	adds	r3, #4
 800c53e:	4619      	mov	r1, r3
 800c540:	4610      	mov	r0, r2
 800c542:	f7fe fb4c 	bl	800abde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c546:	4b0c      	ldr	r3, [pc, #48]	@ (800c578 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	68ba      	ldr	r2, [r7, #8]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d202      	bcs.n	800c556 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c550:	4a09      	ldr	r2, [pc, #36]	@ (800c578 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	6013      	str	r3, [r2, #0]
}
 800c556:	bf00      	nop
 800c558:	3710      	adds	r7, #16
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop
 800c560:	200006fc 	.word	0x200006fc
 800c564:	200005f8 	.word	0x200005f8
 800c568:	20000700 	.word	0x20000700
 800c56c:	200006e4 	.word	0x200006e4
 800c570:	200006b4 	.word	0x200006b4
 800c574:	200006b0 	.word	0x200006b0
 800c578:	20000718 	.word	0x20000718

0800c57c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c57c:	b480      	push	{r7}
 800c57e:	b085      	sub	sp, #20
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	3b04      	subs	r3, #4
 800c58c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c594:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	3b04      	subs	r3, #4
 800c59a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	f023 0201 	bic.w	r2, r3, #1
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	3b04      	subs	r3, #4
 800c5aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c5ac:	4a0c      	ldr	r2, [pc, #48]	@ (800c5e0 <pxPortInitialiseStack+0x64>)
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	3b14      	subs	r3, #20
 800c5b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c5b8:	687a      	ldr	r2, [r7, #4]
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	3b04      	subs	r3, #4
 800c5c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f06f 0202 	mvn.w	r2, #2
 800c5ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	3b20      	subs	r3, #32
 800c5d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3714      	adds	r7, #20
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr
 800c5e0:	0800c5e5 	.word	0x0800c5e5

0800c5e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b085      	sub	sp, #20
 800c5e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c5ee:	4b13      	ldr	r3, [pc, #76]	@ (800c63c <prvTaskExitError+0x58>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c5f6:	d00b      	beq.n	800c610 <prvTaskExitError+0x2c>
	__asm volatile
 800c5f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5fc:	f383 8811 	msr	BASEPRI, r3
 800c600:	f3bf 8f6f 	isb	sy
 800c604:	f3bf 8f4f 	dsb	sy
 800c608:	60fb      	str	r3, [r7, #12]
}
 800c60a:	bf00      	nop
 800c60c:	bf00      	nop
 800c60e:	e7fd      	b.n	800c60c <prvTaskExitError+0x28>
	__asm volatile
 800c610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c614:	f383 8811 	msr	BASEPRI, r3
 800c618:	f3bf 8f6f 	isb	sy
 800c61c:	f3bf 8f4f 	dsb	sy
 800c620:	60bb      	str	r3, [r7, #8]
}
 800c622:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c624:	bf00      	nop
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d0fc      	beq.n	800c626 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c62c:	bf00      	nop
 800c62e:	bf00      	nop
 800c630:	3714      	adds	r7, #20
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr
 800c63a:	bf00      	nop
 800c63c:	2000002c 	.word	0x2000002c

0800c640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c640:	4b07      	ldr	r3, [pc, #28]	@ (800c660 <pxCurrentTCBConst2>)
 800c642:	6819      	ldr	r1, [r3, #0]
 800c644:	6808      	ldr	r0, [r1, #0]
 800c646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c64a:	f380 8809 	msr	PSP, r0
 800c64e:	f3bf 8f6f 	isb	sy
 800c652:	f04f 0000 	mov.w	r0, #0
 800c656:	f380 8811 	msr	BASEPRI, r0
 800c65a:	4770      	bx	lr
 800c65c:	f3af 8000 	nop.w

0800c660 <pxCurrentTCBConst2>:
 800c660:	200005f8 	.word	0x200005f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c664:	bf00      	nop
 800c666:	bf00      	nop

0800c668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c668:	4808      	ldr	r0, [pc, #32]	@ (800c68c <prvPortStartFirstTask+0x24>)
 800c66a:	6800      	ldr	r0, [r0, #0]
 800c66c:	6800      	ldr	r0, [r0, #0]
 800c66e:	f380 8808 	msr	MSP, r0
 800c672:	f04f 0000 	mov.w	r0, #0
 800c676:	f380 8814 	msr	CONTROL, r0
 800c67a:	b662      	cpsie	i
 800c67c:	b661      	cpsie	f
 800c67e:	f3bf 8f4f 	dsb	sy
 800c682:	f3bf 8f6f 	isb	sy
 800c686:	df00      	svc	0
 800c688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c68a:	bf00      	nop
 800c68c:	e000ed08 	.word	0xe000ed08

0800c690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b086      	sub	sp, #24
 800c694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c696:	4b47      	ldr	r3, [pc, #284]	@ (800c7b4 <xPortStartScheduler+0x124>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4a47      	ldr	r2, [pc, #284]	@ (800c7b8 <xPortStartScheduler+0x128>)
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d10b      	bne.n	800c6b8 <xPortStartScheduler+0x28>
	__asm volatile
 800c6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6a4:	f383 8811 	msr	BASEPRI, r3
 800c6a8:	f3bf 8f6f 	isb	sy
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	613b      	str	r3, [r7, #16]
}
 800c6b2:	bf00      	nop
 800c6b4:	bf00      	nop
 800c6b6:	e7fd      	b.n	800c6b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c6b8:	4b3e      	ldr	r3, [pc, #248]	@ (800c7b4 <xPortStartScheduler+0x124>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a3f      	ldr	r2, [pc, #252]	@ (800c7bc <xPortStartScheduler+0x12c>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d10b      	bne.n	800c6da <xPortStartScheduler+0x4a>
	__asm volatile
 800c6c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6c6:	f383 8811 	msr	BASEPRI, r3
 800c6ca:	f3bf 8f6f 	isb	sy
 800c6ce:	f3bf 8f4f 	dsb	sy
 800c6d2:	60fb      	str	r3, [r7, #12]
}
 800c6d4:	bf00      	nop
 800c6d6:	bf00      	nop
 800c6d8:	e7fd      	b.n	800c6d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c6da:	4b39      	ldr	r3, [pc, #228]	@ (800c7c0 <xPortStartScheduler+0x130>)
 800c6dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	22ff      	movs	r2, #255	@ 0xff
 800c6ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	b2db      	uxtb	r3, r3
 800c6f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c6f4:	78fb      	ldrb	r3, [r7, #3]
 800c6f6:	b2db      	uxtb	r3, r3
 800c6f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c6fc:	b2da      	uxtb	r2, r3
 800c6fe:	4b31      	ldr	r3, [pc, #196]	@ (800c7c4 <xPortStartScheduler+0x134>)
 800c700:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c702:	4b31      	ldr	r3, [pc, #196]	@ (800c7c8 <xPortStartScheduler+0x138>)
 800c704:	2207      	movs	r2, #7
 800c706:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c708:	e009      	b.n	800c71e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c70a:	4b2f      	ldr	r3, [pc, #188]	@ (800c7c8 <xPortStartScheduler+0x138>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	3b01      	subs	r3, #1
 800c710:	4a2d      	ldr	r2, [pc, #180]	@ (800c7c8 <xPortStartScheduler+0x138>)
 800c712:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c714:	78fb      	ldrb	r3, [r7, #3]
 800c716:	b2db      	uxtb	r3, r3
 800c718:	005b      	lsls	r3, r3, #1
 800c71a:	b2db      	uxtb	r3, r3
 800c71c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c71e:	78fb      	ldrb	r3, [r7, #3]
 800c720:	b2db      	uxtb	r3, r3
 800c722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c726:	2b80      	cmp	r3, #128	@ 0x80
 800c728:	d0ef      	beq.n	800c70a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c72a:	4b27      	ldr	r3, [pc, #156]	@ (800c7c8 <xPortStartScheduler+0x138>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f1c3 0307 	rsb	r3, r3, #7
 800c732:	2b04      	cmp	r3, #4
 800c734:	d00b      	beq.n	800c74e <xPortStartScheduler+0xbe>
	__asm volatile
 800c736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c73a:	f383 8811 	msr	BASEPRI, r3
 800c73e:	f3bf 8f6f 	isb	sy
 800c742:	f3bf 8f4f 	dsb	sy
 800c746:	60bb      	str	r3, [r7, #8]
}
 800c748:	bf00      	nop
 800c74a:	bf00      	nop
 800c74c:	e7fd      	b.n	800c74a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c74e:	4b1e      	ldr	r3, [pc, #120]	@ (800c7c8 <xPortStartScheduler+0x138>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	021b      	lsls	r3, r3, #8
 800c754:	4a1c      	ldr	r2, [pc, #112]	@ (800c7c8 <xPortStartScheduler+0x138>)
 800c756:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c758:	4b1b      	ldr	r3, [pc, #108]	@ (800c7c8 <xPortStartScheduler+0x138>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c760:	4a19      	ldr	r2, [pc, #100]	@ (800c7c8 <xPortStartScheduler+0x138>)
 800c762:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	b2da      	uxtb	r2, r3
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c76c:	4b17      	ldr	r3, [pc, #92]	@ (800c7cc <xPortStartScheduler+0x13c>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4a16      	ldr	r2, [pc, #88]	@ (800c7cc <xPortStartScheduler+0x13c>)
 800c772:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c776:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c778:	4b14      	ldr	r3, [pc, #80]	@ (800c7cc <xPortStartScheduler+0x13c>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4a13      	ldr	r2, [pc, #76]	@ (800c7cc <xPortStartScheduler+0x13c>)
 800c77e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c782:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c784:	f000 f8da 	bl	800c93c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c788:	4b11      	ldr	r3, [pc, #68]	@ (800c7d0 <xPortStartScheduler+0x140>)
 800c78a:	2200      	movs	r2, #0
 800c78c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c78e:	f000 f8f9 	bl	800c984 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c792:	4b10      	ldr	r3, [pc, #64]	@ (800c7d4 <xPortStartScheduler+0x144>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	4a0f      	ldr	r2, [pc, #60]	@ (800c7d4 <xPortStartScheduler+0x144>)
 800c798:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c79c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c79e:	f7ff ff63 	bl	800c668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c7a2:	f7ff fb75 	bl	800be90 <vTaskSwitchContext>
	prvTaskExitError();
 800c7a6:	f7ff ff1d 	bl	800c5e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c7aa:	2300      	movs	r3, #0
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3718      	adds	r7, #24
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}
 800c7b4:	e000ed00 	.word	0xe000ed00
 800c7b8:	410fc271 	.word	0x410fc271
 800c7bc:	410fc270 	.word	0x410fc270
 800c7c0:	e000e400 	.word	0xe000e400
 800c7c4:	20000724 	.word	0x20000724
 800c7c8:	20000728 	.word	0x20000728
 800c7cc:	e000ed20 	.word	0xe000ed20
 800c7d0:	2000002c 	.word	0x2000002c
 800c7d4:	e000ef34 	.word	0xe000ef34

0800c7d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b083      	sub	sp, #12
 800c7dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c7de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	607b      	str	r3, [r7, #4]
}
 800c7f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c7f2:	4b10      	ldr	r3, [pc, #64]	@ (800c834 <vPortEnterCritical+0x5c>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	4a0e      	ldr	r2, [pc, #56]	@ (800c834 <vPortEnterCritical+0x5c>)
 800c7fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c7fc:	4b0d      	ldr	r3, [pc, #52]	@ (800c834 <vPortEnterCritical+0x5c>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	2b01      	cmp	r3, #1
 800c802:	d110      	bne.n	800c826 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c804:	4b0c      	ldr	r3, [pc, #48]	@ (800c838 <vPortEnterCritical+0x60>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	b2db      	uxtb	r3, r3
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d00b      	beq.n	800c826 <vPortEnterCritical+0x4e>
	__asm volatile
 800c80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c812:	f383 8811 	msr	BASEPRI, r3
 800c816:	f3bf 8f6f 	isb	sy
 800c81a:	f3bf 8f4f 	dsb	sy
 800c81e:	603b      	str	r3, [r7, #0]
}
 800c820:	bf00      	nop
 800c822:	bf00      	nop
 800c824:	e7fd      	b.n	800c822 <vPortEnterCritical+0x4a>
	}
}
 800c826:	bf00      	nop
 800c828:	370c      	adds	r7, #12
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr
 800c832:	bf00      	nop
 800c834:	2000002c 	.word	0x2000002c
 800c838:	e000ed04 	.word	0xe000ed04

0800c83c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c83c:	b480      	push	{r7}
 800c83e:	b083      	sub	sp, #12
 800c840:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c842:	4b12      	ldr	r3, [pc, #72]	@ (800c88c <vPortExitCritical+0x50>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d10b      	bne.n	800c862 <vPortExitCritical+0x26>
	__asm volatile
 800c84a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c84e:	f383 8811 	msr	BASEPRI, r3
 800c852:	f3bf 8f6f 	isb	sy
 800c856:	f3bf 8f4f 	dsb	sy
 800c85a:	607b      	str	r3, [r7, #4]
}
 800c85c:	bf00      	nop
 800c85e:	bf00      	nop
 800c860:	e7fd      	b.n	800c85e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c862:	4b0a      	ldr	r3, [pc, #40]	@ (800c88c <vPortExitCritical+0x50>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	3b01      	subs	r3, #1
 800c868:	4a08      	ldr	r2, [pc, #32]	@ (800c88c <vPortExitCritical+0x50>)
 800c86a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c86c:	4b07      	ldr	r3, [pc, #28]	@ (800c88c <vPortExitCritical+0x50>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d105      	bne.n	800c880 <vPortExitCritical+0x44>
 800c874:	2300      	movs	r3, #0
 800c876:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	f383 8811 	msr	BASEPRI, r3
}
 800c87e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c880:	bf00      	nop
 800c882:	370c      	adds	r7, #12
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr
 800c88c:	2000002c 	.word	0x2000002c

0800c890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c890:	f3ef 8009 	mrs	r0, PSP
 800c894:	f3bf 8f6f 	isb	sy
 800c898:	4b15      	ldr	r3, [pc, #84]	@ (800c8f0 <pxCurrentTCBConst>)
 800c89a:	681a      	ldr	r2, [r3, #0]
 800c89c:	f01e 0f10 	tst.w	lr, #16
 800c8a0:	bf08      	it	eq
 800c8a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c8a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8aa:	6010      	str	r0, [r2, #0]
 800c8ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c8b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c8b4:	f380 8811 	msr	BASEPRI, r0
 800c8b8:	f3bf 8f4f 	dsb	sy
 800c8bc:	f3bf 8f6f 	isb	sy
 800c8c0:	f7ff fae6 	bl	800be90 <vTaskSwitchContext>
 800c8c4:	f04f 0000 	mov.w	r0, #0
 800c8c8:	f380 8811 	msr	BASEPRI, r0
 800c8cc:	bc09      	pop	{r0, r3}
 800c8ce:	6819      	ldr	r1, [r3, #0]
 800c8d0:	6808      	ldr	r0, [r1, #0]
 800c8d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d6:	f01e 0f10 	tst.w	lr, #16
 800c8da:	bf08      	it	eq
 800c8dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c8e0:	f380 8809 	msr	PSP, r0
 800c8e4:	f3bf 8f6f 	isb	sy
 800c8e8:	4770      	bx	lr
 800c8ea:	bf00      	nop
 800c8ec:	f3af 8000 	nop.w

0800c8f0 <pxCurrentTCBConst>:
 800c8f0:	200005f8 	.word	0x200005f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c8f4:	bf00      	nop
 800c8f6:	bf00      	nop

0800c8f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c902:	f383 8811 	msr	BASEPRI, r3
 800c906:	f3bf 8f6f 	isb	sy
 800c90a:	f3bf 8f4f 	dsb	sy
 800c90e:	607b      	str	r3, [r7, #4]
}
 800c910:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c912:	f7ff fa03 	bl	800bd1c <xTaskIncrementTick>
 800c916:	4603      	mov	r3, r0
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d003      	beq.n	800c924 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c91c:	4b06      	ldr	r3, [pc, #24]	@ (800c938 <SysTick_Handler+0x40>)
 800c91e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c922:	601a      	str	r2, [r3, #0]
 800c924:	2300      	movs	r3, #0
 800c926:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	f383 8811 	msr	BASEPRI, r3
}
 800c92e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c930:	bf00      	nop
 800c932:	3708      	adds	r7, #8
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}
 800c938:	e000ed04 	.word	0xe000ed04

0800c93c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c93c:	b480      	push	{r7}
 800c93e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c940:	4b0b      	ldr	r3, [pc, #44]	@ (800c970 <vPortSetupTimerInterrupt+0x34>)
 800c942:	2200      	movs	r2, #0
 800c944:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c946:	4b0b      	ldr	r3, [pc, #44]	@ (800c974 <vPortSetupTimerInterrupt+0x38>)
 800c948:	2200      	movs	r2, #0
 800c94a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c94c:	4b0a      	ldr	r3, [pc, #40]	@ (800c978 <vPortSetupTimerInterrupt+0x3c>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a0a      	ldr	r2, [pc, #40]	@ (800c97c <vPortSetupTimerInterrupt+0x40>)
 800c952:	fba2 2303 	umull	r2, r3, r2, r3
 800c956:	099b      	lsrs	r3, r3, #6
 800c958:	4a09      	ldr	r2, [pc, #36]	@ (800c980 <vPortSetupTimerInterrupt+0x44>)
 800c95a:	3b01      	subs	r3, #1
 800c95c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c95e:	4b04      	ldr	r3, [pc, #16]	@ (800c970 <vPortSetupTimerInterrupt+0x34>)
 800c960:	2207      	movs	r2, #7
 800c962:	601a      	str	r2, [r3, #0]
}
 800c964:	bf00      	nop
 800c966:	46bd      	mov	sp, r7
 800c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96c:	4770      	bx	lr
 800c96e:	bf00      	nop
 800c970:	e000e010 	.word	0xe000e010
 800c974:	e000e018 	.word	0xe000e018
 800c978:	20000000 	.word	0x20000000
 800c97c:	10624dd3 	.word	0x10624dd3
 800c980:	e000e014 	.word	0xe000e014

0800c984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c984:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c994 <vPortEnableVFP+0x10>
 800c988:	6801      	ldr	r1, [r0, #0]
 800c98a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c98e:	6001      	str	r1, [r0, #0]
 800c990:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c992:	bf00      	nop
 800c994:	e000ed88 	.word	0xe000ed88

0800c998 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c998:	b480      	push	{r7}
 800c99a:	b085      	sub	sp, #20
 800c99c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c99e:	f3ef 8305 	mrs	r3, IPSR
 800c9a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	2b0f      	cmp	r3, #15
 800c9a8:	d915      	bls.n	800c9d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c9aa:	4a18      	ldr	r2, [pc, #96]	@ (800ca0c <vPortValidateInterruptPriority+0x74>)
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	4413      	add	r3, r2
 800c9b0:	781b      	ldrb	r3, [r3, #0]
 800c9b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c9b4:	4b16      	ldr	r3, [pc, #88]	@ (800ca10 <vPortValidateInterruptPriority+0x78>)
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	7afa      	ldrb	r2, [r7, #11]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d20b      	bcs.n	800c9d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9c2:	f383 8811 	msr	BASEPRI, r3
 800c9c6:	f3bf 8f6f 	isb	sy
 800c9ca:	f3bf 8f4f 	dsb	sy
 800c9ce:	607b      	str	r3, [r7, #4]
}
 800c9d0:	bf00      	nop
 800c9d2:	bf00      	nop
 800c9d4:	e7fd      	b.n	800c9d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c9d6:	4b0f      	ldr	r3, [pc, #60]	@ (800ca14 <vPortValidateInterruptPriority+0x7c>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c9de:	4b0e      	ldr	r3, [pc, #56]	@ (800ca18 <vPortValidateInterruptPriority+0x80>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d90b      	bls.n	800c9fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c9e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ea:	f383 8811 	msr	BASEPRI, r3
 800c9ee:	f3bf 8f6f 	isb	sy
 800c9f2:	f3bf 8f4f 	dsb	sy
 800c9f6:	603b      	str	r3, [r7, #0]
}
 800c9f8:	bf00      	nop
 800c9fa:	bf00      	nop
 800c9fc:	e7fd      	b.n	800c9fa <vPortValidateInterruptPriority+0x62>
	}
 800c9fe:	bf00      	nop
 800ca00:	3714      	adds	r7, #20
 800ca02:	46bd      	mov	sp, r7
 800ca04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca08:	4770      	bx	lr
 800ca0a:	bf00      	nop
 800ca0c:	e000e3f0 	.word	0xe000e3f0
 800ca10:	20000724 	.word	0x20000724
 800ca14:	e000ed0c 	.word	0xe000ed0c
 800ca18:	20000728 	.word	0x20000728

0800ca1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b08a      	sub	sp, #40	@ 0x28
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ca24:	2300      	movs	r3, #0
 800ca26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ca28:	f7ff f8cc 	bl	800bbc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ca2c:	4b5f      	ldr	r3, [pc, #380]	@ (800cbac <pvPortMalloc+0x190>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d101      	bne.n	800ca38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ca34:	f000 f92a 	bl	800cc8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ca38:	4b5d      	ldr	r3, [pc, #372]	@ (800cbb0 <pvPortMalloc+0x194>)
 800ca3a:	681a      	ldr	r2, [r3, #0]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	4013      	ands	r3, r2
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	f040 8095 	bne.w	800cb70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d01e      	beq.n	800ca8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ca4c:	2208      	movs	r2, #8
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	4413      	add	r3, r2
 800ca52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f003 0307 	and.w	r3, r3, #7
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d015      	beq.n	800ca8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f023 0307 	bic.w	r3, r3, #7
 800ca64:	3308      	adds	r3, #8
 800ca66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f003 0307 	and.w	r3, r3, #7
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d00b      	beq.n	800ca8a <pvPortMalloc+0x6e>
	__asm volatile
 800ca72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca76:	f383 8811 	msr	BASEPRI, r3
 800ca7a:	f3bf 8f6f 	isb	sy
 800ca7e:	f3bf 8f4f 	dsb	sy
 800ca82:	617b      	str	r3, [r7, #20]
}
 800ca84:	bf00      	nop
 800ca86:	bf00      	nop
 800ca88:	e7fd      	b.n	800ca86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d06f      	beq.n	800cb70 <pvPortMalloc+0x154>
 800ca90:	4b48      	ldr	r3, [pc, #288]	@ (800cbb4 <pvPortMalloc+0x198>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d86a      	bhi.n	800cb70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ca9a:	4b47      	ldr	r3, [pc, #284]	@ (800cbb8 <pvPortMalloc+0x19c>)
 800ca9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ca9e:	4b46      	ldr	r3, [pc, #280]	@ (800cbb8 <pvPortMalloc+0x19c>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800caa4:	e004      	b.n	800cab0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800caa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800caaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	687a      	ldr	r2, [r7, #4]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d903      	bls.n	800cac2 <pvPortMalloc+0xa6>
 800caba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d1f1      	bne.n	800caa6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cac2:	4b3a      	ldr	r3, [pc, #232]	@ (800cbac <pvPortMalloc+0x190>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cac8:	429a      	cmp	r2, r3
 800caca:	d051      	beq.n	800cb70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cacc:	6a3b      	ldr	r3, [r7, #32]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	2208      	movs	r2, #8
 800cad2:	4413      	add	r3, r2
 800cad4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad8:	681a      	ldr	r2, [r3, #0]
 800cada:	6a3b      	ldr	r3, [r7, #32]
 800cadc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae0:	685a      	ldr	r2, [r3, #4]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	1ad2      	subs	r2, r2, r3
 800cae6:	2308      	movs	r3, #8
 800cae8:	005b      	lsls	r3, r3, #1
 800caea:	429a      	cmp	r2, r3
 800caec:	d920      	bls.n	800cb30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800caee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	4413      	add	r3, r2
 800caf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800caf6:	69bb      	ldr	r3, [r7, #24]
 800caf8:	f003 0307 	and.w	r3, r3, #7
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d00b      	beq.n	800cb18 <pvPortMalloc+0xfc>
	__asm volatile
 800cb00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb04:	f383 8811 	msr	BASEPRI, r3
 800cb08:	f3bf 8f6f 	isb	sy
 800cb0c:	f3bf 8f4f 	dsb	sy
 800cb10:	613b      	str	r3, [r7, #16]
}
 800cb12:	bf00      	nop
 800cb14:	bf00      	nop
 800cb16:	e7fd      	b.n	800cb14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cb18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb1a:	685a      	ldr	r2, [r3, #4]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	1ad2      	subs	r2, r2, r3
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cb24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb26:	687a      	ldr	r2, [r7, #4]
 800cb28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cb2a:	69b8      	ldr	r0, [r7, #24]
 800cb2c:	f000 f910 	bl	800cd50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cb30:	4b20      	ldr	r3, [pc, #128]	@ (800cbb4 <pvPortMalloc+0x198>)
 800cb32:	681a      	ldr	r2, [r3, #0]
 800cb34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	1ad3      	subs	r3, r2, r3
 800cb3a:	4a1e      	ldr	r2, [pc, #120]	@ (800cbb4 <pvPortMalloc+0x198>)
 800cb3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cb3e:	4b1d      	ldr	r3, [pc, #116]	@ (800cbb4 <pvPortMalloc+0x198>)
 800cb40:	681a      	ldr	r2, [r3, #0]
 800cb42:	4b1e      	ldr	r3, [pc, #120]	@ (800cbbc <pvPortMalloc+0x1a0>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d203      	bcs.n	800cb52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cb4a:	4b1a      	ldr	r3, [pc, #104]	@ (800cbb4 <pvPortMalloc+0x198>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	4a1b      	ldr	r2, [pc, #108]	@ (800cbbc <pvPortMalloc+0x1a0>)
 800cb50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cb52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb54:	685a      	ldr	r2, [r3, #4]
 800cb56:	4b16      	ldr	r3, [pc, #88]	@ (800cbb0 <pvPortMalloc+0x194>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	431a      	orrs	r2, r3
 800cb5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cb60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb62:	2200      	movs	r2, #0
 800cb64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cb66:	4b16      	ldr	r3, [pc, #88]	@ (800cbc0 <pvPortMalloc+0x1a4>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	4a14      	ldr	r2, [pc, #80]	@ (800cbc0 <pvPortMalloc+0x1a4>)
 800cb6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cb70:	f7ff f836 	bl	800bbe0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800cb74:	69fb      	ldr	r3, [r7, #28]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d101      	bne.n	800cb7e <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800cb7a:	f7f3 fcc3 	bl	8000504 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb7e:	69fb      	ldr	r3, [r7, #28]
 800cb80:	f003 0307 	and.w	r3, r3, #7
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d00b      	beq.n	800cba0 <pvPortMalloc+0x184>
	__asm volatile
 800cb88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb8c:	f383 8811 	msr	BASEPRI, r3
 800cb90:	f3bf 8f6f 	isb	sy
 800cb94:	f3bf 8f4f 	dsb	sy
 800cb98:	60fb      	str	r3, [r7, #12]
}
 800cb9a:	bf00      	nop
 800cb9c:	bf00      	nop
 800cb9e:	e7fd      	b.n	800cb9c <pvPortMalloc+0x180>
	return pvReturn;
 800cba0:	69fb      	ldr	r3, [r7, #28]
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3728      	adds	r7, #40	@ 0x28
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	20008734 	.word	0x20008734
 800cbb0:	20008748 	.word	0x20008748
 800cbb4:	20008738 	.word	0x20008738
 800cbb8:	2000872c 	.word	0x2000872c
 800cbbc:	2000873c 	.word	0x2000873c
 800cbc0:	20008740 	.word	0x20008740

0800cbc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b086      	sub	sp, #24
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d04f      	beq.n	800cc76 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cbd6:	2308      	movs	r3, #8
 800cbd8:	425b      	negs	r3, r3
 800cbda:	697a      	ldr	r2, [r7, #20]
 800cbdc:	4413      	add	r3, r2
 800cbde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	685a      	ldr	r2, [r3, #4]
 800cbe8:	4b25      	ldr	r3, [pc, #148]	@ (800cc80 <vPortFree+0xbc>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4013      	ands	r3, r2
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d10b      	bne.n	800cc0a <vPortFree+0x46>
	__asm volatile
 800cbf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbf6:	f383 8811 	msr	BASEPRI, r3
 800cbfa:	f3bf 8f6f 	isb	sy
 800cbfe:	f3bf 8f4f 	dsb	sy
 800cc02:	60fb      	str	r3, [r7, #12]
}
 800cc04:	bf00      	nop
 800cc06:	bf00      	nop
 800cc08:	e7fd      	b.n	800cc06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d00b      	beq.n	800cc2a <vPortFree+0x66>
	__asm volatile
 800cc12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc16:	f383 8811 	msr	BASEPRI, r3
 800cc1a:	f3bf 8f6f 	isb	sy
 800cc1e:	f3bf 8f4f 	dsb	sy
 800cc22:	60bb      	str	r3, [r7, #8]
}
 800cc24:	bf00      	nop
 800cc26:	bf00      	nop
 800cc28:	e7fd      	b.n	800cc26 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	685a      	ldr	r2, [r3, #4]
 800cc2e:	4b14      	ldr	r3, [pc, #80]	@ (800cc80 <vPortFree+0xbc>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	4013      	ands	r3, r2
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d01e      	beq.n	800cc76 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d11a      	bne.n	800cc76 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	685a      	ldr	r2, [r3, #4]
 800cc44:	4b0e      	ldr	r3, [pc, #56]	@ (800cc80 <vPortFree+0xbc>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	43db      	mvns	r3, r3
 800cc4a:	401a      	ands	r2, r3
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cc50:	f7fe ffb8 	bl	800bbc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	685a      	ldr	r2, [r3, #4]
 800cc58:	4b0a      	ldr	r3, [pc, #40]	@ (800cc84 <vPortFree+0xc0>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4413      	add	r3, r2
 800cc5e:	4a09      	ldr	r2, [pc, #36]	@ (800cc84 <vPortFree+0xc0>)
 800cc60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cc62:	6938      	ldr	r0, [r7, #16]
 800cc64:	f000 f874 	bl	800cd50 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cc68:	4b07      	ldr	r3, [pc, #28]	@ (800cc88 <vPortFree+0xc4>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	4a06      	ldr	r2, [pc, #24]	@ (800cc88 <vPortFree+0xc4>)
 800cc70:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cc72:	f7fe ffb5 	bl	800bbe0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cc76:	bf00      	nop
 800cc78:	3718      	adds	r7, #24
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	20008748 	.word	0x20008748
 800cc84:	20008738 	.word	0x20008738
 800cc88:	20008744 	.word	0x20008744

0800cc8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b085      	sub	sp, #20
 800cc90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cc92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cc98:	4b27      	ldr	r3, [pc, #156]	@ (800cd38 <prvHeapInit+0xac>)
 800cc9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	f003 0307 	and.w	r3, r3, #7
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d00c      	beq.n	800ccc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	3307      	adds	r3, #7
 800ccaa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f023 0307 	bic.w	r3, r3, #7
 800ccb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ccb4:	68ba      	ldr	r2, [r7, #8]
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	1ad3      	subs	r3, r2, r3
 800ccba:	4a1f      	ldr	r2, [pc, #124]	@ (800cd38 <prvHeapInit+0xac>)
 800ccbc:	4413      	add	r3, r2
 800ccbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ccc4:	4a1d      	ldr	r2, [pc, #116]	@ (800cd3c <prvHeapInit+0xb0>)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ccca:	4b1c      	ldr	r3, [pc, #112]	@ (800cd3c <prvHeapInit+0xb0>)
 800cccc:	2200      	movs	r2, #0
 800ccce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	68ba      	ldr	r2, [r7, #8]
 800ccd4:	4413      	add	r3, r2
 800ccd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ccd8:	2208      	movs	r2, #8
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	1a9b      	subs	r3, r3, r2
 800ccde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	f023 0307 	bic.w	r3, r3, #7
 800cce6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	4a15      	ldr	r2, [pc, #84]	@ (800cd40 <prvHeapInit+0xb4>)
 800ccec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ccee:	4b14      	ldr	r3, [pc, #80]	@ (800cd40 <prvHeapInit+0xb4>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ccf6:	4b12      	ldr	r3, [pc, #72]	@ (800cd40 <prvHeapInit+0xb4>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	68fa      	ldr	r2, [r7, #12]
 800cd06:	1ad2      	subs	r2, r2, r3
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd0c:	4b0c      	ldr	r3, [pc, #48]	@ (800cd40 <prvHeapInit+0xb4>)
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	4a0a      	ldr	r2, [pc, #40]	@ (800cd44 <prvHeapInit+0xb8>)
 800cd1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	4a09      	ldr	r2, [pc, #36]	@ (800cd48 <prvHeapInit+0xbc>)
 800cd22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cd24:	4b09      	ldr	r3, [pc, #36]	@ (800cd4c <prvHeapInit+0xc0>)
 800cd26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cd2a:	601a      	str	r2, [r3, #0]
}
 800cd2c:	bf00      	nop
 800cd2e:	3714      	adds	r7, #20
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr
 800cd38:	2000072c 	.word	0x2000072c
 800cd3c:	2000872c 	.word	0x2000872c
 800cd40:	20008734 	.word	0x20008734
 800cd44:	2000873c 	.word	0x2000873c
 800cd48:	20008738 	.word	0x20008738
 800cd4c:	20008748 	.word	0x20008748

0800cd50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cd50:	b480      	push	{r7}
 800cd52:	b085      	sub	sp, #20
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cd58:	4b28      	ldr	r3, [pc, #160]	@ (800cdfc <prvInsertBlockIntoFreeList+0xac>)
 800cd5a:	60fb      	str	r3, [r7, #12]
 800cd5c:	e002      	b.n	800cd64 <prvInsertBlockIntoFreeList+0x14>
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	60fb      	str	r3, [r7, #12]
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d8f7      	bhi.n	800cd5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	68ba      	ldr	r2, [r7, #8]
 800cd78:	4413      	add	r3, r2
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d108      	bne.n	800cd92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	685a      	ldr	r2, [r3, #4]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	441a      	add	r2, r3
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	685b      	ldr	r3, [r3, #4]
 800cd9a:	68ba      	ldr	r2, [r7, #8]
 800cd9c:	441a      	add	r2, r3
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d118      	bne.n	800cdd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	4b15      	ldr	r3, [pc, #84]	@ (800ce00 <prvInsertBlockIntoFreeList+0xb0>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d00d      	beq.n	800cdce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	685a      	ldr	r2, [r3, #4]
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	441a      	add	r2, r3
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	681a      	ldr	r2, [r3, #0]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	601a      	str	r2, [r3, #0]
 800cdcc:	e008      	b.n	800cde0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cdce:	4b0c      	ldr	r3, [pc, #48]	@ (800ce00 <prvInsertBlockIntoFreeList+0xb0>)
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	601a      	str	r2, [r3, #0]
 800cdd6:	e003      	b.n	800cde0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cde0:	68fa      	ldr	r2, [r7, #12]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d002      	beq.n	800cdee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	687a      	ldr	r2, [r7, #4]
 800cdec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdee:	bf00      	nop
 800cdf0:	3714      	adds	r7, #20
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr
 800cdfa:	bf00      	nop
 800cdfc:	2000872c 	.word	0x2000872c
 800ce00:	20008734 	.word	0x20008734

0800ce04 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800ce08:	2200      	movs	r2, #0
 800ce0a:	490e      	ldr	r1, [pc, #56]	@ (800ce44 <MX_USB_HOST_Init+0x40>)
 800ce0c:	480e      	ldr	r0, [pc, #56]	@ (800ce48 <MX_USB_HOST_Init+0x44>)
 800ce0e:	f7fb fe0f 	bl	8008a30 <USBH_Init>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d001      	beq.n	800ce1c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ce18:	f7f3 ffe8 	bl	8000dec <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800ce1c:	490b      	ldr	r1, [pc, #44]	@ (800ce4c <MX_USB_HOST_Init+0x48>)
 800ce1e:	480a      	ldr	r0, [pc, #40]	@ (800ce48 <MX_USB_HOST_Init+0x44>)
 800ce20:	f7fb fedb 	bl	8008bda <USBH_RegisterClass>
 800ce24:	4603      	mov	r3, r0
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d001      	beq.n	800ce2e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ce2a:	f7f3 ffdf 	bl	8000dec <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800ce2e:	4806      	ldr	r0, [pc, #24]	@ (800ce48 <MX_USB_HOST_Init+0x44>)
 800ce30:	f7fb ff5f 	bl	8008cf2 <USBH_Start>
 800ce34:	4603      	mov	r3, r0
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d001      	beq.n	800ce3e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ce3a:	f7f3 ffd7 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ce3e:	bf00      	nop
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop
 800ce44:	0800ce51 	.word	0x0800ce51
 800ce48:	2000874c 	.word	0x2000874c
 800ce4c:	2000000c 	.word	0x2000000c

0800ce50 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b083      	sub	sp, #12
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	460b      	mov	r3, r1
 800ce5a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ce5c:	78fb      	ldrb	r3, [r7, #3]
 800ce5e:	3b01      	subs	r3, #1
 800ce60:	2b04      	cmp	r3, #4
 800ce62:	d819      	bhi.n	800ce98 <USBH_UserProcess+0x48>
 800ce64:	a201      	add	r2, pc, #4	@ (adr r2, 800ce6c <USBH_UserProcess+0x1c>)
 800ce66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce6a:	bf00      	nop
 800ce6c:	0800ce99 	.word	0x0800ce99
 800ce70:	0800ce89 	.word	0x0800ce89
 800ce74:	0800ce99 	.word	0x0800ce99
 800ce78:	0800ce91 	.word	0x0800ce91
 800ce7c:	0800ce81 	.word	0x0800ce81
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ce80:	4b09      	ldr	r3, [pc, #36]	@ (800cea8 <USBH_UserProcess+0x58>)
 800ce82:	2203      	movs	r2, #3
 800ce84:	701a      	strb	r2, [r3, #0]
  break;
 800ce86:	e008      	b.n	800ce9a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ce88:	4b07      	ldr	r3, [pc, #28]	@ (800cea8 <USBH_UserProcess+0x58>)
 800ce8a:	2202      	movs	r2, #2
 800ce8c:	701a      	strb	r2, [r3, #0]
  break;
 800ce8e:	e004      	b.n	800ce9a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ce90:	4b05      	ldr	r3, [pc, #20]	@ (800cea8 <USBH_UserProcess+0x58>)
 800ce92:	2201      	movs	r2, #1
 800ce94:	701a      	strb	r2, [r3, #0]
  break;
 800ce96:	e000      	b.n	800ce9a <USBH_UserProcess+0x4a>

  default:
  break;
 800ce98:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ce9a:	bf00      	nop
 800ce9c:	370c      	adds	r7, #12
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea4:	4770      	bx	lr
 800cea6:	bf00      	nop
 800cea8:	20008b30 	.word	0x20008b30

0800ceac <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b08a      	sub	sp, #40	@ 0x28
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ceb4:	f107 0314 	add.w	r3, r7, #20
 800ceb8:	2200      	movs	r2, #0
 800ceba:	601a      	str	r2, [r3, #0]
 800cebc:	605a      	str	r2, [r3, #4]
 800cebe:	609a      	str	r2, [r3, #8]
 800cec0:	60da      	str	r2, [r3, #12]
 800cec2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4a24      	ldr	r2, [pc, #144]	@ (800cf5c <HAL_HCD_MspInit+0xb0>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d141      	bne.n	800cf52 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cece:	2300      	movs	r3, #0
 800ced0:	613b      	str	r3, [r7, #16]
 800ced2:	4b23      	ldr	r3, [pc, #140]	@ (800cf60 <HAL_HCD_MspInit+0xb4>)
 800ced4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ced6:	4a22      	ldr	r2, [pc, #136]	@ (800cf60 <HAL_HCD_MspInit+0xb4>)
 800ced8:	f043 0302 	orr.w	r3, r3, #2
 800cedc:	6313      	str	r3, [r2, #48]	@ 0x30
 800cede:	4b20      	ldr	r3, [pc, #128]	@ (800cf60 <HAL_HCD_MspInit+0xb4>)
 800cee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cee2:	f003 0302 	and.w	r3, r3, #2
 800cee6:	613b      	str	r3, [r7, #16]
 800cee8:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800ceea:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800ceee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cef0:	2302      	movs	r3, #2
 800cef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cef4:	2300      	movs	r3, #0
 800cef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cef8:	2300      	movs	r3, #0
 800cefa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800cefc:	230c      	movs	r3, #12
 800cefe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cf00:	f107 0314 	add.w	r3, r7, #20
 800cf04:	4619      	mov	r1, r3
 800cf06:	4817      	ldr	r0, [pc, #92]	@ (800cf64 <HAL_HCD_MspInit+0xb8>)
 800cf08:	f7f4 ffae 	bl	8001e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800cf0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cf10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cf12:	2300      	movs	r3, #0
 800cf14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf16:	2300      	movs	r3, #0
 800cf18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800cf1a:	f107 0314 	add.w	r3, r7, #20
 800cf1e:	4619      	mov	r1, r3
 800cf20:	4810      	ldr	r0, [pc, #64]	@ (800cf64 <HAL_HCD_MspInit+0xb8>)
 800cf22:	f7f4 ffa1 	bl	8001e68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800cf26:	2300      	movs	r3, #0
 800cf28:	60fb      	str	r3, [r7, #12]
 800cf2a:	4b0d      	ldr	r3, [pc, #52]	@ (800cf60 <HAL_HCD_MspInit+0xb4>)
 800cf2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf2e:	4a0c      	ldr	r2, [pc, #48]	@ (800cf60 <HAL_HCD_MspInit+0xb4>)
 800cf30:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800cf34:	6313      	str	r3, [r2, #48]	@ 0x30
 800cf36:	4b0a      	ldr	r3, [pc, #40]	@ (800cf60 <HAL_HCD_MspInit+0xb4>)
 800cf38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cf3e:	60fb      	str	r3, [r7, #12]
 800cf40:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800cf42:	2200      	movs	r2, #0
 800cf44:	2105      	movs	r1, #5
 800cf46:	204d      	movs	r0, #77	@ 0x4d
 800cf48:	f7f4 fd5c 	bl	8001a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800cf4c:	204d      	movs	r0, #77	@ 0x4d
 800cf4e:	f7f4 fd75 	bl	8001a3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800cf52:	bf00      	nop
 800cf54:	3728      	adds	r7, #40	@ 0x28
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	40040000 	.word	0x40040000
 800cf60:	40023800 	.word	0x40023800
 800cf64:	40020400 	.word	0x40020400

0800cf68 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b082      	sub	sp, #8
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cf76:	4618      	mov	r0, r3
 800cf78:	f7fc fb6d 	bl	8009656 <USBH_LL_IncTimer>
}
 800cf7c:	bf00      	nop
 800cf7e:	3708      	adds	r7, #8
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b082      	sub	sp, #8
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7fc fbb1 	bl	80096fa <USBH_LL_Connect>
}
 800cf98:	bf00      	nop
 800cf9a:	3708      	adds	r7, #8
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7fc fbc6 	bl	8009740 <USBH_LL_Disconnect>
}
 800cfb4:	bf00      	nop
 800cfb6:	3708      	adds	r7, #8
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b082      	sub	sp, #8
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	70fb      	strb	r3, [r7, #3]
 800cfc8:	4613      	mov	r3, r2
 800cfca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7fc fbfb 	bl	80097ce <USBH_LL_NotifyURBChange>
#endif
}
 800cfd8:	bf00      	nop
 800cfda:	3708      	adds	r7, #8
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}

0800cfe0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b082      	sub	sp, #8
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7fc fb5b 	bl	80096aa <USBH_LL_PortEnabled>
}
 800cff4:	bf00      	nop
 800cff6:	3708      	adds	r7, #8
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7fc fb67 	bl	80096de <USBH_LL_PortDisabled>
}
 800d010:	bf00      	nop
 800d012:	3708      	adds	r7, #8
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800d026:	2b00      	cmp	r3, #0
 800d028:	d132      	bne.n	800d090 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800d02a:	4a1c      	ldr	r2, [pc, #112]	@ (800d09c <USBH_LL_Init+0x84>)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	4a19      	ldr	r2, [pc, #100]	@ (800d09c <USBH_LL_Init+0x84>)
 800d036:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800d03a:	4b18      	ldr	r3, [pc, #96]	@ (800d09c <USBH_LL_Init+0x84>)
 800d03c:	4a18      	ldr	r2, [pc, #96]	@ (800d0a0 <USBH_LL_Init+0x88>)
 800d03e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800d040:	4b16      	ldr	r3, [pc, #88]	@ (800d09c <USBH_LL_Init+0x84>)
 800d042:	220c      	movs	r2, #12
 800d044:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800d046:	4b15      	ldr	r3, [pc, #84]	@ (800d09c <USBH_LL_Init+0x84>)
 800d048:	2201      	movs	r2, #1
 800d04a:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800d04c:	4b13      	ldr	r3, [pc, #76]	@ (800d09c <USBH_LL_Init+0x84>)
 800d04e:	2200      	movs	r2, #0
 800d050:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800d052:	4b12      	ldr	r3, [pc, #72]	@ (800d09c <USBH_LL_Init+0x84>)
 800d054:	2202      	movs	r2, #2
 800d056:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800d058:	4b10      	ldr	r3, [pc, #64]	@ (800d09c <USBH_LL_Init+0x84>)
 800d05a:	2200      	movs	r2, #0
 800d05c:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800d05e:	4b0f      	ldr	r3, [pc, #60]	@ (800d09c <USBH_LL_Init+0x84>)
 800d060:	2200      	movs	r2, #0
 800d062:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800d064:	4b0d      	ldr	r3, [pc, #52]	@ (800d09c <USBH_LL_Init+0x84>)
 800d066:	2200      	movs	r2, #0
 800d068:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800d06a:	4b0c      	ldr	r3, [pc, #48]	@ (800d09c <USBH_LL_Init+0x84>)
 800d06c:	2200      	movs	r2, #0
 800d06e:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800d070:	480a      	ldr	r0, [pc, #40]	@ (800d09c <USBH_LL_Init+0x84>)
 800d072:	f7f5 f8d8 	bl	8002226 <HAL_HCD_Init>
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d001      	beq.n	800d080 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800d07c:	f7f3 feb6 	bl	8000dec <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800d080:	4806      	ldr	r0, [pc, #24]	@ (800d09c <USBH_LL_Init+0x84>)
 800d082:	f7f5 fd39 	bl	8002af8 <HAL_HCD_GetCurrentFrame>
 800d086:	4603      	mov	r3, r0
 800d088:	4619      	mov	r1, r3
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f7fc fad4 	bl	8009638 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d090:	2300      	movs	r3, #0
}
 800d092:	4618      	mov	r0, r3
 800d094:	3708      	adds	r7, #8
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
 800d09a:	bf00      	nop
 800d09c:	20008b34 	.word	0x20008b34
 800d0a0:	40040000 	.word	0x40040000

0800d0a4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b084      	sub	sp, #16
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7f5 fca4 	bl	8002a08 <HAL_HCD_Start>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d0c4:	7bfb      	ldrb	r3, [r7, #15]
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f000 f95e 	bl	800d388 <USBH_Get_USB_Status>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3710      	adds	r7, #16
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}

0800d0da <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d0da:	b580      	push	{r7, lr}
 800d0dc:	b084      	sub	sp, #16
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7f5 fcac 	bl	8002a4e <HAL_HCD_Stop>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d0fa:	7bfb      	ldrb	r3, [r7, #15]
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f000 f943 	bl	800d388 <USBH_Get_USB_Status>
 800d102:	4603      	mov	r3, r0
 800d104:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d106:	7bbb      	ldrb	r3, [r7, #14]
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3710      	adds	r7, #16
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d118:	2301      	movs	r3, #1
 800d11a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d122:	4618      	mov	r0, r3
 800d124:	f7f5 fcf6 	bl	8002b14 <HAL_HCD_GetCurrentSpeed>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b02      	cmp	r3, #2
 800d12c:	d00c      	beq.n	800d148 <USBH_LL_GetSpeed+0x38>
 800d12e:	2b02      	cmp	r3, #2
 800d130:	d80d      	bhi.n	800d14e <USBH_LL_GetSpeed+0x3e>
 800d132:	2b00      	cmp	r3, #0
 800d134:	d002      	beq.n	800d13c <USBH_LL_GetSpeed+0x2c>
 800d136:	2b01      	cmp	r3, #1
 800d138:	d003      	beq.n	800d142 <USBH_LL_GetSpeed+0x32>
 800d13a:	e008      	b.n	800d14e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d13c:	2300      	movs	r3, #0
 800d13e:	73fb      	strb	r3, [r7, #15]
    break;
 800d140:	e008      	b.n	800d154 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d142:	2301      	movs	r3, #1
 800d144:	73fb      	strb	r3, [r7, #15]
    break;
 800d146:	e005      	b.n	800d154 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d148:	2302      	movs	r3, #2
 800d14a:	73fb      	strb	r3, [r7, #15]
    break;
 800d14c:	e002      	b.n	800d154 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d14e:	2301      	movs	r3, #1
 800d150:	73fb      	strb	r3, [r7, #15]
    break;
 800d152:	bf00      	nop
  }
  return  speed;
 800d154:	7bfb      	ldrb	r3, [r7, #15]
}
 800d156:	4618      	mov	r0, r3
 800d158:	3710      	adds	r7, #16
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}

0800d15e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d15e:	b580      	push	{r7, lr}
 800d160:	b084      	sub	sp, #16
 800d162:	af00      	add	r7, sp, #0
 800d164:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d166:	2300      	movs	r3, #0
 800d168:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d16a:	2300      	movs	r3, #0
 800d16c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d174:	4618      	mov	r0, r3
 800d176:	f7f5 fc87 	bl	8002a88 <HAL_HCD_ResetPort>
 800d17a:	4603      	mov	r3, r0
 800d17c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d17e:	7bfb      	ldrb	r3, [r7, #15]
 800d180:	4618      	mov	r0, r3
 800d182:	f000 f901 	bl	800d388 <USBH_Get_USB_Status>
 800d186:	4603      	mov	r3, r0
 800d188:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d18a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3710      	adds	r7, #16
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b082      	sub	sp, #8
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	460b      	mov	r3, r1
 800d19e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d1a6:	78fa      	ldrb	r2, [r7, #3]
 800d1a8:	4611      	mov	r1, r2
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f7f5 fc8f 	bl	8002ace <HAL_HCD_HC_GetXferCount>
 800d1b0:	4603      	mov	r3, r0
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3708      	adds	r7, #8
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}

0800d1ba <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d1ba:	b590      	push	{r4, r7, lr}
 800d1bc:	b089      	sub	sp, #36	@ 0x24
 800d1be:	af04      	add	r7, sp, #16
 800d1c0:	6078      	str	r0, [r7, #4]
 800d1c2:	4608      	mov	r0, r1
 800d1c4:	4611      	mov	r1, r2
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	70fb      	strb	r3, [r7, #3]
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	70bb      	strb	r3, [r7, #2]
 800d1d0:	4613      	mov	r3, r2
 800d1d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800d1e2:	787c      	ldrb	r4, [r7, #1]
 800d1e4:	78ba      	ldrb	r2, [r7, #2]
 800d1e6:	78f9      	ldrb	r1, [r7, #3]
 800d1e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d1ea:	9302      	str	r3, [sp, #8]
 800d1ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d1f0:	9301      	str	r3, [sp, #4]
 800d1f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d1f6:	9300      	str	r3, [sp, #0]
 800d1f8:	4623      	mov	r3, r4
 800d1fa:	f7f5 f87b 	bl	80022f4 <HAL_HCD_HC_Init>
 800d1fe:	4603      	mov	r3, r0
 800d200:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d202:	7bfb      	ldrb	r3, [r7, #15]
 800d204:	4618      	mov	r0, r3
 800d206:	f000 f8bf 	bl	800d388 <USBH_Get_USB_Status>
 800d20a:	4603      	mov	r3, r0
 800d20c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d20e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d210:	4618      	mov	r0, r3
 800d212:	3714      	adds	r7, #20
 800d214:	46bd      	mov	sp, r7
 800d216:	bd90      	pop	{r4, r7, pc}

0800d218 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b084      	sub	sp, #16
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	460b      	mov	r3, r1
 800d222:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d224:	2300      	movs	r3, #0
 800d226:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d228:	2300      	movs	r3, #0
 800d22a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d232:	78fa      	ldrb	r2, [r7, #3]
 800d234:	4611      	mov	r1, r2
 800d236:	4618      	mov	r0, r3
 800d238:	f7f5 f914 	bl	8002464 <HAL_HCD_HC_Halt>
 800d23c:	4603      	mov	r3, r0
 800d23e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d240:	7bfb      	ldrb	r3, [r7, #15]
 800d242:	4618      	mov	r0, r3
 800d244:	f000 f8a0 	bl	800d388 <USBH_Get_USB_Status>
 800d248:	4603      	mov	r3, r0
 800d24a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d24c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3710      	adds	r7, #16
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}

0800d256 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d256:	b590      	push	{r4, r7, lr}
 800d258:	b089      	sub	sp, #36	@ 0x24
 800d25a:	af04      	add	r7, sp, #16
 800d25c:	6078      	str	r0, [r7, #4]
 800d25e:	4608      	mov	r0, r1
 800d260:	4611      	mov	r1, r2
 800d262:	461a      	mov	r2, r3
 800d264:	4603      	mov	r3, r0
 800d266:	70fb      	strb	r3, [r7, #3]
 800d268:	460b      	mov	r3, r1
 800d26a:	70bb      	strb	r3, [r7, #2]
 800d26c:	4613      	mov	r3, r2
 800d26e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d270:	2300      	movs	r3, #0
 800d272:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d274:	2300      	movs	r3, #0
 800d276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800d27e:	787c      	ldrb	r4, [r7, #1]
 800d280:	78ba      	ldrb	r2, [r7, #2]
 800d282:	78f9      	ldrb	r1, [r7, #3]
 800d284:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d288:	9303      	str	r3, [sp, #12]
 800d28a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d28c:	9302      	str	r3, [sp, #8]
 800d28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d290:	9301      	str	r3, [sp, #4]
 800d292:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d296:	9300      	str	r3, [sp, #0]
 800d298:	4623      	mov	r3, r4
 800d29a:	f7f5 f907 	bl	80024ac <HAL_HCD_HC_SubmitRequest>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d2a2:	7bfb      	ldrb	r3, [r7, #15]
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f000 f86f 	bl	800d388 <USBH_Get_USB_Status>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3714      	adds	r7, #20
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd90      	pop	{r4, r7, pc}

0800d2b8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b082      	sub	sp, #8
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d2ca:	78fa      	ldrb	r2, [r7, #3]
 800d2cc:	4611      	mov	r1, r2
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7f5 fbe8 	bl	8002aa4 <HAL_HCD_HC_GetURBState>
 800d2d4:	4603      	mov	r3, r0
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3708      	adds	r7, #8
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}

0800d2de <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d2de:	b580      	push	{r7, lr}
 800d2e0:	b082      	sub	sp, #8
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	6078      	str	r0, [r7, #4]
 800d2e6:	460b      	mov	r3, r1
 800d2e8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d103      	bne.n	800d2fc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800d2f4:	78fb      	ldrb	r3, [r7, #3]
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f000 f872 	bl	800d3e0 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d2fc:	20c8      	movs	r0, #200	@ 0xc8
 800d2fe:	f7f4 faa5 	bl	800184c <HAL_Delay>
  return USBH_OK;
 800d302:	2300      	movs	r3, #0
}
 800d304:	4618      	mov	r0, r3
 800d306:	3708      	adds	r7, #8
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b085      	sub	sp, #20
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	460b      	mov	r3, r1
 800d316:	70fb      	strb	r3, [r7, #3]
 800d318:	4613      	mov	r3, r2
 800d31a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d322:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d324:	78fa      	ldrb	r2, [r7, #3]
 800d326:	68f9      	ldr	r1, [r7, #12]
 800d328:	4613      	mov	r3, r2
 800d32a:	011b      	lsls	r3, r3, #4
 800d32c:	1a9b      	subs	r3, r3, r2
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	440b      	add	r3, r1
 800d332:	3317      	adds	r3, #23
 800d334:	781b      	ldrb	r3, [r3, #0]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d00a      	beq.n	800d350 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d33a:	78fa      	ldrb	r2, [r7, #3]
 800d33c:	68f9      	ldr	r1, [r7, #12]
 800d33e:	4613      	mov	r3, r2
 800d340:	011b      	lsls	r3, r3, #4
 800d342:	1a9b      	subs	r3, r3, r2
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	440b      	add	r3, r1
 800d348:	333c      	adds	r3, #60	@ 0x3c
 800d34a:	78ba      	ldrb	r2, [r7, #2]
 800d34c:	701a      	strb	r2, [r3, #0]
 800d34e:	e009      	b.n	800d364 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d350:	78fa      	ldrb	r2, [r7, #3]
 800d352:	68f9      	ldr	r1, [r7, #12]
 800d354:	4613      	mov	r3, r2
 800d356:	011b      	lsls	r3, r3, #4
 800d358:	1a9b      	subs	r3, r3, r2
 800d35a:	009b      	lsls	r3, r3, #2
 800d35c:	440b      	add	r3, r1
 800d35e:	333d      	adds	r3, #61	@ 0x3d
 800d360:	78ba      	ldrb	r2, [r7, #2]
 800d362:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d364:	2300      	movs	r3, #0
}
 800d366:	4618      	mov	r0, r3
 800d368:	3714      	adds	r7, #20
 800d36a:	46bd      	mov	sp, r7
 800d36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d370:	4770      	bx	lr

0800d372 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d372:	b580      	push	{r7, lr}
 800d374:	b082      	sub	sp, #8
 800d376:	af00      	add	r7, sp, #0
 800d378:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f7f4 fa66 	bl	800184c <HAL_Delay>
}
 800d380:	bf00      	nop
 800d382:	3708      	adds	r7, #8
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}

0800d388 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d388:	b480      	push	{r7}
 800d38a:	b085      	sub	sp, #20
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	4603      	mov	r3, r0
 800d390:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d392:	2300      	movs	r3, #0
 800d394:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d396:	79fb      	ldrb	r3, [r7, #7]
 800d398:	2b03      	cmp	r3, #3
 800d39a:	d817      	bhi.n	800d3cc <USBH_Get_USB_Status+0x44>
 800d39c:	a201      	add	r2, pc, #4	@ (adr r2, 800d3a4 <USBH_Get_USB_Status+0x1c>)
 800d39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3a2:	bf00      	nop
 800d3a4:	0800d3b5 	.word	0x0800d3b5
 800d3a8:	0800d3bb 	.word	0x0800d3bb
 800d3ac:	0800d3c1 	.word	0x0800d3c1
 800d3b0:	0800d3c7 	.word	0x0800d3c7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	73fb      	strb	r3, [r7, #15]
    break;
 800d3b8:	e00b      	b.n	800d3d2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d3ba:	2302      	movs	r3, #2
 800d3bc:	73fb      	strb	r3, [r7, #15]
    break;
 800d3be:	e008      	b.n	800d3d2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	73fb      	strb	r3, [r7, #15]
    break;
 800d3c4:	e005      	b.n	800d3d2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d3c6:	2302      	movs	r3, #2
 800d3c8:	73fb      	strb	r3, [r7, #15]
    break;
 800d3ca:	e002      	b.n	800d3d2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d3cc:	2302      	movs	r3, #2
 800d3ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d3d0:	bf00      	nop
  }
  return usb_status;
 800d3d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3714      	adds	r7, #20
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr

0800d3e0 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b084      	sub	sp, #16
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d3ea:	79fb      	ldrb	r3, [r7, #7]
 800d3ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800d3ee:	79fb      	ldrb	r3, [r7, #7]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d102      	bne.n	800d3fa <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	73fb      	strb	r3, [r7, #15]
 800d3f8:	e001      	b.n	800d3fe <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800d3fe:	7bfb      	ldrb	r3, [r7, #15]
 800d400:	461a      	mov	r2, r3
 800d402:	2110      	movs	r1, #16
 800d404:	4803      	ldr	r0, [pc, #12]	@ (800d414 <MX_DriverVbusHS+0x34>)
 800d406:	f7f4 fedb 	bl	80021c0 <HAL_GPIO_WritePin>
}
 800d40a:	bf00      	nop
 800d40c:	3710      	adds	r7, #16
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}
 800d412:	bf00      	nop
 800d414:	40020800 	.word	0x40020800

0800d418 <malloc>:
 800d418:	4b02      	ldr	r3, [pc, #8]	@ (800d424 <malloc+0xc>)
 800d41a:	4601      	mov	r1, r0
 800d41c:	6818      	ldr	r0, [r3, #0]
 800d41e:	f000 b82d 	b.w	800d47c <_malloc_r>
 800d422:	bf00      	nop
 800d424:	20000030 	.word	0x20000030

0800d428 <free>:
 800d428:	4b02      	ldr	r3, [pc, #8]	@ (800d434 <free+0xc>)
 800d42a:	4601      	mov	r1, r0
 800d42c:	6818      	ldr	r0, [r3, #0]
 800d42e:	f000 b903 	b.w	800d638 <_free_r>
 800d432:	bf00      	nop
 800d434:	20000030 	.word	0x20000030

0800d438 <sbrk_aligned>:
 800d438:	b570      	push	{r4, r5, r6, lr}
 800d43a:	4e0f      	ldr	r6, [pc, #60]	@ (800d478 <sbrk_aligned+0x40>)
 800d43c:	460c      	mov	r4, r1
 800d43e:	6831      	ldr	r1, [r6, #0]
 800d440:	4605      	mov	r5, r0
 800d442:	b911      	cbnz	r1, 800d44a <sbrk_aligned+0x12>
 800d444:	f000 f8ae 	bl	800d5a4 <_sbrk_r>
 800d448:	6030      	str	r0, [r6, #0]
 800d44a:	4621      	mov	r1, r4
 800d44c:	4628      	mov	r0, r5
 800d44e:	f000 f8a9 	bl	800d5a4 <_sbrk_r>
 800d452:	1c43      	adds	r3, r0, #1
 800d454:	d103      	bne.n	800d45e <sbrk_aligned+0x26>
 800d456:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d45a:	4620      	mov	r0, r4
 800d45c:	bd70      	pop	{r4, r5, r6, pc}
 800d45e:	1cc4      	adds	r4, r0, #3
 800d460:	f024 0403 	bic.w	r4, r4, #3
 800d464:	42a0      	cmp	r0, r4
 800d466:	d0f8      	beq.n	800d45a <sbrk_aligned+0x22>
 800d468:	1a21      	subs	r1, r4, r0
 800d46a:	4628      	mov	r0, r5
 800d46c:	f000 f89a 	bl	800d5a4 <_sbrk_r>
 800d470:	3001      	adds	r0, #1
 800d472:	d1f2      	bne.n	800d45a <sbrk_aligned+0x22>
 800d474:	e7ef      	b.n	800d456 <sbrk_aligned+0x1e>
 800d476:	bf00      	nop
 800d478:	20008f14 	.word	0x20008f14

0800d47c <_malloc_r>:
 800d47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d480:	1ccd      	adds	r5, r1, #3
 800d482:	f025 0503 	bic.w	r5, r5, #3
 800d486:	3508      	adds	r5, #8
 800d488:	2d0c      	cmp	r5, #12
 800d48a:	bf38      	it	cc
 800d48c:	250c      	movcc	r5, #12
 800d48e:	2d00      	cmp	r5, #0
 800d490:	4606      	mov	r6, r0
 800d492:	db01      	blt.n	800d498 <_malloc_r+0x1c>
 800d494:	42a9      	cmp	r1, r5
 800d496:	d904      	bls.n	800d4a2 <_malloc_r+0x26>
 800d498:	230c      	movs	r3, #12
 800d49a:	6033      	str	r3, [r6, #0]
 800d49c:	2000      	movs	r0, #0
 800d49e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d578 <_malloc_r+0xfc>
 800d4a6:	f000 f869 	bl	800d57c <__malloc_lock>
 800d4aa:	f8d8 3000 	ldr.w	r3, [r8]
 800d4ae:	461c      	mov	r4, r3
 800d4b0:	bb44      	cbnz	r4, 800d504 <_malloc_r+0x88>
 800d4b2:	4629      	mov	r1, r5
 800d4b4:	4630      	mov	r0, r6
 800d4b6:	f7ff ffbf 	bl	800d438 <sbrk_aligned>
 800d4ba:	1c43      	adds	r3, r0, #1
 800d4bc:	4604      	mov	r4, r0
 800d4be:	d158      	bne.n	800d572 <_malloc_r+0xf6>
 800d4c0:	f8d8 4000 	ldr.w	r4, [r8]
 800d4c4:	4627      	mov	r7, r4
 800d4c6:	2f00      	cmp	r7, #0
 800d4c8:	d143      	bne.n	800d552 <_malloc_r+0xd6>
 800d4ca:	2c00      	cmp	r4, #0
 800d4cc:	d04b      	beq.n	800d566 <_malloc_r+0xea>
 800d4ce:	6823      	ldr	r3, [r4, #0]
 800d4d0:	4639      	mov	r1, r7
 800d4d2:	4630      	mov	r0, r6
 800d4d4:	eb04 0903 	add.w	r9, r4, r3
 800d4d8:	f000 f864 	bl	800d5a4 <_sbrk_r>
 800d4dc:	4581      	cmp	r9, r0
 800d4de:	d142      	bne.n	800d566 <_malloc_r+0xea>
 800d4e0:	6821      	ldr	r1, [r4, #0]
 800d4e2:	1a6d      	subs	r5, r5, r1
 800d4e4:	4629      	mov	r1, r5
 800d4e6:	4630      	mov	r0, r6
 800d4e8:	f7ff ffa6 	bl	800d438 <sbrk_aligned>
 800d4ec:	3001      	adds	r0, #1
 800d4ee:	d03a      	beq.n	800d566 <_malloc_r+0xea>
 800d4f0:	6823      	ldr	r3, [r4, #0]
 800d4f2:	442b      	add	r3, r5
 800d4f4:	6023      	str	r3, [r4, #0]
 800d4f6:	f8d8 3000 	ldr.w	r3, [r8]
 800d4fa:	685a      	ldr	r2, [r3, #4]
 800d4fc:	bb62      	cbnz	r2, 800d558 <_malloc_r+0xdc>
 800d4fe:	f8c8 7000 	str.w	r7, [r8]
 800d502:	e00f      	b.n	800d524 <_malloc_r+0xa8>
 800d504:	6822      	ldr	r2, [r4, #0]
 800d506:	1b52      	subs	r2, r2, r5
 800d508:	d420      	bmi.n	800d54c <_malloc_r+0xd0>
 800d50a:	2a0b      	cmp	r2, #11
 800d50c:	d917      	bls.n	800d53e <_malloc_r+0xc2>
 800d50e:	1961      	adds	r1, r4, r5
 800d510:	42a3      	cmp	r3, r4
 800d512:	6025      	str	r5, [r4, #0]
 800d514:	bf18      	it	ne
 800d516:	6059      	strne	r1, [r3, #4]
 800d518:	6863      	ldr	r3, [r4, #4]
 800d51a:	bf08      	it	eq
 800d51c:	f8c8 1000 	streq.w	r1, [r8]
 800d520:	5162      	str	r2, [r4, r5]
 800d522:	604b      	str	r3, [r1, #4]
 800d524:	4630      	mov	r0, r6
 800d526:	f000 f82f 	bl	800d588 <__malloc_unlock>
 800d52a:	f104 000b 	add.w	r0, r4, #11
 800d52e:	1d23      	adds	r3, r4, #4
 800d530:	f020 0007 	bic.w	r0, r0, #7
 800d534:	1ac2      	subs	r2, r0, r3
 800d536:	bf1c      	itt	ne
 800d538:	1a1b      	subne	r3, r3, r0
 800d53a:	50a3      	strne	r3, [r4, r2]
 800d53c:	e7af      	b.n	800d49e <_malloc_r+0x22>
 800d53e:	6862      	ldr	r2, [r4, #4]
 800d540:	42a3      	cmp	r3, r4
 800d542:	bf0c      	ite	eq
 800d544:	f8c8 2000 	streq.w	r2, [r8]
 800d548:	605a      	strne	r2, [r3, #4]
 800d54a:	e7eb      	b.n	800d524 <_malloc_r+0xa8>
 800d54c:	4623      	mov	r3, r4
 800d54e:	6864      	ldr	r4, [r4, #4]
 800d550:	e7ae      	b.n	800d4b0 <_malloc_r+0x34>
 800d552:	463c      	mov	r4, r7
 800d554:	687f      	ldr	r7, [r7, #4]
 800d556:	e7b6      	b.n	800d4c6 <_malloc_r+0x4a>
 800d558:	461a      	mov	r2, r3
 800d55a:	685b      	ldr	r3, [r3, #4]
 800d55c:	42a3      	cmp	r3, r4
 800d55e:	d1fb      	bne.n	800d558 <_malloc_r+0xdc>
 800d560:	2300      	movs	r3, #0
 800d562:	6053      	str	r3, [r2, #4]
 800d564:	e7de      	b.n	800d524 <_malloc_r+0xa8>
 800d566:	230c      	movs	r3, #12
 800d568:	6033      	str	r3, [r6, #0]
 800d56a:	4630      	mov	r0, r6
 800d56c:	f000 f80c 	bl	800d588 <__malloc_unlock>
 800d570:	e794      	b.n	800d49c <_malloc_r+0x20>
 800d572:	6005      	str	r5, [r0, #0]
 800d574:	e7d6      	b.n	800d524 <_malloc_r+0xa8>
 800d576:	bf00      	nop
 800d578:	20008f18 	.word	0x20008f18

0800d57c <__malloc_lock>:
 800d57c:	4801      	ldr	r0, [pc, #4]	@ (800d584 <__malloc_lock+0x8>)
 800d57e:	f000 b84b 	b.w	800d618 <__retarget_lock_acquire_recursive>
 800d582:	bf00      	nop
 800d584:	20009058 	.word	0x20009058

0800d588 <__malloc_unlock>:
 800d588:	4801      	ldr	r0, [pc, #4]	@ (800d590 <__malloc_unlock+0x8>)
 800d58a:	f000 b846 	b.w	800d61a <__retarget_lock_release_recursive>
 800d58e:	bf00      	nop
 800d590:	20009058 	.word	0x20009058

0800d594 <memset>:
 800d594:	4402      	add	r2, r0
 800d596:	4603      	mov	r3, r0
 800d598:	4293      	cmp	r3, r2
 800d59a:	d100      	bne.n	800d59e <memset+0xa>
 800d59c:	4770      	bx	lr
 800d59e:	f803 1b01 	strb.w	r1, [r3], #1
 800d5a2:	e7f9      	b.n	800d598 <memset+0x4>

0800d5a4 <_sbrk_r>:
 800d5a4:	b538      	push	{r3, r4, r5, lr}
 800d5a6:	4d06      	ldr	r5, [pc, #24]	@ (800d5c0 <_sbrk_r+0x1c>)
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	4604      	mov	r4, r0
 800d5ac:	4608      	mov	r0, r1
 800d5ae:	602b      	str	r3, [r5, #0]
 800d5b0:	f7f4 f898 	bl	80016e4 <_sbrk>
 800d5b4:	1c43      	adds	r3, r0, #1
 800d5b6:	d102      	bne.n	800d5be <_sbrk_r+0x1a>
 800d5b8:	682b      	ldr	r3, [r5, #0]
 800d5ba:	b103      	cbz	r3, 800d5be <_sbrk_r+0x1a>
 800d5bc:	6023      	str	r3, [r4, #0]
 800d5be:	bd38      	pop	{r3, r4, r5, pc}
 800d5c0:	20009054 	.word	0x20009054

0800d5c4 <__errno>:
 800d5c4:	4b01      	ldr	r3, [pc, #4]	@ (800d5cc <__errno+0x8>)
 800d5c6:	6818      	ldr	r0, [r3, #0]
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop
 800d5cc:	20000030 	.word	0x20000030

0800d5d0 <__libc_init_array>:
 800d5d0:	b570      	push	{r4, r5, r6, lr}
 800d5d2:	4d0d      	ldr	r5, [pc, #52]	@ (800d608 <__libc_init_array+0x38>)
 800d5d4:	4c0d      	ldr	r4, [pc, #52]	@ (800d60c <__libc_init_array+0x3c>)
 800d5d6:	1b64      	subs	r4, r4, r5
 800d5d8:	10a4      	asrs	r4, r4, #2
 800d5da:	2600      	movs	r6, #0
 800d5dc:	42a6      	cmp	r6, r4
 800d5de:	d109      	bne.n	800d5f4 <__libc_init_array+0x24>
 800d5e0:	4d0b      	ldr	r5, [pc, #44]	@ (800d610 <__libc_init_array+0x40>)
 800d5e2:	4c0c      	ldr	r4, [pc, #48]	@ (800d614 <__libc_init_array+0x44>)
 800d5e4:	f000 f872 	bl	800d6cc <_init>
 800d5e8:	1b64      	subs	r4, r4, r5
 800d5ea:	10a4      	asrs	r4, r4, #2
 800d5ec:	2600      	movs	r6, #0
 800d5ee:	42a6      	cmp	r6, r4
 800d5f0:	d105      	bne.n	800d5fe <__libc_init_array+0x2e>
 800d5f2:	bd70      	pop	{r4, r5, r6, pc}
 800d5f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5f8:	4798      	blx	r3
 800d5fa:	3601      	adds	r6, #1
 800d5fc:	e7ee      	b.n	800d5dc <__libc_init_array+0xc>
 800d5fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800d602:	4798      	blx	r3
 800d604:	3601      	adds	r6, #1
 800d606:	e7f2      	b.n	800d5ee <__libc_init_array+0x1e>
 800d608:	08119cb8 	.word	0x08119cb8
 800d60c:	08119cb8 	.word	0x08119cb8
 800d610:	08119cb8 	.word	0x08119cb8
 800d614:	08119cbc 	.word	0x08119cbc

0800d618 <__retarget_lock_acquire_recursive>:
 800d618:	4770      	bx	lr

0800d61a <__retarget_lock_release_recursive>:
 800d61a:	4770      	bx	lr

0800d61c <memcpy>:
 800d61c:	440a      	add	r2, r1
 800d61e:	4291      	cmp	r1, r2
 800d620:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d624:	d100      	bne.n	800d628 <memcpy+0xc>
 800d626:	4770      	bx	lr
 800d628:	b510      	push	{r4, lr}
 800d62a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d62e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d632:	4291      	cmp	r1, r2
 800d634:	d1f9      	bne.n	800d62a <memcpy+0xe>
 800d636:	bd10      	pop	{r4, pc}

0800d638 <_free_r>:
 800d638:	b538      	push	{r3, r4, r5, lr}
 800d63a:	4605      	mov	r5, r0
 800d63c:	2900      	cmp	r1, #0
 800d63e:	d041      	beq.n	800d6c4 <_free_r+0x8c>
 800d640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d644:	1f0c      	subs	r4, r1, #4
 800d646:	2b00      	cmp	r3, #0
 800d648:	bfb8      	it	lt
 800d64a:	18e4      	addlt	r4, r4, r3
 800d64c:	f7ff ff96 	bl	800d57c <__malloc_lock>
 800d650:	4a1d      	ldr	r2, [pc, #116]	@ (800d6c8 <_free_r+0x90>)
 800d652:	6813      	ldr	r3, [r2, #0]
 800d654:	b933      	cbnz	r3, 800d664 <_free_r+0x2c>
 800d656:	6063      	str	r3, [r4, #4]
 800d658:	6014      	str	r4, [r2, #0]
 800d65a:	4628      	mov	r0, r5
 800d65c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d660:	f7ff bf92 	b.w	800d588 <__malloc_unlock>
 800d664:	42a3      	cmp	r3, r4
 800d666:	d908      	bls.n	800d67a <_free_r+0x42>
 800d668:	6820      	ldr	r0, [r4, #0]
 800d66a:	1821      	adds	r1, r4, r0
 800d66c:	428b      	cmp	r3, r1
 800d66e:	bf01      	itttt	eq
 800d670:	6819      	ldreq	r1, [r3, #0]
 800d672:	685b      	ldreq	r3, [r3, #4]
 800d674:	1809      	addeq	r1, r1, r0
 800d676:	6021      	streq	r1, [r4, #0]
 800d678:	e7ed      	b.n	800d656 <_free_r+0x1e>
 800d67a:	461a      	mov	r2, r3
 800d67c:	685b      	ldr	r3, [r3, #4]
 800d67e:	b10b      	cbz	r3, 800d684 <_free_r+0x4c>
 800d680:	42a3      	cmp	r3, r4
 800d682:	d9fa      	bls.n	800d67a <_free_r+0x42>
 800d684:	6811      	ldr	r1, [r2, #0]
 800d686:	1850      	adds	r0, r2, r1
 800d688:	42a0      	cmp	r0, r4
 800d68a:	d10b      	bne.n	800d6a4 <_free_r+0x6c>
 800d68c:	6820      	ldr	r0, [r4, #0]
 800d68e:	4401      	add	r1, r0
 800d690:	1850      	adds	r0, r2, r1
 800d692:	4283      	cmp	r3, r0
 800d694:	6011      	str	r1, [r2, #0]
 800d696:	d1e0      	bne.n	800d65a <_free_r+0x22>
 800d698:	6818      	ldr	r0, [r3, #0]
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	6053      	str	r3, [r2, #4]
 800d69e:	4408      	add	r0, r1
 800d6a0:	6010      	str	r0, [r2, #0]
 800d6a2:	e7da      	b.n	800d65a <_free_r+0x22>
 800d6a4:	d902      	bls.n	800d6ac <_free_r+0x74>
 800d6a6:	230c      	movs	r3, #12
 800d6a8:	602b      	str	r3, [r5, #0]
 800d6aa:	e7d6      	b.n	800d65a <_free_r+0x22>
 800d6ac:	6820      	ldr	r0, [r4, #0]
 800d6ae:	1821      	adds	r1, r4, r0
 800d6b0:	428b      	cmp	r3, r1
 800d6b2:	bf04      	itt	eq
 800d6b4:	6819      	ldreq	r1, [r3, #0]
 800d6b6:	685b      	ldreq	r3, [r3, #4]
 800d6b8:	6063      	str	r3, [r4, #4]
 800d6ba:	bf04      	itt	eq
 800d6bc:	1809      	addeq	r1, r1, r0
 800d6be:	6021      	streq	r1, [r4, #0]
 800d6c0:	6054      	str	r4, [r2, #4]
 800d6c2:	e7ca      	b.n	800d65a <_free_r+0x22>
 800d6c4:	bd38      	pop	{r3, r4, r5, pc}
 800d6c6:	bf00      	nop
 800d6c8:	20008f18 	.word	0x20008f18

0800d6cc <_init>:
 800d6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ce:	bf00      	nop
 800d6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6d2:	bc08      	pop	{r3}
 800d6d4:	469e      	mov	lr, r3
 800d6d6:	4770      	bx	lr

0800d6d8 <_fini>:
 800d6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6da:	bf00      	nop
 800d6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6de:	bc08      	pop	{r3}
 800d6e0:	469e      	mov	lr, r3
 800d6e2:	4770      	bx	lr
