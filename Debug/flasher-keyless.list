
flasher-keyless.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5a4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00107154  0800d754  0800d754  0000e754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  081148a8  081148a8  00116088  2**0
                  CONTENTS
  4 .ARM          00000008  081148a8  081148a8  001158a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  081148b0  081148b0  00116088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  081148b0  081148b0  001158b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  081148b4  081148b4  001158b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  081148b8  00116000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00116088  2**0
                  CONTENTS
 10 .bss          00008fe4  20000088  20000088  00116088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000906c  2000906c  00116088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00116088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002985f  00000000  00000000  001160b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005da6  00000000  00000000  0013f917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022d8  00000000  00000000  001456c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b2ef  00000000  00000000  00147998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002aba8  00000000  00000000  00172c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5483  00000000  00000000  0019d82f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00292cb2  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00001aec  00000000  00000000  00292cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009718  00000000  00000000  002947e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0029defc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d73c 	.word	0x0800d73c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800d73c 	.word	0x0800d73c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
 80004f6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
	...

08000514 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	4a07      	ldr	r2, [pc, #28]	@ (8000540 <vApplicationGetIdleTaskMemory+0x2c>)
 8000524:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	4a06      	ldr	r2, [pc, #24]	@ (8000544 <vApplicationGetIdleTaskMemory+0x30>)
 800052a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2280      	movs	r2, #128	@ 0x80
 8000530:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	200000a4 	.word	0x200000a4
 8000544:	200000fc 	.word	0x200000fc

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b5b0      	push	{r4, r5, r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f001 f96d 	bl	800182c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f82d 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 fac5 	bl	8000ae4 <MX_GPIO_Init>
  MX_CRC_Init();
 800055a:	f000 f893 	bl	8000684 <MX_CRC_Init>
  MX_DMA2D_Init();
 800055e:	f000 f8a5 	bl	80006ac <MX_DMA2D_Init>
  MX_FMC_Init();
 8000562:	f000 fa6f 	bl	8000a44 <MX_FMC_Init>
  MX_I2C3_Init();
 8000566:	f000 f8d3 	bl	8000710 <MX_I2C3_Init>
  MX_LTDC_Init();
 800056a:	f000 f911 	bl	8000790 <MX_LTDC_Init>
  MX_SPI5_Init();
 800056e:	f000 f98f 	bl	8000890 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000572:	f000 f9c3 	bl	80008fc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000576:	f000 fa3b 	bl	80009f0 <MX_USART1_UART_Init>
  MX_UART5_Init();
 800057a:	f000 fa0f 	bl	800099c <MX_UART5_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800057e:	4b0a      	ldr	r3, [pc, #40]	@ (80005a8 <main+0x60>)
 8000580:	1d3c      	adds	r4, r7, #4
 8000582:	461d      	mov	r5, r3
 8000584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000588:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f00a f9c6 	bl	800a926 <osThreadCreate>
 800059a:	4603      	mov	r3, r0
 800059c:	4a03      	ldr	r2, [pc, #12]	@ (80005ac <main+0x64>)
 800059e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005a0:	f00a f9ba 	bl	800a918 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a4:	bf00      	nop
 80005a6:	e7fd      	b.n	80005a4 <main+0x5c>
 80005a8:	0800d760 	.word	0x0800d760
 80005ac:	200005a4 	.word	0x200005a4

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b094      	sub	sp, #80	@ 0x50
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2230      	movs	r2, #48	@ 0x30
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f00d f820 	bl	800d604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	4b28      	ldr	r3, [pc, #160]	@ (800067c <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	4a27      	ldr	r2, [pc, #156]	@ (800067c <SystemClock_Config+0xcc>)
 80005de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e4:	4b25      	ldr	r3, [pc, #148]	@ (800067c <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	4b22      	ldr	r3, [pc, #136]	@ (8000680 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005fc:	4a20      	ldr	r2, [pc, #128]	@ (8000680 <SystemClock_Config+0xd0>)
 80005fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b1e      	ldr	r3, [pc, #120]	@ (8000680 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000610:	2301      	movs	r3, #1
 8000612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000614:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000618:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000624:	2304      	movs	r3, #4
 8000626:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000628:	2348      	movs	r3, #72	@ 0x48
 800062a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000630:	2303      	movs	r3, #3
 8000632:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0320 	add.w	r3, r7, #32
 8000638:	4618      	mov	r0, r3
 800063a:	f004 fc69 	bl	8004f10 <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000644:	f000 fc04 	bl	8000e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2302      	movs	r3, #2
 800064e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000654:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	2102      	movs	r1, #2
 8000664:	4618      	mov	r0, r3
 8000666:	f004 fecb 	bl	8005400 <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000670:	f000 fbee 	bl	8000e50 <Error_Handler>
  }
}
 8000674:	bf00      	nop
 8000676:	3750      	adds	r7, #80	@ 0x50
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000688:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <MX_CRC_Init+0x20>)
 800068a:	4a07      	ldr	r2, [pc, #28]	@ (80006a8 <MX_CRC_Init+0x24>)
 800068c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	@ (80006a4 <MX_CRC_Init+0x20>)
 8000690:	f001 fa14 	bl	8001abc <HAL_CRC_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800069a:	f000 fbd9 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200002fc 	.word	0x200002fc
 80006a8:	40023000 	.word	0x40023000

080006ac <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006b0:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006b2:	4a16      	ldr	r2, [pc, #88]	@ (800070c <MX_DMA2D_Init+0x60>)
 80006b4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006b6:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006bc:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006c2:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006da:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006e0:	4809      	ldr	r0, [pc, #36]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006e2:	f001 fa07 	bl	8001af4 <HAL_DMA2D_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006ec:	f000 fbb0 	bl	8000e50 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006f0:	2101      	movs	r1, #1
 80006f2:	4805      	ldr	r0, [pc, #20]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006f4:	f001 fb58 	bl	8001da8 <HAL_DMA2D_ConfigLayer>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80006fe:	f000 fba7 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000304 	.word	0x20000304
 800070c:	4002b000 	.word	0x4002b000

08000710 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <MX_I2C3_Init+0x74>)
 8000716:	4a1c      	ldr	r2, [pc, #112]	@ (8000788 <MX_I2C3_Init+0x78>)
 8000718:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <MX_I2C3_Init+0x74>)
 800071c:	4a1b      	ldr	r2, [pc, #108]	@ (800078c <MX_I2C3_Init+0x7c>)
 800071e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <MX_I2C3_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <MX_I2C3_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <MX_I2C3_Init+0x74>)
 800072e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000732:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <MX_I2C3_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800073a:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <MX_I2C3_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000740:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <MX_I2C3_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000746:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_I2C3_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800074c:	480d      	ldr	r0, [pc, #52]	@ (8000784 <MX_I2C3_Init+0x74>)
 800074e:	f003 feb7 	bl	80044c0 <HAL_I2C_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000758:	f000 fb7a 	bl	8000e50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800075c:	2100      	movs	r1, #0
 800075e:	4809      	ldr	r0, [pc, #36]	@ (8000784 <MX_I2C3_Init+0x74>)
 8000760:	f003 fff2 	bl	8004748 <HAL_I2CEx_ConfigAnalogFilter>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800076a:	f000 fb71 	bl	8000e50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800076e:	2100      	movs	r1, #0
 8000770:	4804      	ldr	r0, [pc, #16]	@ (8000784 <MX_I2C3_Init+0x74>)
 8000772:	f004 f825 	bl	80047c0 <HAL_I2CEx_ConfigDigitalFilter>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800077c:	f000 fb68 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000344 	.word	0x20000344
 8000788:	40005c00 	.word	0x40005c00
 800078c:	000186a0 	.word	0x000186a0

08000790 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08e      	sub	sp, #56	@ 0x38
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2234      	movs	r2, #52	@ 0x34
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f00c ff31 	bl	800d604 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007a2:	4b39      	ldr	r3, [pc, #228]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007a4:	4a39      	ldr	r2, [pc, #228]	@ (800088c <MX_LTDC_Init+0xfc>)
 80007a6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007a8:	4b37      	ldr	r3, [pc, #220]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007ae:	4b36      	ldr	r3, [pc, #216]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007b4:	4b34      	ldr	r3, [pc, #208]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007ba:	4b33      	ldr	r3, [pc, #204]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80007c0:	4b31      	ldr	r3, [pc, #196]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007c2:	2209      	movs	r2, #9
 80007c4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80007c6:	4b30      	ldr	r3, [pc, #192]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80007cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007ce:	221d      	movs	r2, #29
 80007d0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80007d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007d4:	2203      	movs	r2, #3
 80007d6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80007d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007da:	f240 120d 	movw	r2, #269	@ 0x10d
 80007de:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80007e0:	4b29      	ldr	r3, [pc, #164]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007e2:	f240 1243 	movw	r2, #323	@ 0x143
 80007e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 80007e8:	4b27      	ldr	r3, [pc, #156]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007ea:	f240 1217 	movw	r2, #279	@ 0x117
 80007ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 80007f0:	4b25      	ldr	r3, [pc, #148]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007f2:	f240 1247 	movw	r2, #327	@ 0x147
 80007f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80007f8:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000800:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <MX_LTDC_Init+0xf8>)
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000808:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <MX_LTDC_Init+0xf8>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000810:	481d      	ldr	r0, [pc, #116]	@ (8000888 <MX_LTDC_Init+0xf8>)
 8000812:	f004 f815 	bl	8004840 <HAL_LTDC_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800081c:	f000 fb18 	bl	8000e50 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000824:	23f0      	movs	r3, #240	@ 0xf0
 8000826:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 800082c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000830:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000832:	2302      	movs	r3, #2
 8000834:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000836:	23ff      	movs	r3, #255	@ 0xff
 8000838:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800083e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000842:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000844:	2307      	movs	r3, #7
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000848:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 800084c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 800084e:	23f0      	movs	r3, #240	@ 0xf0
 8000850:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8000852:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000856:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2200      	movs	r2, #0
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_LTDC_Init+0xf8>)
 8000872:	f004 f977 	bl	8004b64 <HAL_LTDC_ConfigLayer>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 800087c:	f000 fae8 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	3738      	adds	r7, #56	@ 0x38
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000398 	.word	0x20000398
 800088c:	40016800 	.word	0x40016800

08000890 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000894:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <MX_SPI5_Init+0x64>)
 8000896:	4a18      	ldr	r2, [pc, #96]	@ (80008f8 <MX_SPI5_Init+0x68>)
 8000898:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800089a:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <MX_SPI5_Init+0x64>)
 800089c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008a0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008a2:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008c0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008c4:	2218      	movs	r2, #24
 80008c6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d4:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008dc:	220a      	movs	r2, #10
 80008de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008e2:	f005 f9d3 	bl	8005c8c <HAL_SPI_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80008ec:	f000 fab0 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000440 	.word	0x20000440
 80008f8:	40015000 	.word	0x40015000

080008fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000918:	4b1e      	ldr	r3, [pc, #120]	@ (8000994 <MX_TIM1_Init+0x98>)
 800091a:	4a1f      	ldr	r2, [pc, #124]	@ (8000998 <MX_TIM1_Init+0x9c>)
 800091c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800091e:	4b1d      	ldr	r3, [pc, #116]	@ (8000994 <MX_TIM1_Init+0x98>)
 8000920:	2200      	movs	r2, #0
 8000922:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000924:	4b1b      	ldr	r3, [pc, #108]	@ (8000994 <MX_TIM1_Init+0x98>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800092a:	4b1a      	ldr	r3, [pc, #104]	@ (8000994 <MX_TIM1_Init+0x98>)
 800092c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000930:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000932:	4b18      	ldr	r3, [pc, #96]	@ (8000994 <MX_TIM1_Init+0x98>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000938:	4b16      	ldr	r3, [pc, #88]	@ (8000994 <MX_TIM1_Init+0x98>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093e:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <MX_TIM1_Init+0x98>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000944:	4813      	ldr	r0, [pc, #76]	@ (8000994 <MX_TIM1_Init+0x98>)
 8000946:	f005 fa2a 	bl	8005d9e <HAL_TIM_Base_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000950:	f000 fa7e 	bl	8000e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000954:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000958:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800095a:	f107 0308 	add.w	r3, r7, #8
 800095e:	4619      	mov	r1, r3
 8000960:	480c      	ldr	r0, [pc, #48]	@ (8000994 <MX_TIM1_Init+0x98>)
 8000962:	f005 fbcb 	bl	80060fc <HAL_TIM_ConfigClockSource>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800096c:	f000 fa70 	bl	8000e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000970:	2300      	movs	r3, #0
 8000972:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000978:	463b      	mov	r3, r7
 800097a:	4619      	mov	r1, r3
 800097c:	4805      	ldr	r0, [pc, #20]	@ (8000994 <MX_TIM1_Init+0x98>)
 800097e:	f005 fdf3 	bl	8006568 <HAL_TIMEx_MasterConfigSynchronization>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000988:	f000 fa62 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000498 	.word	0x20000498
 8000998:	40010000 	.word	0x40010000

0800099c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80009a0:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	@ (80009ec <MX_UART5_Init+0x50>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009ac:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009d4:	f005 fe58 	bl	8006688 <HAL_UART_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80009de:	f000 fa37 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200004e0 	.word	0x200004e0
 80009ec:	40005000 	.word	0x40005000

080009f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f4:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	@ (8000a40 <MX_USART1_UART_Init+0x50>)
 80009f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009fa:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 80009fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a14:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a28:	f005 fe2e 	bl	8006688 <HAL_UART_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a32:	f000 fa0d 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000528 	.word	0x20000528
 8000a40:	40011000 	.word	0x40011000

08000a44 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
 8000a58:	615a      	str	r2, [r3, #20]
 8000a5a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a5e:	4a20      	ldr	r2, [pc, #128]	@ (8000ae0 <MX_FMC_Init+0x9c>)
 8000a60:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a62:	4b1e      	ldr	r3, [pc, #120]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a68:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a70:	2204      	movs	r2, #4
 8000a72:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a74:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a76:	2210      	movs	r2, #16
 8000a78:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a7a:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a7c:	2240      	movs	r2, #64	@ 0x40
 8000a7e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a80:	4b16      	ldr	r3, [pc, #88]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a82:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000a86:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a88:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a94:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a96:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aa2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000aac:	2304      	movs	r3, #4
 8000aae:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000ab0:	2307      	movs	r3, #7
 8000ab2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4805      	ldr	r0, [pc, #20]	@ (8000adc <MX_FMC_Init+0x98>)
 8000ac6:	f005 f8ad 	bl	8005c24 <HAL_SDRAM_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000ad0:	f000 f9be 	bl	8000e50 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000ad4:	bf00      	nop
 8000ad6:	3720      	adds	r7, #32
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000570 	.word	0x20000570
 8000ae0:	a0000140 	.word	0xa0000140

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08e      	sub	sp, #56	@ 0x38
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
 8000afe:	4b7b      	ldr	r3, [pc, #492]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a7a      	ldr	r2, [pc, #488]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b04:	f043 0304 	orr.w	r3, r3, #4
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b78      	ldr	r3, [pc, #480]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	623b      	str	r3, [r7, #32]
 8000b14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
 8000b1a:	4b74      	ldr	r3, [pc, #464]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a73      	ldr	r2, [pc, #460]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b20:	f043 0320 	orr.w	r3, r3, #32
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b71      	ldr	r3, [pc, #452]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0320 	and.w	r3, r3, #32
 8000b2e:	61fb      	str	r3, [r7, #28]
 8000b30:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	61bb      	str	r3, [r7, #24]
 8000b36:	4b6d      	ldr	r3, [pc, #436]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4a6c      	ldr	r2, [pc, #432]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b42:	4b6a      	ldr	r3, [pc, #424]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b4a:	61bb      	str	r3, [r7, #24]
 8000b4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	4b66      	ldr	r3, [pc, #408]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a65      	ldr	r2, [pc, #404]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b63      	ldr	r3, [pc, #396]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b5f      	ldr	r3, [pc, #380]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a5e      	ldr	r2, [pc, #376]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b5c      	ldr	r3, [pc, #368]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b58      	ldr	r3, [pc, #352]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a57      	ldr	r2, [pc, #348]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b55      	ldr	r3, [pc, #340]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	4b51      	ldr	r3, [pc, #324]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	4a50      	ldr	r2, [pc, #320]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000bac:	f043 0310 	orr.w	r3, r3, #16
 8000bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb2:	4b4e      	ldr	r3, [pc, #312]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	f003 0310 	and.w	r3, r3, #16
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b4a      	ldr	r3, [pc, #296]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a49      	ldr	r2, [pc, #292]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000bc8:	f043 0308 	orr.w	r3, r3, #8
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b47      	ldr	r3, [pc, #284]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f003 0308 	and.w	r3, r3, #8
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2116      	movs	r1, #22
 8000bde:	4844      	ldr	r0, [pc, #272]	@ (8000cf0 <MX_GPIO_Init+0x20c>)
 8000be0:	f001 fb20 	bl	8002224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2180      	movs	r1, #128	@ 0x80
 8000be8:	4842      	ldr	r0, [pc, #264]	@ (8000cf4 <MX_GPIO_Init+0x210>)
 8000bea:	f001 fb1b 	bl	8002224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000bf4:	4840      	ldr	r0, [pc, #256]	@ (8000cf8 <MX_GPIO_Init+0x214>)
 8000bf6:	f001 fb15 	bl	8002224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000c00:	483e      	ldr	r0, [pc, #248]	@ (8000cfc <MX_GPIO_Init+0x218>)
 8000c02:	f001 fb0f 	bl	8002224 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000c06:	2316      	movs	r3, #22
 8000c08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4834      	ldr	r0, [pc, #208]	@ (8000cf0 <MX_GPIO_Init+0x20c>)
 8000c1e:	f001 f955 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000c22:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c28:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	482e      	ldr	r0, [pc, #184]	@ (8000cf4 <MX_GPIO_Init+0x210>)
 8000c3a:	f001 f947 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c3e:	2380      	movs	r3, #128	@ 0x80
 8000c40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c52:	4619      	mov	r1, r3
 8000c54:	4827      	ldr	r0, [pc, #156]	@ (8000cf4 <MX_GPIO_Init+0x210>)
 8000c56:	f001 f939 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c5a:	2320      	movs	r3, #32
 8000c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c5e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4820      	ldr	r0, [pc, #128]	@ (8000cf0 <MX_GPIO_Init+0x20c>)
 8000c70:	f001 f92c 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c74:	2304      	movs	r3, #4
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c84:	4619      	mov	r1, r3
 8000c86:	481e      	ldr	r0, [pc, #120]	@ (8000d00 <MX_GPIO_Init+0x21c>)
 8000c88:	f001 f920 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4815      	ldr	r0, [pc, #84]	@ (8000cf8 <MX_GPIO_Init+0x214>)
 8000ca2:	f001 f913 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000ca6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000caa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480e      	ldr	r0, [pc, #56]	@ (8000cf8 <MX_GPIO_Init+0x214>)
 8000cc0:	f001 f904 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000cc4:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4807      	ldr	r0, [pc, #28]	@ (8000cfc <MX_GPIO_Init+0x218>)
 8000cde:	f001 f8f5 	bl	8001ecc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ce2:	bf00      	nop
 8000ce4:	3738      	adds	r7, #56	@ 0x38
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020800 	.word	0x40020800
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40020c00 	.word	0x40020c00
 8000cfc:	40021800 	.word	0x40021800
 8000d00:	40020400 	.word	0x40020400

08000d04 <StartDefaultTask>:
  * @retval None
  */
#define binfile ble_data
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000d0c:	f00c f8b2 	bl	800ce74 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  flashstate = 1;
 8000d10:	4b3e      	ldr	r3, [pc, #248]	@ (8000e0c <StartDefaultTask+0x108>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d1c:	483c      	ldr	r0, [pc, #240]	@ (8000e10 <StartDefaultTask+0x10c>)
 8000d1e:	f001 fa81 	bl	8002224 <HAL_GPIO_WritePin>
  HAL_UART_Transmit(&huart5, sync_data, sizeof(sync_data), 10);
 8000d22:	230a      	movs	r3, #10
 8000d24:	2206      	movs	r2, #6
 8000d26:	493b      	ldr	r1, [pc, #236]	@ (8000e14 <StartDefaultTask+0x110>)
 8000d28:	483b      	ldr	r0, [pc, #236]	@ (8000e18 <StartDefaultTask+0x114>)
 8000d2a:	f005 fcfd 	bl	8006728 <HAL_UART_Transmit>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d34:	4836      	ldr	r0, [pc, #216]	@ (8000e10 <StartDefaultTask+0x10c>)
 8000d36:	f001 fa75 	bl	8002224 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	if(flashstate == 1)
 8000d3a:	4b34      	ldr	r3, [pc, #208]	@ (8000e0c <StartDefaultTask+0x108>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d15d      	bne.n	8000dfe <StartDefaultTask+0xfa>
	{
		flashstate = 0;
 8000d42:	4b32      	ldr	r3, [pc, #200]	@ (8000e0c <StartDefaultTask+0x108>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < sizeof(binfile); i++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	e045      	b.n	8000dda <StartDefaultTask+0xd6>
		{
			if ((i % 1024) == 0)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d10c      	bne.n	8000d72 <StartDefaultTask+0x6e>
			{
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000d58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d5c:	482c      	ldr	r0, [pc, #176]	@ (8000e10 <StartDefaultTask+0x10c>)
 8000d5e:	f001 fa7a 	bl	8002256 <HAL_GPIO_TogglePin>
				if (i == 1024)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d68:	d103      	bne.n	8000d72 <StartDefaultTask+0x6e>
				{
					osDelay(4000);
 8000d6a:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000d6e:	f009 fe26 	bl	800a9be <osDelay>
				}
			}
			HAL_UART_Transmit(&huart5, &binfile[i], 1, 10);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4a29      	ldr	r2, [pc, #164]	@ (8000e1c <StartDefaultTask+0x118>)
 8000d76:	1899      	adds	r1, r3, r2
 8000d78:	230a      	movs	r3, #10
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4826      	ldr	r0, [pc, #152]	@ (8000e18 <StartDefaultTask+0x114>)
 8000d7e:	f005 fcd3 	bl	8006728 <HAL_UART_Transmit>
			crc ^= binfile[i];
 8000d82:	4a26      	ldr	r2, [pc, #152]	@ (8000e1c <StartDefaultTask+0x118>)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	781a      	ldrb	r2, [r3, #0]
 8000d8a:	4b25      	ldr	r3, [pc, #148]	@ (8000e20 <StartDefaultTask+0x11c>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	4053      	eors	r3, r2
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4b23      	ldr	r3, [pc, #140]	@ (8000e20 <StartDefaultTask+0x11c>)
 8000d94:	701a      	strb	r2, [r3, #0]
			for (uint8_t j = 0; j < 8; j++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	72fb      	strb	r3, [r7, #11]
 8000d9a:	e018      	b.n	8000dce <StartDefaultTask+0xca>
			{
				if (crc & 0x80)
 8000d9c:	4b20      	ldr	r3, [pc, #128]	@ (8000e20 <StartDefaultTask+0x11c>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	da0a      	bge.n	8000dbc <StartDefaultTask+0xb8>
				{
					crc = (crc << 1) ^ 0x07;
 8000da6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e20 <StartDefaultTask+0x11c>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	f083 0307 	eor.w	r3, r3, #7
 8000db2:	b25b      	sxtb	r3, r3
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <StartDefaultTask+0x11c>)
 8000db8:	701a      	strb	r2, [r3, #0]
 8000dba:	e005      	b.n	8000dc8 <StartDefaultTask+0xc4>
				}
				else
				{
					crc <<= 1;
 8000dbc:	4b18      	ldr	r3, [pc, #96]	@ (8000e20 <StartDefaultTask+0x11c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <StartDefaultTask+0x11c>)
 8000dc6:	701a      	strb	r2, [r3, #0]
			for (uint8_t j = 0; j < 8; j++)
 8000dc8:	7afb      	ldrb	r3, [r7, #11]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	72fb      	strb	r3, [r7, #11]
 8000dce:	7afb      	ldrb	r3, [r7, #11]
 8000dd0:	2b07      	cmp	r3, #7
 8000dd2:	d9e3      	bls.n	8000d9c <StartDefaultTask+0x98>
		for (int i = 0; i < sizeof(binfile); i++)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	4a11      	ldr	r2, [pc, #68]	@ (8000e24 <StartDefaultTask+0x120>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d3b5      	bcc.n	8000d4e <StartDefaultTask+0x4a>
				}
			}
		}
		crc_send[0] = crc;
 8000de2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <StartDefaultTask+0x11c>)
 8000de4:	781a      	ldrb	r2, [r3, #0]
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <StartDefaultTask+0x124>)
 8000de8:	701a      	strb	r2, [r3, #0]
		osDelay(6000);
 8000dea:	f241 7070 	movw	r0, #6000	@ 0x1770
 8000dee:	f009 fde6 	bl	800a9be <osDelay>
		HAL_UART_Transmit(&huart5, &crc_send[0], sizeof(crc_send), 10);
 8000df2:	230a      	movs	r3, #10
 8000df4:	2201      	movs	r2, #1
 8000df6:	490c      	ldr	r1, [pc, #48]	@ (8000e28 <StartDefaultTask+0x124>)
 8000df8:	4807      	ldr	r0, [pc, #28]	@ (8000e18 <StartDefaultTask+0x114>)
 8000dfa:	f005 fc95 	bl	8006728 <HAL_UART_Transmit>
	}
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e04:	4802      	ldr	r0, [pc, #8]	@ (8000e10 <StartDefaultTask+0x10c>)
 8000e06:	f001 fa0d 	bl	8002224 <HAL_GPIO_WritePin>
	if(flashstate == 1)
 8000e0a:	e796      	b.n	8000d3a <StartDefaultTask+0x36>
 8000e0c:	200005a8 	.word	0x200005a8
 8000e10:	40021800 	.word	0x40021800
 8000e14:	20000000 	.word	0x20000000
 8000e18:	200004e0 	.word	0x200004e0
 8000e1c:	0800d7c0 	.word	0x0800d7c0
 8000e20:	200005ac 	.word	0x200005ac
 8000e24:	001070d0 	.word	0x001070d0
 8000e28:	200005b0 	.word	0x200005b0

08000e2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a04      	ldr	r2, [pc, #16]	@ (8000e4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d101      	bne.n	8000e42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e3e:	f000 fd17 	bl	8001870 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40001000 	.word	0x40001000

08000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
}
 8000e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <Error_Handler+0x8>

08000e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b12      	ldr	r3, [pc, #72]	@ (8000eb0 <HAL_MspInit+0x54>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6a:	4a11      	ldr	r2, [pc, #68]	@ (8000eb0 <HAL_MspInit+0x54>)
 8000e6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e72:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <HAL_MspInit+0x54>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <HAL_MspInit+0x54>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e86:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <HAL_MspInit+0x54>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e8e:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <HAL_MspInit+0x54>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	210f      	movs	r1, #15
 8000e9e:	f06f 0001 	mvn.w	r0, #1
 8000ea2:	f000 fde1 	bl	8001a68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800

08000eb4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ef0 <HAL_CRC_MspInit+0x3c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d10d      	bne.n	8000ee2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <HAL_CRC_MspInit+0x40>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	4a09      	ldr	r2, [pc, #36]	@ (8000ef4 <HAL_CRC_MspInit+0x40>)
 8000ed0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed6:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <HAL_CRC_MspInit+0x40>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000ee2:	bf00      	nop
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40023000 	.word	0x40023000
 8000ef4:	40023800 	.word	0x40023800

08000ef8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0e      	ldr	r2, [pc, #56]	@ (8000f40 <HAL_DMA2D_MspInit+0x48>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d115      	bne.n	8000f36 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <HAL_DMA2D_MspInit+0x4c>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	4a0c      	ldr	r2, [pc, #48]	@ (8000f44 <HAL_DMA2D_MspInit+0x4c>)
 8000f14:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <HAL_DMA2D_MspInit+0x4c>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2105      	movs	r1, #5
 8000f2a:	205a      	movs	r0, #90	@ 0x5a
 8000f2c:	f000 fd9c 	bl	8001a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f30:	205a      	movs	r0, #90	@ 0x5a
 8000f32:	f000 fdb5 	bl	8001aa0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	4002b000 	.word	0x4002b000
 8000f44:	40023800 	.word	0x40023800

08000f48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	@ 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a29      	ldr	r2, [pc, #164]	@ (800100c <HAL_I2C_MspInit+0xc4>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d14b      	bne.n	8001002 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b28      	ldr	r3, [pc, #160]	@ (8001010 <HAL_I2C_MspInit+0xc8>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	4a27      	ldr	r2, [pc, #156]	@ (8001010 <HAL_I2C_MspInit+0xc8>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7a:	4b25      	ldr	r3, [pc, #148]	@ (8001010 <HAL_I2C_MspInit+0xc8>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b21      	ldr	r3, [pc, #132]	@ (8001010 <HAL_I2C_MspInit+0xc8>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	4a20      	ldr	r2, [pc, #128]	@ (8001010 <HAL_I2C_MspInit+0xc8>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f96:	4b1e      	ldr	r3, [pc, #120]	@ (8001010 <HAL_I2C_MspInit+0xc8>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000fa2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fa8:	2312      	movs	r3, #18
 8000faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4815      	ldr	r0, [pc, #84]	@ (8001014 <HAL_I2C_MspInit+0xcc>)
 8000fc0:	f000 ff84 	bl	8001ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000fc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fca:	2312      	movs	r3, #18
 8000fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480d      	ldr	r0, [pc, #52]	@ (8001018 <HAL_I2C_MspInit+0xd0>)
 8000fe2:	f000 ff73 	bl	8001ecc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <HAL_I2C_MspInit+0xc8>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	4a08      	ldr	r2, [pc, #32]	@ (8001010 <HAL_I2C_MspInit+0xc8>)
 8000ff0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff6:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <HAL_I2C_MspInit+0xc8>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001002:	bf00      	nop
 8001004:	3728      	adds	r7, #40	@ 0x28
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40005c00 	.word	0x40005c00
 8001010:	40023800 	.word	0x40023800
 8001014:	40020800 	.word	0x40020800
 8001018:	40020000 	.word	0x40020000

0800101c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b09a      	sub	sp, #104	@ 0x68
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001034:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001038:	2230      	movs	r2, #48	@ 0x30
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f00c fae1 	bl	800d604 <memset>
  if(hltdc->Instance==LTDC)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a85      	ldr	r2, [pc, #532]	@ (800125c <HAL_LTDC_MspInit+0x240>)
 8001048:	4293      	cmp	r3, r2
 800104a:	f040 8102 	bne.w	8001252 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800104e:	2308      	movs	r3, #8
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001052:	2332      	movs	r3, #50	@ 0x32
 8001054:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001056:	2302      	movs	r3, #2
 8001058:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800105a:	2300      	movs	r3, #0
 800105c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001062:	4618      	mov	r0, r3
 8001064:	f004 fc1e 	bl	80058a4 <HAL_RCCEx_PeriphCLKConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800106e:	f7ff feef 	bl	8000e50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
 8001076:	4b7a      	ldr	r3, [pc, #488]	@ (8001260 <HAL_LTDC_MspInit+0x244>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107a:	4a79      	ldr	r2, [pc, #484]	@ (8001260 <HAL_LTDC_MspInit+0x244>)
 800107c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001080:	6453      	str	r3, [r2, #68]	@ 0x44
 8001082:	4b77      	ldr	r3, [pc, #476]	@ (8001260 <HAL_LTDC_MspInit+0x244>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001086:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800108a:	623b      	str	r3, [r7, #32]
 800108c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	4b73      	ldr	r3, [pc, #460]	@ (8001260 <HAL_LTDC_MspInit+0x244>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	4a72      	ldr	r2, [pc, #456]	@ (8001260 <HAL_LTDC_MspInit+0x244>)
 8001098:	f043 0320 	orr.w	r3, r3, #32
 800109c:	6313      	str	r3, [r2, #48]	@ 0x30
 800109e:	4b70      	ldr	r3, [pc, #448]	@ (8001260 <HAL_LTDC_MspInit+0x244>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	f003 0320 	and.w	r3, r3, #32
 80010a6:	61fb      	str	r3, [r7, #28]
 80010a8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
 80010ae:	4b6c      	ldr	r3, [pc, #432]	@ (8001260 <HAL_LTDC_MspInit+0x244>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	4a6b      	ldr	r2, [pc, #428]	@ (8001260 <HAL_LTDC_MspInit+0x244>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ba:	4b69      	ldr	r3, [pc, #420]	@ (8001260 <HAL_LTDC_MspInit+0x244>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	61bb      	str	r3, [r7, #24]
 80010c4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	4b65      	ldr	r3, [pc, #404]	@ (8001260 <HAL_LTDC_MspInit+0x244>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a64      	ldr	r2, [pc, #400]	@ (8001260 <HAL_LTDC_MspInit+0x244>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b62      	ldr	r3, [pc, #392]	@ (8001260 <HAL_LTDC_MspInit+0x244>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	4b5e      	ldr	r3, [pc, #376]	@ (8001260 <HAL_LTDC_MspInit+0x244>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a5d      	ldr	r2, [pc, #372]	@ (8001260 <HAL_LTDC_MspInit+0x244>)
 80010ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001260 <HAL_LTDC_MspInit+0x244>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b57      	ldr	r3, [pc, #348]	@ (8001260 <HAL_LTDC_MspInit+0x244>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a56      	ldr	r2, [pc, #344]	@ (8001260 <HAL_LTDC_MspInit+0x244>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b54      	ldr	r3, [pc, #336]	@ (8001260 <HAL_LTDC_MspInit+0x244>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	4b50      	ldr	r3, [pc, #320]	@ (8001260 <HAL_LTDC_MspInit+0x244>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a4f      	ldr	r2, [pc, #316]	@ (8001260 <HAL_LTDC_MspInit+0x244>)
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b4d      	ldr	r3, [pc, #308]	@ (8001260 <HAL_LTDC_MspInit+0x244>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001136:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800113a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001148:	230e      	movs	r3, #14
 800114a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001150:	4619      	mov	r1, r3
 8001152:	4844      	ldr	r0, [pc, #272]	@ (8001264 <HAL_LTDC_MspInit+0x248>)
 8001154:	f000 feba 	bl	8001ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001158:	f641 0358 	movw	r3, #6232	@ 0x1858
 800115c:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800116a:	230e      	movs	r3, #14
 800116c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001172:	4619      	mov	r1, r3
 8001174:	483c      	ldr	r0, [pc, #240]	@ (8001268 <HAL_LTDC_MspInit+0x24c>)
 8001176:	f000 fea9 	bl	8001ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800117a:	2303      	movs	r3, #3
 800117c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800118a:	2309      	movs	r3, #9
 800118c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001192:	4619      	mov	r1, r3
 8001194:	4835      	ldr	r0, [pc, #212]	@ (800126c <HAL_LTDC_MspInit+0x250>)
 8001196:	f000 fe99 	bl	8001ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800119a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800119e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011ac:	230e      	movs	r3, #14
 80011ae:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011b4:	4619      	mov	r1, r3
 80011b6:	482d      	ldr	r0, [pc, #180]	@ (800126c <HAL_LTDC_MspInit+0x250>)
 80011b8:	f000 fe88 	bl	8001ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80011bc:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80011c0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011ce:	230e      	movs	r3, #14
 80011d0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011d6:	4619      	mov	r1, r3
 80011d8:	4825      	ldr	r0, [pc, #148]	@ (8001270 <HAL_LTDC_MspInit+0x254>)
 80011da:	f000 fe77 	bl	8001ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80011de:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80011e2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011f0:	230e      	movs	r3, #14
 80011f2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011f8:	4619      	mov	r1, r3
 80011fa:	481e      	ldr	r0, [pc, #120]	@ (8001274 <HAL_LTDC_MspInit+0x258>)
 80011fc:	f000 fe66 	bl	8001ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001200:	2348      	movs	r3, #72	@ 0x48
 8001202:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001210:	230e      	movs	r3, #14
 8001212:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001214:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001218:	4619      	mov	r1, r3
 800121a:	4817      	ldr	r0, [pc, #92]	@ (8001278 <HAL_LTDC_MspInit+0x25c>)
 800121c:	f000 fe56 	bl	8001ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001220:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001224:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001232:	2309      	movs	r3, #9
 8001234:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001236:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800123a:	4619      	mov	r1, r3
 800123c:	480c      	ldr	r0, [pc, #48]	@ (8001270 <HAL_LTDC_MspInit+0x254>)
 800123e:	f000 fe45 	bl	8001ecc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2105      	movs	r1, #5
 8001246:	2058      	movs	r0, #88	@ 0x58
 8001248:	f000 fc0e 	bl	8001a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800124c:	2058      	movs	r0, #88	@ 0x58
 800124e:	f000 fc27 	bl	8001aa0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001252:	bf00      	nop
 8001254:	3768      	adds	r7, #104	@ 0x68
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40016800 	.word	0x40016800
 8001260:	40023800 	.word	0x40023800
 8001264:	40021400 	.word	0x40021400
 8001268:	40020000 	.word	0x40020000
 800126c:	40020400 	.word	0x40020400
 8001270:	40021800 	.word	0x40021800
 8001274:	40020800 	.word	0x40020800
 8001278:	40020c00 	.word	0x40020c00

0800127c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	@ 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a19      	ldr	r2, [pc, #100]	@ (8001300 <HAL_SPI_MspInit+0x84>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d12c      	bne.n	80012f8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b18      	ldr	r3, [pc, #96]	@ (8001304 <HAL_SPI_MspInit+0x88>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a6:	4a17      	ldr	r2, [pc, #92]	@ (8001304 <HAL_SPI_MspInit+0x88>)
 80012a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80012ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ae:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <HAL_SPI_MspInit+0x88>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <HAL_SPI_MspInit+0x88>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a10      	ldr	r2, [pc, #64]	@ (8001304 <HAL_SPI_MspInit+0x88>)
 80012c4:	f043 0320 	orr.w	r3, r3, #32
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <HAL_SPI_MspInit+0x88>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0320 	and.w	r3, r3, #32
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80012d6:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80012da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80012e8:	2305      	movs	r3, #5
 80012ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	4805      	ldr	r0, [pc, #20]	@ (8001308 <HAL_SPI_MspInit+0x8c>)
 80012f4:	f000 fdea 	bl	8001ecc <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80012f8:	bf00      	nop
 80012fa:	3728      	adds	r7, #40	@ 0x28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40015000 	.word	0x40015000
 8001304:	40023800 	.word	0x40023800
 8001308:	40021400 	.word	0x40021400

0800130c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0b      	ldr	r2, [pc, #44]	@ (8001348 <HAL_TIM_Base_MspInit+0x3c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d10d      	bne.n	800133a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <HAL_TIM_Base_MspInit+0x40>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001326:	4a09      	ldr	r2, [pc, #36]	@ (800134c <HAL_TIM_Base_MspInit+0x40>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6453      	str	r3, [r2, #68]	@ 0x44
 800132e:	4b07      	ldr	r3, [pc, #28]	@ (800134c <HAL_TIM_Base_MspInit+0x40>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40010000 	.word	0x40010000
 800134c:	40023800 	.word	0x40023800

08001350 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08c      	sub	sp, #48	@ 0x30
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a42      	ldr	r2, [pc, #264]	@ (8001478 <HAL_UART_MspInit+0x128>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d14b      	bne.n	800140a <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
 8001376:	4b41      	ldr	r3, [pc, #260]	@ (800147c <HAL_UART_MspInit+0x12c>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	4a40      	ldr	r2, [pc, #256]	@ (800147c <HAL_UART_MspInit+0x12c>)
 800137c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001380:	6413      	str	r3, [r2, #64]	@ 0x40
 8001382:	4b3e      	ldr	r3, [pc, #248]	@ (800147c <HAL_UART_MspInit+0x12c>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001386:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800138a:	61bb      	str	r3, [r7, #24]
 800138c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	4b3a      	ldr	r3, [pc, #232]	@ (800147c <HAL_UART_MspInit+0x12c>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a39      	ldr	r2, [pc, #228]	@ (800147c <HAL_UART_MspInit+0x12c>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b37      	ldr	r3, [pc, #220]	@ (800147c <HAL_UART_MspInit+0x12c>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	4b33      	ldr	r3, [pc, #204]	@ (800147c <HAL_UART_MspInit+0x12c>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	4a32      	ldr	r2, [pc, #200]	@ (800147c <HAL_UART_MspInit+0x12c>)
 80013b4:	f043 0308 	orr.w	r3, r3, #8
 80013b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ba:	4b30      	ldr	r3, [pc, #192]	@ (800147c <HAL_UART_MspInit+0x12c>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80013d8:	2308      	movs	r3, #8
 80013da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	4619      	mov	r1, r3
 80013e2:	4827      	ldr	r0, [pc, #156]	@ (8001480 <HAL_UART_MspInit+0x130>)
 80013e4:	f000 fd72 	bl	8001ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013e8:	2304      	movs	r3, #4
 80013ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80013f8:	2308      	movs	r3, #8
 80013fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4619      	mov	r1, r3
 8001402:	4820      	ldr	r0, [pc, #128]	@ (8001484 <HAL_UART_MspInit+0x134>)
 8001404:	f000 fd62 	bl	8001ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001408:	e031      	b.n	800146e <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a1e      	ldr	r2, [pc, #120]	@ (8001488 <HAL_UART_MspInit+0x138>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d12c      	bne.n	800146e <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	4b18      	ldr	r3, [pc, #96]	@ (800147c <HAL_UART_MspInit+0x12c>)
 800141a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141c:	4a17      	ldr	r2, [pc, #92]	@ (800147c <HAL_UART_MspInit+0x12c>)
 800141e:	f043 0310 	orr.w	r3, r3, #16
 8001422:	6453      	str	r3, [r2, #68]	@ 0x44
 8001424:	4b15      	ldr	r3, [pc, #84]	@ (800147c <HAL_UART_MspInit+0x12c>)
 8001426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001428:	f003 0310 	and.w	r3, r3, #16
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	4b11      	ldr	r3, [pc, #68]	@ (800147c <HAL_UART_MspInit+0x12c>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001438:	4a10      	ldr	r2, [pc, #64]	@ (800147c <HAL_UART_MspInit+0x12c>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001440:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <HAL_UART_MspInit+0x12c>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800144c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800145e:	2307      	movs	r3, #7
 8001460:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4619      	mov	r1, r3
 8001468:	4808      	ldr	r0, [pc, #32]	@ (800148c <HAL_UART_MspInit+0x13c>)
 800146a:	f000 fd2f 	bl	8001ecc <HAL_GPIO_Init>
}
 800146e:	bf00      	nop
 8001470:	3730      	adds	r7, #48	@ 0x30
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40005000 	.word	0x40005000
 800147c:	40023800 	.word	0x40023800
 8001480:	40020800 	.word	0x40020800
 8001484:	40020c00 	.word	0x40020c00
 8001488:	40011000 	.word	0x40011000
 800148c:	40020000 	.word	0x40020000

08001490 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80014a4:	4b3b      	ldr	r3, [pc, #236]	@ (8001594 <HAL_FMC_MspInit+0x104>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d16f      	bne.n	800158c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80014ac:	4b39      	ldr	r3, [pc, #228]	@ (8001594 <HAL_FMC_MspInit+0x104>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	4b38      	ldr	r3, [pc, #224]	@ (8001598 <HAL_FMC_MspInit+0x108>)
 80014b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ba:	4a37      	ldr	r2, [pc, #220]	@ (8001598 <HAL_FMC_MspInit+0x108>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6393      	str	r3, [r2, #56]	@ 0x38
 80014c2:	4b35      	ldr	r3, [pc, #212]	@ (8001598 <HAL_FMC_MspInit+0x108>)
 80014c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80014ce:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80014d2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014e0:	230c      	movs	r3, #12
 80014e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	4619      	mov	r1, r3
 80014e8:	482c      	ldr	r0, [pc, #176]	@ (800159c <HAL_FMC_MspInit+0x10c>)
 80014ea:	f000 fcef 	bl	8001ecc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80014ee:	2301      	movs	r3, #1
 80014f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fa:	2303      	movs	r3, #3
 80014fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014fe:	230c      	movs	r3, #12
 8001500:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	4619      	mov	r1, r3
 8001506:	4826      	ldr	r0, [pc, #152]	@ (80015a0 <HAL_FMC_MspInit+0x110>)
 8001508:	f000 fce0 	bl	8001ecc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800150c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001510:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800151e:	230c      	movs	r3, #12
 8001520:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	4619      	mov	r1, r3
 8001526:	481f      	ldr	r0, [pc, #124]	@ (80015a4 <HAL_FMC_MspInit+0x114>)
 8001528:	f000 fcd0 	bl	8001ecc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800152c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001530:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153a:	2303      	movs	r3, #3
 800153c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800153e:	230c      	movs	r3, #12
 8001540:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	4619      	mov	r1, r3
 8001546:	4818      	ldr	r0, [pc, #96]	@ (80015a8 <HAL_FMC_MspInit+0x118>)
 8001548:	f000 fcc0 	bl	8001ecc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800154c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001550:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800155e:	230c      	movs	r3, #12
 8001560:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	4619      	mov	r1, r3
 8001566:	4811      	ldr	r0, [pc, #68]	@ (80015ac <HAL_FMC_MspInit+0x11c>)
 8001568:	f000 fcb0 	bl	8001ecc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800156c:	2360      	movs	r3, #96	@ 0x60
 800156e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800157c:	230c      	movs	r3, #12
 800157e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	4619      	mov	r1, r3
 8001584:	480a      	ldr	r0, [pc, #40]	@ (80015b0 <HAL_FMC_MspInit+0x120>)
 8001586:	f000 fca1 	bl	8001ecc <HAL_GPIO_Init>
 800158a:	e000      	b.n	800158e <HAL_FMC_MspInit+0xfe>
    return;
 800158c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200005b4 	.word	0x200005b4
 8001598:	40023800 	.word	0x40023800
 800159c:	40021400 	.word	0x40021400
 80015a0:	40020800 	.word	0x40020800
 80015a4:	40021800 	.word	0x40021800
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40020c00 	.word	0x40020c00
 80015b0:	40020400 	.word	0x40020400

080015b4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80015bc:	f7ff ff68 	bl	8001490 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08e      	sub	sp, #56	@ 0x38
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	4b33      	ldr	r3, [pc, #204]	@ (80016ac <HAL_InitTick+0xe4>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e0:	4a32      	ldr	r2, [pc, #200]	@ (80016ac <HAL_InitTick+0xe4>)
 80015e2:	f043 0310 	orr.w	r3, r3, #16
 80015e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e8:	4b30      	ldr	r3, [pc, #192]	@ (80016ac <HAL_InitTick+0xe4>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015f4:	f107 0210 	add.w	r2, r7, #16
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4611      	mov	r1, r2
 80015fe:	4618      	mov	r0, r3
 8001600:	f004 f91e 	bl	8005840 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800160a:	2b00      	cmp	r3, #0
 800160c:	d103      	bne.n	8001616 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800160e:	f004 f8ef 	bl	80057f0 <HAL_RCC_GetPCLK1Freq>
 8001612:	6378      	str	r0, [r7, #52]	@ 0x34
 8001614:	e004      	b.n	8001620 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001616:	f004 f8eb 	bl	80057f0 <HAL_RCC_GetPCLK1Freq>
 800161a:	4603      	mov	r3, r0
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001622:	4a23      	ldr	r2, [pc, #140]	@ (80016b0 <HAL_InitTick+0xe8>)
 8001624:	fba2 2303 	umull	r2, r3, r2, r3
 8001628:	0c9b      	lsrs	r3, r3, #18
 800162a:	3b01      	subs	r3, #1
 800162c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800162e:	4b21      	ldr	r3, [pc, #132]	@ (80016b4 <HAL_InitTick+0xec>)
 8001630:	4a21      	ldr	r2, [pc, #132]	@ (80016b8 <HAL_InitTick+0xf0>)
 8001632:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001634:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <HAL_InitTick+0xec>)
 8001636:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800163a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800163c:	4a1d      	ldr	r2, [pc, #116]	@ (80016b4 <HAL_InitTick+0xec>)
 800163e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001640:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001642:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <HAL_InitTick+0xec>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001648:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <HAL_InitTick+0xec>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164e:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <HAL_InitTick+0xec>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001654:	4817      	ldr	r0, [pc, #92]	@ (80016b4 <HAL_InitTick+0xec>)
 8001656:	f004 fba2 	bl	8005d9e <HAL_TIM_Base_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001660:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001664:	2b00      	cmp	r3, #0
 8001666:	d11b      	bne.n	80016a0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001668:	4812      	ldr	r0, [pc, #72]	@ (80016b4 <HAL_InitTick+0xec>)
 800166a:	f004 fbe7 	bl	8005e3c <HAL_TIM_Base_Start_IT>
 800166e:	4603      	mov	r3, r0
 8001670:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001674:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001678:	2b00      	cmp	r3, #0
 800167a:	d111      	bne.n	80016a0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800167c:	2036      	movs	r0, #54	@ 0x36
 800167e:	f000 fa0f 	bl	8001aa0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b0f      	cmp	r3, #15
 8001686:	d808      	bhi.n	800169a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001688:	2200      	movs	r2, #0
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	2036      	movs	r0, #54	@ 0x36
 800168e:	f000 f9eb 	bl	8001a68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001692:	4a0a      	ldr	r2, [pc, #40]	@ (80016bc <HAL_InitTick+0xf4>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	e002      	b.n	80016a0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3738      	adds	r7, #56	@ 0x38
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40023800 	.word	0x40023800
 80016b0:	431bde83 	.word	0x431bde83
 80016b4:	200005b8 	.word	0x200005b8
 80016b8:	40001000 	.word	0x40001000
 80016bc:	2000000c 	.word	0x2000000c

080016c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <NMI_Handler+0x4>

080016c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <HardFault_Handler+0x4>

080016d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <MemManage_Handler+0x4>

080016d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <BusFault_Handler+0x4>

080016e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <UsageFault_Handler+0x4>

080016e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016fc:	4802      	ldr	r0, [pc, #8]	@ (8001708 <TIM6_DAC_IRQHandler+0x10>)
 80016fe:	f004 fc0d 	bl	8005f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200005b8 	.word	0x200005b8

0800170c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001710:	4802      	ldr	r0, [pc, #8]	@ (800171c <OTG_HS_IRQHandler+0x10>)
 8001712:	f001 f89b 	bl	800284c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20008b44 	.word	0x20008b44

08001720 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001724:	4802      	ldr	r0, [pc, #8]	@ (8001730 <LTDC_IRQHandler+0x10>)
 8001726:	f003 f95b 	bl	80049e0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000398 	.word	0x20000398

08001734 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001738:	4802      	ldr	r0, [pc, #8]	@ (8001744 <DMA2D_IRQHandler+0x10>)
 800173a:	f000 fa24 	bl	8001b86 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000304 	.word	0x20000304

08001748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001750:	4a14      	ldr	r2, [pc, #80]	@ (80017a4 <_sbrk+0x5c>)
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <_sbrk+0x60>)
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800175c:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d102      	bne.n	800176a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001764:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <_sbrk+0x64>)
 8001766:	4a12      	ldr	r2, [pc, #72]	@ (80017b0 <_sbrk+0x68>)
 8001768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176a:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	429a      	cmp	r2, r3
 8001776:	d207      	bcs.n	8001788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001778:	f00b ff5c 	bl	800d634 <__errno>
 800177c:	4603      	mov	r3, r0
 800177e:	220c      	movs	r2, #12
 8001780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001782:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001786:	e009      	b.n	800179c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001788:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <_sbrk+0x64>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800178e:	4b07      	ldr	r3, [pc, #28]	@ (80017ac <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	4a05      	ldr	r2, [pc, #20]	@ (80017ac <_sbrk+0x64>)
 8001798:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179a:	68fb      	ldr	r3, [r7, #12]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20030000 	.word	0x20030000
 80017a8:	00000400 	.word	0x00000400
 80017ac:	20000600 	.word	0x20000600
 80017b0:	20009070 	.word	0x20009070

080017b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b8:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <SystemInit+0x20>)
 80017ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017be:	4a05      	ldr	r2, [pc, #20]	@ (80017d4 <SystemInit+0x20>)
 80017c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001810 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017dc:	f7ff ffea 	bl	80017b4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e0:	480c      	ldr	r0, [pc, #48]	@ (8001814 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017e2:	490d      	ldr	r1, [pc, #52]	@ (8001818 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017e4:	4a0d      	ldr	r2, [pc, #52]	@ (800181c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e8:	e002      	b.n	80017f0 <LoopCopyDataInit>

080017ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ee:	3304      	adds	r3, #4

080017f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f4:	d3f9      	bcc.n	80017ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001824 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017fc:	e001      	b.n	8001802 <LoopFillZerobss>

080017fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001800:	3204      	adds	r2, #4

08001802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001804:	d3fb      	bcc.n	80017fe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001806:	f00b ff1b 	bl	800d640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800180a:	f7fe fe9d 	bl	8000548 <main>
  bx  lr    
 800180e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001810:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001818:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800181c:	081148b8 	.word	0x081148b8
  ldr r2, =_sbss
 8001820:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001824:	2000906c 	.word	0x2000906c

08001828 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001828:	e7fe      	b.n	8001828 <ADC_IRQHandler>
	...

0800182c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001830:	4b0e      	ldr	r3, [pc, #56]	@ (800186c <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0d      	ldr	r2, [pc, #52]	@ (800186c <HAL_Init+0x40>)
 8001836:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800183a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800183c:	4b0b      	ldr	r3, [pc, #44]	@ (800186c <HAL_Init+0x40>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0a      	ldr	r2, [pc, #40]	@ (800186c <HAL_Init+0x40>)
 8001842:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001846:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001848:	4b08      	ldr	r3, [pc, #32]	@ (800186c <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a07      	ldr	r2, [pc, #28]	@ (800186c <HAL_Init+0x40>)
 800184e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001852:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001854:	2003      	movs	r0, #3
 8001856:	f000 f8fc 	bl	8001a52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185a:	2000      	movs	r0, #0
 800185c:	f7ff feb4 	bl	80015c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001860:	f7ff fafc 	bl	8000e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023c00 	.word	0x40023c00

08001870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <HAL_IncTick+0x20>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <HAL_IncTick+0x24>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4413      	add	r3, r2
 8001880:	4a04      	ldr	r2, [pc, #16]	@ (8001894 <HAL_IncTick+0x24>)
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000010 	.word	0x20000010
 8001894:	20000604 	.word	0x20000604

08001898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return uwTick;
 800189c:	4b03      	ldr	r3, [pc, #12]	@ (80018ac <HAL_GetTick+0x14>)
 800189e:	681b      	ldr	r3, [r3, #0]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000604 	.word	0x20000604

080018b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b8:	f7ff ffee 	bl	8001898 <HAL_GetTick>
 80018bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018c8:	d005      	beq.n	80018d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ca:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <HAL_Delay+0x44>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4413      	add	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018d6:	bf00      	nop
 80018d8:	f7ff ffde 	bl	8001898 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d8f7      	bhi.n	80018d8 <HAL_Delay+0x28>
  {
  }
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000010 	.word	0x20000010

080018f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001908:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001914:	4013      	ands	r3, r2
 8001916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001920:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192a:	4a04      	ldr	r2, [pc, #16]	@ (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	60d3      	str	r3, [r2, #12]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001944:	4b04      	ldr	r3, [pc, #16]	@ (8001958 <__NVIC_GetPriorityGrouping+0x18>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	f003 0307 	and.w	r3, r3, #7
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	2b00      	cmp	r3, #0
 800196c:	db0b      	blt.n	8001986 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	f003 021f 	and.w	r2, r3, #31
 8001974:	4907      	ldr	r1, [pc, #28]	@ (8001994 <__NVIC_EnableIRQ+0x38>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	2001      	movs	r0, #1
 800197e:	fa00 f202 	lsl.w	r2, r0, r2
 8001982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000e100 	.word	0xe000e100

08001998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	db0a      	blt.n	80019c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	490c      	ldr	r1, [pc, #48]	@ (80019e4 <__NVIC_SetPriority+0x4c>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	0112      	lsls	r2, r2, #4
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	440b      	add	r3, r1
 80019bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c0:	e00a      	b.n	80019d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4908      	ldr	r1, [pc, #32]	@ (80019e8 <__NVIC_SetPriority+0x50>)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	3b04      	subs	r3, #4
 80019d0:	0112      	lsls	r2, r2, #4
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	440b      	add	r3, r1
 80019d6:	761a      	strb	r2, [r3, #24]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000e100 	.word	0xe000e100
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	@ 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f1c3 0307 	rsb	r3, r3, #7
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	bf28      	it	cs
 8001a0a:	2304      	movcs	r3, #4
 8001a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3304      	adds	r3, #4
 8001a12:	2b06      	cmp	r3, #6
 8001a14:	d902      	bls.n	8001a1c <NVIC_EncodePriority+0x30>
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3b03      	subs	r3, #3
 8001a1a:	e000      	b.n	8001a1e <NVIC_EncodePriority+0x32>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	401a      	ands	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	43d9      	mvns	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	4313      	orrs	r3, r2
         );
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3724      	adds	r7, #36	@ 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ff4c 	bl	80018f8 <__NVIC_SetPriorityGrouping>
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a7a:	f7ff ff61 	bl	8001940 <__NVIC_GetPriorityGrouping>
 8001a7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	68b9      	ldr	r1, [r7, #8]
 8001a84:	6978      	ldr	r0, [r7, #20]
 8001a86:	f7ff ffb1 	bl	80019ec <NVIC_EncodePriority>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a90:	4611      	mov	r1, r2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ff80 	bl	8001998 <__NVIC_SetPriority>
}
 8001a98:	bf00      	nop
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff ff54 	bl	800195c <__NVIC_EnableIRQ>
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00e      	b.n	8001aec <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	795b      	ldrb	r3, [r3, #5]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d105      	bne.n	8001ae4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff f9e8 	bl	8000eb4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e03b      	b.n	8001b7e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d106      	bne.n	8001b20 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff f9ec 	bl	8000ef8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2202      	movs	r2, #2
 8001b24:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b44:	f023 0107 	bic.w	r1, r3, #7
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b5e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	68d1      	ldr	r1, [r2, #12]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6812      	ldr	r2, [r2, #0]
 8001b6a:	430b      	orrs	r3, r1
 8001b6c:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b084      	sub	sp, #16
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d026      	beq.n	8001bf6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d021      	beq.n	8001bf6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bc0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bc6:	f043 0201 	orr.w	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2204      	movs	r2, #4
 8001bda:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f003 0320 	and.w	r3, r3, #32
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d026      	beq.n	8001c4e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d021      	beq.n	8001c4e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c18:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2220      	movs	r2, #32
 8001c20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c26:	f043 0202 	orr.w	r2, r3, #2
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2204      	movs	r2, #4
 8001c32:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d026      	beq.n	8001ca6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d021      	beq.n	8001ca6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c70:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2208      	movs	r2, #8
 8001c78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c7e:	f043 0204 	orr.w	r2, r3, #4
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2204      	movs	r2, #4
 8001c8a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d013      	beq.n	8001cd8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00e      	beq.n	8001cd8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cc8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2204      	movs	r2, #4
 8001cd0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f853 	bl	8001d7e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d024      	beq.n	8001d2c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d01f      	beq.n	8001d2c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001cfa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2202      	movs	r2, #2
 8001d02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 0310 	and.w	r3, r3, #16
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d01f      	beq.n	8001d76 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d01a      	beq.n	8001d76 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001d4e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2210      	movs	r2, #16
 8001d56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f80e 	bl	8001d92 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_DMA2D_ConfigLayer+0x20>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e079      	b.n	8001ebc <HAL_DMA2D_ConfigLayer+0x114>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	011b      	lsls	r3, r3, #4
 8001ddc:	3318      	adds	r3, #24
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	041b      	lsls	r3, r3, #16
 8001dee:	4313      	orrs	r3, r2
 8001df0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001df2:	4b35      	ldr	r3, [pc, #212]	@ (8001ec8 <HAL_DMA2D_ConfigLayer+0x120>)
 8001df4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b0a      	cmp	r3, #10
 8001dfc:	d003      	beq.n	8001e06 <HAL_DMA2D_ConfigLayer+0x5e>
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b09      	cmp	r3, #9
 8001e04:	d107      	bne.n	8001e16 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	e005      	b.n	8001e22 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	061b      	lsls	r3, r3, #24
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d120      	bne.n	8001e6a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	ea02 0103 	and.w	r1, r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b0a      	cmp	r3, #10
 8001e50:	d003      	beq.n	8001e5a <HAL_DMA2D_ConfigLayer+0xb2>
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b09      	cmp	r3, #9
 8001e58:	d127      	bne.n	8001eaa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001e66:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e68:	e01f      	b.n	8001eaa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	69da      	ldr	r2, [r3, #28]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	ea02 0103 	and.w	r1, r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b0a      	cmp	r3, #10
 8001e92:	d003      	beq.n	8001e9c <HAL_DMA2D_ConfigLayer+0xf4>
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b09      	cmp	r3, #9
 8001e9a:	d106      	bne.n	8001eaa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001ea8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	371c      	adds	r7, #28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	ff03000f 	.word	0xff03000f

08001ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	@ 0x24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	e177      	b.n	80021d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	f040 8166 	bne.w	80021d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d005      	beq.n	8001f1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d130      	bne.n	8001f80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	2203      	movs	r2, #3
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f54:	2201      	movs	r2, #1
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	f003 0201 	and.w	r2, r3, #1
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d017      	beq.n	8001fbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	2203      	movs	r2, #3
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d123      	bne.n	8002010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	08da      	lsrs	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3208      	adds	r2, #8
 8001fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	220f      	movs	r2, #15
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	08da      	lsrs	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3208      	adds	r2, #8
 800200a:	69b9      	ldr	r1, [r7, #24]
 800200c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2203      	movs	r2, #3
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0203 	and.w	r2, r3, #3
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80c0 	beq.w	80021d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	4b66      	ldr	r3, [pc, #408]	@ (80021f0 <HAL_GPIO_Init+0x324>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205a:	4a65      	ldr	r2, [pc, #404]	@ (80021f0 <HAL_GPIO_Init+0x324>)
 800205c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002060:	6453      	str	r3, [r2, #68]	@ 0x44
 8002062:	4b63      	ldr	r3, [pc, #396]	@ (80021f0 <HAL_GPIO_Init+0x324>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800206e:	4a61      	ldr	r2, [pc, #388]	@ (80021f4 <HAL_GPIO_Init+0x328>)
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	3302      	adds	r3, #2
 8002076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	220f      	movs	r2, #15
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a58      	ldr	r2, [pc, #352]	@ (80021f8 <HAL_GPIO_Init+0x32c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d037      	beq.n	800210a <HAL_GPIO_Init+0x23e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a57      	ldr	r2, [pc, #348]	@ (80021fc <HAL_GPIO_Init+0x330>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d031      	beq.n	8002106 <HAL_GPIO_Init+0x23a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a56      	ldr	r2, [pc, #344]	@ (8002200 <HAL_GPIO_Init+0x334>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d02b      	beq.n	8002102 <HAL_GPIO_Init+0x236>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a55      	ldr	r2, [pc, #340]	@ (8002204 <HAL_GPIO_Init+0x338>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d025      	beq.n	80020fe <HAL_GPIO_Init+0x232>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a54      	ldr	r2, [pc, #336]	@ (8002208 <HAL_GPIO_Init+0x33c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01f      	beq.n	80020fa <HAL_GPIO_Init+0x22e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a53      	ldr	r2, [pc, #332]	@ (800220c <HAL_GPIO_Init+0x340>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d019      	beq.n	80020f6 <HAL_GPIO_Init+0x22a>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a52      	ldr	r2, [pc, #328]	@ (8002210 <HAL_GPIO_Init+0x344>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d013      	beq.n	80020f2 <HAL_GPIO_Init+0x226>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a51      	ldr	r2, [pc, #324]	@ (8002214 <HAL_GPIO_Init+0x348>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d00d      	beq.n	80020ee <HAL_GPIO_Init+0x222>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a50      	ldr	r2, [pc, #320]	@ (8002218 <HAL_GPIO_Init+0x34c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d007      	beq.n	80020ea <HAL_GPIO_Init+0x21e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a4f      	ldr	r2, [pc, #316]	@ (800221c <HAL_GPIO_Init+0x350>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d101      	bne.n	80020e6 <HAL_GPIO_Init+0x21a>
 80020e2:	2309      	movs	r3, #9
 80020e4:	e012      	b.n	800210c <HAL_GPIO_Init+0x240>
 80020e6:	230a      	movs	r3, #10
 80020e8:	e010      	b.n	800210c <HAL_GPIO_Init+0x240>
 80020ea:	2308      	movs	r3, #8
 80020ec:	e00e      	b.n	800210c <HAL_GPIO_Init+0x240>
 80020ee:	2307      	movs	r3, #7
 80020f0:	e00c      	b.n	800210c <HAL_GPIO_Init+0x240>
 80020f2:	2306      	movs	r3, #6
 80020f4:	e00a      	b.n	800210c <HAL_GPIO_Init+0x240>
 80020f6:	2305      	movs	r3, #5
 80020f8:	e008      	b.n	800210c <HAL_GPIO_Init+0x240>
 80020fa:	2304      	movs	r3, #4
 80020fc:	e006      	b.n	800210c <HAL_GPIO_Init+0x240>
 80020fe:	2303      	movs	r3, #3
 8002100:	e004      	b.n	800210c <HAL_GPIO_Init+0x240>
 8002102:	2302      	movs	r3, #2
 8002104:	e002      	b.n	800210c <HAL_GPIO_Init+0x240>
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <HAL_GPIO_Init+0x240>
 800210a:	2300      	movs	r3, #0
 800210c:	69fa      	ldr	r2, [r7, #28]
 800210e:	f002 0203 	and.w	r2, r2, #3
 8002112:	0092      	lsls	r2, r2, #2
 8002114:	4093      	lsls	r3, r2
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800211c:	4935      	ldr	r1, [pc, #212]	@ (80021f4 <HAL_GPIO_Init+0x328>)
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	089b      	lsrs	r3, r3, #2
 8002122:	3302      	adds	r3, #2
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800212a:	4b3d      	ldr	r3, [pc, #244]	@ (8002220 <HAL_GPIO_Init+0x354>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800214e:	4a34      	ldr	r2, [pc, #208]	@ (8002220 <HAL_GPIO_Init+0x354>)
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002154:	4b32      	ldr	r3, [pc, #200]	@ (8002220 <HAL_GPIO_Init+0x354>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002178:	4a29      	ldr	r2, [pc, #164]	@ (8002220 <HAL_GPIO_Init+0x354>)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800217e:	4b28      	ldr	r3, [pc, #160]	@ (8002220 <HAL_GPIO_Init+0x354>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	43db      	mvns	r3, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4013      	ands	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002220 <HAL_GPIO_Init+0x354>)
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002220 <HAL_GPIO_Init+0x354>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021cc:	4a14      	ldr	r2, [pc, #80]	@ (8002220 <HAL_GPIO_Init+0x354>)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3301      	adds	r3, #1
 80021d6:	61fb      	str	r3, [r7, #28]
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	2b0f      	cmp	r3, #15
 80021dc:	f67f ae84 	bls.w	8001ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	3724      	adds	r7, #36	@ 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40013800 	.word	0x40013800
 80021f8:	40020000 	.word	0x40020000
 80021fc:	40020400 	.word	0x40020400
 8002200:	40020800 	.word	0x40020800
 8002204:	40020c00 	.word	0x40020c00
 8002208:	40021000 	.word	0x40021000
 800220c:	40021400 	.word	0x40021400
 8002210:	40021800 	.word	0x40021800
 8002214:	40021c00 	.word	0x40021c00
 8002218:	40022000 	.word	0x40022000
 800221c:	40022400 	.word	0x40022400
 8002220:	40013c00 	.word	0x40013c00

08002224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	807b      	strh	r3, [r7, #2]
 8002230:	4613      	mov	r3, r2
 8002232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002234:	787b      	ldrb	r3, [r7, #1]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002240:	e003      	b.n	800224a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002242:	887b      	ldrh	r3, [r7, #2]
 8002244:	041a      	lsls	r2, r3, #16
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	619a      	str	r2, [r3, #24]
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002256:	b480      	push	{r7}
 8002258:	b085      	sub	sp, #20
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	460b      	mov	r3, r1
 8002260:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002268:	887a      	ldrh	r2, [r7, #2]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4013      	ands	r3, r2
 800226e:	041a      	lsls	r2, r3, #16
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	43d9      	mvns	r1, r3
 8002274:	887b      	ldrh	r3, [r7, #2]
 8002276:	400b      	ands	r3, r1
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	619a      	str	r2, [r3, #24]
}
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af02      	add	r7, sp, #8
 8002290:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e059      	b.n	8002350 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d106      	bne.n	80022bc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f00a fe30 	bl	800cf1c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2203      	movs	r2, #3
 80022c0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022ca:	d102      	bne.n	80022d2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f004 ff1d 	bl	8007116 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	7c1a      	ldrb	r2, [r3, #16]
 80022e4:	f88d 2000 	strb.w	r2, [sp]
 80022e8:	3304      	adds	r3, #4
 80022ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ec:	f004 fe9e 	bl	800702c <USB_CoreInit>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d005      	beq.n	8002302 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2202      	movs	r2, #2
 80022fa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e026      	b.n	8002350 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2101      	movs	r1, #1
 8002308:	4618      	mov	r0, r3
 800230a:	f004 ff15 	bl	8007138 <USB_SetCurrentMode>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2202      	movs	r2, #2
 8002318:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e017      	b.n	8002350 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	7c1a      	ldrb	r2, [r3, #16]
 8002328:	f88d 2000 	strb.w	r2, [sp]
 800232c:	3304      	adds	r3, #4
 800232e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002330:	f005 f8b8 	bl	80074a4 <USB_HostInit>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2202      	movs	r2, #2
 800233e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e004      	b.n	8002350 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002358:	b590      	push	{r4, r7, lr}
 800235a:	b08b      	sub	sp, #44	@ 0x2c
 800235c:	af04      	add	r7, sp, #16
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	4608      	mov	r0, r1
 8002362:	4611      	mov	r1, r2
 8002364:	461a      	mov	r2, r3
 8002366:	4603      	mov	r3, r0
 8002368:	70fb      	strb	r3, [r7, #3]
 800236a:	460b      	mov	r3, r1
 800236c:	70bb      	strb	r3, [r7, #2]
 800236e:	4613      	mov	r3, r2
 8002370:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002372:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002374:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_HCD_HC_Init+0x2c>
 8002380:	2302      	movs	r3, #2
 8002382:	e09d      	b.n	80024c0 <HAL_HCD_HC_Init+0x168>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	3319      	adds	r3, #25
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	3314      	adds	r3, #20
 80023b0:	787a      	ldrb	r2, [r7, #1]
 80023b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	3315      	adds	r3, #21
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	3326      	adds	r3, #38	@ 0x26
 80023d8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80023dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80023de:	78fa      	ldrb	r2, [r7, #3]
 80023e0:	78bb      	ldrb	r3, [r7, #2]
 80023e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023e6:	b2d8      	uxtb	r0, r3
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	1a9b      	subs	r3, r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	3316      	adds	r3, #22
 80023f6:	4602      	mov	r2, r0
 80023f8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80023fa:	78fb      	ldrb	r3, [r7, #3]
 80023fc:	4619      	mov	r1, r3
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fbc8 	bl	8002b94 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002404:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002408:	2b00      	cmp	r3, #0
 800240a:	da0a      	bge.n	8002422 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	3317      	adds	r3, #23
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
 8002420:	e009      	b.n	8002436 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002422:	78fa      	ldrb	r2, [r7, #3]
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	3317      	adds	r3, #23
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f005 f996 	bl	800776c <USB_GetHostSpeed>
 8002440:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002442:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002446:	2b01      	cmp	r3, #1
 8002448:	d10b      	bne.n	8002462 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800244a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800244e:	2b01      	cmp	r3, #1
 8002450:	d107      	bne.n	8002462 <HAL_HCD_HC_Init+0x10a>
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d104      	bne.n	8002462 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	2bbc      	cmp	r3, #188	@ 0xbc
 800245c:	d901      	bls.n	8002462 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800245e:	23bc      	movs	r3, #188	@ 0xbc
 8002460:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002462:	78fa      	ldrb	r2, [r7, #3]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	1a9b      	subs	r3, r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	3318      	adds	r3, #24
 8002472:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002476:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002478:	78fa      	ldrb	r2, [r7, #3]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	b298      	uxth	r0, r3
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	1a9b      	subs	r3, r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	3328      	adds	r3, #40	@ 0x28
 800248c:	4602      	mov	r2, r0
 800248e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	b29b      	uxth	r3, r3
 8002498:	787c      	ldrb	r4, [r7, #1]
 800249a:	78ba      	ldrb	r2, [r7, #2]
 800249c:	78f9      	ldrb	r1, [r7, #3]
 800249e:	9302      	str	r3, [sp, #8]
 80024a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	4623      	mov	r3, r4
 80024ae:	f005 f985 	bl	80077bc <USB_HC_Init>
 80024b2:	4603      	mov	r3, r0
 80024b4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80024be:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	371c      	adds	r7, #28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd90      	pop	{r4, r7, pc}

080024c8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_HCD_HC_Halt+0x1e>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e00f      	b.n	8002506 <HAL_HCD_HC_Halt+0x3e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	78fa      	ldrb	r2, [r7, #3]
 80024f4:	4611      	mov	r1, r2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f005 fd17 	bl	8007f2a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002504:	7bfb      	ldrb	r3, [r7, #15]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	4608      	mov	r0, r1
 800251a:	4611      	mov	r1, r2
 800251c:	461a      	mov	r2, r3
 800251e:	4603      	mov	r3, r0
 8002520:	70fb      	strb	r3, [r7, #3]
 8002522:	460b      	mov	r3, r1
 8002524:	70bb      	strb	r3, [r7, #2]
 8002526:	4613      	mov	r3, r2
 8002528:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800252a:	78fa      	ldrb	r2, [r7, #3]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	1a9b      	subs	r3, r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	3317      	adds	r3, #23
 800253a:	78ba      	ldrb	r2, [r7, #2]
 800253c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800253e:	78fa      	ldrb	r2, [r7, #3]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	3326      	adds	r3, #38	@ 0x26
 800254e:	787a      	ldrb	r2, [r7, #1]
 8002550:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002552:	7c3b      	ldrb	r3, [r7, #16]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d114      	bne.n	8002582 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	332a      	adds	r3, #42	@ 0x2a
 8002568:	2203      	movs	r2, #3
 800256a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	3319      	adds	r3, #25
 800257c:	7f3a      	ldrb	r2, [r7, #28]
 800257e:	701a      	strb	r2, [r3, #0]
 8002580:	e009      	b.n	8002596 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002582:	78fa      	ldrb	r2, [r7, #3]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	1a9b      	subs	r3, r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	332a      	adds	r3, #42	@ 0x2a
 8002592:	2202      	movs	r2, #2
 8002594:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002596:	787b      	ldrb	r3, [r7, #1]
 8002598:	2b03      	cmp	r3, #3
 800259a:	f200 8102 	bhi.w	80027a2 <HAL_HCD_HC_SubmitRequest+0x292>
 800259e:	a201      	add	r2, pc, #4	@ (adr r2, 80025a4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80025a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a4:	080025b5 	.word	0x080025b5
 80025a8:	0800278d 	.word	0x0800278d
 80025ac:	08002679 	.word	0x08002679
 80025b0:	08002703 	.word	0x08002703
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80025b4:	7c3b      	ldrb	r3, [r7, #16]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	f040 80f5 	bne.w	80027a6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80025bc:	78bb      	ldrb	r3, [r7, #2]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d12d      	bne.n	800261e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80025c2:	8b3b      	ldrh	r3, [r7, #24]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d109      	bne.n	80025dc <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	333d      	adds	r3, #61	@ 0x3d
 80025d8:	2201      	movs	r2, #1
 80025da:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80025dc:	78fa      	ldrb	r2, [r7, #3]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	333d      	adds	r3, #61	@ 0x3d
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10a      	bne.n	8002608 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025f2:	78fa      	ldrb	r2, [r7, #3]
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	1a9b      	subs	r3, r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	332a      	adds	r3, #42	@ 0x2a
 8002602:	2200      	movs	r2, #0
 8002604:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002606:	e0ce      	b.n	80027a6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002608:	78fa      	ldrb	r2, [r7, #3]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	332a      	adds	r3, #42	@ 0x2a
 8002618:	2202      	movs	r2, #2
 800261a:	701a      	strb	r2, [r3, #0]
      break;
 800261c:	e0c3      	b.n	80027a6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800261e:	78fa      	ldrb	r2, [r7, #3]
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	1a9b      	subs	r3, r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	331a      	adds	r3, #26
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b01      	cmp	r3, #1
 8002632:	f040 80b8 	bne.w	80027a6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002636:	78fa      	ldrb	r2, [r7, #3]
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	1a9b      	subs	r3, r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	333c      	adds	r3, #60	@ 0x3c
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10a      	bne.n	8002662 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	332a      	adds	r3, #42	@ 0x2a
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
      break;
 8002660:	e0a1      	b.n	80027a6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002662:	78fa      	ldrb	r2, [r7, #3]
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	1a9b      	subs	r3, r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	332a      	adds	r3, #42	@ 0x2a
 8002672:	2202      	movs	r2, #2
 8002674:	701a      	strb	r2, [r3, #0]
      break;
 8002676:	e096      	b.n	80027a6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002678:	78bb      	ldrb	r3, [r7, #2]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d120      	bne.n	80026c0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800267e:	78fa      	ldrb	r2, [r7, #3]
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	1a9b      	subs	r3, r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	333d      	adds	r3, #61	@ 0x3d
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10a      	bne.n	80026aa <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002694:	78fa      	ldrb	r2, [r7, #3]
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	1a9b      	subs	r3, r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	332a      	adds	r3, #42	@ 0x2a
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80026a8:	e07e      	b.n	80027a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026aa:	78fa      	ldrb	r2, [r7, #3]
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	1a9b      	subs	r3, r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	332a      	adds	r3, #42	@ 0x2a
 80026ba:	2202      	movs	r2, #2
 80026bc:	701a      	strb	r2, [r3, #0]
      break;
 80026be:	e073      	b.n	80027a8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80026c0:	78fa      	ldrb	r2, [r7, #3]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	1a9b      	subs	r3, r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	333c      	adds	r3, #60	@ 0x3c
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10a      	bne.n	80026ec <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	332a      	adds	r3, #42	@ 0x2a
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
      break;
 80026ea:	e05d      	b.n	80027a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	332a      	adds	r3, #42	@ 0x2a
 80026fc:	2202      	movs	r2, #2
 80026fe:	701a      	strb	r2, [r3, #0]
      break;
 8002700:	e052      	b.n	80027a8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002702:	78bb      	ldrb	r3, [r7, #2]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d120      	bne.n	800274a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002708:	78fa      	ldrb	r2, [r7, #3]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	1a9b      	subs	r3, r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	333d      	adds	r3, #61	@ 0x3d
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10a      	bne.n	8002734 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800271e:	78fa      	ldrb	r2, [r7, #3]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	1a9b      	subs	r3, r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	332a      	adds	r3, #42	@ 0x2a
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002732:	e039      	b.n	80027a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	1a9b      	subs	r3, r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	332a      	adds	r3, #42	@ 0x2a
 8002744:	2202      	movs	r2, #2
 8002746:	701a      	strb	r2, [r3, #0]
      break;
 8002748:	e02e      	b.n	80027a8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800274a:	78fa      	ldrb	r2, [r7, #3]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	1a9b      	subs	r3, r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	333c      	adds	r3, #60	@ 0x3c
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10a      	bne.n	8002776 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	332a      	adds	r3, #42	@ 0x2a
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
      break;
 8002774:	e018      	b.n	80027a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002776:	78fa      	ldrb	r2, [r7, #3]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	332a      	adds	r3, #42	@ 0x2a
 8002786:	2202      	movs	r2, #2
 8002788:	701a      	strb	r2, [r3, #0]
      break;
 800278a:	e00d      	b.n	80027a8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800278c:	78fa      	ldrb	r2, [r7, #3]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	332a      	adds	r3, #42	@ 0x2a
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
      break;
 80027a0:	e002      	b.n	80027a8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80027a2:	bf00      	nop
 80027a4:	e000      	b.n	80027a8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80027a6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	332c      	adds	r3, #44	@ 0x2c
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80027bc:	78fa      	ldrb	r2, [r7, #3]
 80027be:	8b39      	ldrh	r1, [r7, #24]
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	1a9b      	subs	r3, r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4403      	add	r3, r0
 80027cc:	3334      	adds	r3, #52	@ 0x34
 80027ce:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80027d0:	78fa      	ldrb	r2, [r7, #3]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	334c      	adds	r3, #76	@ 0x4c
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80027e4:	78fa      	ldrb	r2, [r7, #3]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	1a9b      	subs	r3, r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	3338      	adds	r3, #56	@ 0x38
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80027f8:	78fa      	ldrb	r2, [r7, #3]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	1a9b      	subs	r3, r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	3315      	adds	r3, #21
 8002808:	78fa      	ldrb	r2, [r7, #3]
 800280a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	1a9b      	subs	r3, r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	334d      	adds	r3, #77	@ 0x4d
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	78fa      	ldrb	r2, [r7, #3]
 8002826:	4613      	mov	r3, r2
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	1a9b      	subs	r3, r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	3310      	adds	r3, #16
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	4413      	add	r3, r2
 8002834:	1d19      	adds	r1, r3, #4
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	799b      	ldrb	r3, [r3, #6]
 800283a:	461a      	mov	r2, r3
 800283c:	f005 f8ea 	bl	8007a14 <USB_HC_StartXfer>
 8002840:	4603      	mov	r3, r0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop

0800284c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f004 fdde 	bl	8007424 <USB_GetMode>
 8002868:	4603      	mov	r3, r0
 800286a:	2b01      	cmp	r3, #1
 800286c:	f040 80fb 	bne.w	8002a66 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f004 fda1 	bl	80073bc <USB_ReadInterrupts>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 80f1 	beq.w	8002a64 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f004 fd98 	bl	80073bc <USB_ReadInterrupts>
 800288c:	4603      	mov	r3, r0
 800288e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002892:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002896:	d104      	bne.n	80028a2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80028a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f004 fd88 	bl	80073bc <USB_ReadInterrupts>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028b6:	d104      	bne.n	80028c2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80028c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f004 fd78 	bl	80073bc <USB_ReadInterrupts>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028d6:	d104      	bne.n	80028e2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80028e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f004 fd68 	bl	80073bc <USB_ReadInterrupts>
 80028ec:	4603      	mov	r3, r0
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d103      	bne.n	80028fe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2202      	movs	r2, #2
 80028fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f004 fd5a 	bl	80073bc <USB_ReadInterrupts>
 8002908:	4603      	mov	r3, r0
 800290a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800290e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002912:	d120      	bne.n	8002956 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800291c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d113      	bne.n	8002956 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800292e:	2110      	movs	r1, #16
 8002930:	6938      	ldr	r0, [r7, #16]
 8002932:	f004 fc4d 	bl	80071d0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002936:	6938      	ldr	r0, [r7, #16]
 8002938:	f004 fc7c 	bl	8007234 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	7a5b      	ldrb	r3, [r3, #9]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d105      	bne.n	8002950 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2101      	movs	r1, #1
 800294a:	4618      	mov	r0, r3
 800294c:	f004 fe6e 	bl	800762c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f00a fb5d 	bl	800d010 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f004 fd2e 	bl	80073bc <USB_ReadInterrupts>
 8002960:	4603      	mov	r3, r0
 8002962:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002966:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800296a:	d102      	bne.n	8002972 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f001 fd33 	bl	80043d8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f004 fd20 	bl	80073bc <USB_ReadInterrupts>
 800297c:	4603      	mov	r3, r0
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b08      	cmp	r3, #8
 8002984:	d106      	bne.n	8002994 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f00a fb26 	bl	800cfd8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2208      	movs	r2, #8
 8002992:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f004 fd0f 	bl	80073bc <USB_ReadInterrupts>
 800299e:	4603      	mov	r3, r0
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80029a8:	d139      	bne.n	8002a1e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f005 faaa 	bl	8007f08 <USB_HC_ReadInterrupt>
 80029b4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	e025      	b.n	8002a08 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	fa22 f303 	lsr.w	r3, r2, r3
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d018      	beq.n	8002a02 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029e6:	d106      	bne.n	80029f6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	4619      	mov	r1, r3
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f905 	bl	8002bfe <HCD_HC_IN_IRQHandler>
 80029f4:	e005      	b.n	8002a02 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	4619      	mov	r1, r3
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 ff67 	bl	80038d0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	3301      	adds	r3, #1
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	795b      	ldrb	r3, [r3, #5]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d3d3      	bcc.n	80029bc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f004 fcca 	bl	80073bc <USB_ReadInterrupts>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f003 0310 	and.w	r3, r3, #16
 8002a2e:	2b10      	cmp	r3, #16
 8002a30:	d101      	bne.n	8002a36 <HAL_HCD_IRQHandler+0x1ea>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <HAL_HCD_IRQHandler+0x1ec>
 8002a36:	2300      	movs	r3, #0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d014      	beq.n	8002a66 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699a      	ldr	r2, [r3, #24]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0210 	bic.w	r2, r2, #16
 8002a4a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f001 fbe4 	bl	800421a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	699a      	ldr	r2, [r3, #24]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 0210 	orr.w	r2, r2, #16
 8002a60:	619a      	str	r2, [r3, #24]
 8002a62:	e000      	b.n	8002a66 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002a64:	bf00      	nop
    }
  }
}
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_HCD_Start+0x16>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e013      	b.n	8002aaa <HAL_HCD_Start+0x3e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2101      	movs	r1, #1
 8002a90:	4618      	mov	r0, r3
 8002a92:	f004 fe32 	bl	80076fa <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f004 fb2a 	bl	80070f4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_HCD_Stop+0x16>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e00d      	b.n	8002ae4 <HAL_HCD_Stop+0x32>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f005 fb85 	bl	80081e4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f004 fdd4 	bl	80076a6 <USB_ResetPort>
 8002afe:	4603      	mov	r3, r0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	334c      	adds	r3, #76	@ 0x4c
 8002b24:	781b      	ldrb	r3, [r3, #0]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002b3e:	78fa      	ldrb	r2, [r7, #3]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	1a9b      	subs	r3, r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	3338      	adds	r3, #56	@ 0x38
 8002b4e:	681b      	ldr	r3, [r3, #0]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f004 fe16 	bl	800779a <USB_GetCurrentFrame>
 8002b6e:	4603      	mov	r3, r0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f004 fdf1 	bl	800776c <USB_GetHostSpeed>
 8002b8a:	4603      	mov	r3, r0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	331a      	adds	r3, #26
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002bb4:	78fa      	ldrb	r2, [r7, #3]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	1a9b      	subs	r3, r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	331b      	adds	r3, #27
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002bc8:	78fa      	ldrb	r2, [r7, #3]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3325      	adds	r3, #37	@ 0x25
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	3324      	adds	r3, #36	@ 0x24
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b086      	sub	sp, #24
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	460b      	mov	r3, r1
 8002c08:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	78fa      	ldrb	r2, [r7, #3]
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f004 fbe0 	bl	80073e2 <USB_ReadChInterrupts>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d11a      	bne.n	8002c62 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002c2c:	78fb      	ldrb	r3, [r7, #3]
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2304      	movs	r3, #4
 8002c3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002c3e:	78fa      	ldrb	r2, [r7, #3]
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	1a9b      	subs	r3, r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	334d      	adds	r3, #77	@ 0x4d
 8002c4e:	2207      	movs	r2, #7
 8002c50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f005 f965 	bl	8007f2a <USB_HC_Halt>
 8002c60:	e09e      	b.n	8002da0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f004 fbb9 	bl	80073e2 <USB_ReadChInterrupts>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c7a:	d11b      	bne.n	8002cb4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c88:	461a      	mov	r2, r3
 8002c8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002c90:	78fa      	ldrb	r2, [r7, #3]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	334d      	adds	r3, #77	@ 0x4d
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	4611      	mov	r1, r2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f005 f93c 	bl	8007f2a <USB_HC_Halt>
 8002cb2:	e075      	b.n	8002da0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	78fa      	ldrb	r2, [r7, #3]
 8002cba:	4611      	mov	r1, r2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f004 fb90 	bl	80073e2 <USB_ReadChInterrupts>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d11a      	bne.n	8002d02 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cd8:	461a      	mov	r2, r3
 8002cda:	2308      	movs	r3, #8
 8002cdc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002cde:	78fa      	ldrb	r2, [r7, #3]
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	1a9b      	subs	r3, r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	334d      	adds	r3, #77	@ 0x4d
 8002cee:	2206      	movs	r2, #6
 8002cf0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f005 f915 	bl	8007f2a <USB_HC_Halt>
 8002d00:	e04e      	b.n	8002da0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f004 fb69 	bl	80073e2 <USB_ReadChInterrupts>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d1a:	d11b      	bne.n	8002d54 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	015a      	lsls	r2, r3, #5
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	334d      	adds	r3, #77	@ 0x4d
 8002d40:	2209      	movs	r2, #9
 8002d42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	78fa      	ldrb	r2, [r7, #3]
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f005 f8ec 	bl	8007f2a <USB_HC_Halt>
 8002d52:	e025      	b.n	8002da0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f004 fb40 	bl	80073e2 <USB_ReadChInterrupts>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d68:	2b80      	cmp	r3, #128	@ 0x80
 8002d6a:	d119      	bne.n	8002da0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d78:	461a      	mov	r2, r3
 8002d7a:	2380      	movs	r3, #128	@ 0x80
 8002d7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	334d      	adds	r3, #77	@ 0x4d
 8002d8e:	2207      	movs	r2, #7
 8002d90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	78fa      	ldrb	r2, [r7, #3]
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f005 f8c5 	bl	8007f2a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	78fa      	ldrb	r2, [r7, #3]
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f004 fb1a 	bl	80073e2 <USB_ReadChInterrupts>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002db8:	d112      	bne.n	8002de0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f005 f8b1 	bl	8007f2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002dda:	6093      	str	r3, [r2, #8]
 8002ddc:	f000 bd75 	b.w	80038ca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	78fa      	ldrb	r2, [r7, #3]
 8002de6:	4611      	mov	r1, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f004 fafa 	bl	80073e2 <USB_ReadChInterrupts>
 8002dee:	4603      	mov	r3, r0
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	f040 8128 	bne.w	800304a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e06:	461a      	mov	r2, r3
 8002e08:	2320      	movs	r3, #32
 8002e0a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	331b      	adds	r3, #27
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d119      	bne.n	8002e56 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	331b      	adds	r3, #27
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	0151      	lsls	r1, r2, #5
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	440a      	add	r2, r1
 8002e4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e54:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	799b      	ldrb	r3, [r3, #6]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d01b      	beq.n	8002e96 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002e5e:	78fa      	ldrb	r2, [r7, #3]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	1a9b      	subs	r3, r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3330      	adds	r3, #48	@ 0x30
 8002e6e:	6819      	ldr	r1, [r3, #0]
 8002e70:	78fb      	ldrb	r3, [r7, #3]
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e82:	78fa      	ldrb	r2, [r7, #3]
 8002e84:	1ac9      	subs	r1, r1, r3
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	1a9b      	subs	r3, r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4403      	add	r3, r0
 8002e92:	3338      	adds	r3, #56	@ 0x38
 8002e94:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	1a9b      	subs	r3, r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	334d      	adds	r3, #77	@ 0x4d
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002eaa:	78fa      	ldrb	r2, [r7, #3]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	011b      	lsls	r3, r3, #4
 8002eb2:	1a9b      	subs	r3, r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	3344      	adds	r3, #68	@ 0x44
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002ebe:	78fb      	ldrb	r3, [r7, #3]
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eca:	461a      	mov	r2, r3
 8002ecc:	2301      	movs	r3, #1
 8002ece:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	3326      	adds	r3, #38	@ 0x26
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ee6:	78fa      	ldrb	r2, [r7, #3]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	3326      	adds	r3, #38	@ 0x26
 8002ef6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d110      	bne.n	8002f1e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f005 f810 	bl	8007f2a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f16:	461a      	mov	r2, r3
 8002f18:	2310      	movs	r3, #16
 8002f1a:	6093      	str	r3, [r2, #8]
 8002f1c:	e03d      	b.n	8002f9a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	1a9b      	subs	r3, r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	3326      	adds	r3, #38	@ 0x26
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d00a      	beq.n	8002f4a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002f34:	78fa      	ldrb	r2, [r7, #3]
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	1a9b      	subs	r3, r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	3326      	adds	r3, #38	@ 0x26
 8002f44:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d127      	bne.n	8002f9a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002f4a:	78fb      	ldrb	r3, [r7, #3]
 8002f4c:	015a      	lsls	r2, r3, #5
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	78fa      	ldrb	r2, [r7, #3]
 8002f5a:	0151      	lsls	r1, r2, #5
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	440a      	add	r2, r1
 8002f60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f64:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002f68:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002f6a:	78fa      	ldrb	r2, [r7, #3]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	1a9b      	subs	r3, r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	334c      	adds	r3, #76	@ 0x4c
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	334c      	adds	r3, #76	@ 0x4c
 8002f8e:	781a      	ldrb	r2, [r3, #0]
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	4619      	mov	r1, r3
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f00a f849 	bl	800d02c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	799b      	ldrb	r3, [r3, #6]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d13b      	bne.n	800301a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	3338      	adds	r3, #56	@ 0x38
 8002fb2:	6819      	ldr	r1, [r3, #0]
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4403      	add	r3, r0
 8002fc2:	3328      	adds	r3, #40	@ 0x28
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	440b      	add	r3, r1
 8002fc8:	1e59      	subs	r1, r3, #1
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4403      	add	r3, r0
 8002fd8:	3328      	adds	r3, #40	@ 0x28
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 8470 	beq.w	80038ca <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	333c      	adds	r3, #60	@ 0x3c
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	78fa      	ldrb	r2, [r7, #3]
 8002ffe:	f083 0301 	eor.w	r3, r3, #1
 8003002:	b2d8      	uxtb	r0, r3
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	333c      	adds	r3, #60	@ 0x3c
 8003012:	4602      	mov	r2, r0
 8003014:	701a      	strb	r2, [r3, #0]
 8003016:	f000 bc58 	b.w	80038ca <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800301a:	78fa      	ldrb	r2, [r7, #3]
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	1a9b      	subs	r3, r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	333c      	adds	r3, #60	@ 0x3c
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	f083 0301 	eor.w	r3, r3, #1
 8003032:	b2d8      	uxtb	r0, r3
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	333c      	adds	r3, #60	@ 0x3c
 8003042:	4602      	mov	r2, r0
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	f000 bc40 	b.w	80038ca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	4611      	mov	r1, r2
 8003052:	4618      	mov	r0, r3
 8003054:	f004 f9c5 	bl	80073e2 <USB_ReadChInterrupts>
 8003058:	4603      	mov	r3, r0
 800305a:	f003 0320 	and.w	r3, r3, #32
 800305e:	2b20      	cmp	r3, #32
 8003060:	d131      	bne.n	80030c6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003062:	78fb      	ldrb	r3, [r7, #3]
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4413      	add	r3, r2
 800306a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800306e:	461a      	mov	r2, r3
 8003070:	2320      	movs	r3, #32
 8003072:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003074:	78fa      	ldrb	r2, [r7, #3]
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	1a9b      	subs	r3, r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	331a      	adds	r3, #26
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b01      	cmp	r3, #1
 8003088:	f040 841f 	bne.w	80038ca <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800308c:	78fa      	ldrb	r2, [r7, #3]
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	1a9b      	subs	r3, r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	331b      	adds	r3, #27
 800309c:	2201      	movs	r2, #1
 800309e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	334d      	adds	r3, #77	@ 0x4d
 80030b0:	2203      	movs	r2, #3
 80030b2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	78fa      	ldrb	r2, [r7, #3]
 80030ba:	4611      	mov	r1, r2
 80030bc:	4618      	mov	r0, r3
 80030be:	f004 ff34 	bl	8007f2a <USB_HC_Halt>
 80030c2:	f000 bc02 	b.w	80038ca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	4611      	mov	r1, r2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f004 f987 	bl	80073e2 <USB_ReadChInterrupts>
 80030d4:	4603      	mov	r3, r0
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b02      	cmp	r3, #2
 80030dc:	f040 8305 	bne.w	80036ea <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ec:	461a      	mov	r2, r3
 80030ee:	2302      	movs	r3, #2
 80030f0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	334d      	adds	r3, #77	@ 0x4d
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d114      	bne.n	8003132 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003108:	78fa      	ldrb	r2, [r7, #3]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	1a9b      	subs	r3, r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	334d      	adds	r3, #77	@ 0x4d
 8003118:	2202      	movs	r2, #2
 800311a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800311c:	78fa      	ldrb	r2, [r7, #3]
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	1a9b      	subs	r3, r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	334c      	adds	r3, #76	@ 0x4c
 800312c:	2201      	movs	r2, #1
 800312e:	701a      	strb	r2, [r3, #0]
 8003130:	e2cc      	b.n	80036cc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003132:	78fa      	ldrb	r2, [r7, #3]
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	1a9b      	subs	r3, r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	334d      	adds	r3, #77	@ 0x4d
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b06      	cmp	r3, #6
 8003146:	d114      	bne.n	8003172 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003148:	78fa      	ldrb	r2, [r7, #3]
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	1a9b      	subs	r3, r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	334d      	adds	r3, #77	@ 0x4d
 8003158:	2202      	movs	r2, #2
 800315a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800315c:	78fa      	ldrb	r2, [r7, #3]
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	334c      	adds	r3, #76	@ 0x4c
 800316c:	2205      	movs	r2, #5
 800316e:	701a      	strb	r2, [r3, #0]
 8003170:	e2ac      	b.n	80036cc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003172:	78fa      	ldrb	r2, [r7, #3]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	334d      	adds	r3, #77	@ 0x4d
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b07      	cmp	r3, #7
 8003186:	d00b      	beq.n	80031a0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	334d      	adds	r3, #77	@ 0x4d
 8003198:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800319a:	2b09      	cmp	r3, #9
 800319c:	f040 80a6 	bne.w	80032ec <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	334d      	adds	r3, #77	@ 0x4d
 80031b0:	2202      	movs	r2, #2
 80031b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80031b4:	78fa      	ldrb	r2, [r7, #3]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	3344      	adds	r3, #68	@ 0x44
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	1c59      	adds	r1, r3, #1
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4403      	add	r3, r0
 80031d4:	3344      	adds	r3, #68	@ 0x44
 80031d6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	3344      	adds	r3, #68	@ 0x44
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d943      	bls.n	8003276 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	3344      	adds	r3, #68	@ 0x44
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	331a      	adds	r3, #26
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d123      	bne.n	8003260 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	331b      	adds	r3, #27
 8003228:	2200      	movs	r2, #0
 800322a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	331c      	adds	r3, #28
 800323c:	2200      	movs	r2, #0
 800323e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4413      	add	r3, r2
 8003248:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	78fa      	ldrb	r2, [r7, #3]
 8003250:	0151      	lsls	r1, r2, #5
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	440a      	add	r2, r1
 8003256:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800325a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800325e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003260:	78fa      	ldrb	r2, [r7, #3]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	334c      	adds	r3, #76	@ 0x4c
 8003270:	2204      	movs	r2, #4
 8003272:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003274:	e229      	b.n	80036ca <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003276:	78fa      	ldrb	r2, [r7, #3]
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	334c      	adds	r3, #76	@ 0x4c
 8003286:	2202      	movs	r2, #2
 8003288:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	3326      	adds	r3, #38	@ 0x26
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00b      	beq.n	80032b8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	1a9b      	subs	r3, r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	3326      	adds	r3, #38	@ 0x26
 80032b0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	f040 8209 	bne.w	80036ca <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80032ce:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032d6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80032d8:	78fb      	ldrb	r3, [r7, #3]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032e4:	461a      	mov	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032ea:	e1ee      	b.n	80036ca <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	334d      	adds	r3, #77	@ 0x4d
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b05      	cmp	r3, #5
 8003300:	f040 80c8 	bne.w	8003494 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003304:	78fa      	ldrb	r2, [r7, #3]
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	334d      	adds	r3, #77	@ 0x4d
 8003314:	2202      	movs	r2, #2
 8003316:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003318:	78fa      	ldrb	r2, [r7, #3]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	1a9b      	subs	r3, r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	331b      	adds	r3, #27
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b01      	cmp	r3, #1
 800332c:	f040 81ce 	bne.w	80036cc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003330:	78fa      	ldrb	r2, [r7, #3]
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	3326      	adds	r3, #38	@ 0x26
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b03      	cmp	r3, #3
 8003344:	d16b      	bne.n	800341e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003346:	78fa      	ldrb	r2, [r7, #3]
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	1a9b      	subs	r3, r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	3348      	adds	r3, #72	@ 0x48
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	1c59      	adds	r1, r3, #1
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4403      	add	r3, r0
 8003366:	3348      	adds	r3, #72	@ 0x48
 8003368:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800336a:	78fa      	ldrb	r2, [r7, #3]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	3348      	adds	r3, #72	@ 0x48
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b02      	cmp	r3, #2
 800337e:	d943      	bls.n	8003408 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003380:	78fa      	ldrb	r2, [r7, #3]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	1a9b      	subs	r3, r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	3348      	adds	r3, #72	@ 0x48
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003394:	78fa      	ldrb	r2, [r7, #3]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	331b      	adds	r3, #27
 80033a4:	2200      	movs	r2, #0
 80033a6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80033a8:	78fa      	ldrb	r2, [r7, #3]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	3344      	adds	r3, #68	@ 0x44
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d809      	bhi.n	80033d2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80033be:	78fa      	ldrb	r2, [r7, #3]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	440b      	add	r3, r1
 80033cc:	331c      	adds	r3, #28
 80033ce:	2201      	movs	r2, #1
 80033d0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80033d2:	78fb      	ldrb	r3, [r7, #3]
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	78fa      	ldrb	r2, [r7, #3]
 80033e2:	0151      	lsls	r1, r2, #5
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	440a      	add	r2, r1
 80033e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033f0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80033f2:	78fa      	ldrb	r2, [r7, #3]
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	334c      	adds	r3, #76	@ 0x4c
 8003402:	2204      	movs	r2, #4
 8003404:	701a      	strb	r2, [r3, #0]
 8003406:	e014      	b.n	8003432 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003408:	78fa      	ldrb	r2, [r7, #3]
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	1a9b      	subs	r3, r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	334c      	adds	r3, #76	@ 0x4c
 8003418:	2202      	movs	r2, #2
 800341a:	701a      	strb	r2, [r3, #0]
 800341c:	e009      	b.n	8003432 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	334c      	adds	r3, #76	@ 0x4c
 800342e:	2202      	movs	r2, #2
 8003430:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	3326      	adds	r3, #38	@ 0x26
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00b      	beq.n	8003460 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003448:	78fa      	ldrb	r2, [r7, #3]
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	3326      	adds	r3, #38	@ 0x26
 8003458:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800345a:	2b02      	cmp	r3, #2
 800345c:	f040 8136 	bne.w	80036cc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4413      	add	r3, r2
 8003468:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003476:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800347e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4413      	add	r3, r2
 8003488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800348c:	461a      	mov	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	e11b      	b.n	80036cc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003494:	78fa      	ldrb	r2, [r7, #3]
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	1a9b      	subs	r3, r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	334d      	adds	r3, #77	@ 0x4d
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	f040 8081 	bne.w	80035ae <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034ac:	78fa      	ldrb	r2, [r7, #3]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	334d      	adds	r3, #77	@ 0x4d
 80034bc:	2202      	movs	r2, #2
 80034be:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	331b      	adds	r3, #27
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	f040 80fa 	bne.w	80036cc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034d8:	78fa      	ldrb	r2, [r7, #3]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	334c      	adds	r3, #76	@ 0x4c
 80034e8:	2202      	movs	r2, #2
 80034ea:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	78fa      	ldrb	r2, [r7, #3]
 80034fc:	0151      	lsls	r1, r2, #5
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	440a      	add	r2, r1
 8003502:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003506:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800350a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	4413      	add	r3, r2
 8003514:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	78fa      	ldrb	r2, [r7, #3]
 800351c:	0151      	lsls	r1, r2, #5
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	440a      	add	r2, r1
 8003522:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800352a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	4413      	add	r3, r2
 8003534:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	78fa      	ldrb	r2, [r7, #3]
 800353c:	0151      	lsls	r1, r2, #5
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	440a      	add	r2, r1
 8003542:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003546:	f023 0320 	bic.w	r3, r3, #32
 800354a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800354c:	78fa      	ldrb	r2, [r7, #3]
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	3326      	adds	r3, #38	@ 0x26
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00b      	beq.n	800357a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003562:	78fa      	ldrb	r2, [r7, #3]
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	3326      	adds	r3, #38	@ 0x26
 8003572:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003574:	2b02      	cmp	r3, #2
 8003576:	f040 80a9 	bne.w	80036cc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800357a:	78fb      	ldrb	r3, [r7, #3]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4413      	add	r3, r2
 8003582:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003590:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003598:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800359a:	78fb      	ldrb	r3, [r7, #3]
 800359c:	015a      	lsls	r2, r3, #5
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035a6:	461a      	mov	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	e08e      	b.n	80036cc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80035ae:	78fa      	ldrb	r2, [r7, #3]
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	334d      	adds	r3, #77	@ 0x4d
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d143      	bne.n	800364c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035c4:	78fa      	ldrb	r2, [r7, #3]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	334d      	adds	r3, #77	@ 0x4d
 80035d4:	2202      	movs	r2, #2
 80035d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035d8:	78fa      	ldrb	r2, [r7, #3]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	1a9b      	subs	r3, r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	334c      	adds	r3, #76	@ 0x4c
 80035e8:	2202      	movs	r2, #2
 80035ea:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	3326      	adds	r3, #38	@ 0x26
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003602:	78fa      	ldrb	r2, [r7, #3]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	3326      	adds	r3, #38	@ 0x26
 8003612:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003614:	2b02      	cmp	r3, #2
 8003616:	d159      	bne.n	80036cc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4413      	add	r3, r2
 8003620:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800362e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003636:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4413      	add	r3, r2
 8003640:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003644:	461a      	mov	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	e03f      	b.n	80036cc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800364c:	78fa      	ldrb	r2, [r7, #3]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	334d      	adds	r3, #77	@ 0x4d
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b08      	cmp	r3, #8
 8003660:	d126      	bne.n	80036b0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003662:	78fa      	ldrb	r2, [r7, #3]
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	1a9b      	subs	r3, r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	334d      	adds	r3, #77	@ 0x4d
 8003672:	2202      	movs	r2, #2
 8003674:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003676:	78fa      	ldrb	r2, [r7, #3]
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	4613      	mov	r3, r2
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	1a9b      	subs	r3, r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	440b      	add	r3, r1
 8003684:	3344      	adds	r3, #68	@ 0x44
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	1c59      	adds	r1, r3, #1
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	1a9b      	subs	r3, r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4403      	add	r3, r0
 8003696:	3344      	adds	r3, #68	@ 0x44
 8003698:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800369a:	78fa      	ldrb	r2, [r7, #3]
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	334c      	adds	r3, #76	@ 0x4c
 80036aa:	2204      	movs	r2, #4
 80036ac:	701a      	strb	r2, [r3, #0]
 80036ae:	e00d      	b.n	80036cc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80036b0:	78fa      	ldrb	r2, [r7, #3]
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	334d      	adds	r3, #77	@ 0x4d
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	f000 8100 	beq.w	80038c8 <HCD_HC_IN_IRQHandler+0xcca>
 80036c8:	e000      	b.n	80036cc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036ca:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80036cc:	78fa      	ldrb	r2, [r7, #3]
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	334c      	adds	r3, #76	@ 0x4c
 80036dc:	781a      	ldrb	r2, [r3, #0]
 80036de:	78fb      	ldrb	r3, [r7, #3]
 80036e0:	4619      	mov	r1, r3
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f009 fca2 	bl	800d02c <HAL_HCD_HC_NotifyURBChange_Callback>
 80036e8:	e0ef      	b.n	80038ca <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	78fa      	ldrb	r2, [r7, #3]
 80036f0:	4611      	mov	r1, r2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f003 fe75 	bl	80073e2 <USB_ReadChInterrupts>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036fe:	2b40      	cmp	r3, #64	@ 0x40
 8003700:	d12f      	bne.n	8003762 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003702:	78fb      	ldrb	r3, [r7, #3]
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4413      	add	r3, r2
 800370a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800370e:	461a      	mov	r2, r3
 8003710:	2340      	movs	r3, #64	@ 0x40
 8003712:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003714:	78fa      	ldrb	r2, [r7, #3]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	334d      	adds	r3, #77	@ 0x4d
 8003724:	2205      	movs	r2, #5
 8003726:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003728:	78fa      	ldrb	r2, [r7, #3]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	331a      	adds	r3, #26
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800373e:	78fa      	ldrb	r2, [r7, #3]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	3344      	adds	r3, #68	@ 0x44
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	78fa      	ldrb	r2, [r7, #3]
 8003758:	4611      	mov	r1, r2
 800375a:	4618      	mov	r0, r3
 800375c:	f004 fbe5 	bl	8007f2a <USB_HC_Halt>
 8003760:	e0b3      	b.n	80038ca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	78fa      	ldrb	r2, [r7, #3]
 8003768:	4611      	mov	r1, r2
 800376a:	4618      	mov	r0, r3
 800376c:	f003 fe39 	bl	80073e2 <USB_ReadChInterrupts>
 8003770:	4603      	mov	r3, r0
 8003772:	f003 0310 	and.w	r3, r3, #16
 8003776:	2b10      	cmp	r3, #16
 8003778:	f040 80a7 	bne.w	80038ca <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800377c:	78fa      	ldrb	r2, [r7, #3]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	3326      	adds	r3, #38	@ 0x26
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b03      	cmp	r3, #3
 8003790:	d11b      	bne.n	80037ca <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003792:	78fa      	ldrb	r2, [r7, #3]
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	1a9b      	subs	r3, r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	3344      	adds	r3, #68	@ 0x44
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80037a6:	78fa      	ldrb	r2, [r7, #3]
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	4613      	mov	r3, r2
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	334d      	adds	r3, #77	@ 0x4d
 80037b6:	2204      	movs	r2, #4
 80037b8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	78fa      	ldrb	r2, [r7, #3]
 80037c0:	4611      	mov	r1, r2
 80037c2:	4618      	mov	r0, r3
 80037c4:	f004 fbb1 	bl	8007f2a <USB_HC_Halt>
 80037c8:	e03f      	b.n	800384a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037ca:	78fa      	ldrb	r2, [r7, #3]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	3326      	adds	r3, #38	@ 0x26
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	3326      	adds	r3, #38	@ 0x26
 80037f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d129      	bne.n	800384a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	3344      	adds	r3, #68	@ 0x44
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	799b      	ldrb	r3, [r3, #6]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <HCD_HC_IN_IRQHandler+0xc2a>
 8003812:	78fa      	ldrb	r2, [r7, #3]
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	1a9b      	subs	r3, r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	440b      	add	r3, r1
 8003820:	331b      	adds	r3, #27
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d110      	bne.n	800384a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003828:	78fa      	ldrb	r2, [r7, #3]
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	334d      	adds	r3, #77	@ 0x4d
 8003838:	2204      	movs	r2, #4
 800383a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	78fa      	ldrb	r2, [r7, #3]
 8003842:	4611      	mov	r1, r2
 8003844:	4618      	mov	r0, r3
 8003846:	f004 fb70 	bl	8007f2a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800384a:	78fa      	ldrb	r2, [r7, #3]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	331b      	adds	r3, #27
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d129      	bne.n	80038b4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003860:	78fa      	ldrb	r2, [r7, #3]
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	1a9b      	subs	r3, r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	331b      	adds	r3, #27
 8003870:	2200      	movs	r2, #0
 8003872:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003874:	78fb      	ldrb	r3, [r7, #3]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	4413      	add	r3, r2
 800387c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	78fa      	ldrb	r2, [r7, #3]
 8003884:	0151      	lsls	r1, r2, #5
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	440a      	add	r2, r1
 800388a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800388e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003892:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	4413      	add	r3, r2
 800389c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	78fa      	ldrb	r2, [r7, #3]
 80038a4:	0151      	lsls	r1, r2, #5
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	440a      	add	r2, r1
 80038aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038ae:	f043 0320 	orr.w	r3, r3, #32
 80038b2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80038b4:	78fb      	ldrb	r3, [r7, #3]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038c0:	461a      	mov	r2, r3
 80038c2:	2310      	movs	r3, #16
 80038c4:	6093      	str	r3, [r2, #8]
 80038c6:	e000      	b.n	80038ca <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80038c8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	78fa      	ldrb	r2, [r7, #3]
 80038ec:	4611      	mov	r1, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f003 fd77 	bl	80073e2 <USB_ReadChInterrupts>
 80038f4:	4603      	mov	r3, r0
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d11b      	bne.n	8003936 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80038fe:	78fb      	ldrb	r3, [r7, #3]
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4413      	add	r3, r2
 8003906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800390a:	461a      	mov	r2, r3
 800390c:	2304      	movs	r3, #4
 800390e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003910:	78fa      	ldrb	r2, [r7, #3]
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	4613      	mov	r3, r2
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	1a9b      	subs	r3, r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	334d      	adds	r3, #77	@ 0x4d
 8003920:	2207      	movs	r2, #7
 8003922:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	78fa      	ldrb	r2, [r7, #3]
 800392a:	4611      	mov	r1, r2
 800392c:	4618      	mov	r0, r3
 800392e:	f004 fafc 	bl	8007f2a <USB_HC_Halt>
 8003932:	f000 bc6f 	b.w	8004214 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	78fa      	ldrb	r2, [r7, #3]
 800393c:	4611      	mov	r1, r2
 800393e:	4618      	mov	r0, r3
 8003940:	f003 fd4f 	bl	80073e2 <USB_ReadChInterrupts>
 8003944:	4603      	mov	r3, r0
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	2b20      	cmp	r3, #32
 800394c:	f040 8082 	bne.w	8003a54 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	4413      	add	r3, r2
 8003958:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800395c:	461a      	mov	r2, r3
 800395e:	2320      	movs	r3, #32
 8003960:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003962:	78fa      	ldrb	r2, [r7, #3]
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	1a9b      	subs	r3, r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	3319      	adds	r3, #25
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d124      	bne.n	80039c2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003978:	78fa      	ldrb	r2, [r7, #3]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	3319      	adds	r3, #25
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800398c:	78fa      	ldrb	r2, [r7, #3]
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	334c      	adds	r3, #76	@ 0x4c
 800399c:	2202      	movs	r2, #2
 800399e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80039a0:	78fa      	ldrb	r2, [r7, #3]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	334d      	adds	r3, #77	@ 0x4d
 80039b0:	2203      	movs	r2, #3
 80039b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	4611      	mov	r1, r2
 80039bc:	4618      	mov	r0, r3
 80039be:	f004 fab4 	bl	8007f2a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80039c2:	78fa      	ldrb	r2, [r7, #3]
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	4613      	mov	r3, r2
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	1a9b      	subs	r3, r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	440b      	add	r3, r1
 80039d0:	331a      	adds	r3, #26
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	f040 841d 	bne.w	8004214 <HCD_HC_OUT_IRQHandler+0x944>
 80039da:	78fa      	ldrb	r2, [r7, #3]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	1a9b      	subs	r3, r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	331b      	adds	r3, #27
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f040 8411 	bne.w	8004214 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80039f2:	78fa      	ldrb	r2, [r7, #3]
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	1a9b      	subs	r3, r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	3326      	adds	r3, #38	@ 0x26
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d009      	beq.n	8003a1c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003a08:	78fa      	ldrb	r2, [r7, #3]
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	1a9b      	subs	r3, r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	331b      	adds	r3, #27
 8003a18:	2201      	movs	r2, #1
 8003a1a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003a1c:	78fa      	ldrb	r2, [r7, #3]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	334d      	adds	r3, #77	@ 0x4d
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	78fa      	ldrb	r2, [r7, #3]
 8003a36:	4611      	mov	r1, r2
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f004 fa76 	bl	8007f2a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a3e:	78fa      	ldrb	r2, [r7, #3]
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	4613      	mov	r3, r2
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	1a9b      	subs	r3, r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	3344      	adds	r3, #68	@ 0x44
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	e3df      	b.n	8004214 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	78fa      	ldrb	r2, [r7, #3]
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f003 fcc0 	bl	80073e2 <USB_ReadChInterrupts>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a6c:	d111      	bne.n	8003a92 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003a6e:	78fb      	ldrb	r3, [r7, #3]
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a80:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	78fa      	ldrb	r2, [r7, #3]
 8003a88:	4611      	mov	r1, r2
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f004 fa4d 	bl	8007f2a <USB_HC_Halt>
 8003a90:	e3c0      	b.n	8004214 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	4611      	mov	r1, r2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f003 fca1 	bl	80073e2 <USB_ReadChInterrupts>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d168      	bne.n	8003b7c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003aaa:	78fa      	ldrb	r2, [r7, #3]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	1a9b      	subs	r3, r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	3344      	adds	r3, #68	@ 0x44
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	4611      	mov	r1, r2
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f003 fc8b 	bl	80073e2 <USB_ReadChInterrupts>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad2:	2b40      	cmp	r3, #64	@ 0x40
 8003ad4:	d112      	bne.n	8003afc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003ad6:	78fa      	ldrb	r2, [r7, #3]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	3319      	adds	r3, #25
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	015a      	lsls	r2, r3, #5
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003af6:	461a      	mov	r2, r3
 8003af8:	2340      	movs	r3, #64	@ 0x40
 8003afa:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003afc:	78fa      	ldrb	r2, [r7, #3]
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	4613      	mov	r3, r2
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	1a9b      	subs	r3, r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	331b      	adds	r3, #27
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d019      	beq.n	8003b46 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003b12:	78fa      	ldrb	r2, [r7, #3]
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	1a9b      	subs	r3, r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	331b      	adds	r3, #27
 8003b22:	2200      	movs	r2, #0
 8003b24:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b26:	78fb      	ldrb	r3, [r7, #3]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	78fa      	ldrb	r2, [r7, #3]
 8003b36:	0151      	lsls	r1, r2, #5
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	440a      	add	r2, r1
 8003b3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b44:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003b46:	78fb      	ldrb	r3, [r7, #3]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b52:	461a      	mov	r2, r3
 8003b54:	2301      	movs	r3, #1
 8003b56:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003b58:	78fa      	ldrb	r2, [r7, #3]
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	1a9b      	subs	r3, r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	334d      	adds	r3, #77	@ 0x4d
 8003b68:	2201      	movs	r2, #1
 8003b6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	4611      	mov	r1, r2
 8003b74:	4618      	mov	r0, r3
 8003b76:	f004 f9d8 	bl	8007f2a <USB_HC_Halt>
 8003b7a:	e34b      	b.n	8004214 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	78fa      	ldrb	r2, [r7, #3]
 8003b82:	4611      	mov	r1, r2
 8003b84:	4618      	mov	r0, r3
 8003b86:	f003 fc2c 	bl	80073e2 <USB_ReadChInterrupts>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b90:	2b40      	cmp	r3, #64	@ 0x40
 8003b92:	d139      	bne.n	8003c08 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	334d      	adds	r3, #77	@ 0x4d
 8003ba4:	2205      	movs	r2, #5
 8003ba6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003ba8:	78fa      	ldrb	r2, [r7, #3]
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	331a      	adds	r3, #26
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d109      	bne.n	8003bd2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003bbe:	78fa      	ldrb	r2, [r7, #3]
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	1a9b      	subs	r3, r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	3319      	adds	r3, #25
 8003bce:	2201      	movs	r2, #1
 8003bd0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003bd2:	78fa      	ldrb	r2, [r7, #3]
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	1a9b      	subs	r3, r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	440b      	add	r3, r1
 8003be0:	3344      	adds	r3, #68	@ 0x44
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	4611      	mov	r1, r2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f004 f99b 	bl	8007f2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003bf4:	78fb      	ldrb	r3, [r7, #3]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c00:	461a      	mov	r2, r3
 8003c02:	2340      	movs	r3, #64	@ 0x40
 8003c04:	6093      	str	r3, [r2, #8]
 8003c06:	e305      	b.n	8004214 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	78fa      	ldrb	r2, [r7, #3]
 8003c0e:	4611      	mov	r1, r2
 8003c10:	4618      	mov	r0, r3
 8003c12:	f003 fbe6 	bl	80073e2 <USB_ReadChInterrupts>
 8003c16:	4603      	mov	r3, r0
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d11a      	bne.n	8003c56 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003c20:	78fb      	ldrb	r3, [r7, #3]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	2308      	movs	r3, #8
 8003c30:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003c32:	78fa      	ldrb	r2, [r7, #3]
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	334d      	adds	r3, #77	@ 0x4d
 8003c42:	2206      	movs	r2, #6
 8003c44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	78fa      	ldrb	r2, [r7, #3]
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f004 f96b 	bl	8007f2a <USB_HC_Halt>
 8003c54:	e2de      	b.n	8004214 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	78fa      	ldrb	r2, [r7, #3]
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f003 fbbf 	bl	80073e2 <USB_ReadChInterrupts>
 8003c64:	4603      	mov	r3, r0
 8003c66:	f003 0310 	and.w	r3, r3, #16
 8003c6a:	2b10      	cmp	r3, #16
 8003c6c:	d144      	bne.n	8003cf8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003c6e:	78fa      	ldrb	r2, [r7, #3]
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	1a9b      	subs	r3, r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	3344      	adds	r3, #68	@ 0x44
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003c82:	78fa      	ldrb	r2, [r7, #3]
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	4613      	mov	r3, r2
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	1a9b      	subs	r3, r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	440b      	add	r3, r1
 8003c90:	334d      	adds	r3, #77	@ 0x4d
 8003c92:	2204      	movs	r2, #4
 8003c94:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003c96:	78fa      	ldrb	r2, [r7, #3]
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	1a9b      	subs	r3, r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	440b      	add	r3, r1
 8003ca4:	3319      	adds	r3, #25
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d114      	bne.n	8003cd6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003cac:	78fa      	ldrb	r2, [r7, #3]
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	1a9b      	subs	r3, r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	3318      	adds	r3, #24
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d109      	bne.n	8003cd6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003cc2:	78fa      	ldrb	r2, [r7, #3]
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	1a9b      	subs	r3, r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	440b      	add	r3, r1
 8003cd0:	3319      	adds	r3, #25
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	78fa      	ldrb	r2, [r7, #3]
 8003cdc:	4611      	mov	r1, r2
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f004 f923 	bl	8007f2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003ce4:	78fb      	ldrb	r3, [r7, #3]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	2310      	movs	r3, #16
 8003cf4:	6093      	str	r3, [r2, #8]
 8003cf6:	e28d      	b.n	8004214 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	78fa      	ldrb	r2, [r7, #3]
 8003cfe:	4611      	mov	r1, r2
 8003d00:	4618      	mov	r0, r3
 8003d02:	f003 fb6e 	bl	80073e2 <USB_ReadChInterrupts>
 8003d06:	4603      	mov	r3, r0
 8003d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d0c:	2b80      	cmp	r3, #128	@ 0x80
 8003d0e:	d169      	bne.n	8003de4 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	799b      	ldrb	r3, [r3, #6]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d111      	bne.n	8003d3c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003d18:	78fa      	ldrb	r2, [r7, #3]
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	1a9b      	subs	r3, r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	334d      	adds	r3, #77	@ 0x4d
 8003d28:	2207      	movs	r2, #7
 8003d2a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	78fa      	ldrb	r2, [r7, #3]
 8003d32:	4611      	mov	r1, r2
 8003d34:	4618      	mov	r0, r3
 8003d36:	f004 f8f8 	bl	8007f2a <USB_HC_Halt>
 8003d3a:	e049      	b.n	8003dd0 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003d3c:	78fa      	ldrb	r2, [r7, #3]
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	3344      	adds	r3, #68	@ 0x44
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	1c59      	adds	r1, r3, #1
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	1a9b      	subs	r3, r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4403      	add	r3, r0
 8003d5c:	3344      	adds	r3, #68	@ 0x44
 8003d5e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d60:	78fa      	ldrb	r2, [r7, #3]
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	4613      	mov	r3, r2
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	1a9b      	subs	r3, r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	3344      	adds	r3, #68	@ 0x44
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d922      	bls.n	8003dbc <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003d76:	78fa      	ldrb	r2, [r7, #3]
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	1a9b      	subs	r3, r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	3344      	adds	r3, #68	@ 0x44
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d8a:	78fa      	ldrb	r2, [r7, #3]
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	1a9b      	subs	r3, r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	334c      	adds	r3, #76	@ 0x4c
 8003d9a:	2204      	movs	r2, #4
 8003d9c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d9e:	78fa      	ldrb	r2, [r7, #3]
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	4613      	mov	r3, r2
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	1a9b      	subs	r3, r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	440b      	add	r3, r1
 8003dac:	334c      	adds	r3, #76	@ 0x4c
 8003dae:	781a      	ldrb	r2, [r3, #0]
 8003db0:	78fb      	ldrb	r3, [r7, #3]
 8003db2:	4619      	mov	r1, r3
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f009 f939 	bl	800d02c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003dba:	e009      	b.n	8003dd0 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003dbc:	78fa      	ldrb	r2, [r7, #3]
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	1a9b      	subs	r3, r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	334c      	adds	r3, #76	@ 0x4c
 8003dcc:	2202      	movs	r2, #2
 8003dce:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003dd0:	78fb      	ldrb	r3, [r7, #3]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2380      	movs	r3, #128	@ 0x80
 8003de0:	6093      	str	r3, [r2, #8]
 8003de2:	e217      	b.n	8004214 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	78fa      	ldrb	r2, [r7, #3]
 8003dea:	4611      	mov	r1, r2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f003 faf8 	bl	80073e2 <USB_ReadChInterrupts>
 8003df2:	4603      	mov	r3, r0
 8003df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003df8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dfc:	d11b      	bne.n	8003e36 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003dfe:	78fa      	ldrb	r2, [r7, #3]
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	4613      	mov	r3, r2
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	1a9b      	subs	r3, r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	334d      	adds	r3, #77	@ 0x4d
 8003e0e:	2209      	movs	r2, #9
 8003e10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	78fa      	ldrb	r2, [r7, #3]
 8003e18:	4611      	mov	r1, r2
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f004 f885 	bl	8007f2a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e32:	6093      	str	r3, [r2, #8]
 8003e34:	e1ee      	b.n	8004214 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	78fa      	ldrb	r2, [r7, #3]
 8003e3c:	4611      	mov	r1, r2
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f003 facf 	bl	80073e2 <USB_ReadChInterrupts>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	f040 81df 	bne.w	800420e <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	2302      	movs	r3, #2
 8003e60:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003e62:	78fa      	ldrb	r2, [r7, #3]
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	4613      	mov	r3, r2
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	1a9b      	subs	r3, r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	440b      	add	r3, r1
 8003e70:	334d      	adds	r3, #77	@ 0x4d
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	f040 8093 	bne.w	8003fa0 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e7a:	78fa      	ldrb	r2, [r7, #3]
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	334d      	adds	r3, #77	@ 0x4d
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003e8e:	78fa      	ldrb	r2, [r7, #3]
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	1a9b      	subs	r3, r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	334c      	adds	r3, #76	@ 0x4c
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003ea2:	78fa      	ldrb	r2, [r7, #3]
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	1a9b      	subs	r3, r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	440b      	add	r3, r1
 8003eb0:	3326      	adds	r3, #38	@ 0x26
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d00b      	beq.n	8003ed0 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003eb8:	78fa      	ldrb	r2, [r7, #3]
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	3326      	adds	r3, #38	@ 0x26
 8003ec8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	f040 8190 	bne.w	80041f0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	799b      	ldrb	r3, [r3, #6]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d115      	bne.n	8003f04 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003ed8:	78fa      	ldrb	r2, [r7, #3]
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	1a9b      	subs	r3, r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	333d      	adds	r3, #61	@ 0x3d
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	78fa      	ldrb	r2, [r7, #3]
 8003eec:	f083 0301 	eor.w	r3, r3, #1
 8003ef0:	b2d8      	uxtb	r0, r3
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	1a9b      	subs	r3, r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	333d      	adds	r3, #61	@ 0x3d
 8003f00:	4602      	mov	r2, r0
 8003f02:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	799b      	ldrb	r3, [r3, #6]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	f040 8171 	bne.w	80041f0 <HCD_HC_OUT_IRQHandler+0x920>
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	3334      	adds	r3, #52	@ 0x34
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 8165 	beq.w	80041f0 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003f26:	78fa      	ldrb	r2, [r7, #3]
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	1a9b      	subs	r3, r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	440b      	add	r3, r1
 8003f34:	3334      	adds	r3, #52	@ 0x34
 8003f36:	6819      	ldr	r1, [r3, #0]
 8003f38:	78fa      	ldrb	r2, [r7, #3]
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4403      	add	r3, r0
 8003f46:	3328      	adds	r3, #40	@ 0x28
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	440b      	add	r3, r1
 8003f4c:	1e59      	subs	r1, r3, #1
 8003f4e:	78fa      	ldrb	r2, [r7, #3]
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	1a9b      	subs	r3, r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4403      	add	r3, r0
 8003f5c:	3328      	adds	r3, #40	@ 0x28
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f64:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 813f 	beq.w	80041f0 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003f72:	78fa      	ldrb	r2, [r7, #3]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	333d      	adds	r3, #61	@ 0x3d
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	78fa      	ldrb	r2, [r7, #3]
 8003f86:	f083 0301 	eor.w	r3, r3, #1
 8003f8a:	b2d8      	uxtb	r0, r3
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	333d      	adds	r3, #61	@ 0x3d
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	701a      	strb	r2, [r3, #0]
 8003f9e:	e127      	b.n	80041f0 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003fa0:	78fa      	ldrb	r2, [r7, #3]
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	334d      	adds	r3, #77	@ 0x4d
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d120      	bne.n	8003ff8 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003fb6:	78fa      	ldrb	r2, [r7, #3]
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	334d      	adds	r3, #77	@ 0x4d
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003fca:	78fa      	ldrb	r2, [r7, #3]
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	011b      	lsls	r3, r3, #4
 8003fd2:	1a9b      	subs	r3, r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	331b      	adds	r3, #27
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	f040 8107 	bne.w	80041f0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003fe2:	78fa      	ldrb	r2, [r7, #3]
 8003fe4:	6879      	ldr	r1, [r7, #4]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	1a9b      	subs	r3, r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	440b      	add	r3, r1
 8003ff0:	334c      	adds	r3, #76	@ 0x4c
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	701a      	strb	r2, [r3, #0]
 8003ff6:	e0fb      	b.n	80041f0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003ff8:	78fa      	ldrb	r2, [r7, #3]
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	1a9b      	subs	r3, r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	334d      	adds	r3, #77	@ 0x4d
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b04      	cmp	r3, #4
 800400c:	d13a      	bne.n	8004084 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800400e:	78fa      	ldrb	r2, [r7, #3]
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	1a9b      	subs	r3, r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	334d      	adds	r3, #77	@ 0x4d
 800401e:	2202      	movs	r2, #2
 8004020:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004022:	78fa      	ldrb	r2, [r7, #3]
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	1a9b      	subs	r3, r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	334c      	adds	r3, #76	@ 0x4c
 8004032:	2202      	movs	r2, #2
 8004034:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004036:	78fa      	ldrb	r2, [r7, #3]
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	1a9b      	subs	r3, r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	440b      	add	r3, r1
 8004044:	331b      	adds	r3, #27
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b01      	cmp	r3, #1
 800404a:	f040 80d1 	bne.w	80041f0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800404e:	78fa      	ldrb	r2, [r7, #3]
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	4613      	mov	r3, r2
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	1a9b      	subs	r3, r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	440b      	add	r3, r1
 800405c:	331b      	adds	r3, #27
 800405e:	2200      	movs	r2, #0
 8004060:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004062:	78fb      	ldrb	r3, [r7, #3]
 8004064:	015a      	lsls	r2, r3, #5
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	4413      	add	r3, r2
 800406a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	78fa      	ldrb	r2, [r7, #3]
 8004072:	0151      	lsls	r1, r2, #5
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	440a      	add	r2, r1
 8004078:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800407c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004080:	6053      	str	r3, [r2, #4]
 8004082:	e0b5      	b.n	80041f0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004084:	78fa      	ldrb	r2, [r7, #3]
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	4613      	mov	r3, r2
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	1a9b      	subs	r3, r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	334d      	adds	r3, #77	@ 0x4d
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b05      	cmp	r3, #5
 8004098:	d114      	bne.n	80040c4 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800409a:	78fa      	ldrb	r2, [r7, #3]
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	4613      	mov	r3, r2
 80040a0:	011b      	lsls	r3, r3, #4
 80040a2:	1a9b      	subs	r3, r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	334d      	adds	r3, #77	@ 0x4d
 80040aa:	2202      	movs	r2, #2
 80040ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80040ae:	78fa      	ldrb	r2, [r7, #3]
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	1a9b      	subs	r3, r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	334c      	adds	r3, #76	@ 0x4c
 80040be:	2202      	movs	r2, #2
 80040c0:	701a      	strb	r2, [r3, #0]
 80040c2:	e095      	b.n	80041f0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80040c4:	78fa      	ldrb	r2, [r7, #3]
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4613      	mov	r3, r2
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	334d      	adds	r3, #77	@ 0x4d
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b06      	cmp	r3, #6
 80040d8:	d114      	bne.n	8004104 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040da:	78fa      	ldrb	r2, [r7, #3]
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	1a9b      	subs	r3, r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	334d      	adds	r3, #77	@ 0x4d
 80040ea:	2202      	movs	r2, #2
 80040ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80040ee:	78fa      	ldrb	r2, [r7, #3]
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	4613      	mov	r3, r2
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	440b      	add	r3, r1
 80040fc:	334c      	adds	r3, #76	@ 0x4c
 80040fe:	2205      	movs	r2, #5
 8004100:	701a      	strb	r2, [r3, #0]
 8004102:	e075      	b.n	80041f0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004104:	78fa      	ldrb	r2, [r7, #3]
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	4613      	mov	r3, r2
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	334d      	adds	r3, #77	@ 0x4d
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b07      	cmp	r3, #7
 8004118:	d00a      	beq.n	8004130 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800411a:	78fa      	ldrb	r2, [r7, #3]
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	334d      	adds	r3, #77	@ 0x4d
 800412a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800412c:	2b09      	cmp	r3, #9
 800412e:	d170      	bne.n	8004212 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004130:	78fa      	ldrb	r2, [r7, #3]
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	334d      	adds	r3, #77	@ 0x4d
 8004140:	2202      	movs	r2, #2
 8004142:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004144:	78fa      	ldrb	r2, [r7, #3]
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	4613      	mov	r3, r2
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	1a9b      	subs	r3, r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	3344      	adds	r3, #68	@ 0x44
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	1c59      	adds	r1, r3, #1
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	4613      	mov	r3, r2
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	1a9b      	subs	r3, r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4403      	add	r3, r0
 8004164:	3344      	adds	r3, #68	@ 0x44
 8004166:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004168:	78fa      	ldrb	r2, [r7, #3]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	3344      	adds	r3, #68	@ 0x44
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d914      	bls.n	80041a8 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800417e:	78fa      	ldrb	r2, [r7, #3]
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	1a9b      	subs	r3, r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	440b      	add	r3, r1
 800418c:	3344      	adds	r3, #68	@ 0x44
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004192:	78fa      	ldrb	r2, [r7, #3]
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	1a9b      	subs	r3, r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	440b      	add	r3, r1
 80041a0:	334c      	adds	r3, #76	@ 0x4c
 80041a2:	2204      	movs	r2, #4
 80041a4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80041a6:	e022      	b.n	80041ee <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041a8:	78fa      	ldrb	r2, [r7, #3]
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	1a9b      	subs	r3, r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	334c      	adds	r3, #76	@ 0x4c
 80041b8:	2202      	movs	r2, #2
 80041ba:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80041d2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80041da:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041e8:	461a      	mov	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80041ee:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80041f0:	78fa      	ldrb	r2, [r7, #3]
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	4613      	mov	r3, r2
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	1a9b      	subs	r3, r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	334c      	adds	r3, #76	@ 0x4c
 8004200:	781a      	ldrb	r2, [r3, #0]
 8004202:	78fb      	ldrb	r3, [r7, #3]
 8004204:	4619      	mov	r1, r3
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f008 ff10 	bl	800d02c <HAL_HCD_HC_NotifyURBChange_Callback>
 800420c:	e002      	b.n	8004214 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800420e:	bf00      	nop
 8004210:	e000      	b.n	8004214 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004212:	bf00      	nop
  }
}
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b08a      	sub	sp, #40	@ 0x28
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	0c5b      	lsrs	r3, r3, #17
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800424e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2b02      	cmp	r3, #2
 8004254:	d004      	beq.n	8004260 <HCD_RXQLVL_IRQHandler+0x46>
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b05      	cmp	r3, #5
 800425a:	f000 80b6 	beq.w	80043ca <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800425e:	e0b7      	b.n	80043d0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 80b3 	beq.w	80043ce <HCD_RXQLVL_IRQHandler+0x1b4>
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	4613      	mov	r3, r2
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	1a9b      	subs	r3, r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	332c      	adds	r3, #44	@ 0x2c
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 80a7 	beq.w	80043ce <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	4613      	mov	r3, r2
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	1a9b      	subs	r3, r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	440b      	add	r3, r1
 800428e:	3338      	adds	r3, #56	@ 0x38
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	18d1      	adds	r1, r2, r3
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	4613      	mov	r3, r2
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	1a9b      	subs	r3, r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4403      	add	r3, r0
 80042a4:	3334      	adds	r3, #52	@ 0x34
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4299      	cmp	r1, r3
 80042aa:	f200 8083 	bhi.w	80043b4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	4613      	mov	r3, r2
 80042b8:	011b      	lsls	r3, r3, #4
 80042ba:	1a9b      	subs	r3, r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	440b      	add	r3, r1
 80042c0:	332c      	adds	r3, #44	@ 0x2c
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	b292      	uxth	r2, r2
 80042c8:	4619      	mov	r1, r3
 80042ca:	f003 f81f 	bl	800730c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4613      	mov	r3, r2
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	1a9b      	subs	r3, r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	440b      	add	r3, r1
 80042dc:	332c      	adds	r3, #44	@ 0x2c
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	18d1      	adds	r1, r2, r3
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4613      	mov	r3, r2
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4403      	add	r3, r0
 80042f2:	332c      	adds	r3, #44	@ 0x2c
 80042f4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	4613      	mov	r3, r2
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	3338      	adds	r3, #56	@ 0x38
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	18d1      	adds	r1, r2, r3
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	4613      	mov	r3, r2
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4403      	add	r3, r0
 800431a:	3338      	adds	r3, #56	@ 0x38
 800431c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	4413      	add	r3, r2
 8004326:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	0cdb      	lsrs	r3, r3, #19
 800432e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004332:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4613      	mov	r3, r2
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	3328      	adds	r3, #40	@ 0x28
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	4293      	cmp	r3, r2
 800434c:	d13f      	bne.n	80043ce <HCD_RXQLVL_IRQHandler+0x1b4>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d03c      	beq.n	80043ce <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	4413      	add	r3, r2
 800435c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800436a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004372:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	4413      	add	r3, r2
 800437c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004380:	461a      	mov	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4613      	mov	r3, r2
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	1a9b      	subs	r3, r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	440b      	add	r3, r1
 8004394:	333c      	adds	r3, #60	@ 0x3c
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	f083 0301 	eor.w	r3, r3, #1
 800439c:	b2d8      	uxtb	r0, r3
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4613      	mov	r3, r2
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	1a9b      	subs	r3, r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	333c      	adds	r3, #60	@ 0x3c
 80043ae:	4602      	mov	r2, r0
 80043b0:	701a      	strb	r2, [r3, #0]
      break;
 80043b2:	e00c      	b.n	80043ce <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	4613      	mov	r3, r2
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	1a9b      	subs	r3, r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	334c      	adds	r3, #76	@ 0x4c
 80043c4:	2204      	movs	r2, #4
 80043c6:	701a      	strb	r2, [r3, #0]
      break;
 80043c8:	e001      	b.n	80043ce <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80043ca:	bf00      	nop
 80043cc:	e000      	b.n	80043d0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80043ce:	bf00      	nop
  }
}
 80043d0:	bf00      	nop
 80043d2:	3728      	adds	r7, #40	@ 0x28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004404:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b02      	cmp	r3, #2
 800440e:	d10b      	bne.n	8004428 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b01      	cmp	r3, #1
 8004418:	d102      	bne.n	8004420 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f008 fdea 	bl	800cff4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f043 0302 	orr.w	r3, r3, #2
 8004426:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b08      	cmp	r3, #8
 8004430:	d132      	bne.n	8004498 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f043 0308 	orr.w	r3, r3, #8
 8004438:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b04      	cmp	r3, #4
 8004442:	d126      	bne.n	8004492 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	7a5b      	ldrb	r3, [r3, #9]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d113      	bne.n	8004474 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004452:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004456:	d106      	bne.n	8004466 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2102      	movs	r1, #2
 800445e:	4618      	mov	r0, r3
 8004460:	f003 f8e4 	bl	800762c <USB_InitFSLSPClkSel>
 8004464:	e011      	b.n	800448a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2101      	movs	r1, #1
 800446c:	4618      	mov	r0, r3
 800446e:	f003 f8dd 	bl	800762c <USB_InitFSLSPClkSel>
 8004472:	e00a      	b.n	800448a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	79db      	ldrb	r3, [r3, #7]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d106      	bne.n	800448a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004482:	461a      	mov	r2, r3
 8004484:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004488:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f008 fde0 	bl	800d050 <HAL_HCD_PortEnabled_Callback>
 8004490:	e002      	b.n	8004498 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f008 fdea 	bl	800d06c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	2b20      	cmp	r3, #32
 80044a0:	d103      	bne.n	80044aa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f043 0320 	orr.w	r3, r3, #32
 80044a8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80044b0:	461a      	mov	r2, r3
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	6013      	str	r3, [r2, #0]
}
 80044b6:	bf00      	nop
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
	...

080044c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e12b      	b.n	800472a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d106      	bne.n	80044ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7fc fd2e 	bl	8000f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2224      	movs	r2, #36	@ 0x24
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0201 	bic.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004512:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004522:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004524:	f001 f964 	bl	80057f0 <HAL_RCC_GetPCLK1Freq>
 8004528:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	4a81      	ldr	r2, [pc, #516]	@ (8004734 <HAL_I2C_Init+0x274>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d807      	bhi.n	8004544 <HAL_I2C_Init+0x84>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4a80      	ldr	r2, [pc, #512]	@ (8004738 <HAL_I2C_Init+0x278>)
 8004538:	4293      	cmp	r3, r2
 800453a:	bf94      	ite	ls
 800453c:	2301      	movls	r3, #1
 800453e:	2300      	movhi	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	e006      	b.n	8004552 <HAL_I2C_Init+0x92>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4a7d      	ldr	r2, [pc, #500]	@ (800473c <HAL_I2C_Init+0x27c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	bf94      	ite	ls
 800454c:	2301      	movls	r3, #1
 800454e:	2300      	movhi	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e0e7      	b.n	800472a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	4a78      	ldr	r2, [pc, #480]	@ (8004740 <HAL_I2C_Init+0x280>)
 800455e:	fba2 2303 	umull	r2, r3, r2, r3
 8004562:	0c9b      	lsrs	r3, r3, #18
 8004564:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	430a      	orrs	r2, r1
 8004578:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	4a6a      	ldr	r2, [pc, #424]	@ (8004734 <HAL_I2C_Init+0x274>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d802      	bhi.n	8004594 <HAL_I2C_Init+0xd4>
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	3301      	adds	r3, #1
 8004592:	e009      	b.n	80045a8 <HAL_I2C_Init+0xe8>
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800459a:	fb02 f303 	mul.w	r3, r2, r3
 800459e:	4a69      	ldr	r2, [pc, #420]	@ (8004744 <HAL_I2C_Init+0x284>)
 80045a0:	fba2 2303 	umull	r2, r3, r2, r3
 80045a4:	099b      	lsrs	r3, r3, #6
 80045a6:	3301      	adds	r3, #1
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6812      	ldr	r2, [r2, #0]
 80045ac:	430b      	orrs	r3, r1
 80045ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80045ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	495c      	ldr	r1, [pc, #368]	@ (8004734 <HAL_I2C_Init+0x274>)
 80045c4:	428b      	cmp	r3, r1
 80045c6:	d819      	bhi.n	80045fc <HAL_I2C_Init+0x13c>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	1e59      	subs	r1, r3, #1
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80045d6:	1c59      	adds	r1, r3, #1
 80045d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80045dc:	400b      	ands	r3, r1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <HAL_I2C_Init+0x138>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	1e59      	subs	r1, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80045f0:	3301      	adds	r3, #1
 80045f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045f6:	e051      	b.n	800469c <HAL_I2C_Init+0x1dc>
 80045f8:	2304      	movs	r3, #4
 80045fa:	e04f      	b.n	800469c <HAL_I2C_Init+0x1dc>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d111      	bne.n	8004628 <HAL_I2C_Init+0x168>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	1e58      	subs	r0, r3, #1
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6859      	ldr	r1, [r3, #4]
 800460c:	460b      	mov	r3, r1
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	440b      	add	r3, r1
 8004612:	fbb0 f3f3 	udiv	r3, r0, r3
 8004616:	3301      	adds	r3, #1
 8004618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800461c:	2b00      	cmp	r3, #0
 800461e:	bf0c      	ite	eq
 8004620:	2301      	moveq	r3, #1
 8004622:	2300      	movne	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	e012      	b.n	800464e <HAL_I2C_Init+0x18e>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	1e58      	subs	r0, r3, #1
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6859      	ldr	r1, [r3, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	0099      	lsls	r1, r3, #2
 8004638:	440b      	add	r3, r1
 800463a:	fbb0 f3f3 	udiv	r3, r0, r3
 800463e:	3301      	adds	r3, #1
 8004640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004644:	2b00      	cmp	r3, #0
 8004646:	bf0c      	ite	eq
 8004648:	2301      	moveq	r3, #1
 800464a:	2300      	movne	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_I2C_Init+0x196>
 8004652:	2301      	movs	r3, #1
 8004654:	e022      	b.n	800469c <HAL_I2C_Init+0x1dc>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10e      	bne.n	800467c <HAL_I2C_Init+0x1bc>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	1e58      	subs	r0, r3, #1
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6859      	ldr	r1, [r3, #4]
 8004666:	460b      	mov	r3, r1
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	440b      	add	r3, r1
 800466c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004670:	3301      	adds	r3, #1
 8004672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004676:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800467a:	e00f      	b.n	800469c <HAL_I2C_Init+0x1dc>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	1e58      	subs	r0, r3, #1
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6859      	ldr	r1, [r3, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	0099      	lsls	r1, r3, #2
 800468c:	440b      	add	r3, r1
 800468e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004692:	3301      	adds	r3, #1
 8004694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004698:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	6809      	ldr	r1, [r1, #0]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69da      	ldr	r2, [r3, #28]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80046ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6911      	ldr	r1, [r2, #16]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	68d2      	ldr	r2, [r2, #12]
 80046d6:	4311      	orrs	r1, r2
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6812      	ldr	r2, [r2, #0]
 80046dc:	430b      	orrs	r3, r1
 80046de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	695a      	ldr	r2, [r3, #20]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0201 	orr.w	r2, r2, #1
 800470a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2220      	movs	r2, #32
 8004716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	000186a0 	.word	0x000186a0
 8004738:	001e847f 	.word	0x001e847f
 800473c:	003d08ff 	.word	0x003d08ff
 8004740:	431bde83 	.word	0x431bde83
 8004744:	10624dd3 	.word	0x10624dd3

08004748 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b20      	cmp	r3, #32
 800475c:	d129      	bne.n	80047b2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2224      	movs	r2, #36	@ 0x24
 8004762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0201 	bic.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0210 	bic.w	r2, r2, #16
 8004784:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f042 0201 	orr.w	r2, r2, #1
 80047a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2220      	movs	r2, #32
 80047aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	e000      	b.n	80047b4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80047b2:	2302      	movs	r3, #2
  }
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80047ca:	2300      	movs	r3, #0
 80047cc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	d12a      	bne.n	8004830 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2224      	movs	r2, #36	@ 0x24
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0201 	bic.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80047fa:	89fb      	ldrh	r3, [r7, #14]
 80047fc:	f023 030f 	bic.w	r3, r3, #15
 8004800:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	b29a      	uxth	r2, r3
 8004806:	89fb      	ldrh	r3, [r7, #14]
 8004808:	4313      	orrs	r3, r2
 800480a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	89fa      	ldrh	r2, [r7, #14]
 8004812:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0201 	orr.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	e000      	b.n	8004832 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004830:	2302      	movs	r3, #2
  }
}
 8004832:	4618      	mov	r0, r3
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
	...

08004840 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e0bf      	b.n	80049d2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fc fbd8 	bl	800101c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699a      	ldr	r2, [r3, #24]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004882:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6999      	ldr	r1, [r3, #24]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004898:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6899      	ldr	r1, [r3, #8]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	4b4a      	ldr	r3, [pc, #296]	@ (80049dc <HAL_LTDC_Init+0x19c>)
 80048b4:	400b      	ands	r3, r1
 80048b6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	041b      	lsls	r3, r3, #16
 80048be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6899      	ldr	r1, [r3, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699a      	ldr	r2, [r3, #24]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	431a      	orrs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68d9      	ldr	r1, [r3, #12]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	4b3e      	ldr	r3, [pc, #248]	@ (80049dc <HAL_LTDC_Init+0x19c>)
 80048e2:	400b      	ands	r3, r1
 80048e4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	041b      	lsls	r3, r3, #16
 80048ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68d9      	ldr	r1, [r3, #12]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a1a      	ldr	r2, [r3, #32]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6919      	ldr	r1, [r3, #16]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4b33      	ldr	r3, [pc, #204]	@ (80049dc <HAL_LTDC_Init+0x19c>)
 8004910:	400b      	ands	r3, r1
 8004912:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004918:	041b      	lsls	r3, r3, #16
 800491a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6919      	ldr	r1, [r3, #16]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	431a      	orrs	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6959      	ldr	r1, [r3, #20]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	4b27      	ldr	r3, [pc, #156]	@ (80049dc <HAL_LTDC_Init+0x19c>)
 800493e:	400b      	ands	r3, r1
 8004940:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004946:	041b      	lsls	r3, r3, #16
 8004948:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6959      	ldr	r1, [r3, #20]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004966:	021b      	lsls	r3, r3, #8
 8004968:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004970:	041b      	lsls	r3, r3, #16
 8004972:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004982:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004996:	431a      	orrs	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0206 	orr.w	r2, r2, #6
 80049ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699a      	ldr	r2, [r3, #24]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0201 	orr.w	r2, r2, #1
 80049be:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	f000f800 	.word	0xf000f800

080049e0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049f6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f003 0304 	and.w	r3, r3, #4
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d023      	beq.n	8004a4a <HAL_LTDC_IRQHandler+0x6a>
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d01e      	beq.n	8004a4a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 0204 	bic.w	r2, r2, #4
 8004a1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2204      	movs	r2, #4
 8004a22:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a2a:	f043 0201 	orr.w	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2204      	movs	r2, #4
 8004a38:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f86f 	bl	8004b28 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d023      	beq.n	8004a9c <HAL_LTDC_IRQHandler+0xbc>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d01e      	beq.n	8004a9c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0202 	bic.w	r2, r2, #2
 8004a6c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2202      	movs	r2, #2
 8004a74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a7c:	f043 0202 	orr.w	r2, r3, #2
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2204      	movs	r2, #4
 8004a8a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f846 	bl	8004b28 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d01b      	beq.n	8004ade <HAL_LTDC_IRQHandler+0xfe>
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d016      	beq.n	8004ade <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0201 	bic.w	r2, r2, #1
 8004abe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f82f 	bl	8004b3c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d01b      	beq.n	8004b20 <HAL_LTDC_IRQHandler+0x140>
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d016      	beq.n	8004b20 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0208 	bic.w	r2, r2, #8
 8004b00:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2208      	movs	r2, #8
 8004b08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f818 	bl	8004b50 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004b20:	bf00      	nop
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004b64:	b5b0      	push	{r4, r5, r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d101      	bne.n	8004b7e <HAL_LTDC_ConfigLayer+0x1a>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e02c      	b.n	8004bd8 <HAL_LTDC_ConfigLayer+0x74>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2202      	movs	r2, #2
 8004b8a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2134      	movs	r1, #52	@ 0x34
 8004b94:	fb01 f303 	mul.w	r3, r1, r3
 8004b98:	4413      	add	r3, r2
 8004b9a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	4614      	mov	r4, r2
 8004ba2:	461d      	mov	r5, r3
 8004ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bb0:	682b      	ldr	r3, [r5, #0]
 8004bb2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 f811 	bl	8004be0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bdb0      	pop	{r4, r5, r7, pc}

08004be0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b089      	sub	sp, #36	@ 0x24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	0c1b      	lsrs	r3, r3, #16
 8004bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bfc:	4413      	add	r3, r2
 8004bfe:	041b      	lsls	r3, r3, #16
 8004c00:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	461a      	mov	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	01db      	lsls	r3, r3, #7
 8004c0c:	4413      	add	r3, r2
 8004c0e:	3384      	adds	r3, #132	@ 0x84
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	6812      	ldr	r2, [r2, #0]
 8004c16:	4611      	mov	r1, r2
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	01d2      	lsls	r2, r2, #7
 8004c1c:	440a      	add	r2, r1
 8004c1e:	3284      	adds	r2, #132	@ 0x84
 8004c20:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004c24:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	0c1b      	lsrs	r3, r3, #16
 8004c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c36:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c38:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4619      	mov	r1, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	01db      	lsls	r3, r3, #7
 8004c44:	440b      	add	r3, r1
 8004c46:	3384      	adds	r3, #132	@ 0x84
 8004c48:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c4e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c5e:	4413      	add	r3, r2
 8004c60:	041b      	lsls	r3, r3, #16
 8004c62:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	01db      	lsls	r3, r3, #7
 8004c6e:	4413      	add	r3, r2
 8004c70:	3384      	adds	r3, #132	@ 0x84
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	4611      	mov	r1, r2
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	01d2      	lsls	r2, r2, #7
 8004c7e:	440a      	add	r2, r1
 8004c80:	3284      	adds	r2, #132	@ 0x84
 8004c82:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004c86:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c96:	4413      	add	r3, r2
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	01db      	lsls	r3, r3, #7
 8004ca4:	440b      	add	r3, r1
 8004ca6:	3384      	adds	r3, #132	@ 0x84
 8004ca8:	4619      	mov	r1, r3
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	01db      	lsls	r3, r3, #7
 8004cba:	4413      	add	r3, r2
 8004cbc:	3384      	adds	r3, #132	@ 0x84
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	6812      	ldr	r2, [r2, #0]
 8004cc4:	4611      	mov	r1, r2
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	01d2      	lsls	r2, r2, #7
 8004cca:	440a      	add	r2, r1
 8004ccc:	3284      	adds	r2, #132	@ 0x84
 8004cce:	f023 0307 	bic.w	r3, r3, #7
 8004cd2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	01db      	lsls	r3, r3, #7
 8004cde:	4413      	add	r3, r2
 8004ce0:	3384      	adds	r3, #132	@ 0x84
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004cfa:	041b      	lsls	r3, r3, #16
 8004cfc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	061b      	lsls	r3, r3, #24
 8004d04:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	01db      	lsls	r3, r3, #7
 8004d10:	4413      	add	r3, r2
 8004d12:	3384      	adds	r3, #132	@ 0x84
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	01db      	lsls	r3, r3, #7
 8004d20:	4413      	add	r3, r2
 8004d22:	3384      	adds	r3, #132	@ 0x84
 8004d24:	461a      	mov	r2, r3
 8004d26:	2300      	movs	r3, #0
 8004d28:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004d30:	461a      	mov	r2, r3
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	431a      	orrs	r2, r3
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4619      	mov	r1, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	01db      	lsls	r3, r3, #7
 8004d44:	440b      	add	r3, r1
 8004d46:	3384      	adds	r3, #132	@ 0x84
 8004d48:	4619      	mov	r1, r3
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	461a      	mov	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	01db      	lsls	r3, r3, #7
 8004d5a:	4413      	add	r3, r2
 8004d5c:	3384      	adds	r3, #132	@ 0x84
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	6812      	ldr	r2, [r2, #0]
 8004d64:	4611      	mov	r1, r2
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	01d2      	lsls	r2, r2, #7
 8004d6a:	440a      	add	r2, r1
 8004d6c:	3284      	adds	r2, #132	@ 0x84
 8004d6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004d72:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	01db      	lsls	r3, r3, #7
 8004d7e:	4413      	add	r3, r2
 8004d80:	3384      	adds	r3, #132	@ 0x84
 8004d82:	461a      	mov	r2, r3
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	01db      	lsls	r3, r3, #7
 8004d94:	4413      	add	r3, r2
 8004d96:	3384      	adds	r3, #132	@ 0x84
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	6812      	ldr	r2, [r2, #0]
 8004d9e:	4611      	mov	r1, r2
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	01d2      	lsls	r2, r2, #7
 8004da4:	440a      	add	r2, r1
 8004da6:	3284      	adds	r2, #132	@ 0x84
 8004da8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004dac:	f023 0307 	bic.w	r3, r3, #7
 8004db0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	69da      	ldr	r2, [r3, #28]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	68f9      	ldr	r1, [r7, #12]
 8004dbc:	6809      	ldr	r1, [r1, #0]
 8004dbe:	4608      	mov	r0, r1
 8004dc0:	6879      	ldr	r1, [r7, #4]
 8004dc2:	01c9      	lsls	r1, r1, #7
 8004dc4:	4401      	add	r1, r0
 8004dc6:	3184      	adds	r1, #132	@ 0x84
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	01db      	lsls	r3, r3, #7
 8004dd6:	4413      	add	r3, r2
 8004dd8:	3384      	adds	r3, #132	@ 0x84
 8004dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	01db      	lsls	r3, r3, #7
 8004de6:	4413      	add	r3, r2
 8004de8:	3384      	adds	r3, #132	@ 0x84
 8004dea:	461a      	mov	r2, r3
 8004dec:	2300      	movs	r3, #0
 8004dee:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	461a      	mov	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	01db      	lsls	r3, r3, #7
 8004dfa:	4413      	add	r3, r2
 8004dfc:	3384      	adds	r3, #132	@ 0x84
 8004dfe:	461a      	mov	r2, r3
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e04:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d102      	bne.n	8004e14 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004e0e:	2304      	movs	r3, #4
 8004e10:	61fb      	str	r3, [r7, #28]
 8004e12:	e01b      	b.n	8004e4c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d102      	bne.n	8004e22 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	61fb      	str	r3, [r7, #28]
 8004e20:	e014      	b.n	8004e4c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d00b      	beq.n	8004e42 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d007      	beq.n	8004e42 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d003      	beq.n	8004e42 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004e3e:	2b07      	cmp	r3, #7
 8004e40:	d102      	bne.n	8004e48 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004e42:	2302      	movs	r3, #2
 8004e44:	61fb      	str	r3, [r7, #28]
 8004e46:	e001      	b.n	8004e4c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	461a      	mov	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	01db      	lsls	r3, r3, #7
 8004e56:	4413      	add	r3, r2
 8004e58:	3384      	adds	r3, #132	@ 0x84
 8004e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	4611      	mov	r1, r2
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	01d2      	lsls	r2, r2, #7
 8004e66:	440a      	add	r2, r1
 8004e68:	3284      	adds	r2, #132	@ 0x84
 8004e6a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e74:	69fa      	ldr	r2, [r7, #28]
 8004e76:	fb02 f303 	mul.w	r3, r2, r3
 8004e7a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	6859      	ldr	r1, [r3, #4]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	1acb      	subs	r3, r1, r3
 8004e86:	69f9      	ldr	r1, [r7, #28]
 8004e88:	fb01 f303 	mul.w	r3, r1, r3
 8004e8c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004e8e:	68f9      	ldr	r1, [r7, #12]
 8004e90:	6809      	ldr	r1, [r1, #0]
 8004e92:	4608      	mov	r0, r1
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	01c9      	lsls	r1, r1, #7
 8004e98:	4401      	add	r1, r0
 8004e9a:	3184      	adds	r1, #132	@ 0x84
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	01db      	lsls	r3, r3, #7
 8004eaa:	4413      	add	r3, r2
 8004eac:	3384      	adds	r3, #132	@ 0x84
 8004eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	6812      	ldr	r2, [r2, #0]
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	01d2      	lsls	r2, r2, #7
 8004eba:	440a      	add	r2, r1
 8004ebc:	3284      	adds	r2, #132	@ 0x84
 8004ebe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004ec2:	f023 0307 	bic.w	r3, r3, #7
 8004ec6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	01db      	lsls	r3, r3, #7
 8004ed2:	4413      	add	r3, r2
 8004ed4:	3384      	adds	r3, #132	@ 0x84
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004edc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	01db      	lsls	r3, r3, #7
 8004ee8:	4413      	add	r3, r2
 8004eea:	3384      	adds	r3, #132	@ 0x84
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	6812      	ldr	r2, [r2, #0]
 8004ef2:	4611      	mov	r1, r2
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	01d2      	lsls	r2, r2, #7
 8004ef8:	440a      	add	r2, r1
 8004efa:	3284      	adds	r2, #132	@ 0x84
 8004efc:	f043 0301 	orr.w	r3, r3, #1
 8004f00:	6013      	str	r3, [r2, #0]
}
 8004f02:	bf00      	nop
 8004f04:	3724      	adds	r7, #36	@ 0x24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
	...

08004f10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e267      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d075      	beq.n	800501a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f2e:	4b88      	ldr	r3, [pc, #544]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f003 030c 	and.w	r3, r3, #12
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d00c      	beq.n	8004f54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f3a:	4b85      	ldr	r3, [pc, #532]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d112      	bne.n	8004f6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f46:	4b82      	ldr	r3, [pc, #520]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f52:	d10b      	bne.n	8004f6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f54:	4b7e      	ldr	r3, [pc, #504]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d05b      	beq.n	8005018 <HAL_RCC_OscConfig+0x108>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d157      	bne.n	8005018 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e242      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f74:	d106      	bne.n	8004f84 <HAL_RCC_OscConfig+0x74>
 8004f76:	4b76      	ldr	r3, [pc, #472]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a75      	ldr	r2, [pc, #468]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 8004f7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	e01d      	b.n	8004fc0 <HAL_RCC_OscConfig+0xb0>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f8c:	d10c      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x98>
 8004f8e:	4b70      	ldr	r3, [pc, #448]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a6f      	ldr	r2, [pc, #444]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 8004f94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f98:	6013      	str	r3, [r2, #0]
 8004f9a:	4b6d      	ldr	r3, [pc, #436]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a6c      	ldr	r2, [pc, #432]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 8004fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	e00b      	b.n	8004fc0 <HAL_RCC_OscConfig+0xb0>
 8004fa8:	4b69      	ldr	r3, [pc, #420]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a68      	ldr	r2, [pc, #416]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 8004fae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fb2:	6013      	str	r3, [r2, #0]
 8004fb4:	4b66      	ldr	r3, [pc, #408]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a65      	ldr	r2, [pc, #404]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 8004fba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d013      	beq.n	8004ff0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc8:	f7fc fc66 	bl	8001898 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fd0:	f7fc fc62 	bl	8001898 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b64      	cmp	r3, #100	@ 0x64
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e207      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fe2:	4b5b      	ldr	r3, [pc, #364]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0f0      	beq.n	8004fd0 <HAL_RCC_OscConfig+0xc0>
 8004fee:	e014      	b.n	800501a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff0:	f7fc fc52 	bl	8001898 <HAL_GetTick>
 8004ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ff8:	f7fc fc4e 	bl	8001898 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b64      	cmp	r3, #100	@ 0x64
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e1f3      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800500a:	4b51      	ldr	r3, [pc, #324]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1f0      	bne.n	8004ff8 <HAL_RCC_OscConfig+0xe8>
 8005016:	e000      	b.n	800501a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d063      	beq.n	80050ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005026:	4b4a      	ldr	r3, [pc, #296]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 030c 	and.w	r3, r3, #12
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00b      	beq.n	800504a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005032:	4b47      	ldr	r3, [pc, #284]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800503a:	2b08      	cmp	r3, #8
 800503c:	d11c      	bne.n	8005078 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800503e:	4b44      	ldr	r3, [pc, #272]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d116      	bne.n	8005078 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800504a:	4b41      	ldr	r3, [pc, #260]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <HAL_RCC_OscConfig+0x152>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d001      	beq.n	8005062 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e1c7      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005062:	4b3b      	ldr	r3, [pc, #236]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	4937      	ldr	r1, [pc, #220]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 8005072:	4313      	orrs	r3, r2
 8005074:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005076:	e03a      	b.n	80050ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d020      	beq.n	80050c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005080:	4b34      	ldr	r3, [pc, #208]	@ (8005154 <HAL_RCC_OscConfig+0x244>)
 8005082:	2201      	movs	r2, #1
 8005084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005086:	f7fc fc07 	bl	8001898 <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800508c:	e008      	b.n	80050a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800508e:	f7fc fc03 	bl	8001898 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e1a8      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a0:	4b2b      	ldr	r3, [pc, #172]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0f0      	beq.n	800508e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ac:	4b28      	ldr	r3, [pc, #160]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	4925      	ldr	r1, [pc, #148]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	600b      	str	r3, [r1, #0]
 80050c0:	e015      	b.n	80050ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050c2:	4b24      	ldr	r3, [pc, #144]	@ (8005154 <HAL_RCC_OscConfig+0x244>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c8:	f7fc fbe6 	bl	8001898 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050d0:	f7fc fbe2 	bl	8001898 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e187      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0308 	and.w	r3, r3, #8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d036      	beq.n	8005168 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d016      	beq.n	8005130 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005102:	4b15      	ldr	r3, [pc, #84]	@ (8005158 <HAL_RCC_OscConfig+0x248>)
 8005104:	2201      	movs	r2, #1
 8005106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005108:	f7fc fbc6 	bl	8001898 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005110:	f7fc fbc2 	bl	8001898 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e167      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005122:	4b0b      	ldr	r3, [pc, #44]	@ (8005150 <HAL_RCC_OscConfig+0x240>)
 8005124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0f0      	beq.n	8005110 <HAL_RCC_OscConfig+0x200>
 800512e:	e01b      	b.n	8005168 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005130:	4b09      	ldr	r3, [pc, #36]	@ (8005158 <HAL_RCC_OscConfig+0x248>)
 8005132:	2200      	movs	r2, #0
 8005134:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005136:	f7fc fbaf 	bl	8001898 <HAL_GetTick>
 800513a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800513c:	e00e      	b.n	800515c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800513e:	f7fc fbab 	bl	8001898 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d907      	bls.n	800515c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e150      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
 8005150:	40023800 	.word	0x40023800
 8005154:	42470000 	.word	0x42470000
 8005158:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800515c:	4b88      	ldr	r3, [pc, #544]	@ (8005380 <HAL_RCC_OscConfig+0x470>)
 800515e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1ea      	bne.n	800513e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 8097 	beq.w	80052a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005176:	2300      	movs	r3, #0
 8005178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800517a:	4b81      	ldr	r3, [pc, #516]	@ (8005380 <HAL_RCC_OscConfig+0x470>)
 800517c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10f      	bne.n	80051a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005186:	2300      	movs	r3, #0
 8005188:	60bb      	str	r3, [r7, #8]
 800518a:	4b7d      	ldr	r3, [pc, #500]	@ (8005380 <HAL_RCC_OscConfig+0x470>)
 800518c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518e:	4a7c      	ldr	r2, [pc, #496]	@ (8005380 <HAL_RCC_OscConfig+0x470>)
 8005190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005194:	6413      	str	r3, [r2, #64]	@ 0x40
 8005196:	4b7a      	ldr	r3, [pc, #488]	@ (8005380 <HAL_RCC_OscConfig+0x470>)
 8005198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800519e:	60bb      	str	r3, [r7, #8]
 80051a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051a2:	2301      	movs	r3, #1
 80051a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a6:	4b77      	ldr	r3, [pc, #476]	@ (8005384 <HAL_RCC_OscConfig+0x474>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d118      	bne.n	80051e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051b2:	4b74      	ldr	r3, [pc, #464]	@ (8005384 <HAL_RCC_OscConfig+0x474>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a73      	ldr	r2, [pc, #460]	@ (8005384 <HAL_RCC_OscConfig+0x474>)
 80051b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051be:	f7fc fb6b 	bl	8001898 <HAL_GetTick>
 80051c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c4:	e008      	b.n	80051d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051c6:	f7fc fb67 	bl	8001898 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d901      	bls.n	80051d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e10c      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d8:	4b6a      	ldr	r3, [pc, #424]	@ (8005384 <HAL_RCC_OscConfig+0x474>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d0f0      	beq.n	80051c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d106      	bne.n	80051fa <HAL_RCC_OscConfig+0x2ea>
 80051ec:	4b64      	ldr	r3, [pc, #400]	@ (8005380 <HAL_RCC_OscConfig+0x470>)
 80051ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f0:	4a63      	ldr	r2, [pc, #396]	@ (8005380 <HAL_RCC_OscConfig+0x470>)
 80051f2:	f043 0301 	orr.w	r3, r3, #1
 80051f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80051f8:	e01c      	b.n	8005234 <HAL_RCC_OscConfig+0x324>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	2b05      	cmp	r3, #5
 8005200:	d10c      	bne.n	800521c <HAL_RCC_OscConfig+0x30c>
 8005202:	4b5f      	ldr	r3, [pc, #380]	@ (8005380 <HAL_RCC_OscConfig+0x470>)
 8005204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005206:	4a5e      	ldr	r2, [pc, #376]	@ (8005380 <HAL_RCC_OscConfig+0x470>)
 8005208:	f043 0304 	orr.w	r3, r3, #4
 800520c:	6713      	str	r3, [r2, #112]	@ 0x70
 800520e:	4b5c      	ldr	r3, [pc, #368]	@ (8005380 <HAL_RCC_OscConfig+0x470>)
 8005210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005212:	4a5b      	ldr	r2, [pc, #364]	@ (8005380 <HAL_RCC_OscConfig+0x470>)
 8005214:	f043 0301 	orr.w	r3, r3, #1
 8005218:	6713      	str	r3, [r2, #112]	@ 0x70
 800521a:	e00b      	b.n	8005234 <HAL_RCC_OscConfig+0x324>
 800521c:	4b58      	ldr	r3, [pc, #352]	@ (8005380 <HAL_RCC_OscConfig+0x470>)
 800521e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005220:	4a57      	ldr	r2, [pc, #348]	@ (8005380 <HAL_RCC_OscConfig+0x470>)
 8005222:	f023 0301 	bic.w	r3, r3, #1
 8005226:	6713      	str	r3, [r2, #112]	@ 0x70
 8005228:	4b55      	ldr	r3, [pc, #340]	@ (8005380 <HAL_RCC_OscConfig+0x470>)
 800522a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800522c:	4a54      	ldr	r2, [pc, #336]	@ (8005380 <HAL_RCC_OscConfig+0x470>)
 800522e:	f023 0304 	bic.w	r3, r3, #4
 8005232:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d015      	beq.n	8005268 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523c:	f7fc fb2c 	bl	8001898 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005242:	e00a      	b.n	800525a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005244:	f7fc fb28 	bl	8001898 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005252:	4293      	cmp	r3, r2
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e0cb      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800525a:	4b49      	ldr	r3, [pc, #292]	@ (8005380 <HAL_RCC_OscConfig+0x470>)
 800525c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0ee      	beq.n	8005244 <HAL_RCC_OscConfig+0x334>
 8005266:	e014      	b.n	8005292 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005268:	f7fc fb16 	bl	8001898 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800526e:	e00a      	b.n	8005286 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005270:	f7fc fb12 	bl	8001898 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800527e:	4293      	cmp	r3, r2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e0b5      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005286:	4b3e      	ldr	r3, [pc, #248]	@ (8005380 <HAL_RCC_OscConfig+0x470>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1ee      	bne.n	8005270 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005292:	7dfb      	ldrb	r3, [r7, #23]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d105      	bne.n	80052a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005298:	4b39      	ldr	r3, [pc, #228]	@ (8005380 <HAL_RCC_OscConfig+0x470>)
 800529a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529c:	4a38      	ldr	r2, [pc, #224]	@ (8005380 <HAL_RCC_OscConfig+0x470>)
 800529e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 80a1 	beq.w	80053f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052ae:	4b34      	ldr	r3, [pc, #208]	@ (8005380 <HAL_RCC_OscConfig+0x470>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 030c 	and.w	r3, r3, #12
 80052b6:	2b08      	cmp	r3, #8
 80052b8:	d05c      	beq.n	8005374 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d141      	bne.n	8005346 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052c2:	4b31      	ldr	r3, [pc, #196]	@ (8005388 <HAL_RCC_OscConfig+0x478>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c8:	f7fc fae6 	bl	8001898 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052d0:	f7fc fae2 	bl	8001898 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e087      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e2:	4b27      	ldr	r3, [pc, #156]	@ (8005380 <HAL_RCC_OscConfig+0x470>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1f0      	bne.n	80052d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	69da      	ldr	r2, [r3, #28]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fc:	019b      	lsls	r3, r3, #6
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005304:	085b      	lsrs	r3, r3, #1
 8005306:	3b01      	subs	r3, #1
 8005308:	041b      	lsls	r3, r3, #16
 800530a:	431a      	orrs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005310:	061b      	lsls	r3, r3, #24
 8005312:	491b      	ldr	r1, [pc, #108]	@ (8005380 <HAL_RCC_OscConfig+0x470>)
 8005314:	4313      	orrs	r3, r2
 8005316:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005318:	4b1b      	ldr	r3, [pc, #108]	@ (8005388 <HAL_RCC_OscConfig+0x478>)
 800531a:	2201      	movs	r2, #1
 800531c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800531e:	f7fc fabb 	bl	8001898 <HAL_GetTick>
 8005322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005324:	e008      	b.n	8005338 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005326:	f7fc fab7 	bl	8001898 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d901      	bls.n	8005338 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e05c      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005338:	4b11      	ldr	r3, [pc, #68]	@ (8005380 <HAL_RCC_OscConfig+0x470>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0f0      	beq.n	8005326 <HAL_RCC_OscConfig+0x416>
 8005344:	e054      	b.n	80053f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005346:	4b10      	ldr	r3, [pc, #64]	@ (8005388 <HAL_RCC_OscConfig+0x478>)
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534c:	f7fc faa4 	bl	8001898 <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005354:	f7fc faa0 	bl	8001898 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e045      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005366:	4b06      	ldr	r3, [pc, #24]	@ (8005380 <HAL_RCC_OscConfig+0x470>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f0      	bne.n	8005354 <HAL_RCC_OscConfig+0x444>
 8005372:	e03d      	b.n	80053f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d107      	bne.n	800538c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e038      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
 8005380:	40023800 	.word	0x40023800
 8005384:	40007000 	.word	0x40007000
 8005388:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800538c:	4b1b      	ldr	r3, [pc, #108]	@ (80053fc <HAL_RCC_OscConfig+0x4ec>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d028      	beq.n	80053ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d121      	bne.n	80053ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d11a      	bne.n	80053ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80053bc:	4013      	ands	r3, r2
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d111      	bne.n	80053ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d2:	085b      	lsrs	r3, r3, #1
 80053d4:	3b01      	subs	r3, #1
 80053d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053d8:	429a      	cmp	r2, r3
 80053da:	d107      	bne.n	80053ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d001      	beq.n	80053f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e000      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	40023800 	.word	0x40023800

08005400 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e0cc      	b.n	80055ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005414:	4b68      	ldr	r3, [pc, #416]	@ (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 030f 	and.w	r3, r3, #15
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	429a      	cmp	r2, r3
 8005420:	d90c      	bls.n	800543c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005422:	4b65      	ldr	r3, [pc, #404]	@ (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800542a:	4b63      	ldr	r3, [pc, #396]	@ (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 030f 	and.w	r3, r3, #15
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	429a      	cmp	r2, r3
 8005436:	d001      	beq.n	800543c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e0b8      	b.n	80055ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d020      	beq.n	800548a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	d005      	beq.n	8005460 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005454:	4b59      	ldr	r3, [pc, #356]	@ (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	4a58      	ldr	r2, [pc, #352]	@ (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 800545a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800545e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0308 	and.w	r3, r3, #8
 8005468:	2b00      	cmp	r3, #0
 800546a:	d005      	beq.n	8005478 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800546c:	4b53      	ldr	r3, [pc, #332]	@ (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	4a52      	ldr	r2, [pc, #328]	@ (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 8005472:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005476:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005478:	4b50      	ldr	r3, [pc, #320]	@ (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	494d      	ldr	r1, [pc, #308]	@ (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	4313      	orrs	r3, r2
 8005488:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d044      	beq.n	8005520 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d107      	bne.n	80054ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800549e:	4b47      	ldr	r3, [pc, #284]	@ (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d119      	bne.n	80054de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e07f      	b.n	80055ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d003      	beq.n	80054be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054ba:	2b03      	cmp	r3, #3
 80054bc:	d107      	bne.n	80054ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054be:	4b3f      	ldr	r3, [pc, #252]	@ (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d109      	bne.n	80054de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e06f      	b.n	80055ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ce:	4b3b      	ldr	r3, [pc, #236]	@ (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e067      	b.n	80055ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054de:	4b37      	ldr	r3, [pc, #220]	@ (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f023 0203 	bic.w	r2, r3, #3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	4934      	ldr	r1, [pc, #208]	@ (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054f0:	f7fc f9d2 	bl	8001898 <HAL_GetTick>
 80054f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054f6:	e00a      	b.n	800550e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054f8:	f7fc f9ce 	bl	8001898 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005506:	4293      	cmp	r3, r2
 8005508:	d901      	bls.n	800550e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e04f      	b.n	80055ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800550e:	4b2b      	ldr	r3, [pc, #172]	@ (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f003 020c 	and.w	r2, r3, #12
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	429a      	cmp	r2, r3
 800551e:	d1eb      	bne.n	80054f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005520:	4b25      	ldr	r3, [pc, #148]	@ (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 030f 	and.w	r3, r3, #15
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d20c      	bcs.n	8005548 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800552e:	4b22      	ldr	r3, [pc, #136]	@ (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005536:	4b20      	ldr	r3, [pc, #128]	@ (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d001      	beq.n	8005548 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e032      	b.n	80055ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b00      	cmp	r3, #0
 8005552:	d008      	beq.n	8005566 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005554:	4b19      	ldr	r3, [pc, #100]	@ (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	4916      	ldr	r1, [pc, #88]	@ (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 8005562:	4313      	orrs	r3, r2
 8005564:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0308 	and.w	r3, r3, #8
 800556e:	2b00      	cmp	r3, #0
 8005570:	d009      	beq.n	8005586 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005572:	4b12      	ldr	r3, [pc, #72]	@ (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	490e      	ldr	r1, [pc, #56]	@ (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 8005582:	4313      	orrs	r3, r2
 8005584:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005586:	f000 f821 	bl	80055cc <HAL_RCC_GetSysClockFreq>
 800558a:	4602      	mov	r2, r0
 800558c:	4b0b      	ldr	r3, [pc, #44]	@ (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	091b      	lsrs	r3, r3, #4
 8005592:	f003 030f 	and.w	r3, r3, #15
 8005596:	490a      	ldr	r1, [pc, #40]	@ (80055c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005598:	5ccb      	ldrb	r3, [r1, r3]
 800559a:	fa22 f303 	lsr.w	r3, r2, r3
 800559e:	4a09      	ldr	r2, [pc, #36]	@ (80055c4 <HAL_RCC_ClockConfig+0x1c4>)
 80055a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055a2:	4b09      	ldr	r3, [pc, #36]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c8>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fc f80e 	bl	80015c8 <HAL_InitTick>

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	40023c00 	.word	0x40023c00
 80055bc:	40023800 	.word	0x40023800
 80055c0:	08114890 	.word	0x08114890
 80055c4:	20000008 	.word	0x20000008
 80055c8:	2000000c 	.word	0x2000000c

080055cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055d0:	b094      	sub	sp, #80	@ 0x50
 80055d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055d4:	2300      	movs	r3, #0
 80055d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80055d8:	2300      	movs	r3, #0
 80055da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055dc:	2300      	movs	r3, #0
 80055de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055e4:	4b79      	ldr	r3, [pc, #484]	@ (80057cc <HAL_RCC_GetSysClockFreq+0x200>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f003 030c 	and.w	r3, r3, #12
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d00d      	beq.n	800560c <HAL_RCC_GetSysClockFreq+0x40>
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	f200 80e1 	bhi.w	80057b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <HAL_RCC_GetSysClockFreq+0x34>
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	d003      	beq.n	8005606 <HAL_RCC_GetSysClockFreq+0x3a>
 80055fe:	e0db      	b.n	80057b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005600:	4b73      	ldr	r3, [pc, #460]	@ (80057d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005602:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005604:	e0db      	b.n	80057be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005606:	4b73      	ldr	r3, [pc, #460]	@ (80057d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005608:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800560a:	e0d8      	b.n	80057be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800560c:	4b6f      	ldr	r3, [pc, #444]	@ (80057cc <HAL_RCC_GetSysClockFreq+0x200>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005614:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005616:	4b6d      	ldr	r3, [pc, #436]	@ (80057cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d063      	beq.n	80056ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005622:	4b6a      	ldr	r3, [pc, #424]	@ (80057cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	099b      	lsrs	r3, r3, #6
 8005628:	2200      	movs	r2, #0
 800562a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800562c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800562e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005634:	633b      	str	r3, [r7, #48]	@ 0x30
 8005636:	2300      	movs	r3, #0
 8005638:	637b      	str	r3, [r7, #52]	@ 0x34
 800563a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800563e:	4622      	mov	r2, r4
 8005640:	462b      	mov	r3, r5
 8005642:	f04f 0000 	mov.w	r0, #0
 8005646:	f04f 0100 	mov.w	r1, #0
 800564a:	0159      	lsls	r1, r3, #5
 800564c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005650:	0150      	lsls	r0, r2, #5
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	4621      	mov	r1, r4
 8005658:	1a51      	subs	r1, r2, r1
 800565a:	6139      	str	r1, [r7, #16]
 800565c:	4629      	mov	r1, r5
 800565e:	eb63 0301 	sbc.w	r3, r3, r1
 8005662:	617b      	str	r3, [r7, #20]
 8005664:	f04f 0200 	mov.w	r2, #0
 8005668:	f04f 0300 	mov.w	r3, #0
 800566c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005670:	4659      	mov	r1, fp
 8005672:	018b      	lsls	r3, r1, #6
 8005674:	4651      	mov	r1, sl
 8005676:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800567a:	4651      	mov	r1, sl
 800567c:	018a      	lsls	r2, r1, #6
 800567e:	4651      	mov	r1, sl
 8005680:	ebb2 0801 	subs.w	r8, r2, r1
 8005684:	4659      	mov	r1, fp
 8005686:	eb63 0901 	sbc.w	r9, r3, r1
 800568a:	f04f 0200 	mov.w	r2, #0
 800568e:	f04f 0300 	mov.w	r3, #0
 8005692:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005696:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800569a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800569e:	4690      	mov	r8, r2
 80056a0:	4699      	mov	r9, r3
 80056a2:	4623      	mov	r3, r4
 80056a4:	eb18 0303 	adds.w	r3, r8, r3
 80056a8:	60bb      	str	r3, [r7, #8]
 80056aa:	462b      	mov	r3, r5
 80056ac:	eb49 0303 	adc.w	r3, r9, r3
 80056b0:	60fb      	str	r3, [r7, #12]
 80056b2:	f04f 0200 	mov.w	r2, #0
 80056b6:	f04f 0300 	mov.w	r3, #0
 80056ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80056be:	4629      	mov	r1, r5
 80056c0:	024b      	lsls	r3, r1, #9
 80056c2:	4621      	mov	r1, r4
 80056c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056c8:	4621      	mov	r1, r4
 80056ca:	024a      	lsls	r2, r1, #9
 80056cc:	4610      	mov	r0, r2
 80056ce:	4619      	mov	r1, r3
 80056d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056d2:	2200      	movs	r2, #0
 80056d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056dc:	f7fa fd88 	bl	80001f0 <__aeabi_uldivmod>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4613      	mov	r3, r2
 80056e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056e8:	e058      	b.n	800579c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056ea:	4b38      	ldr	r3, [pc, #224]	@ (80057cc <HAL_RCC_GetSysClockFreq+0x200>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	099b      	lsrs	r3, r3, #6
 80056f0:	2200      	movs	r2, #0
 80056f2:	4618      	mov	r0, r3
 80056f4:	4611      	mov	r1, r2
 80056f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80056fa:	623b      	str	r3, [r7, #32]
 80056fc:	2300      	movs	r3, #0
 80056fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005700:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005704:	4642      	mov	r2, r8
 8005706:	464b      	mov	r3, r9
 8005708:	f04f 0000 	mov.w	r0, #0
 800570c:	f04f 0100 	mov.w	r1, #0
 8005710:	0159      	lsls	r1, r3, #5
 8005712:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005716:	0150      	lsls	r0, r2, #5
 8005718:	4602      	mov	r2, r0
 800571a:	460b      	mov	r3, r1
 800571c:	4641      	mov	r1, r8
 800571e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005722:	4649      	mov	r1, r9
 8005724:	eb63 0b01 	sbc.w	fp, r3, r1
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	f04f 0300 	mov.w	r3, #0
 8005730:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005734:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005738:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800573c:	ebb2 040a 	subs.w	r4, r2, sl
 8005740:	eb63 050b 	sbc.w	r5, r3, fp
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	00eb      	lsls	r3, r5, #3
 800574e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005752:	00e2      	lsls	r2, r4, #3
 8005754:	4614      	mov	r4, r2
 8005756:	461d      	mov	r5, r3
 8005758:	4643      	mov	r3, r8
 800575a:	18e3      	adds	r3, r4, r3
 800575c:	603b      	str	r3, [r7, #0]
 800575e:	464b      	mov	r3, r9
 8005760:	eb45 0303 	adc.w	r3, r5, r3
 8005764:	607b      	str	r3, [r7, #4]
 8005766:	f04f 0200 	mov.w	r2, #0
 800576a:	f04f 0300 	mov.w	r3, #0
 800576e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005772:	4629      	mov	r1, r5
 8005774:	028b      	lsls	r3, r1, #10
 8005776:	4621      	mov	r1, r4
 8005778:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800577c:	4621      	mov	r1, r4
 800577e:	028a      	lsls	r2, r1, #10
 8005780:	4610      	mov	r0, r2
 8005782:	4619      	mov	r1, r3
 8005784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005786:	2200      	movs	r2, #0
 8005788:	61bb      	str	r3, [r7, #24]
 800578a:	61fa      	str	r2, [r7, #28]
 800578c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005790:	f7fa fd2e 	bl	80001f0 <__aeabi_uldivmod>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	4613      	mov	r3, r2
 800579a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800579c:	4b0b      	ldr	r3, [pc, #44]	@ (80057cc <HAL_RCC_GetSysClockFreq+0x200>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	0c1b      	lsrs	r3, r3, #16
 80057a2:	f003 0303 	and.w	r3, r3, #3
 80057a6:	3301      	adds	r3, #1
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80057ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057b6:	e002      	b.n	80057be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057b8:	4b05      	ldr	r3, [pc, #20]	@ (80057d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80057ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3750      	adds	r7, #80	@ 0x50
 80057c4:	46bd      	mov	sp, r7
 80057c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057ca:	bf00      	nop
 80057cc:	40023800 	.word	0x40023800
 80057d0:	00f42400 	.word	0x00f42400
 80057d4:	007a1200 	.word	0x007a1200

080057d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057d8:	b480      	push	{r7}
 80057da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057dc:	4b03      	ldr	r3, [pc, #12]	@ (80057ec <HAL_RCC_GetHCLKFreq+0x14>)
 80057de:	681b      	ldr	r3, [r3, #0]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	20000008 	.word	0x20000008

080057f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057f4:	f7ff fff0 	bl	80057d8 <HAL_RCC_GetHCLKFreq>
 80057f8:	4602      	mov	r2, r0
 80057fa:	4b05      	ldr	r3, [pc, #20]	@ (8005810 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	0a9b      	lsrs	r3, r3, #10
 8005800:	f003 0307 	and.w	r3, r3, #7
 8005804:	4903      	ldr	r1, [pc, #12]	@ (8005814 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005806:	5ccb      	ldrb	r3, [r1, r3]
 8005808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800580c:	4618      	mov	r0, r3
 800580e:	bd80      	pop	{r7, pc}
 8005810:	40023800 	.word	0x40023800
 8005814:	081148a0 	.word	0x081148a0

08005818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800581c:	f7ff ffdc 	bl	80057d8 <HAL_RCC_GetHCLKFreq>
 8005820:	4602      	mov	r2, r0
 8005822:	4b05      	ldr	r3, [pc, #20]	@ (8005838 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	0b5b      	lsrs	r3, r3, #13
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	4903      	ldr	r1, [pc, #12]	@ (800583c <HAL_RCC_GetPCLK2Freq+0x24>)
 800582e:	5ccb      	ldrb	r3, [r1, r3]
 8005830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005834:	4618      	mov	r0, r3
 8005836:	bd80      	pop	{r7, pc}
 8005838:	40023800 	.word	0x40023800
 800583c:	081148a0 	.word	0x081148a0

08005840 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	220f      	movs	r2, #15
 800584e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005850:	4b12      	ldr	r3, [pc, #72]	@ (800589c <HAL_RCC_GetClockConfig+0x5c>)
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f003 0203 	and.w	r2, r3, #3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800585c:	4b0f      	ldr	r3, [pc, #60]	@ (800589c <HAL_RCC_GetClockConfig+0x5c>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005868:	4b0c      	ldr	r3, [pc, #48]	@ (800589c <HAL_RCC_GetClockConfig+0x5c>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005874:	4b09      	ldr	r3, [pc, #36]	@ (800589c <HAL_RCC_GetClockConfig+0x5c>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	08db      	lsrs	r3, r3, #3
 800587a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005882:	4b07      	ldr	r3, [pc, #28]	@ (80058a0 <HAL_RCC_GetClockConfig+0x60>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 020f 	and.w	r2, r3, #15
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	601a      	str	r2, [r3, #0]
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	40023800 	.word	0x40023800
 80058a0:	40023c00 	.word	0x40023c00

080058a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10b      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d105      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d075      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058d8:	4b91      	ldr	r3, [pc, #580]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058de:	f7fb ffdb 	bl	8001898 <HAL_GetTick>
 80058e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058e4:	e008      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80058e6:	f7fb ffd7 	bl	8001898 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d901      	bls.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e189      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058f8:	4b8a      	ldr	r3, [pc, #552]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1f0      	bne.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b00      	cmp	r3, #0
 800590e:	d009      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	019a      	lsls	r2, r3, #6
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	071b      	lsls	r3, r3, #28
 800591c:	4981      	ldr	r1, [pc, #516]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800591e:	4313      	orrs	r3, r2
 8005920:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01f      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005930:	4b7c      	ldr	r3, [pc, #496]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005932:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005936:	0f1b      	lsrs	r3, r3, #28
 8005938:	f003 0307 	and.w	r3, r3, #7
 800593c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	019a      	lsls	r2, r3, #6
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	061b      	lsls	r3, r3, #24
 800594a:	431a      	orrs	r2, r3
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	071b      	lsls	r3, r3, #28
 8005950:	4974      	ldr	r1, [pc, #464]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005952:	4313      	orrs	r3, r2
 8005954:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005958:	4b72      	ldr	r3, [pc, #456]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800595a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800595e:	f023 021f 	bic.w	r2, r3, #31
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	3b01      	subs	r3, #1
 8005968:	496e      	ldr	r1, [pc, #440]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800596a:	4313      	orrs	r3, r2
 800596c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00d      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	019a      	lsls	r2, r3, #6
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	061b      	lsls	r3, r3, #24
 8005988:	431a      	orrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	071b      	lsls	r3, r3, #28
 8005990:	4964      	ldr	r1, [pc, #400]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005992:	4313      	orrs	r3, r2
 8005994:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005998:	4b61      	ldr	r3, [pc, #388]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800599a:	2201      	movs	r2, #1
 800599c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800599e:	f7fb ff7b 	bl	8001898 <HAL_GetTick>
 80059a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059a4:	e008      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80059a6:	f7fb ff77 	bl	8001898 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d901      	bls.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e129      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059b8:	4b5a      	ldr	r3, [pc, #360]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0f0      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d105      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d079      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80059dc:	4b52      	ldr	r3, [pc, #328]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80059de:	2200      	movs	r2, #0
 80059e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059e2:	f7fb ff59 	bl	8001898 <HAL_GetTick>
 80059e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059e8:	e008      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80059ea:	f7fb ff55 	bl	8001898 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d901      	bls.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e107      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059fc:	4b49      	ldr	r3, [pc, #292]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a08:	d0ef      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0304 	and.w	r3, r3, #4
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d020      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a16:	4b43      	ldr	r3, [pc, #268]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a1c:	0f1b      	lsrs	r3, r3, #28
 8005a1e:	f003 0307 	and.w	r3, r3, #7
 8005a22:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	019a      	lsls	r2, r3, #6
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	061b      	lsls	r3, r3, #24
 8005a30:	431a      	orrs	r2, r3
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	071b      	lsls	r3, r3, #28
 8005a36:	493b      	ldr	r1, [pc, #236]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a3e:	4b39      	ldr	r3, [pc, #228]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a44:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	021b      	lsls	r3, r3, #8
 8005a50:	4934      	ldr	r1, [pc, #208]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0308 	and.w	r3, r3, #8
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01e      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a64:	4b2f      	ldr	r3, [pc, #188]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a6a:	0e1b      	lsrs	r3, r3, #24
 8005a6c:	f003 030f 	and.w	r3, r3, #15
 8005a70:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	019a      	lsls	r2, r3, #6
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	061b      	lsls	r3, r3, #24
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	071b      	lsls	r3, r3, #28
 8005a84:	4927      	ldr	r1, [pc, #156]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005a8c:	4b25      	ldr	r3, [pc, #148]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a92:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9a:	4922      	ldr	r1, [pc, #136]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005aa2:	4b21      	ldr	r3, [pc, #132]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005aa8:	f7fb fef6 	bl	8001898 <HAL_GetTick>
 8005aac:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005aae:	e008      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005ab0:	f7fb fef2 	bl	8001898 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e0a4      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ac2:	4b18      	ldr	r3, [pc, #96]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005aca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ace:	d1ef      	bne.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 808b 	beq.w	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60fb      	str	r3, [r7, #12]
 8005ae2:	4b10      	ldr	r3, [pc, #64]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae6:	4a0f      	ldr	r2, [pc, #60]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8005aee:	4b0d      	ldr	r3, [pc, #52]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005afa:	4b0c      	ldr	r3, [pc, #48]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a0b      	ldr	r2, [pc, #44]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b04:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b06:	f7fb fec7 	bl	8001898 <HAL_GetTick>
 8005b0a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b0c:	e010      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b0e:	f7fb fec3 	bl	8001898 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d909      	bls.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e075      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005b20:	42470068 	.word	0x42470068
 8005b24:	40023800 	.word	0x40023800
 8005b28:	42470070 	.word	0x42470070
 8005b2c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b30:	4b38      	ldr	r3, [pc, #224]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d0e8      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b3c:	4b36      	ldr	r3, [pc, #216]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b44:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d02f      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d028      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b62:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b64:	4b2d      	ldr	r3, [pc, #180]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005b66:	2201      	movs	r2, #1
 8005b68:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b70:	4a29      	ldr	r2, [pc, #164]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b76:	4b28      	ldr	r3, [pc, #160]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d114      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b82:	f7fb fe89 	bl	8001898 <HAL_GetTick>
 8005b86:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b88:	e00a      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b8a:	f7fb fe85 	bl	8001898 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e035      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d0ee      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bb8:	d10d      	bne.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005bba:	4b17      	ldr	r3, [pc, #92]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005bca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bce:	4912      	ldr	r1, [pc, #72]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	608b      	str	r3, [r1, #8]
 8005bd4:	e005      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005bd6:	4b10      	ldr	r3, [pc, #64]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	4a0f      	ldr	r2, [pc, #60]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bdc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005be0:	6093      	str	r3, [r2, #8]
 8005be2:	4b0d      	ldr	r3, [pc, #52]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005be4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bee:	490a      	ldr	r1, [pc, #40]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0310 	and.w	r3, r3, #16
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d004      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005c06:	4b06      	ldr	r3, [pc, #24]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005c08:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3718      	adds	r7, #24
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	40007000 	.word	0x40007000
 8005c18:	40023800 	.word	0x40023800
 8005c1c:	42470e40 	.word	0x42470e40
 8005c20:	424711e0 	.word	0x424711e0

08005c24 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e025      	b.n	8005c84 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d106      	bne.n	8005c52 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7fb fcb1 	bl	80015b4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2202      	movs	r2, #2
 8005c56:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	3304      	adds	r3, #4
 8005c62:	4619      	mov	r1, r3
 8005c64:	4610      	mov	r0, r2
 8005c66:	f001 f91b 	bl	8006ea0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6818      	ldr	r0, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	461a      	mov	r2, r3
 8005c74:	6839      	ldr	r1, [r7, #0]
 8005c76:	f001 f970 	bl	8006f5a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3708      	adds	r7, #8
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e07b      	b.n	8005d96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d108      	bne.n	8005cb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cae:	d009      	beq.n	8005cc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	61da      	str	r2, [r3, #28]
 8005cb6:	e005      	b.n	8005cc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d106      	bne.n	8005ce4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7fb facc 	bl	800127c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d16:	431a      	orrs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	431a      	orrs	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d48:	ea42 0103 	orr.w	r1, r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d50:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	0c1b      	lsrs	r3, r3, #16
 8005d62:	f003 0104 	and.w	r1, r3, #4
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6a:	f003 0210 	and.w	r2, r3, #16
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	69da      	ldr	r2, [r3, #28]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b082      	sub	sp, #8
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e041      	b.n	8005e34 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d106      	bne.n	8005dca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7fb faa1 	bl	800130c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2202      	movs	r2, #2
 8005dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	4619      	mov	r1, r3
 8005ddc:	4610      	mov	r0, r2
 8005dde:	f000 fa7d 	bl	80062dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d001      	beq.n	8005e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e04e      	b.n	8005ef2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0201 	orr.w	r2, r2, #1
 8005e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a23      	ldr	r2, [pc, #140]	@ (8005f00 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d022      	beq.n	8005ebc <HAL_TIM_Base_Start_IT+0x80>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e7e:	d01d      	beq.n	8005ebc <HAL_TIM_Base_Start_IT+0x80>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a1f      	ldr	r2, [pc, #124]	@ (8005f04 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d018      	beq.n	8005ebc <HAL_TIM_Base_Start_IT+0x80>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8005f08 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d013      	beq.n	8005ebc <HAL_TIM_Base_Start_IT+0x80>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a1c      	ldr	r2, [pc, #112]	@ (8005f0c <HAL_TIM_Base_Start_IT+0xd0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d00e      	beq.n	8005ebc <HAL_TIM_Base_Start_IT+0x80>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8005f10 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d009      	beq.n	8005ebc <HAL_TIM_Base_Start_IT+0x80>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a19      	ldr	r2, [pc, #100]	@ (8005f14 <HAL_TIM_Base_Start_IT+0xd8>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d004      	beq.n	8005ebc <HAL_TIM_Base_Start_IT+0x80>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a18      	ldr	r2, [pc, #96]	@ (8005f18 <HAL_TIM_Base_Start_IT+0xdc>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d111      	bne.n	8005ee0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b06      	cmp	r3, #6
 8005ecc:	d010      	beq.n	8005ef0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f042 0201 	orr.w	r2, r2, #1
 8005edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ede:	e007      	b.n	8005ef0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0201 	orr.w	r2, r2, #1
 8005eee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	40010000 	.word	0x40010000
 8005f04:	40000400 	.word	0x40000400
 8005f08:	40000800 	.word	0x40000800
 8005f0c:	40000c00 	.word	0x40000c00
 8005f10:	40010400 	.word	0x40010400
 8005f14:	40014000 	.word	0x40014000
 8005f18:	40001800 	.word	0x40001800

08005f1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d020      	beq.n	8005f80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01b      	beq.n	8005f80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f06f 0202 	mvn.w	r2, #2
 8005f50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	f003 0303 	and.w	r3, r3, #3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f999 	bl	800629e <HAL_TIM_IC_CaptureCallback>
 8005f6c:	e005      	b.n	8005f7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f98b 	bl	800628a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f99c 	bl	80062b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d020      	beq.n	8005fcc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d01b      	beq.n	8005fcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f06f 0204 	mvn.w	r2, #4
 8005f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f973 	bl	800629e <HAL_TIM_IC_CaptureCallback>
 8005fb8:	e005      	b.n	8005fc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f965 	bl	800628a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f976 	bl	80062b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f003 0308 	and.w	r3, r3, #8
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d020      	beq.n	8006018 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f003 0308 	and.w	r3, r3, #8
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d01b      	beq.n	8006018 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f06f 0208 	mvn.w	r2, #8
 8005fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2204      	movs	r2, #4
 8005fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f94d 	bl	800629e <HAL_TIM_IC_CaptureCallback>
 8006004:	e005      	b.n	8006012 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f93f 	bl	800628a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f950 	bl	80062b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f003 0310 	and.w	r3, r3, #16
 800601e:	2b00      	cmp	r3, #0
 8006020:	d020      	beq.n	8006064 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2b00      	cmp	r3, #0
 800602a:	d01b      	beq.n	8006064 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f06f 0210 	mvn.w	r2, #16
 8006034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2208      	movs	r2, #8
 800603a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f927 	bl	800629e <HAL_TIM_IC_CaptureCallback>
 8006050:	e005      	b.n	800605e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f919 	bl	800628a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f92a 	bl	80062b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00c      	beq.n	8006088 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	d007      	beq.n	8006088 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f06f 0201 	mvn.w	r2, #1
 8006080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7fa fed2 	bl	8000e2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00c      	beq.n	80060ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006098:	2b00      	cmp	r3, #0
 800609a:	d007      	beq.n	80060ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80060a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fae4 	bl	8006674 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00c      	beq.n	80060d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d007      	beq.n	80060d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f8fb 	bl	80062c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f003 0320 	and.w	r3, r3, #32
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00c      	beq.n	80060f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f003 0320 	and.w	r3, r3, #32
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d007      	beq.n	80060f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f06f 0220 	mvn.w	r2, #32
 80060ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fab6 	bl	8006660 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060f4:	bf00      	nop
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <HAL_TIM_ConfigClockSource+0x1c>
 8006114:	2302      	movs	r3, #2
 8006116:	e0b4      	b.n	8006282 <HAL_TIM_ConfigClockSource+0x186>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800613e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006150:	d03e      	beq.n	80061d0 <HAL_TIM_ConfigClockSource+0xd4>
 8006152:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006156:	f200 8087 	bhi.w	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 800615a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800615e:	f000 8086 	beq.w	800626e <HAL_TIM_ConfigClockSource+0x172>
 8006162:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006166:	d87f      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006168:	2b70      	cmp	r3, #112	@ 0x70
 800616a:	d01a      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0xa6>
 800616c:	2b70      	cmp	r3, #112	@ 0x70
 800616e:	d87b      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006170:	2b60      	cmp	r3, #96	@ 0x60
 8006172:	d050      	beq.n	8006216 <HAL_TIM_ConfigClockSource+0x11a>
 8006174:	2b60      	cmp	r3, #96	@ 0x60
 8006176:	d877      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006178:	2b50      	cmp	r3, #80	@ 0x50
 800617a:	d03c      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0xfa>
 800617c:	2b50      	cmp	r3, #80	@ 0x50
 800617e:	d873      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006180:	2b40      	cmp	r3, #64	@ 0x40
 8006182:	d058      	beq.n	8006236 <HAL_TIM_ConfigClockSource+0x13a>
 8006184:	2b40      	cmp	r3, #64	@ 0x40
 8006186:	d86f      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006188:	2b30      	cmp	r3, #48	@ 0x30
 800618a:	d064      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x15a>
 800618c:	2b30      	cmp	r3, #48	@ 0x30
 800618e:	d86b      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006190:	2b20      	cmp	r3, #32
 8006192:	d060      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x15a>
 8006194:	2b20      	cmp	r3, #32
 8006196:	d867      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006198:	2b00      	cmp	r3, #0
 800619a:	d05c      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x15a>
 800619c:	2b10      	cmp	r3, #16
 800619e:	d05a      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x15a>
 80061a0:	e062      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061b2:	f000 f9b9 	bl	8006528 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80061c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	609a      	str	r2, [r3, #8]
      break;
 80061ce:	e04f      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061e0:	f000 f9a2 	bl	8006528 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061f2:	609a      	str	r2, [r3, #8]
      break;
 80061f4:	e03c      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006202:	461a      	mov	r2, r3
 8006204:	f000 f916 	bl	8006434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2150      	movs	r1, #80	@ 0x50
 800620e:	4618      	mov	r0, r3
 8006210:	f000 f96f 	bl	80064f2 <TIM_ITRx_SetConfig>
      break;
 8006214:	e02c      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006222:	461a      	mov	r2, r3
 8006224:	f000 f935 	bl	8006492 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2160      	movs	r1, #96	@ 0x60
 800622e:	4618      	mov	r0, r3
 8006230:	f000 f95f 	bl	80064f2 <TIM_ITRx_SetConfig>
      break;
 8006234:	e01c      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006242:	461a      	mov	r2, r3
 8006244:	f000 f8f6 	bl	8006434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2140      	movs	r1, #64	@ 0x40
 800624e:	4618      	mov	r0, r3
 8006250:	f000 f94f 	bl	80064f2 <TIM_ITRx_SetConfig>
      break;
 8006254:	e00c      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4619      	mov	r1, r3
 8006260:	4610      	mov	r0, r2
 8006262:	f000 f946 	bl	80064f2 <TIM_ITRx_SetConfig>
      break;
 8006266:	e003      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	73fb      	strb	r3, [r7, #15]
      break;
 800626c:	e000      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800626e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006280:	7bfb      	ldrb	r3, [r7, #15]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800628a:	b480      	push	{r7}
 800628c:	b083      	sub	sp, #12
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006292:	bf00      	nop
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062a6:	bf00      	nop
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b083      	sub	sp, #12
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062ba:	bf00      	nop
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
	...

080062dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a46      	ldr	r2, [pc, #280]	@ (8006408 <TIM_Base_SetConfig+0x12c>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d013      	beq.n	800631c <TIM_Base_SetConfig+0x40>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062fa:	d00f      	beq.n	800631c <TIM_Base_SetConfig+0x40>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a43      	ldr	r2, [pc, #268]	@ (800640c <TIM_Base_SetConfig+0x130>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d00b      	beq.n	800631c <TIM_Base_SetConfig+0x40>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a42      	ldr	r2, [pc, #264]	@ (8006410 <TIM_Base_SetConfig+0x134>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d007      	beq.n	800631c <TIM_Base_SetConfig+0x40>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a41      	ldr	r2, [pc, #260]	@ (8006414 <TIM_Base_SetConfig+0x138>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d003      	beq.n	800631c <TIM_Base_SetConfig+0x40>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a40      	ldr	r2, [pc, #256]	@ (8006418 <TIM_Base_SetConfig+0x13c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d108      	bne.n	800632e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a35      	ldr	r2, [pc, #212]	@ (8006408 <TIM_Base_SetConfig+0x12c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d02b      	beq.n	800638e <TIM_Base_SetConfig+0xb2>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800633c:	d027      	beq.n	800638e <TIM_Base_SetConfig+0xb2>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a32      	ldr	r2, [pc, #200]	@ (800640c <TIM_Base_SetConfig+0x130>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d023      	beq.n	800638e <TIM_Base_SetConfig+0xb2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a31      	ldr	r2, [pc, #196]	@ (8006410 <TIM_Base_SetConfig+0x134>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d01f      	beq.n	800638e <TIM_Base_SetConfig+0xb2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a30      	ldr	r2, [pc, #192]	@ (8006414 <TIM_Base_SetConfig+0x138>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d01b      	beq.n	800638e <TIM_Base_SetConfig+0xb2>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a2f      	ldr	r2, [pc, #188]	@ (8006418 <TIM_Base_SetConfig+0x13c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d017      	beq.n	800638e <TIM_Base_SetConfig+0xb2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a2e      	ldr	r2, [pc, #184]	@ (800641c <TIM_Base_SetConfig+0x140>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d013      	beq.n	800638e <TIM_Base_SetConfig+0xb2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a2d      	ldr	r2, [pc, #180]	@ (8006420 <TIM_Base_SetConfig+0x144>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d00f      	beq.n	800638e <TIM_Base_SetConfig+0xb2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a2c      	ldr	r2, [pc, #176]	@ (8006424 <TIM_Base_SetConfig+0x148>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d00b      	beq.n	800638e <TIM_Base_SetConfig+0xb2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a2b      	ldr	r2, [pc, #172]	@ (8006428 <TIM_Base_SetConfig+0x14c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d007      	beq.n	800638e <TIM_Base_SetConfig+0xb2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a2a      	ldr	r2, [pc, #168]	@ (800642c <TIM_Base_SetConfig+0x150>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d003      	beq.n	800638e <TIM_Base_SetConfig+0xb2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a29      	ldr	r2, [pc, #164]	@ (8006430 <TIM_Base_SetConfig+0x154>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d108      	bne.n	80063a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	4313      	orrs	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a10      	ldr	r2, [pc, #64]	@ (8006408 <TIM_Base_SetConfig+0x12c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d003      	beq.n	80063d4 <TIM_Base_SetConfig+0xf8>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a12      	ldr	r2, [pc, #72]	@ (8006418 <TIM_Base_SetConfig+0x13c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d103      	bne.n	80063dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	691a      	ldr	r2, [r3, #16]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d105      	bne.n	80063fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	f023 0201 	bic.w	r2, r3, #1
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	611a      	str	r2, [r3, #16]
  }
}
 80063fa:	bf00      	nop
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	40010000 	.word	0x40010000
 800640c:	40000400 	.word	0x40000400
 8006410:	40000800 	.word	0x40000800
 8006414:	40000c00 	.word	0x40000c00
 8006418:	40010400 	.word	0x40010400
 800641c:	40014000 	.word	0x40014000
 8006420:	40014400 	.word	0x40014400
 8006424:	40014800 	.word	0x40014800
 8006428:	40001800 	.word	0x40001800
 800642c:	40001c00 	.word	0x40001c00
 8006430:	40002000 	.word	0x40002000

08006434 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006434:	b480      	push	{r7}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	f023 0201 	bic.w	r2, r3, #1
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800645e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	4313      	orrs	r3, r2
 8006468:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f023 030a 	bic.w	r3, r3, #10
 8006470:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	4313      	orrs	r3, r2
 8006478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	621a      	str	r2, [r3, #32]
}
 8006486:	bf00      	nop
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006492:	b480      	push	{r7}
 8006494:	b087      	sub	sp, #28
 8006496:	af00      	add	r7, sp, #0
 8006498:	60f8      	str	r0, [r7, #12]
 800649a:	60b9      	str	r1, [r7, #8]
 800649c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	f023 0210 	bic.w	r2, r3, #16
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	031b      	lsls	r3, r3, #12
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80064ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	011b      	lsls	r3, r3, #4
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	621a      	str	r2, [r3, #32]
}
 80064e6:	bf00      	nop
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b085      	sub	sp, #20
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006508:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4313      	orrs	r3, r2
 8006510:	f043 0307 	orr.w	r3, r3, #7
 8006514:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	609a      	str	r2, [r3, #8]
}
 800651c:	bf00      	nop
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
 8006534:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006542:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	021a      	lsls	r2, r3, #8
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	431a      	orrs	r2, r3
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	4313      	orrs	r3, r2
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	4313      	orrs	r3, r2
 8006554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	609a      	str	r2, [r3, #8]
}
 800655c:	bf00      	nop
 800655e:	371c      	adds	r7, #28
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006578:	2b01      	cmp	r3, #1
 800657a:	d101      	bne.n	8006580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800657c:	2302      	movs	r3, #2
 800657e:	e05a      	b.n	8006636 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a21      	ldr	r2, [pc, #132]	@ (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d022      	beq.n	800660a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065cc:	d01d      	beq.n	800660a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a1d      	ldr	r2, [pc, #116]	@ (8006648 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d018      	beq.n	800660a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a1b      	ldr	r2, [pc, #108]	@ (800664c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d013      	beq.n	800660a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a1a      	ldr	r2, [pc, #104]	@ (8006650 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d00e      	beq.n	800660a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a18      	ldr	r2, [pc, #96]	@ (8006654 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d009      	beq.n	800660a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a17      	ldr	r2, [pc, #92]	@ (8006658 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d004      	beq.n	800660a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a15      	ldr	r2, [pc, #84]	@ (800665c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d10c      	bne.n	8006624 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006610:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	4313      	orrs	r3, r2
 800661a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	40010000 	.word	0x40010000
 8006648:	40000400 	.word	0x40000400
 800664c:	40000800 	.word	0x40000800
 8006650:	40000c00 	.word	0x40000c00
 8006654:	40010400 	.word	0x40010400
 8006658:	40014000 	.word	0x40014000
 800665c:	40001800 	.word	0x40001800

08006660 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e042      	b.n	8006720 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d106      	bne.n	80066b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7fa fe4e 	bl	8001350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2224      	movs	r2, #36	@ 0x24
 80066b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68da      	ldr	r2, [r3, #12]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f973 	bl	80069b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	691a      	ldr	r2, [r3, #16]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	695a      	ldr	r2, [r3, #20]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68da      	ldr	r2, [r3, #12]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006700:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2220      	movs	r2, #32
 8006714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b08a      	sub	sp, #40	@ 0x28
 800672c:	af02      	add	r7, sp, #8
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	603b      	str	r3, [r7, #0]
 8006734:	4613      	mov	r3, r2
 8006736:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006738:	2300      	movs	r3, #0
 800673a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b20      	cmp	r3, #32
 8006746:	d175      	bne.n	8006834 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <HAL_UART_Transmit+0x2c>
 800674e:	88fb      	ldrh	r3, [r7, #6]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e06e      	b.n	8006836 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2221      	movs	r2, #33	@ 0x21
 8006762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006766:	f7fb f897 	bl	8001898 <HAL_GetTick>
 800676a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	88fa      	ldrh	r2, [r7, #6]
 8006770:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	88fa      	ldrh	r2, [r7, #6]
 8006776:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006780:	d108      	bne.n	8006794 <HAL_UART_Transmit+0x6c>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d104      	bne.n	8006794 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800678a:	2300      	movs	r3, #0
 800678c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	61bb      	str	r3, [r7, #24]
 8006792:	e003      	b.n	800679c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006798:	2300      	movs	r3, #0
 800679a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800679c:	e02e      	b.n	80067fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	2200      	movs	r2, #0
 80067a6:	2180      	movs	r1, #128	@ 0x80
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 f848 	bl	800683e <UART_WaitOnFlagUntilTimeout>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d005      	beq.n	80067c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2220      	movs	r2, #32
 80067b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e03a      	b.n	8006836 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10b      	bne.n	80067de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	461a      	mov	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	3302      	adds	r3, #2
 80067da:	61bb      	str	r3, [r7, #24]
 80067dc:	e007      	b.n	80067ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	781a      	ldrb	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	3301      	adds	r3, #1
 80067ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	3b01      	subs	r3, #1
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006800:	b29b      	uxth	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1cb      	bne.n	800679e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	2200      	movs	r2, #0
 800680e:	2140      	movs	r1, #64	@ 0x40
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 f814 	bl	800683e <UART_WaitOnFlagUntilTimeout>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d005      	beq.n	8006828 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2220      	movs	r2, #32
 8006820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e006      	b.n	8006836 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2220      	movs	r2, #32
 800682c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006830:	2300      	movs	r3, #0
 8006832:	e000      	b.n	8006836 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006834:	2302      	movs	r3, #2
  }
}
 8006836:	4618      	mov	r0, r3
 8006838:	3720      	adds	r7, #32
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b086      	sub	sp, #24
 8006842:	af00      	add	r7, sp, #0
 8006844:	60f8      	str	r0, [r7, #12]
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	603b      	str	r3, [r7, #0]
 800684a:	4613      	mov	r3, r2
 800684c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800684e:	e03b      	b.n	80068c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006856:	d037      	beq.n	80068c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006858:	f7fb f81e 	bl	8001898 <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	6a3a      	ldr	r2, [r7, #32]
 8006864:	429a      	cmp	r2, r3
 8006866:	d302      	bcc.n	800686e <UART_WaitOnFlagUntilTimeout+0x30>
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e03a      	b.n	80068e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f003 0304 	and.w	r3, r3, #4
 800687c:	2b00      	cmp	r3, #0
 800687e:	d023      	beq.n	80068c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	2b80      	cmp	r3, #128	@ 0x80
 8006884:	d020      	beq.n	80068c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2b40      	cmp	r3, #64	@ 0x40
 800688a:	d01d      	beq.n	80068c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0308 	and.w	r3, r3, #8
 8006896:	2b08      	cmp	r3, #8
 8006898:	d116      	bne.n	80068c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800689a:	2300      	movs	r3, #0
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	617b      	str	r3, [r7, #20]
 80068ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f000 f81d 	bl	80068f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2208      	movs	r2, #8
 80068ba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e00f      	b.n	80068e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	4013      	ands	r3, r2
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	bf0c      	ite	eq
 80068d8:	2301      	moveq	r3, #1
 80068da:	2300      	movne	r3, #0
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	461a      	mov	r2, r3
 80068e0:	79fb      	ldrb	r3, [r7, #7]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d0b4      	beq.n	8006850 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b095      	sub	sp, #84	@ 0x54
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	330c      	adds	r3, #12
 80068fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006902:	e853 3f00 	ldrex	r3, [r3]
 8006906:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800690e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	330c      	adds	r3, #12
 8006916:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006918:	643a      	str	r2, [r7, #64]	@ 0x40
 800691a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800691e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006920:	e841 2300 	strex	r3, r2, [r1]
 8006924:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1e5      	bne.n	80068f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3314      	adds	r3, #20
 8006932:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006934:	6a3b      	ldr	r3, [r7, #32]
 8006936:	e853 3f00 	ldrex	r3, [r3]
 800693a:	61fb      	str	r3, [r7, #28]
   return(result);
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	f023 0301 	bic.w	r3, r3, #1
 8006942:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	3314      	adds	r3, #20
 800694a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800694c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800694e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006950:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006952:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006954:	e841 2300 	strex	r3, r2, [r1]
 8006958:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800695a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1e5      	bne.n	800692c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006964:	2b01      	cmp	r3, #1
 8006966:	d119      	bne.n	800699c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	330c      	adds	r3, #12
 800696e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	e853 3f00 	ldrex	r3, [r3]
 8006976:	60bb      	str	r3, [r7, #8]
   return(result);
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f023 0310 	bic.w	r3, r3, #16
 800697e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	330c      	adds	r3, #12
 8006986:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006988:	61ba      	str	r2, [r7, #24]
 800698a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698c:	6979      	ldr	r1, [r7, #20]
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	613b      	str	r3, [r7, #16]
   return(result);
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e5      	bne.n	8006968 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2220      	movs	r2, #32
 80069a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80069aa:	bf00      	nop
 80069ac:	3754      	adds	r7, #84	@ 0x54
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
	...

080069b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069bc:	b0c0      	sub	sp, #256	@ 0x100
 80069be:	af00      	add	r7, sp, #0
 80069c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80069d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069d4:	68d9      	ldr	r1, [r3, #12]
 80069d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	ea40 0301 	orr.w	r3, r0, r1
 80069e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	431a      	orrs	r2, r3
 80069f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	431a      	orrs	r2, r3
 80069f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006a10:	f021 010c 	bic.w	r1, r1, #12
 8006a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a1e:	430b      	orrs	r3, r1
 8006a20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a32:	6999      	ldr	r1, [r3, #24]
 8006a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	ea40 0301 	orr.w	r3, r0, r1
 8006a3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	4b8f      	ldr	r3, [pc, #572]	@ (8006c84 <UART_SetConfig+0x2cc>)
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d005      	beq.n	8006a58 <UART_SetConfig+0xa0>
 8006a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	4b8d      	ldr	r3, [pc, #564]	@ (8006c88 <UART_SetConfig+0x2d0>)
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d104      	bne.n	8006a62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a58:	f7fe fede 	bl	8005818 <HAL_RCC_GetPCLK2Freq>
 8006a5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006a60:	e003      	b.n	8006a6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a62:	f7fe fec5 	bl	80057f0 <HAL_RCC_GetPCLK1Freq>
 8006a66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a6e:	69db      	ldr	r3, [r3, #28]
 8006a70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a74:	f040 810c 	bne.w	8006c90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006a86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006a8a:	4622      	mov	r2, r4
 8006a8c:	462b      	mov	r3, r5
 8006a8e:	1891      	adds	r1, r2, r2
 8006a90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006a92:	415b      	adcs	r3, r3
 8006a94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006a9a:	4621      	mov	r1, r4
 8006a9c:	eb12 0801 	adds.w	r8, r2, r1
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	eb43 0901 	adc.w	r9, r3, r1
 8006aa6:	f04f 0200 	mov.w	r2, #0
 8006aaa:	f04f 0300 	mov.w	r3, #0
 8006aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006aba:	4690      	mov	r8, r2
 8006abc:	4699      	mov	r9, r3
 8006abe:	4623      	mov	r3, r4
 8006ac0:	eb18 0303 	adds.w	r3, r8, r3
 8006ac4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ac8:	462b      	mov	r3, r5
 8006aca:	eb49 0303 	adc.w	r3, r9, r3
 8006ace:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ade:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006ae2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	18db      	adds	r3, r3, r3
 8006aea:	653b      	str	r3, [r7, #80]	@ 0x50
 8006aec:	4613      	mov	r3, r2
 8006aee:	eb42 0303 	adc.w	r3, r2, r3
 8006af2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006af4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006af8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006afc:	f7f9 fb78 	bl	80001f0 <__aeabi_uldivmod>
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	4b61      	ldr	r3, [pc, #388]	@ (8006c8c <UART_SetConfig+0x2d4>)
 8006b06:	fba3 2302 	umull	r2, r3, r3, r2
 8006b0a:	095b      	lsrs	r3, r3, #5
 8006b0c:	011c      	lsls	r4, r3, #4
 8006b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b12:	2200      	movs	r2, #0
 8006b14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006b1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006b20:	4642      	mov	r2, r8
 8006b22:	464b      	mov	r3, r9
 8006b24:	1891      	adds	r1, r2, r2
 8006b26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006b28:	415b      	adcs	r3, r3
 8006b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006b30:	4641      	mov	r1, r8
 8006b32:	eb12 0a01 	adds.w	sl, r2, r1
 8006b36:	4649      	mov	r1, r9
 8006b38:	eb43 0b01 	adc.w	fp, r3, r1
 8006b3c:	f04f 0200 	mov.w	r2, #0
 8006b40:	f04f 0300 	mov.w	r3, #0
 8006b44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b50:	4692      	mov	sl, r2
 8006b52:	469b      	mov	fp, r3
 8006b54:	4643      	mov	r3, r8
 8006b56:	eb1a 0303 	adds.w	r3, sl, r3
 8006b5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b5e:	464b      	mov	r3, r9
 8006b60:	eb4b 0303 	adc.w	r3, fp, r3
 8006b64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006b78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	18db      	adds	r3, r3, r3
 8006b80:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b82:	4613      	mov	r3, r2
 8006b84:	eb42 0303 	adc.w	r3, r2, r3
 8006b88:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006b92:	f7f9 fb2d 	bl	80001f0 <__aeabi_uldivmod>
 8006b96:	4602      	mov	r2, r0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	4611      	mov	r1, r2
 8006b9c:	4b3b      	ldr	r3, [pc, #236]	@ (8006c8c <UART_SetConfig+0x2d4>)
 8006b9e:	fba3 2301 	umull	r2, r3, r3, r1
 8006ba2:	095b      	lsrs	r3, r3, #5
 8006ba4:	2264      	movs	r2, #100	@ 0x64
 8006ba6:	fb02 f303 	mul.w	r3, r2, r3
 8006baa:	1acb      	subs	r3, r1, r3
 8006bac:	00db      	lsls	r3, r3, #3
 8006bae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006bb2:	4b36      	ldr	r3, [pc, #216]	@ (8006c8c <UART_SetConfig+0x2d4>)
 8006bb4:	fba3 2302 	umull	r2, r3, r3, r2
 8006bb8:	095b      	lsrs	r3, r3, #5
 8006bba:	005b      	lsls	r3, r3, #1
 8006bbc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006bc0:	441c      	add	r4, r3
 8006bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bcc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006bd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006bd4:	4642      	mov	r2, r8
 8006bd6:	464b      	mov	r3, r9
 8006bd8:	1891      	adds	r1, r2, r2
 8006bda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006bdc:	415b      	adcs	r3, r3
 8006bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006be0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006be4:	4641      	mov	r1, r8
 8006be6:	1851      	adds	r1, r2, r1
 8006be8:	6339      	str	r1, [r7, #48]	@ 0x30
 8006bea:	4649      	mov	r1, r9
 8006bec:	414b      	adcs	r3, r1
 8006bee:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bf0:	f04f 0200 	mov.w	r2, #0
 8006bf4:	f04f 0300 	mov.w	r3, #0
 8006bf8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006bfc:	4659      	mov	r1, fp
 8006bfe:	00cb      	lsls	r3, r1, #3
 8006c00:	4651      	mov	r1, sl
 8006c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c06:	4651      	mov	r1, sl
 8006c08:	00ca      	lsls	r2, r1, #3
 8006c0a:	4610      	mov	r0, r2
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	4603      	mov	r3, r0
 8006c10:	4642      	mov	r2, r8
 8006c12:	189b      	adds	r3, r3, r2
 8006c14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c18:	464b      	mov	r3, r9
 8006c1a:	460a      	mov	r2, r1
 8006c1c:	eb42 0303 	adc.w	r3, r2, r3
 8006c20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006c34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c38:	460b      	mov	r3, r1
 8006c3a:	18db      	adds	r3, r3, r3
 8006c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c3e:	4613      	mov	r3, r2
 8006c40:	eb42 0303 	adc.w	r3, r2, r3
 8006c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006c4e:	f7f9 facf 	bl	80001f0 <__aeabi_uldivmod>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	4b0d      	ldr	r3, [pc, #52]	@ (8006c8c <UART_SetConfig+0x2d4>)
 8006c58:	fba3 1302 	umull	r1, r3, r3, r2
 8006c5c:	095b      	lsrs	r3, r3, #5
 8006c5e:	2164      	movs	r1, #100	@ 0x64
 8006c60:	fb01 f303 	mul.w	r3, r1, r3
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	00db      	lsls	r3, r3, #3
 8006c68:	3332      	adds	r3, #50	@ 0x32
 8006c6a:	4a08      	ldr	r2, [pc, #32]	@ (8006c8c <UART_SetConfig+0x2d4>)
 8006c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c70:	095b      	lsrs	r3, r3, #5
 8006c72:	f003 0207 	and.w	r2, r3, #7
 8006c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4422      	add	r2, r4
 8006c7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c80:	e106      	b.n	8006e90 <UART_SetConfig+0x4d8>
 8006c82:	bf00      	nop
 8006c84:	40011000 	.word	0x40011000
 8006c88:	40011400 	.word	0x40011400
 8006c8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c94:	2200      	movs	r2, #0
 8006c96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006c9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006ca2:	4642      	mov	r2, r8
 8006ca4:	464b      	mov	r3, r9
 8006ca6:	1891      	adds	r1, r2, r2
 8006ca8:	6239      	str	r1, [r7, #32]
 8006caa:	415b      	adcs	r3, r3
 8006cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cb2:	4641      	mov	r1, r8
 8006cb4:	1854      	adds	r4, r2, r1
 8006cb6:	4649      	mov	r1, r9
 8006cb8:	eb43 0501 	adc.w	r5, r3, r1
 8006cbc:	f04f 0200 	mov.w	r2, #0
 8006cc0:	f04f 0300 	mov.w	r3, #0
 8006cc4:	00eb      	lsls	r3, r5, #3
 8006cc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cca:	00e2      	lsls	r2, r4, #3
 8006ccc:	4614      	mov	r4, r2
 8006cce:	461d      	mov	r5, r3
 8006cd0:	4643      	mov	r3, r8
 8006cd2:	18e3      	adds	r3, r4, r3
 8006cd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006cd8:	464b      	mov	r3, r9
 8006cda:	eb45 0303 	adc.w	r3, r5, r3
 8006cde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006cee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006cf2:	f04f 0200 	mov.w	r2, #0
 8006cf6:	f04f 0300 	mov.w	r3, #0
 8006cfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006cfe:	4629      	mov	r1, r5
 8006d00:	008b      	lsls	r3, r1, #2
 8006d02:	4621      	mov	r1, r4
 8006d04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d08:	4621      	mov	r1, r4
 8006d0a:	008a      	lsls	r2, r1, #2
 8006d0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006d10:	f7f9 fa6e 	bl	80001f0 <__aeabi_uldivmod>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4b60      	ldr	r3, [pc, #384]	@ (8006e9c <UART_SetConfig+0x4e4>)
 8006d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d1e:	095b      	lsrs	r3, r3, #5
 8006d20:	011c      	lsls	r4, r3, #4
 8006d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d26:	2200      	movs	r2, #0
 8006d28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006d30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006d34:	4642      	mov	r2, r8
 8006d36:	464b      	mov	r3, r9
 8006d38:	1891      	adds	r1, r2, r2
 8006d3a:	61b9      	str	r1, [r7, #24]
 8006d3c:	415b      	adcs	r3, r3
 8006d3e:	61fb      	str	r3, [r7, #28]
 8006d40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d44:	4641      	mov	r1, r8
 8006d46:	1851      	adds	r1, r2, r1
 8006d48:	6139      	str	r1, [r7, #16]
 8006d4a:	4649      	mov	r1, r9
 8006d4c:	414b      	adcs	r3, r1
 8006d4e:	617b      	str	r3, [r7, #20]
 8006d50:	f04f 0200 	mov.w	r2, #0
 8006d54:	f04f 0300 	mov.w	r3, #0
 8006d58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d5c:	4659      	mov	r1, fp
 8006d5e:	00cb      	lsls	r3, r1, #3
 8006d60:	4651      	mov	r1, sl
 8006d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d66:	4651      	mov	r1, sl
 8006d68:	00ca      	lsls	r2, r1, #3
 8006d6a:	4610      	mov	r0, r2
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	4603      	mov	r3, r0
 8006d70:	4642      	mov	r2, r8
 8006d72:	189b      	adds	r3, r3, r2
 8006d74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d78:	464b      	mov	r3, r9
 8006d7a:	460a      	mov	r2, r1
 8006d7c:	eb42 0303 	adc.w	r3, r2, r3
 8006d80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006d90:	f04f 0200 	mov.w	r2, #0
 8006d94:	f04f 0300 	mov.w	r3, #0
 8006d98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006d9c:	4649      	mov	r1, r9
 8006d9e:	008b      	lsls	r3, r1, #2
 8006da0:	4641      	mov	r1, r8
 8006da2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006da6:	4641      	mov	r1, r8
 8006da8:	008a      	lsls	r2, r1, #2
 8006daa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006dae:	f7f9 fa1f 	bl	80001f0 <__aeabi_uldivmod>
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	4611      	mov	r1, r2
 8006db8:	4b38      	ldr	r3, [pc, #224]	@ (8006e9c <UART_SetConfig+0x4e4>)
 8006dba:	fba3 2301 	umull	r2, r3, r3, r1
 8006dbe:	095b      	lsrs	r3, r3, #5
 8006dc0:	2264      	movs	r2, #100	@ 0x64
 8006dc2:	fb02 f303 	mul.w	r3, r2, r3
 8006dc6:	1acb      	subs	r3, r1, r3
 8006dc8:	011b      	lsls	r3, r3, #4
 8006dca:	3332      	adds	r3, #50	@ 0x32
 8006dcc:	4a33      	ldr	r2, [pc, #204]	@ (8006e9c <UART_SetConfig+0x4e4>)
 8006dce:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd2:	095b      	lsrs	r3, r3, #5
 8006dd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006dd8:	441c      	add	r4, r3
 8006dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dde:	2200      	movs	r2, #0
 8006de0:	673b      	str	r3, [r7, #112]	@ 0x70
 8006de2:	677a      	str	r2, [r7, #116]	@ 0x74
 8006de4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006de8:	4642      	mov	r2, r8
 8006dea:	464b      	mov	r3, r9
 8006dec:	1891      	adds	r1, r2, r2
 8006dee:	60b9      	str	r1, [r7, #8]
 8006df0:	415b      	adcs	r3, r3
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006df8:	4641      	mov	r1, r8
 8006dfa:	1851      	adds	r1, r2, r1
 8006dfc:	6039      	str	r1, [r7, #0]
 8006dfe:	4649      	mov	r1, r9
 8006e00:	414b      	adcs	r3, r1
 8006e02:	607b      	str	r3, [r7, #4]
 8006e04:	f04f 0200 	mov.w	r2, #0
 8006e08:	f04f 0300 	mov.w	r3, #0
 8006e0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e10:	4659      	mov	r1, fp
 8006e12:	00cb      	lsls	r3, r1, #3
 8006e14:	4651      	mov	r1, sl
 8006e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e1a:	4651      	mov	r1, sl
 8006e1c:	00ca      	lsls	r2, r1, #3
 8006e1e:	4610      	mov	r0, r2
 8006e20:	4619      	mov	r1, r3
 8006e22:	4603      	mov	r3, r0
 8006e24:	4642      	mov	r2, r8
 8006e26:	189b      	adds	r3, r3, r2
 8006e28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e2a:	464b      	mov	r3, r9
 8006e2c:	460a      	mov	r2, r1
 8006e2e:	eb42 0303 	adc.w	r3, r2, r3
 8006e32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e3e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006e40:	f04f 0200 	mov.w	r2, #0
 8006e44:	f04f 0300 	mov.w	r3, #0
 8006e48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006e4c:	4649      	mov	r1, r9
 8006e4e:	008b      	lsls	r3, r1, #2
 8006e50:	4641      	mov	r1, r8
 8006e52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e56:	4641      	mov	r1, r8
 8006e58:	008a      	lsls	r2, r1, #2
 8006e5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006e5e:	f7f9 f9c7 	bl	80001f0 <__aeabi_uldivmod>
 8006e62:	4602      	mov	r2, r0
 8006e64:	460b      	mov	r3, r1
 8006e66:	4b0d      	ldr	r3, [pc, #52]	@ (8006e9c <UART_SetConfig+0x4e4>)
 8006e68:	fba3 1302 	umull	r1, r3, r3, r2
 8006e6c:	095b      	lsrs	r3, r3, #5
 8006e6e:	2164      	movs	r1, #100	@ 0x64
 8006e70:	fb01 f303 	mul.w	r3, r1, r3
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	011b      	lsls	r3, r3, #4
 8006e78:	3332      	adds	r3, #50	@ 0x32
 8006e7a:	4a08      	ldr	r2, [pc, #32]	@ (8006e9c <UART_SetConfig+0x4e4>)
 8006e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e80:	095b      	lsrs	r3, r3, #5
 8006e82:	f003 020f 	and.w	r2, r3, #15
 8006e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4422      	add	r2, r4
 8006e8e:	609a      	str	r2, [r3, #8]
}
 8006e90:	bf00      	nop
 8006e92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006e96:	46bd      	mov	sp, r7
 8006e98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e9c:	51eb851f 	.word	0x51eb851f

08006ea0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d123      	bne.n	8006efa <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006eba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	6851      	ldr	r1, [r2, #4]
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	6892      	ldr	r2, [r2, #8]
 8006ec6:	4311      	orrs	r1, r2
 8006ec8:	683a      	ldr	r2, [r7, #0]
 8006eca:	68d2      	ldr	r2, [r2, #12]
 8006ecc:	4311      	orrs	r1, r2
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	6912      	ldr	r2, [r2, #16]
 8006ed2:	4311      	orrs	r1, r2
 8006ed4:	683a      	ldr	r2, [r7, #0]
 8006ed6:	6952      	ldr	r2, [r2, #20]
 8006ed8:	4311      	orrs	r1, r2
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	6992      	ldr	r2, [r2, #24]
 8006ede:	4311      	orrs	r1, r2
 8006ee0:	683a      	ldr	r2, [r7, #0]
 8006ee2:	69d2      	ldr	r2, [r2, #28]
 8006ee4:	4311      	orrs	r1, r2
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	6a12      	ldr	r2, [r2, #32]
 8006eea:	4311      	orrs	r1, r2
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	601a      	str	r2, [r3, #0]
 8006ef8:	e028      	b.n	8006f4c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	69d9      	ldr	r1, [r3, #28]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	4319      	orrs	r1, r3
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f10:	430b      	orrs	r3, r1
 8006f12:	431a      	orrs	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006f20:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	6851      	ldr	r1, [r2, #4]
 8006f28:	683a      	ldr	r2, [r7, #0]
 8006f2a:	6892      	ldr	r2, [r2, #8]
 8006f2c:	4311      	orrs	r1, r2
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	68d2      	ldr	r2, [r2, #12]
 8006f32:	4311      	orrs	r1, r2
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	6912      	ldr	r2, [r2, #16]
 8006f38:	4311      	orrs	r1, r2
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	6952      	ldr	r2, [r2, #20]
 8006f3e:	4311      	orrs	r1, r2
 8006f40:	683a      	ldr	r2, [r7, #0]
 8006f42:	6992      	ldr	r2, [r2, #24]
 8006f44:	430a      	orrs	r2, r1
 8006f46:	431a      	orrs	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b085      	sub	sp, #20
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	60f8      	str	r0, [r7, #12]
 8006f62:	60b9      	str	r1, [r7, #8]
 8006f64:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d128      	bne.n	8006fbe <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	1e59      	subs	r1, r3, #1
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	011b      	lsls	r3, r3, #4
 8006f82:	4319      	orrs	r1, r3
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	021b      	lsls	r3, r3, #8
 8006f8c:	4319      	orrs	r1, r3
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	3b01      	subs	r3, #1
 8006f94:	031b      	lsls	r3, r3, #12
 8006f96:	4319      	orrs	r1, r3
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	041b      	lsls	r3, r3, #16
 8006fa0:	4319      	orrs	r1, r3
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	051b      	lsls	r3, r3, #20
 8006faa:	4319      	orrs	r1, r3
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	061b      	lsls	r3, r3, #24
 8006fb4:	430b      	orrs	r3, r1
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	609a      	str	r2, [r3, #8]
 8006fbc:	e02f      	b.n	800701e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006fc6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	68d2      	ldr	r2, [r2, #12]
 8006fce:	3a01      	subs	r2, #1
 8006fd0:	0311      	lsls	r1, r2, #12
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	6952      	ldr	r2, [r2, #20]
 8006fd6:	3a01      	subs	r2, #1
 8006fd8:	0512      	lsls	r2, r2, #20
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	1e59      	subs	r1, r3, #1
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	011b      	lsls	r3, r3, #4
 8006ff8:	4319      	orrs	r1, r3
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	3b01      	subs	r3, #1
 8007000:	021b      	lsls	r3, r3, #8
 8007002:	4319      	orrs	r1, r3
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	3b01      	subs	r3, #1
 800700a:	041b      	lsls	r3, r3, #16
 800700c:	4319      	orrs	r1, r3
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	3b01      	subs	r3, #1
 8007014:	061b      	lsls	r3, r3, #24
 8007016:	430b      	orrs	r3, r1
 8007018:	431a      	orrs	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3714      	adds	r7, #20
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800702c:	b084      	sub	sp, #16
 800702e:	b580      	push	{r7, lr}
 8007030:	b084      	sub	sp, #16
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	f107 001c 	add.w	r0, r7, #28
 800703a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800703e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007042:	2b01      	cmp	r3, #1
 8007044:	d123      	bne.n	800708e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800705a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800706e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007072:	2b01      	cmp	r3, #1
 8007074:	d105      	bne.n	8007082 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f9dc 	bl	8007440 <USB_CoreReset>
 8007088:	4603      	mov	r3, r0
 800708a:	73fb      	strb	r3, [r7, #15]
 800708c:	e01b      	b.n	80070c6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f9d0 	bl	8007440 <USB_CoreReset>
 80070a0:	4603      	mov	r3, r0
 80070a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80070a4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d106      	bne.n	80070ba <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80070b8:	e005      	b.n	80070c6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80070c6:	7fbb      	ldrb	r3, [r7, #30]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d10b      	bne.n	80070e4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f043 0206 	orr.w	r2, r3, #6
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f043 0220 	orr.w	r2, r3, #32
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070f0:	b004      	add	sp, #16
 80070f2:	4770      	bx	lr

080070f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f043 0201 	orr.w	r2, r3, #1
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	370c      	adds	r7, #12
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007116:	b480      	push	{r7}
 8007118:	b083      	sub	sp, #12
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f023 0201 	bic.w	r2, r3, #1
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	460b      	mov	r3, r1
 8007142:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007154:	78fb      	ldrb	r3, [r7, #3]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d115      	bne.n	8007186 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007166:	200a      	movs	r0, #10
 8007168:	f7fa fba2 	bl	80018b0 <HAL_Delay>
      ms += 10U;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	330a      	adds	r3, #10
 8007170:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f956 	bl	8007424 <USB_GetMode>
 8007178:	4603      	mov	r3, r0
 800717a:	2b01      	cmp	r3, #1
 800717c:	d01e      	beq.n	80071bc <USB_SetCurrentMode+0x84>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2bc7      	cmp	r3, #199	@ 0xc7
 8007182:	d9f0      	bls.n	8007166 <USB_SetCurrentMode+0x2e>
 8007184:	e01a      	b.n	80071bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007186:	78fb      	ldrb	r3, [r7, #3]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d115      	bne.n	80071b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007198:	200a      	movs	r0, #10
 800719a:	f7fa fb89 	bl	80018b0 <HAL_Delay>
      ms += 10U;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	330a      	adds	r3, #10
 80071a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f93d 	bl	8007424 <USB_GetMode>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d005      	beq.n	80071bc <USB_SetCurrentMode+0x84>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2bc7      	cmp	r3, #199	@ 0xc7
 80071b4:	d9f0      	bls.n	8007198 <USB_SetCurrentMode+0x60>
 80071b6:	e001      	b.n	80071bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e005      	b.n	80071c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2bc8      	cmp	r3, #200	@ 0xc8
 80071c0:	d101      	bne.n	80071c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e000      	b.n	80071c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	3301      	adds	r3, #1
 80071e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071ea:	d901      	bls.n	80071f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e01b      	b.n	8007228 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	daf2      	bge.n	80071de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	019b      	lsls	r3, r3, #6
 8007200:	f043 0220 	orr.w	r2, r3, #32
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	3301      	adds	r3, #1
 800720c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007214:	d901      	bls.n	800721a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e006      	b.n	8007228 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	2b20      	cmp	r3, #32
 8007224:	d0f0      	beq.n	8007208 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800723c:	2300      	movs	r3, #0
 800723e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	3301      	adds	r3, #1
 8007244:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800724c:	d901      	bls.n	8007252 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e018      	b.n	8007284 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	2b00      	cmp	r3, #0
 8007258:	daf2      	bge.n	8007240 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800725a:	2300      	movs	r3, #0
 800725c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2210      	movs	r2, #16
 8007262:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	3301      	adds	r3, #1
 8007268:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007270:	d901      	bls.n	8007276 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e006      	b.n	8007284 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	f003 0310 	and.w	r3, r3, #16
 800727e:	2b10      	cmp	r3, #16
 8007280:	d0f0      	beq.n	8007264 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007290:	b480      	push	{r7}
 8007292:	b089      	sub	sp, #36	@ 0x24
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	4611      	mov	r1, r2
 800729c:	461a      	mov	r2, r3
 800729e:	460b      	mov	r3, r1
 80072a0:	71fb      	strb	r3, [r7, #7]
 80072a2:	4613      	mov	r3, r2
 80072a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80072ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d123      	bne.n	80072fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80072b6:	88bb      	ldrh	r3, [r7, #4]
 80072b8:	3303      	adds	r3, #3
 80072ba:	089b      	lsrs	r3, r3, #2
 80072bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80072be:	2300      	movs	r3, #0
 80072c0:	61bb      	str	r3, [r7, #24]
 80072c2:	e018      	b.n	80072f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80072c4:	79fb      	ldrb	r3, [r7, #7]
 80072c6:	031a      	lsls	r2, r3, #12
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072d0:	461a      	mov	r2, r3
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	3301      	adds	r3, #1
 80072dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	3301      	adds	r3, #1
 80072e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	3301      	adds	r3, #1
 80072e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	3301      	adds	r3, #1
 80072ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	3301      	adds	r3, #1
 80072f4:	61bb      	str	r3, [r7, #24]
 80072f6:	69ba      	ldr	r2, [r7, #24]
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d3e2      	bcc.n	80072c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3724      	adds	r7, #36	@ 0x24
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800730c:	b480      	push	{r7}
 800730e:	b08b      	sub	sp, #44	@ 0x2c
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	4613      	mov	r3, r2
 8007318:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007322:	88fb      	ldrh	r3, [r7, #6]
 8007324:	089b      	lsrs	r3, r3, #2
 8007326:	b29b      	uxth	r3, r3
 8007328:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800732a:	88fb      	ldrh	r3, [r7, #6]
 800732c:	f003 0303 	and.w	r3, r3, #3
 8007330:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007332:	2300      	movs	r3, #0
 8007334:	623b      	str	r3, [r7, #32]
 8007336:	e014      	b.n	8007362 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007342:	601a      	str	r2, [r3, #0]
    pDest++;
 8007344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007346:	3301      	adds	r3, #1
 8007348:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800734a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734c:	3301      	adds	r3, #1
 800734e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007352:	3301      	adds	r3, #1
 8007354:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007358:	3301      	adds	r3, #1
 800735a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	3301      	adds	r3, #1
 8007360:	623b      	str	r3, [r7, #32]
 8007362:	6a3a      	ldr	r2, [r7, #32]
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	429a      	cmp	r2, r3
 8007368:	d3e6      	bcc.n	8007338 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800736a:	8bfb      	ldrh	r3, [r7, #30]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d01e      	beq.n	80073ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007370:	2300      	movs	r3, #0
 8007372:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800737a:	461a      	mov	r2, r3
 800737c:	f107 0310 	add.w	r3, r7, #16
 8007380:	6812      	ldr	r2, [r2, #0]
 8007382:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	b2db      	uxtb	r3, r3
 800738a:	00db      	lsls	r3, r3, #3
 800738c:	fa22 f303 	lsr.w	r3, r2, r3
 8007390:	b2da      	uxtb	r2, r3
 8007392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007394:	701a      	strb	r2, [r3, #0]
      i++;
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	3301      	adds	r3, #1
 800739a:	623b      	str	r3, [r7, #32]
      pDest++;
 800739c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739e:	3301      	adds	r3, #1
 80073a0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80073a2:	8bfb      	ldrh	r3, [r7, #30]
 80073a4:	3b01      	subs	r3, #1
 80073a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80073a8:	8bfb      	ldrh	r3, [r7, #30]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1ea      	bne.n	8007384 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80073ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	372c      	adds	r7, #44	@ 0x2c
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	4013      	ands	r3, r2
 80073d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80073d4:	68fb      	ldr	r3, [r7, #12]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b085      	sub	sp, #20
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	460b      	mov	r3, r1
 80073ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80073f2:	78fb      	ldrb	r3, [r7, #3]
 80073f4:	015a      	lsls	r2, r3, #5
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4413      	add	r3, r2
 80073fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007402:	78fb      	ldrb	r3, [r7, #3]
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	4413      	add	r3, r2
 800740a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	4013      	ands	r3, r2
 8007414:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007416:	68bb      	ldr	r3, [r7, #8]
}
 8007418:	4618      	mov	r0, r3
 800741a:	3714      	adds	r7, #20
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	f003 0301 	and.w	r3, r3, #1
}
 8007434:	4618      	mov	r0, r3
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007448:	2300      	movs	r3, #0
 800744a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	3301      	adds	r3, #1
 8007450:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007458:	d901      	bls.n	800745e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e01b      	b.n	8007496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	2b00      	cmp	r3, #0
 8007464:	daf2      	bge.n	800744c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	f043 0201 	orr.w	r2, r3, #1
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	3301      	adds	r3, #1
 800747a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007482:	d901      	bls.n	8007488 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e006      	b.n	8007496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b01      	cmp	r3, #1
 8007492:	d0f0      	beq.n	8007476 <USB_CoreReset+0x36>

  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3714      	adds	r7, #20
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
	...

080074a4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074a4:	b084      	sub	sp, #16
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b086      	sub	sp, #24
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80074b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80074c4:	461a      	mov	r2, r3
 80074c6:	2300      	movs	r3, #0
 80074c8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074da:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d119      	bne.n	800752e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80074fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d10a      	bne.n	8007518 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007510:	f043 0304 	orr.w	r3, r3, #4
 8007514:	6013      	str	r3, [r2, #0]
 8007516:	e014      	b.n	8007542 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007526:	f023 0304 	bic.w	r3, r3, #4
 800752a:	6013      	str	r3, [r2, #0]
 800752c:	e009      	b.n	8007542 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800753c:	f023 0304 	bic.w	r3, r3, #4
 8007540:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007542:	2110      	movs	r1, #16
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7ff fe43 	bl	80071d0 <USB_FlushTxFifo>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d001      	beq.n	8007554 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7ff fe6d 	bl	8007234 <USB_FlushRxFifo>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d001      	beq.n	8007564 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007564:	2300      	movs	r3, #0
 8007566:	613b      	str	r3, [r7, #16]
 8007568:	e015      	b.n	8007596 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	015a      	lsls	r2, r3, #5
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	4413      	add	r3, r2
 8007572:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007576:	461a      	mov	r2, r3
 8007578:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800757c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	015a      	lsls	r2, r3, #5
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	4413      	add	r3, r2
 8007586:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800758a:	461a      	mov	r2, r3
 800758c:	2300      	movs	r3, #0
 800758e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	3301      	adds	r3, #1
 8007594:	613b      	str	r3, [r7, #16]
 8007596:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800759a:	461a      	mov	r2, r3
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	4293      	cmp	r3, r2
 80075a0:	d3e3      	bcc.n	800756a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80075ae:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a18      	ldr	r2, [pc, #96]	@ (8007614 <USB_HostInit+0x170>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d10b      	bne.n	80075d0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075be:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a15      	ldr	r2, [pc, #84]	@ (8007618 <USB_HostInit+0x174>)
 80075c4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a14      	ldr	r2, [pc, #80]	@ (800761c <USB_HostInit+0x178>)
 80075ca:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80075ce:	e009      	b.n	80075e4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2280      	movs	r2, #128	@ 0x80
 80075d4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a11      	ldr	r2, [pc, #68]	@ (8007620 <USB_HostInit+0x17c>)
 80075da:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a11      	ldr	r2, [pc, #68]	@ (8007624 <USB_HostInit+0x180>)
 80075e0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80075e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d105      	bne.n	80075f8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	f043 0210 	orr.w	r2, r3, #16
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	699a      	ldr	r2, [r3, #24]
 80075fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007628 <USB_HostInit+0x184>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007604:	7dfb      	ldrb	r3, [r7, #23]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007610:	b004      	add	sp, #16
 8007612:	4770      	bx	lr
 8007614:	40040000 	.word	0x40040000
 8007618:	01000200 	.word	0x01000200
 800761c:	00e00300 	.word	0x00e00300
 8007620:	00600080 	.word	0x00600080
 8007624:	004000e0 	.word	0x004000e0
 8007628:	a3200008 	.word	0xa3200008

0800762c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800764a:	f023 0303 	bic.w	r3, r3, #3
 800764e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	78fb      	ldrb	r3, [r7, #3]
 800765a:	f003 0303 	and.w	r3, r3, #3
 800765e:	68f9      	ldr	r1, [r7, #12]
 8007660:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007664:	4313      	orrs	r3, r2
 8007666:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007668:	78fb      	ldrb	r3, [r7, #3]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d107      	bne.n	800767e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007674:	461a      	mov	r2, r3
 8007676:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800767a:	6053      	str	r3, [r2, #4]
 800767c:	e00c      	b.n	8007698 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800767e:	78fb      	ldrb	r3, [r7, #3]
 8007680:	2b02      	cmp	r3, #2
 8007682:	d107      	bne.n	8007694 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800768a:	461a      	mov	r2, r3
 800768c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007690:	6053      	str	r3, [r2, #4]
 8007692:	e001      	b.n	8007698 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e000      	b.n	800769a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b084      	sub	sp, #16
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80076c6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80076d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076d4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80076d6:	2064      	movs	r0, #100	@ 0x64
 80076d8:	f7fa f8ea 	bl	80018b0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80076e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076e8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80076ea:	200a      	movs	r0, #10
 80076ec:	f7fa f8e0 	bl	80018b0 <HAL_Delay>

  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b085      	sub	sp, #20
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	460b      	mov	r3, r1
 8007704:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800770a:	2300      	movs	r3, #0
 800770c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800771e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d109      	bne.n	800773e <USB_DriveVbus+0x44>
 800772a:	78fb      	ldrb	r3, [r7, #3]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d106      	bne.n	800773e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007738:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800773c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007748:	d109      	bne.n	800775e <USB_DriveVbus+0x64>
 800774a:	78fb      	ldrb	r3, [r7, #3]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d106      	bne.n	800775e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007758:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800775c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007778:	2300      	movs	r3, #0
 800777a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	0c5b      	lsrs	r3, r3, #17
 800778a:	f003 0303 	and.w	r3, r3, #3
}
 800778e:	4618      	mov	r0, r3
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800779a:	b480      	push	{r7}
 800779c:	b085      	sub	sp, #20
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	b29b      	uxth	r3, r3
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b088      	sub	sp, #32
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	4608      	mov	r0, r1
 80077c6:	4611      	mov	r1, r2
 80077c8:	461a      	mov	r2, r3
 80077ca:	4603      	mov	r3, r0
 80077cc:	70fb      	strb	r3, [r7, #3]
 80077ce:	460b      	mov	r3, r1
 80077d0:	70bb      	strb	r3, [r7, #2]
 80077d2:	4613      	mov	r3, r2
 80077d4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80077de:	78fb      	ldrb	r3, [r7, #3]
 80077e0:	015a      	lsls	r2, r3, #5
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	4413      	add	r3, r2
 80077e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077ea:	461a      	mov	r2, r3
 80077ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80077f0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80077f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	d87c      	bhi.n	80078f4 <USB_HC_Init+0x138>
 80077fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007800 <USB_HC_Init+0x44>)
 80077fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007800:	08007811 	.word	0x08007811
 8007804:	080078b7 	.word	0x080078b7
 8007808:	08007811 	.word	0x08007811
 800780c:	08007879 	.word	0x08007879
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007810:	78fb      	ldrb	r3, [r7, #3]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	4413      	add	r3, r2
 8007818:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800781c:	461a      	mov	r2, r3
 800781e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007822:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007824:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007828:	2b00      	cmp	r3, #0
 800782a:	da10      	bge.n	800784e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800782c:	78fb      	ldrb	r3, [r7, #3]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	4413      	add	r3, r2
 8007834:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	78fa      	ldrb	r2, [r7, #3]
 800783c:	0151      	lsls	r1, r2, #5
 800783e:	693a      	ldr	r2, [r7, #16]
 8007840:	440a      	add	r2, r1
 8007842:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007846:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800784a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800784c:	e055      	b.n	80078fa <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a6f      	ldr	r2, [pc, #444]	@ (8007a10 <USB_HC_Init+0x254>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d151      	bne.n	80078fa <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007856:	78fb      	ldrb	r3, [r7, #3]
 8007858:	015a      	lsls	r2, r3, #5
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	4413      	add	r3, r2
 800785e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	78fa      	ldrb	r2, [r7, #3]
 8007866:	0151      	lsls	r1, r2, #5
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	440a      	add	r2, r1
 800786c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007870:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007874:	60d3      	str	r3, [r2, #12]
      break;
 8007876:	e040      	b.n	80078fa <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007878:	78fb      	ldrb	r3, [r7, #3]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	4413      	add	r3, r2
 8007880:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007884:	461a      	mov	r2, r3
 8007886:	f240 639d 	movw	r3, #1693	@ 0x69d
 800788a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800788c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007890:	2b00      	cmp	r3, #0
 8007892:	da34      	bge.n	80078fe <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007894:	78fb      	ldrb	r3, [r7, #3]
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	4413      	add	r3, r2
 800789c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	78fa      	ldrb	r2, [r7, #3]
 80078a4:	0151      	lsls	r1, r2, #5
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	440a      	add	r2, r1
 80078aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078b2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80078b4:	e023      	b.n	80078fe <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80078b6:	78fb      	ldrb	r3, [r7, #3]
 80078b8:	015a      	lsls	r2, r3, #5
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	4413      	add	r3, r2
 80078be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078c2:	461a      	mov	r2, r3
 80078c4:	f240 2325 	movw	r3, #549	@ 0x225
 80078c8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80078ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	da17      	bge.n	8007902 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80078d2:	78fb      	ldrb	r3, [r7, #3]
 80078d4:	015a      	lsls	r2, r3, #5
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	4413      	add	r3, r2
 80078da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	78fa      	ldrb	r2, [r7, #3]
 80078e2:	0151      	lsls	r1, r2, #5
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	440a      	add	r2, r1
 80078e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078ec:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80078f0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80078f2:	e006      	b.n	8007902 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	77fb      	strb	r3, [r7, #31]
      break;
 80078f8:	e004      	b.n	8007904 <USB_HC_Init+0x148>
      break;
 80078fa:	bf00      	nop
 80078fc:	e002      	b.n	8007904 <USB_HC_Init+0x148>
      break;
 80078fe:	bf00      	nop
 8007900:	e000      	b.n	8007904 <USB_HC_Init+0x148>
      break;
 8007902:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007904:	78fb      	ldrb	r3, [r7, #3]
 8007906:	015a      	lsls	r2, r3, #5
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	4413      	add	r3, r2
 800790c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007910:	461a      	mov	r2, r3
 8007912:	2300      	movs	r3, #0
 8007914:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007916:	78fb      	ldrb	r3, [r7, #3]
 8007918:	015a      	lsls	r2, r3, #5
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	4413      	add	r3, r2
 800791e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	78fa      	ldrb	r2, [r7, #3]
 8007926:	0151      	lsls	r1, r2, #5
 8007928:	693a      	ldr	r2, [r7, #16]
 800792a:	440a      	add	r2, r1
 800792c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007930:	f043 0302 	orr.w	r3, r3, #2
 8007934:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800793c:	699a      	ldr	r2, [r3, #24]
 800793e:	78fb      	ldrb	r3, [r7, #3]
 8007940:	f003 030f 	and.w	r3, r3, #15
 8007944:	2101      	movs	r1, #1
 8007946:	fa01 f303 	lsl.w	r3, r1, r3
 800794a:	6939      	ldr	r1, [r7, #16]
 800794c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007950:	4313      	orrs	r3, r2
 8007952:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007960:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007964:	2b00      	cmp	r3, #0
 8007966:	da03      	bge.n	8007970 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007968:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800796c:	61bb      	str	r3, [r7, #24]
 800796e:	e001      	b.n	8007974 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007970:	2300      	movs	r3, #0
 8007972:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f7ff fef9 	bl	800776c <USB_GetHostSpeed>
 800797a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800797c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007980:	2b02      	cmp	r3, #2
 8007982:	d106      	bne.n	8007992 <USB_HC_Init+0x1d6>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2b02      	cmp	r3, #2
 8007988:	d003      	beq.n	8007992 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800798a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800798e:	617b      	str	r3, [r7, #20]
 8007990:	e001      	b.n	8007996 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007992:	2300      	movs	r3, #0
 8007994:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007996:	787b      	ldrb	r3, [r7, #1]
 8007998:	059b      	lsls	r3, r3, #22
 800799a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800799e:	78bb      	ldrb	r3, [r7, #2]
 80079a0:	02db      	lsls	r3, r3, #11
 80079a2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80079a6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80079a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80079ac:	049b      	lsls	r3, r3, #18
 80079ae:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80079b2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80079b4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80079b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80079ba:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	431a      	orrs	r2, r3
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80079c4:	78fa      	ldrb	r2, [r7, #3]
 80079c6:	0151      	lsls	r1, r2, #5
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	440a      	add	r2, r1
 80079cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80079d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80079d4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80079d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80079da:	2b03      	cmp	r3, #3
 80079dc:	d003      	beq.n	80079e6 <USB_HC_Init+0x22a>
 80079de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d10f      	bne.n	8007a06 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80079e6:	78fb      	ldrb	r3, [r7, #3]
 80079e8:	015a      	lsls	r2, r3, #5
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	4413      	add	r3, r2
 80079ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	78fa      	ldrb	r2, [r7, #3]
 80079f6:	0151      	lsls	r1, r2, #5
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	440a      	add	r2, r1
 80079fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a00:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007a04:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007a06:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3720      	adds	r7, #32
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	40040000 	.word	0x40040000

08007a14 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b08c      	sub	sp, #48	@ 0x30
 8007a18:	af02      	add	r7, sp, #8
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	785b      	ldrb	r3, [r3, #1]
 8007a2a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007a2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a30:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	4a5d      	ldr	r2, [pc, #372]	@ (8007bac <USB_HC_StartXfer+0x198>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d12f      	bne.n	8007a9a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007a3a:	79fb      	ldrb	r3, [r7, #7]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d11c      	bne.n	8007a7a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	7c9b      	ldrb	r3, [r3, #18]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d003      	beq.n	8007a50 <USB_HC_StartXfer+0x3c>
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	7c9b      	ldrb	r3, [r3, #18]
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d124      	bne.n	8007a9a <USB_HC_StartXfer+0x86>
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	799b      	ldrb	r3, [r3, #6]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d120      	bne.n	8007a9a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	015a      	lsls	r2, r3, #5
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	4413      	add	r3, r2
 8007a60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	69fa      	ldr	r2, [r7, #28]
 8007a68:	0151      	lsls	r1, r2, #5
 8007a6a:	6a3a      	ldr	r2, [r7, #32]
 8007a6c:	440a      	add	r2, r1
 8007a6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a76:	60d3      	str	r3, [r2, #12]
 8007a78:	e00f      	b.n	8007a9a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	791b      	ldrb	r3, [r3, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10b      	bne.n	8007a9a <USB_HC_StartXfer+0x86>
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	795b      	ldrb	r3, [r3, #5]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d107      	bne.n	8007a9a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	785b      	ldrb	r3, [r3, #1]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f000 fb6b 	bl	800816c <USB_DoPing>
        return HAL_OK;
 8007a96:	2300      	movs	r3, #0
 8007a98:	e232      	b.n	8007f00 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	799b      	ldrb	r3, [r3, #6]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d158      	bne.n	8007b54 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	78db      	ldrb	r3, [r3, #3]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d007      	beq.n	8007abe <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007aae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	8a92      	ldrh	r2, [r2, #20]
 8007ab4:	fb03 f202 	mul.w	r2, r3, r2
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	61da      	str	r2, [r3, #28]
 8007abc:	e07c      	b.n	8007bb8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	7c9b      	ldrb	r3, [r3, #18]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d130      	bne.n	8007b28 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	2bbc      	cmp	r3, #188	@ 0xbc
 8007acc:	d918      	bls.n	8007b00 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	8a9b      	ldrh	r3, [r3, #20]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	69da      	ldr	r2, [r3, #28]
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d003      	beq.n	8007af0 <USB_HC_StartXfer+0xdc>
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d103      	bne.n	8007af8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	2202      	movs	r2, #2
 8007af4:	60da      	str	r2, [r3, #12]
 8007af6:	e05f      	b.n	8007bb8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	2201      	movs	r2, #1
 8007afc:	60da      	str	r2, [r3, #12]
 8007afe:	e05b      	b.n	8007bb8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	6a1a      	ldr	r2, [r3, #32]
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d007      	beq.n	8007b20 <USB_HC_StartXfer+0x10c>
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d003      	beq.n	8007b20 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	2204      	movs	r2, #4
 8007b1c:	60da      	str	r2, [r3, #12]
 8007b1e:	e04b      	b.n	8007bb8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	2203      	movs	r2, #3
 8007b24:	60da      	str	r2, [r3, #12]
 8007b26:	e047      	b.n	8007bb8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007b28:	79fb      	ldrb	r3, [r7, #7]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d10d      	bne.n	8007b4a <USB_HC_StartXfer+0x136>
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	8a92      	ldrh	r2, [r2, #20]
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d907      	bls.n	8007b4a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b3a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	8a92      	ldrh	r2, [r2, #20]
 8007b40:	fb03 f202 	mul.w	r2, r3, r2
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	61da      	str	r2, [r3, #28]
 8007b48:	e036      	b.n	8007bb8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	6a1a      	ldr	r2, [r3, #32]
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	61da      	str	r2, [r3, #28]
 8007b52:	e031      	b.n	8007bb8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	6a1b      	ldr	r3, [r3, #32]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d018      	beq.n	8007b8e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	6a1b      	ldr	r3, [r3, #32]
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	8a92      	ldrh	r2, [r2, #20]
 8007b64:	4413      	add	r3, r2
 8007b66:	3b01      	subs	r3, #1
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	8a92      	ldrh	r2, [r2, #20]
 8007b6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b70:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007b72:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007b74:	8b7b      	ldrh	r3, [r7, #26]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d90b      	bls.n	8007b92 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007b7a:	8b7b      	ldrh	r3, [r7, #26]
 8007b7c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	8a92      	ldrh	r2, [r2, #20]
 8007b84:	fb03 f202 	mul.w	r2, r3, r2
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	61da      	str	r2, [r3, #28]
 8007b8c:	e001      	b.n	8007b92 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	78db      	ldrb	r3, [r3, #3]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00a      	beq.n	8007bb0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	8a92      	ldrh	r2, [r2, #20]
 8007ba0:	fb03 f202 	mul.w	r2, r3, r2
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	61da      	str	r2, [r3, #28]
 8007ba8:	e006      	b.n	8007bb8 <USB_HC_StartXfer+0x1a4>
 8007baa:	bf00      	nop
 8007bac:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	6a1a      	ldr	r2, [r3, #32]
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	69db      	ldr	r3, [r3, #28]
 8007bbc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007bc0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007bc2:	04d9      	lsls	r1, r3, #19
 8007bc4:	4ba3      	ldr	r3, [pc, #652]	@ (8007e54 <USB_HC_StartXfer+0x440>)
 8007bc6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bc8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	7d9b      	ldrb	r3, [r3, #22]
 8007bce:	075b      	lsls	r3, r3, #29
 8007bd0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bd4:	69f9      	ldr	r1, [r7, #28]
 8007bd6:	0148      	lsls	r0, r1, #5
 8007bd8:	6a39      	ldr	r1, [r7, #32]
 8007bda:	4401      	add	r1, r0
 8007bdc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007be0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007be2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007be4:	79fb      	ldrb	r3, [r7, #7]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d009      	beq.n	8007bfe <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	6999      	ldr	r1, [r3, #24]
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	015a      	lsls	r2, r3, #5
 8007bf2:	6a3b      	ldr	r3, [r7, #32]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bfa:	460a      	mov	r2, r1
 8007bfc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007bfe:	6a3b      	ldr	r3, [r7, #32]
 8007c00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	bf0c      	ite	eq
 8007c0e:	2301      	moveq	r3, #1
 8007c10:	2300      	movne	r3, #0
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	015a      	lsls	r2, r3, #5
 8007c1a:	6a3b      	ldr	r3, [r7, #32]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	69fa      	ldr	r2, [r7, #28]
 8007c26:	0151      	lsls	r1, r2, #5
 8007c28:	6a3a      	ldr	r2, [r7, #32]
 8007c2a:	440a      	add	r2, r1
 8007c2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c30:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007c34:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	015a      	lsls	r2, r3, #5
 8007c3a:	6a3b      	ldr	r3, [r7, #32]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	7e7b      	ldrb	r3, [r7, #25]
 8007c46:	075b      	lsls	r3, r3, #29
 8007c48:	69f9      	ldr	r1, [r7, #28]
 8007c4a:	0148      	lsls	r0, r1, #5
 8007c4c:	6a39      	ldr	r1, [r7, #32]
 8007c4e:	4401      	add	r1, r0
 8007c50:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007c54:	4313      	orrs	r3, r2
 8007c56:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	799b      	ldrb	r3, [r3, #6]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	f040 80c3 	bne.w	8007de8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	7c5b      	ldrb	r3, [r3, #17]
 8007c66:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007c68:	68ba      	ldr	r2, [r7, #8]
 8007c6a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	69fa      	ldr	r2, [r7, #28]
 8007c70:	0151      	lsls	r1, r2, #5
 8007c72:	6a3a      	ldr	r2, [r7, #32]
 8007c74:	440a      	add	r2, r1
 8007c76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007c7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007c7e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	6a3b      	ldr	r3, [r7, #32]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	69fa      	ldr	r2, [r7, #28]
 8007c90:	0151      	lsls	r1, r2, #5
 8007c92:	6a3a      	ldr	r2, [r7, #32]
 8007c94:	440a      	add	r2, r1
 8007c96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c9a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007c9e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	79db      	ldrb	r3, [r3, #7]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d123      	bne.n	8007cf0 <USB_HC_StartXfer+0x2dc>
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	78db      	ldrb	r3, [r3, #3]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d11f      	bne.n	8007cf0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	015a      	lsls	r2, r3, #5
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	69fa      	ldr	r2, [r7, #28]
 8007cc0:	0151      	lsls	r1, r2, #5
 8007cc2:	6a3a      	ldr	r2, [r7, #32]
 8007cc4:	440a      	add	r2, r1
 8007cc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cce:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	015a      	lsls	r2, r3, #5
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	69fa      	ldr	r2, [r7, #28]
 8007ce0:	0151      	lsls	r1, r2, #5
 8007ce2:	6a3a      	ldr	r2, [r7, #32]
 8007ce4:	440a      	add	r2, r1
 8007ce6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cee:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	7c9b      	ldrb	r3, [r3, #18]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d003      	beq.n	8007d00 <USB_HC_StartXfer+0x2ec>
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	7c9b      	ldrb	r3, [r3, #18]
 8007cfc:	2b03      	cmp	r3, #3
 8007cfe:	d117      	bne.n	8007d30 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d113      	bne.n	8007d30 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	78db      	ldrb	r3, [r3, #3]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d10f      	bne.n	8007d30 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	015a      	lsls	r2, r3, #5
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	4413      	add	r3, r2
 8007d18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	69fa      	ldr	r2, [r7, #28]
 8007d20:	0151      	lsls	r1, r2, #5
 8007d22:	6a3a      	ldr	r2, [r7, #32]
 8007d24:	440a      	add	r2, r1
 8007d26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d2e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	7c9b      	ldrb	r3, [r3, #18]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d162      	bne.n	8007dfe <USB_HC_StartXfer+0x3ea>
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	78db      	ldrb	r3, [r3, #3]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d15e      	bne.n	8007dfe <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	3b01      	subs	r3, #1
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	d858      	bhi.n	8007dfc <USB_HC_StartXfer+0x3e8>
 8007d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d50 <USB_HC_StartXfer+0x33c>)
 8007d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d50:	08007d61 	.word	0x08007d61
 8007d54:	08007d83 	.word	0x08007d83
 8007d58:	08007da5 	.word	0x08007da5
 8007d5c:	08007dc7 	.word	0x08007dc7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	6a3b      	ldr	r3, [r7, #32]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	69fa      	ldr	r2, [r7, #28]
 8007d70:	0151      	lsls	r1, r2, #5
 8007d72:	6a3a      	ldr	r2, [r7, #32]
 8007d74:	440a      	add	r2, r1
 8007d76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d7e:	6053      	str	r3, [r2, #4]
          break;
 8007d80:	e03d      	b.n	8007dfe <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	015a      	lsls	r2, r3, #5
 8007d86:	6a3b      	ldr	r3, [r7, #32]
 8007d88:	4413      	add	r3, r2
 8007d8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	69fa      	ldr	r2, [r7, #28]
 8007d92:	0151      	lsls	r1, r2, #5
 8007d94:	6a3a      	ldr	r2, [r7, #32]
 8007d96:	440a      	add	r2, r1
 8007d98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d9c:	f043 030e 	orr.w	r3, r3, #14
 8007da0:	6053      	str	r3, [r2, #4]
          break;
 8007da2:	e02c      	b.n	8007dfe <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	015a      	lsls	r2, r3, #5
 8007da8:	6a3b      	ldr	r3, [r7, #32]
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	69fa      	ldr	r2, [r7, #28]
 8007db4:	0151      	lsls	r1, r2, #5
 8007db6:	6a3a      	ldr	r2, [r7, #32]
 8007db8:	440a      	add	r2, r1
 8007dba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007dbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007dc2:	6053      	str	r3, [r2, #4]
          break;
 8007dc4:	e01b      	b.n	8007dfe <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	015a      	lsls	r2, r3, #5
 8007dca:	6a3b      	ldr	r3, [r7, #32]
 8007dcc:	4413      	add	r3, r2
 8007dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	69fa      	ldr	r2, [r7, #28]
 8007dd6:	0151      	lsls	r1, r2, #5
 8007dd8:	6a3a      	ldr	r2, [r7, #32]
 8007dda:	440a      	add	r2, r1
 8007ddc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007de0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007de4:	6053      	str	r3, [r2, #4]
          break;
 8007de6:	e00a      	b.n	8007dfe <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	015a      	lsls	r2, r3, #5
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	4413      	add	r3, r2
 8007df0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007df4:	461a      	mov	r2, r3
 8007df6:	2300      	movs	r3, #0
 8007df8:	6053      	str	r3, [r2, #4]
 8007dfa:	e000      	b.n	8007dfe <USB_HC_StartXfer+0x3ea>
          break;
 8007dfc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	015a      	lsls	r2, r3, #5
 8007e02:	6a3b      	ldr	r3, [r7, #32]
 8007e04:	4413      	add	r3, r2
 8007e06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007e14:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	78db      	ldrb	r3, [r3, #3]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d004      	beq.n	8007e28 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e24:	613b      	str	r3, [r7, #16]
 8007e26:	e003      	b.n	8007e30 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007e2e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e36:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	015a      	lsls	r2, r3, #5
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
 8007e3e:	4413      	add	r3, r2
 8007e40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e44:	461a      	mov	r2, r3
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007e4a:	79fb      	ldrb	r3, [r7, #7]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d003      	beq.n	8007e58 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	e055      	b.n	8007f00 <USB_HC_StartXfer+0x4ec>
 8007e54:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	78db      	ldrb	r3, [r3, #3]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d14e      	bne.n	8007efe <USB_HC_StartXfer+0x4ea>
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	6a1b      	ldr	r3, [r3, #32]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d04a      	beq.n	8007efe <USB_HC_StartXfer+0x4ea>
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	79db      	ldrb	r3, [r3, #7]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d146      	bne.n	8007efe <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	7c9b      	ldrb	r3, [r3, #18]
 8007e74:	2b03      	cmp	r3, #3
 8007e76:	d831      	bhi.n	8007edc <USB_HC_StartXfer+0x4c8>
 8007e78:	a201      	add	r2, pc, #4	@ (adr r2, 8007e80 <USB_HC_StartXfer+0x46c>)
 8007e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e7e:	bf00      	nop
 8007e80:	08007e91 	.word	0x08007e91
 8007e84:	08007eb5 	.word	0x08007eb5
 8007e88:	08007e91 	.word	0x08007e91
 8007e8c:	08007eb5 	.word	0x08007eb5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	6a1b      	ldr	r3, [r3, #32]
 8007e94:	3303      	adds	r3, #3
 8007e96:	089b      	lsrs	r3, r3, #2
 8007e98:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007e9a:	8afa      	ldrh	r2, [r7, #22]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d91c      	bls.n	8007ee0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	f043 0220 	orr.w	r2, r3, #32
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	619a      	str	r2, [r3, #24]
        }
        break;
 8007eb2:	e015      	b.n	8007ee0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	6a1b      	ldr	r3, [r3, #32]
 8007eb8:	3303      	adds	r3, #3
 8007eba:	089b      	lsrs	r3, r3, #2
 8007ebc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007ebe:	8afa      	ldrh	r2, [r7, #22]
 8007ec0:	6a3b      	ldr	r3, [r7, #32]
 8007ec2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d90a      	bls.n	8007ee4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	619a      	str	r2, [r3, #24]
        }
        break;
 8007eda:	e003      	b.n	8007ee4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007edc:	bf00      	nop
 8007ede:	e002      	b.n	8007ee6 <USB_HC_StartXfer+0x4d2>
        break;
 8007ee0:	bf00      	nop
 8007ee2:	e000      	b.n	8007ee6 <USB_HC_StartXfer+0x4d2>
        break;
 8007ee4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	6999      	ldr	r1, [r3, #24]
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	785a      	ldrb	r2, [r3, #1]
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	9000      	str	r0, [sp, #0]
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f7ff f9c9 	bl	8007290 <USB_WritePacket>
  }

  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3728      	adds	r7, #40	@ 0x28
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f1a:	695b      	ldr	r3, [r3, #20]
 8007f1c:	b29b      	uxth	r3, r3
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3714      	adds	r7, #20
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b089      	sub	sp, #36	@ 0x24
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	460b      	mov	r3, r1
 8007f34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007f3a:	78fb      	ldrb	r3, [r7, #3]
 8007f3c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	015a      	lsls	r2, r3, #5
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	0c9b      	lsrs	r3, r3, #18
 8007f52:	f003 0303 	and.w	r3, r3, #3
 8007f56:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	015a      	lsls	r2, r3, #5
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	4413      	add	r3, r2
 8007f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	0fdb      	lsrs	r3, r3, #31
 8007f68:	f003 0301 	and.w	r3, r3, #1
 8007f6c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	0fdb      	lsrs	r3, r3, #31
 8007f7e:	f003 0301 	and.w	r3, r3, #1
 8007f82:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	f003 0320 	and.w	r3, r3, #32
 8007f8c:	2b20      	cmp	r3, #32
 8007f8e:	d10d      	bne.n	8007fac <USB_HC_Halt+0x82>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10a      	bne.n	8007fac <USB_HC_Halt+0x82>
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d005      	beq.n	8007fa8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d002      	beq.n	8007fa8 <USB_HC_Halt+0x7e>
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	2b03      	cmp	r3, #3
 8007fa6:	d101      	bne.n	8007fac <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	e0d8      	b.n	800815e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d002      	beq.n	8007fb8 <USB_HC_Halt+0x8e>
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d173      	bne.n	80080a0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	69ba      	ldr	r2, [r7, #24]
 8007fc8:	0151      	lsls	r1, r2, #5
 8007fca:	69fa      	ldr	r2, [r7, #28]
 8007fcc:	440a      	add	r2, r1
 8007fce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fd2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fd6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	f003 0320 	and.w	r3, r3, #32
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d14a      	bne.n	800807a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d133      	bne.n	8008058 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	015a      	lsls	r2, r3, #5
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	69ba      	ldr	r2, [r7, #24]
 8008000:	0151      	lsls	r1, r2, #5
 8008002:	69fa      	ldr	r2, [r7, #28]
 8008004:	440a      	add	r2, r1
 8008006:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800800a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800800e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	015a      	lsls	r2, r3, #5
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	4413      	add	r3, r2
 8008018:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	69ba      	ldr	r2, [r7, #24]
 8008020:	0151      	lsls	r1, r2, #5
 8008022:	69fa      	ldr	r2, [r7, #28]
 8008024:	440a      	add	r2, r1
 8008026:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800802a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800802e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	3301      	adds	r3, #1
 8008034:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800803c:	d82e      	bhi.n	800809c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	015a      	lsls	r2, r3, #5
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	4413      	add	r3, r2
 8008046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008050:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008054:	d0ec      	beq.n	8008030 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008056:	e081      	b.n	800815c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	015a      	lsls	r2, r3, #5
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	4413      	add	r3, r2
 8008060:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	69ba      	ldr	r2, [r7, #24]
 8008068:	0151      	lsls	r1, r2, #5
 800806a:	69fa      	ldr	r2, [r7, #28]
 800806c:	440a      	add	r2, r1
 800806e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008072:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008076:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008078:	e070      	b.n	800815c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	015a      	lsls	r2, r3, #5
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	4413      	add	r3, r2
 8008082:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	69ba      	ldr	r2, [r7, #24]
 800808a:	0151      	lsls	r1, r2, #5
 800808c:	69fa      	ldr	r2, [r7, #28]
 800808e:	440a      	add	r2, r1
 8008090:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008094:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008098:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800809a:	e05f      	b.n	800815c <USB_HC_Halt+0x232>
            break;
 800809c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800809e:	e05d      	b.n	800815c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	69ba      	ldr	r2, [r7, #24]
 80080b0:	0151      	lsls	r1, r2, #5
 80080b2:	69fa      	ldr	r2, [r7, #28]
 80080b4:	440a      	add	r2, r1
 80080b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080be:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d133      	bne.n	8008138 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	69ba      	ldr	r2, [r7, #24]
 80080e0:	0151      	lsls	r1, r2, #5
 80080e2:	69fa      	ldr	r2, [r7, #28]
 80080e4:	440a      	add	r2, r1
 80080e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080ee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	015a      	lsls	r2, r3, #5
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	4413      	add	r3, r2
 80080f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	69ba      	ldr	r2, [r7, #24]
 8008100:	0151      	lsls	r1, r2, #5
 8008102:	69fa      	ldr	r2, [r7, #28]
 8008104:	440a      	add	r2, r1
 8008106:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800810a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800810e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	3301      	adds	r3, #1
 8008114:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800811c:	d81d      	bhi.n	800815a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	015a      	lsls	r2, r3, #5
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	4413      	add	r3, r2
 8008126:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008130:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008134:	d0ec      	beq.n	8008110 <USB_HC_Halt+0x1e6>
 8008136:	e011      	b.n	800815c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	015a      	lsls	r2, r3, #5
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	4413      	add	r3, r2
 8008140:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	69ba      	ldr	r2, [r7, #24]
 8008148:	0151      	lsls	r1, r2, #5
 800814a:	69fa      	ldr	r2, [r7, #28]
 800814c:	440a      	add	r2, r1
 800814e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008152:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008156:	6013      	str	r3, [r2, #0]
 8008158:	e000      	b.n	800815c <USB_HC_Halt+0x232>
          break;
 800815a:	bf00      	nop
    }
  }

  return HAL_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3724      	adds	r7, #36	@ 0x24
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
	...

0800816c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800816c:	b480      	push	{r7}
 800816e:	b087      	sub	sp, #28
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	460b      	mov	r3, r1
 8008176:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800817c:	78fb      	ldrb	r3, [r7, #3]
 800817e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008180:	2301      	movs	r3, #1
 8008182:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	04da      	lsls	r2, r3, #19
 8008188:	4b15      	ldr	r3, [pc, #84]	@ (80081e0 <USB_DoPing+0x74>)
 800818a:	4013      	ands	r3, r2
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	0151      	lsls	r1, r2, #5
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	440a      	add	r2, r1
 8008194:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008198:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800819c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	015a      	lsls	r2, r3, #5
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	4413      	add	r3, r2
 80081a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80081b4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80081bc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	015a      	lsls	r2, r3, #5
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	4413      	add	r3, r2
 80081c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081ca:	461a      	mov	r2, r3
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	371c      	adds	r7, #28
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	1ff80000 	.word	0x1ff80000

080081e4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b088      	sub	sp, #32
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80081ec:	2300      	movs	r3, #0
 80081ee:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80081f4:	2300      	movs	r3, #0
 80081f6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7fe ff8c 	bl	8007116 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80081fe:	2110      	movs	r1, #16
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7fe ffe5 	bl	80071d0 <USB_FlushTxFifo>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d001      	beq.n	8008210 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7ff f80f 	bl	8007234 <USB_FlushRxFifo>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d001      	beq.n	8008220 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008220:	2300      	movs	r3, #0
 8008222:	61bb      	str	r3, [r7, #24]
 8008224:	e01f      	b.n	8008266 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	015a      	lsls	r2, r3, #5
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	4413      	add	r3, r2
 800822e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800823c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008244:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800824c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	015a      	lsls	r2, r3, #5
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	4413      	add	r3, r2
 8008256:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800825a:	461a      	mov	r2, r3
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	3301      	adds	r3, #1
 8008264:	61bb      	str	r3, [r7, #24]
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	2b0f      	cmp	r3, #15
 800826a:	d9dc      	bls.n	8008226 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800826c:	2300      	movs	r3, #0
 800826e:	61bb      	str	r3, [r7, #24]
 8008270:	e034      	b.n	80082dc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	015a      	lsls	r2, r3, #5
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	4413      	add	r3, r2
 800827a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008288:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008290:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008298:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	015a      	lsls	r2, r3, #5
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	4413      	add	r3, r2
 80082a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082a6:	461a      	mov	r2, r3
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	3301      	adds	r3, #1
 80082b0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80082b8:	d80c      	bhi.n	80082d4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082d0:	d0ec      	beq.n	80082ac <USB_StopHost+0xc8>
 80082d2:	e000      	b.n	80082d6 <USB_StopHost+0xf2>
        break;
 80082d4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	3301      	adds	r3, #1
 80082da:	61bb      	str	r3, [r7, #24]
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	2b0f      	cmp	r3, #15
 80082e0:	d9c7      	bls.n	8008272 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082e8:	461a      	mov	r2, r3
 80082ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80082ee:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80082f6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7fe fefb 	bl	80070f4 <USB_EnableGlobalInt>

  return ret;
 80082fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3720      	adds	r7, #32
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008308:	b590      	push	{r4, r7, lr}
 800830a:	b089      	sub	sp, #36	@ 0x24
 800830c:	af04      	add	r7, sp, #16
 800830e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008310:	2301      	movs	r3, #1
 8008312:	2202      	movs	r2, #2
 8008314:	2102      	movs	r1, #2
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fcd7 	bl	8008cca <USBH_FindInterface>
 800831c:	4603      	mov	r3, r0
 800831e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008320:	7bfb      	ldrb	r3, [r7, #15]
 8008322:	2bff      	cmp	r3, #255	@ 0xff
 8008324:	d002      	beq.n	800832c <USBH_CDC_InterfaceInit+0x24>
 8008326:	7bfb      	ldrb	r3, [r7, #15]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d901      	bls.n	8008330 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800832c:	2302      	movs	r3, #2
 800832e:	e13d      	b.n	80085ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008330:	7bfb      	ldrb	r3, [r7, #15]
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fcac 	bl	8008c92 <USBH_SelectInterface>
 800833a:	4603      	mov	r3, r0
 800833c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800833e:	7bbb      	ldrb	r3, [r7, #14]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d001      	beq.n	8008348 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008344:	2302      	movs	r3, #2
 8008346:	e131      	b.n	80085ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800834e:	2050      	movs	r0, #80	@ 0x50
 8008350:	f005 f89a 	bl	800d488 <malloc>
 8008354:	4603      	mov	r3, r0
 8008356:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800835e:	69db      	ldr	r3, [r3, #28]
 8008360:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d101      	bne.n	800836c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008368:	2302      	movs	r3, #2
 800836a:	e11f      	b.n	80085ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800836c:	2250      	movs	r2, #80	@ 0x50
 800836e:	2100      	movs	r1, #0
 8008370:	68b8      	ldr	r0, [r7, #8]
 8008372:	f005 f947 	bl	800d604 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008376:	7bfb      	ldrb	r3, [r7, #15]
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	211a      	movs	r1, #26
 800837c:	fb01 f303 	mul.w	r3, r1, r3
 8008380:	4413      	add	r3, r2
 8008382:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	b25b      	sxtb	r3, r3
 800838a:	2b00      	cmp	r3, #0
 800838c:	da15      	bge.n	80083ba <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800838e:	7bfb      	ldrb	r3, [r7, #15]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	211a      	movs	r1, #26
 8008394:	fb01 f303 	mul.w	r3, r1, r3
 8008398:	4413      	add	r3, r2
 800839a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800839e:	781a      	ldrb	r2, [r3, #0]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	211a      	movs	r1, #26
 80083aa:	fb01 f303 	mul.w	r3, r1, r3
 80083ae:	4413      	add	r3, r2
 80083b0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80083b4:	881a      	ldrh	r2, [r3, #0]
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	785b      	ldrb	r3, [r3, #1]
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f002 fa1c 	bl	800a7fe <USBH_AllocPipe>
 80083c6:	4603      	mov	r3, r0
 80083c8:	461a      	mov	r2, r3
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	7819      	ldrb	r1, [r3, #0]
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	7858      	ldrb	r0, [r3, #1]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	8952      	ldrh	r2, [r2, #10]
 80083e6:	9202      	str	r2, [sp, #8]
 80083e8:	2203      	movs	r2, #3
 80083ea:	9201      	str	r2, [sp, #4]
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	4623      	mov	r3, r4
 80083f0:	4602      	mov	r2, r0
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f002 f9d4 	bl	800a7a0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	2200      	movs	r2, #0
 80083fe:	4619      	mov	r1, r3
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f004 ffbb 	bl	800d37c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008406:	2300      	movs	r3, #0
 8008408:	2200      	movs	r2, #0
 800840a:	210a      	movs	r1, #10
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fc5c 	bl	8008cca <USBH_FindInterface>
 8008412:	4603      	mov	r3, r0
 8008414:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008416:	7bfb      	ldrb	r3, [r7, #15]
 8008418:	2bff      	cmp	r3, #255	@ 0xff
 800841a:	d002      	beq.n	8008422 <USBH_CDC_InterfaceInit+0x11a>
 800841c:	7bfb      	ldrb	r3, [r7, #15]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d901      	bls.n	8008426 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008422:	2302      	movs	r3, #2
 8008424:	e0c2      	b.n	80085ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008426:	7bfb      	ldrb	r3, [r7, #15]
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	211a      	movs	r1, #26
 800842c:	fb01 f303 	mul.w	r3, r1, r3
 8008430:	4413      	add	r3, r2
 8008432:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	b25b      	sxtb	r3, r3
 800843a:	2b00      	cmp	r3, #0
 800843c:	da16      	bge.n	800846c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800843e:	7bfb      	ldrb	r3, [r7, #15]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	211a      	movs	r1, #26
 8008444:	fb01 f303 	mul.w	r3, r1, r3
 8008448:	4413      	add	r3, r2
 800844a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800844e:	781a      	ldrb	r2, [r3, #0]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008454:	7bfb      	ldrb	r3, [r7, #15]
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	211a      	movs	r1, #26
 800845a:	fb01 f303 	mul.w	r3, r1, r3
 800845e:	4413      	add	r3, r2
 8008460:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008464:	881a      	ldrh	r2, [r3, #0]
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	835a      	strh	r2, [r3, #26]
 800846a:	e015      	b.n	8008498 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800846c:	7bfb      	ldrb	r3, [r7, #15]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	211a      	movs	r1, #26
 8008472:	fb01 f303 	mul.w	r3, r1, r3
 8008476:	4413      	add	r3, r2
 8008478:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800847c:	781a      	ldrb	r2, [r3, #0]
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008482:	7bfb      	ldrb	r3, [r7, #15]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	211a      	movs	r1, #26
 8008488:	fb01 f303 	mul.w	r3, r1, r3
 800848c:	4413      	add	r3, r2
 800848e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008492:	881a      	ldrh	r2, [r3, #0]
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008498:	7bfb      	ldrb	r3, [r7, #15]
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	211a      	movs	r1, #26
 800849e:	fb01 f303 	mul.w	r3, r1, r3
 80084a2:	4413      	add	r3, r2
 80084a4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	b25b      	sxtb	r3, r3
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	da16      	bge.n	80084de <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80084b0:	7bfb      	ldrb	r3, [r7, #15]
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	211a      	movs	r1, #26
 80084b6:	fb01 f303 	mul.w	r3, r1, r3
 80084ba:	4413      	add	r3, r2
 80084bc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80084c0:	781a      	ldrb	r2, [r3, #0]
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80084c6:	7bfb      	ldrb	r3, [r7, #15]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	211a      	movs	r1, #26
 80084cc:	fb01 f303 	mul.w	r3, r1, r3
 80084d0:	4413      	add	r3, r2
 80084d2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80084d6:	881a      	ldrh	r2, [r3, #0]
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	835a      	strh	r2, [r3, #26]
 80084dc:	e015      	b.n	800850a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80084de:	7bfb      	ldrb	r3, [r7, #15]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	211a      	movs	r1, #26
 80084e4:	fb01 f303 	mul.w	r3, r1, r3
 80084e8:	4413      	add	r3, r2
 80084ea:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80084ee:	781a      	ldrb	r2, [r3, #0]
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	211a      	movs	r1, #26
 80084fa:	fb01 f303 	mul.w	r3, r1, r3
 80084fe:	4413      	add	r3, r2
 8008500:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008504:	881a      	ldrh	r2, [r3, #0]
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	7b9b      	ldrb	r3, [r3, #14]
 800850e:	4619      	mov	r1, r3
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f002 f974 	bl	800a7fe <USBH_AllocPipe>
 8008516:	4603      	mov	r3, r0
 8008518:	461a      	mov	r2, r3
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	7bdb      	ldrb	r3, [r3, #15]
 8008522:	4619      	mov	r1, r3
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f002 f96a 	bl	800a7fe <USBH_AllocPipe>
 800852a:	4603      	mov	r3, r0
 800852c:	461a      	mov	r2, r3
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	7b59      	ldrb	r1, [r3, #13]
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	7b98      	ldrb	r0, [r3, #14]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008546:	68ba      	ldr	r2, [r7, #8]
 8008548:	8b12      	ldrh	r2, [r2, #24]
 800854a:	9202      	str	r2, [sp, #8]
 800854c:	2202      	movs	r2, #2
 800854e:	9201      	str	r2, [sp, #4]
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	4623      	mov	r3, r4
 8008554:	4602      	mov	r2, r0
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f002 f922 	bl	800a7a0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	7b19      	ldrb	r1, [r3, #12]
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	7bd8      	ldrb	r0, [r3, #15]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	8b52      	ldrh	r2, [r2, #26]
 8008574:	9202      	str	r2, [sp, #8]
 8008576:	2202      	movs	r2, #2
 8008578:	9201      	str	r2, [sp, #4]
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	4623      	mov	r3, r4
 800857e:	4602      	mov	r2, r0
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f002 f90d 	bl	800a7a0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	7b5b      	ldrb	r3, [r3, #13]
 8008592:	2200      	movs	r2, #0
 8008594:	4619      	mov	r1, r3
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f004 fef0 	bl	800d37c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	7b1b      	ldrb	r3, [r3, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	4619      	mov	r1, r3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f004 fee9 	bl	800d37c <USBH_LL_SetToggle>

  return USBH_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3714      	adds	r7, #20
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd90      	pop	{r4, r7, pc}

080085b4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00e      	beq.n	80085ec <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	4619      	mov	r1, r3
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f002 f902 	bl	800a7de <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	4619      	mov	r1, r3
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f002 f92d 	bl	800a840 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	7b1b      	ldrb	r3, [r3, #12]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00e      	beq.n	8008612 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	7b1b      	ldrb	r3, [r3, #12]
 80085f8:	4619      	mov	r1, r3
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f002 f8ef 	bl	800a7de <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	7b1b      	ldrb	r3, [r3, #12]
 8008604:	4619      	mov	r1, r3
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f002 f91a 	bl	800a840 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	7b5b      	ldrb	r3, [r3, #13]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00e      	beq.n	8008638 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	7b5b      	ldrb	r3, [r3, #13]
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f002 f8dc 	bl	800a7de <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	7b5b      	ldrb	r3, [r3, #13]
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f002 f907 	bl	800a840 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800863e:	69db      	ldr	r3, [r3, #28]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00b      	beq.n	800865c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800864a:	69db      	ldr	r3, [r3, #28]
 800864c:	4618      	mov	r0, r3
 800864e:	f004 ff23 	bl	800d498 <free>
    phost->pActiveClass->pData = 0U;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008658:	2200      	movs	r2, #0
 800865a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b084      	sub	sp, #16
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008674:	69db      	ldr	r3, [r3, #28]
 8008676:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	3340      	adds	r3, #64	@ 0x40
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f8b1 	bl	80087e6 <GetLineCoding>
 8008684:	4603      	mov	r3, r0
 8008686:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008688:	7afb      	ldrb	r3, [r7, #11]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d105      	bne.n	800869a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008694:	2102      	movs	r1, #2
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800869a:	7afb      	ldrb	r3, [r7, #11]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80086ac:	2301      	movs	r3, #1
 80086ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086ba:	69db      	ldr	r3, [r3, #28]
 80086bc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80086c4:	2b04      	cmp	r3, #4
 80086c6:	d877      	bhi.n	80087b8 <USBH_CDC_Process+0x114>
 80086c8:	a201      	add	r2, pc, #4	@ (adr r2, 80086d0 <USBH_CDC_Process+0x2c>)
 80086ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ce:	bf00      	nop
 80086d0:	080086e5 	.word	0x080086e5
 80086d4:	080086eb 	.word	0x080086eb
 80086d8:	0800871b 	.word	0x0800871b
 80086dc:	0800878f 	.word	0x0800878f
 80086e0:	0800879d 	.word	0x0800879d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	73fb      	strb	r3, [r7, #15]
      break;
 80086e8:	e06d      	b.n	80087c6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086ee:	4619      	mov	r1, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 f897 	bl	8008824 <SetLineCoding>
 80086f6:	4603      	mov	r3, r0
 80086f8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80086fa:	7bbb      	ldrb	r3, [r7, #14]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d104      	bne.n	800870a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	2202      	movs	r2, #2
 8008704:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008708:	e058      	b.n	80087bc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800870a:	7bbb      	ldrb	r3, [r7, #14]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d055      	beq.n	80087bc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	2204      	movs	r2, #4
 8008714:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008718:	e050      	b.n	80087bc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	3340      	adds	r3, #64	@ 0x40
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 f860 	bl	80087e6 <GetLineCoding>
 8008726:	4603      	mov	r3, r0
 8008728:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800872a:	7bbb      	ldrb	r3, [r7, #14]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d126      	bne.n	800877e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008742:	791b      	ldrb	r3, [r3, #4]
 8008744:	429a      	cmp	r2, r3
 8008746:	d13b      	bne.n	80087c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008752:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008754:	429a      	cmp	r2, r3
 8008756:	d133      	bne.n	80087c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008762:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008764:	429a      	cmp	r2, r3
 8008766:	d12b      	bne.n	80087c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008770:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008772:	429a      	cmp	r2, r3
 8008774:	d124      	bne.n	80087c0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f982 	bl	8008a80 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800877c:	e020      	b.n	80087c0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800877e:	7bbb      	ldrb	r3, [r7, #14]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d01d      	beq.n	80087c0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2204      	movs	r2, #4
 8008788:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800878c:	e018      	b.n	80087c0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 f867 	bl	8008862 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 f8f6 	bl	8008986 <CDC_ProcessReception>
      break;
 800879a:	e014      	b.n	80087c6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800879c:	2100      	movs	r1, #0
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f001 f988 	bl	8009ab4 <USBH_ClrFeature>
 80087a4:	4603      	mov	r3, r0
 80087a6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80087a8:	7bbb      	ldrb	r3, [r7, #14]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10a      	bne.n	80087c4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80087b6:	e005      	b.n	80087c4 <USBH_CDC_Process+0x120>

    default:
      break;
 80087b8:	bf00      	nop
 80087ba:	e004      	b.n	80087c6 <USBH_CDC_Process+0x122>
      break;
 80087bc:	bf00      	nop
 80087be:	e002      	b.n	80087c6 <USBH_CDC_Process+0x122>
      break;
 80087c0:	bf00      	nop
 80087c2:	e000      	b.n	80087c6 <USBH_CDC_Process+0x122>
      break;
 80087c4:	bf00      	nop

  }

  return status;
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	370c      	adds	r7, #12
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr

080087e6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b082      	sub	sp, #8
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
 80087ee:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	22a1      	movs	r2, #161	@ 0xa1
 80087f4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2221      	movs	r2, #33	@ 0x21
 80087fa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2207      	movs	r2, #7
 800880c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2207      	movs	r2, #7
 8008812:	4619      	mov	r1, r3
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f001 fc82 	bl	800a11e <USBH_CtlReq>
 800881a:	4603      	mov	r3, r0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2221      	movs	r2, #33	@ 0x21
 8008832:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2220      	movs	r2, #32
 8008838:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2207      	movs	r2, #7
 800884a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	2207      	movs	r2, #7
 8008850:	4619      	mov	r1, r3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f001 fc63 	bl	800a11e <USBH_CtlReq>
 8008858:	4603      	mov	r3, r0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b086      	sub	sp, #24
 8008866:	af02      	add	r7, sp, #8
 8008868:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008870:	69db      	ldr	r3, [r3, #28]
 8008872:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008874:	2300      	movs	r3, #0
 8008876:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800887e:	2b01      	cmp	r3, #1
 8008880:	d002      	beq.n	8008888 <CDC_ProcessTransmission+0x26>
 8008882:	2b02      	cmp	r3, #2
 8008884:	d023      	beq.n	80088ce <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008886:	e07a      	b.n	800897e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	8b12      	ldrh	r2, [r2, #24]
 8008890:	4293      	cmp	r3, r2
 8008892:	d90b      	bls.n	80088ac <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	69d9      	ldr	r1, [r3, #28]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	8b1a      	ldrh	r2, [r3, #24]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	7b5b      	ldrb	r3, [r3, #13]
 80088a0:	2001      	movs	r0, #1
 80088a2:	9000      	str	r0, [sp, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f001 ff38 	bl	800a71a <USBH_BulkSendData>
 80088aa:	e00b      	b.n	80088c4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	7b5b      	ldrb	r3, [r3, #13]
 80088ba:	2001      	movs	r0, #1
 80088bc:	9000      	str	r0, [sp, #0]
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f001 ff2b 	bl	800a71a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2202      	movs	r2, #2
 80088c8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80088cc:	e057      	b.n	800897e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	7b5b      	ldrb	r3, [r3, #13]
 80088d2:	4619      	mov	r1, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f004 fd27 	bl	800d328 <USBH_LL_GetURBState>
 80088da:	4603      	mov	r3, r0
 80088dc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80088de:	7afb      	ldrb	r3, [r7, #11]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d136      	bne.n	8008952 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	8b12      	ldrh	r2, [r2, #24]
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d90e      	bls.n	800890e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	8b12      	ldrh	r2, [r2, #24]
 80088f8:	1a9a      	subs	r2, r3, r2
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	69db      	ldr	r3, [r3, #28]
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	8b12      	ldrh	r2, [r2, #24]
 8008906:	441a      	add	r2, r3
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	61da      	str	r2, [r3, #28]
 800890c:	e002      	b.n	8008914 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008918:	2b00      	cmp	r3, #0
 800891a:	d004      	beq.n	8008926 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8008924:	e006      	b.n	8008934 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f892 	bl	8008a58 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2204      	movs	r2, #4
 8008938:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008948:	2200      	movs	r2, #0
 800894a:	4619      	mov	r1, r3
 800894c:	f002 f874 	bl	800aa38 <osMessagePut>
      break;
 8008950:	e014      	b.n	800897c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8008952:	7afb      	ldrb	r3, [r7, #11]
 8008954:	2b02      	cmp	r3, #2
 8008956:	d111      	bne.n	800897c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2204      	movs	r2, #4
 8008964:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008974:	2200      	movs	r2, #0
 8008976:	4619      	mov	r1, r3
 8008978:	f002 f85e 	bl	800aa38 <osMessagePut>
      break;
 800897c:	bf00      	nop
  }
}
 800897e:	bf00      	nop
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b086      	sub	sp, #24
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008994:	69db      	ldr	r3, [r3, #28]
 8008996:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008998:	2300      	movs	r3, #0
 800899a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80089a2:	2b03      	cmp	r3, #3
 80089a4:	d002      	beq.n	80089ac <CDC_ProcessReception+0x26>
 80089a6:	2b04      	cmp	r3, #4
 80089a8:	d00e      	beq.n	80089c8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80089aa:	e051      	b.n	8008a50 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	6a19      	ldr	r1, [r3, #32]
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	8b5a      	ldrh	r2, [r3, #26]
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	7b1b      	ldrb	r3, [r3, #12]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f001 fed3 	bl	800a764 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2204      	movs	r2, #4
 80089c2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80089c6:	e043      	b.n	8008a50 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	7b1b      	ldrb	r3, [r3, #12]
 80089cc:	4619      	mov	r1, r3
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f004 fcaa 	bl	800d328 <USBH_LL_GetURBState>
 80089d4:	4603      	mov	r3, r0
 80089d6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80089d8:	7cfb      	ldrb	r3, [r7, #19]
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d137      	bne.n	8008a4e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	7b1b      	ldrb	r3, [r3, #12]
 80089e2:	4619      	mov	r1, r3
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f004 fc0d 	bl	800d204 <USBH_LL_GetLastXferSize>
 80089ea:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d016      	beq.n	8008a24 <CDC_ProcessReception+0x9e>
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	8b5b      	ldrh	r3, [r3, #26]
 80089fa:	461a      	mov	r2, r3
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d910      	bls.n	8008a24 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	1ad2      	subs	r2, r2, r3
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	6a1a      	ldr	r2, [r3, #32]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	441a      	add	r2, r3
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	2203      	movs	r2, #3
 8008a1e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8008a22:	e006      	b.n	8008a32 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 f81d 	bl	8008a6c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2204      	movs	r2, #4
 8008a36:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008a46:	2200      	movs	r2, #0
 8008a48:	4619      	mov	r1, r3
 8008a4a:	f001 fff5 	bl	800aa38 <osMessagePut>
      break;
 8008a4e:	bf00      	nop
  }
}
 8008a50:	bf00      	nop
 8008a52:	3718      	adds	r7, #24
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008a60:	bf00      	nop
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008a74:	bf00      	nop
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008a94:	b5b0      	push	{r4, r5, r7, lr}
 8008a96:	b090      	sub	sp, #64	@ 0x40
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d101      	bne.n	8008aac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008aa8:	2302      	movs	r3, #2
 8008aaa:	e04d      	b.n	8008b48 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	79fa      	ldrb	r2, [r7, #7]
 8008ab0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f000 f847 	bl	8008b58 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d003      	beq.n	8008af8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	68ba      	ldr	r2, [r7, #8]
 8008af4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8008af8:	4b15      	ldr	r3, [pc, #84]	@ (8008b50 <USBH_Init+0xbc>)
 8008afa:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8008afe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8008b04:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008b08:	2100      	movs	r1, #0
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f001 ff6b 	bl	800a9e6 <osMessageCreate>
 8008b10:	4602      	mov	r2, r0
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8008b18:	4b0e      	ldr	r3, [pc, #56]	@ (8008b54 <USBH_Init+0xc0>)
 8008b1a:	f107 0414 	add.w	r4, r7, #20
 8008b1e:	461d      	mov	r5, r3
 8008b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008b28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8008b2c:	f107 0314 	add.w	r3, r7, #20
 8008b30:	68f9      	ldr	r1, [r7, #12]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f001 fef7 	bl	800a926 <osThreadCreate>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f004 faa1 	bl	800d088 <USBH_LL_Init>

  return USBH_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3740      	adds	r7, #64	@ 0x40
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8008b50:	0800d780 	.word	0x0800d780
 8008b54:	0800d79c 	.word	0x0800d79c

08008b58 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008b60:	2300      	movs	r3, #0
 8008b62:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008b64:	2300      	movs	r3, #0
 8008b66:	60fb      	str	r3, [r7, #12]
 8008b68:	e009      	b.n	8008b7e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	33e0      	adds	r3, #224	@ 0xe0
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	4413      	add	r3, r2
 8008b74:	2200      	movs	r2, #0
 8008b76:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	60fb      	str	r3, [r7, #12]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2b0f      	cmp	r3, #15
 8008b82:	d9f2      	bls.n	8008b6a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008b84:	2300      	movs	r3, #0
 8008b86:	60fb      	str	r3, [r7, #12]
 8008b88:	e009      	b.n	8008b9e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	4413      	add	r3, r2
 8008b90:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008b94:	2200      	movs	r2, #0
 8008b96:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	60fb      	str	r3, [r7, #12]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ba4:	d3f1      	bcc.n	8008b8a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2240      	movs	r2, #64	@ 0x40
 8008bca:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	331c      	adds	r3, #28
 8008bf6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f004 fd01 	bl	800d604 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008c08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c0c:	2100      	movs	r1, #0
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f004 fcf8 	bl	800d604 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008c1a:	2212      	movs	r2, #18
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f004 fcf0 	bl	800d604 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008c2a:	223e      	movs	r2, #62	@ 0x3e
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f004 fce8 	bl	800d604 <memset>

  return USBH_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	b085      	sub	sp, #20
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d016      	beq.n	8008c80 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d10e      	bne.n	8008c7a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008c62:	1c59      	adds	r1, r3, #1
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	33de      	adds	r3, #222	@ 0xde
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	73fb      	strb	r3, [r7, #15]
 8008c78:	e004      	b.n	8008c84 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008c7a:	2302      	movs	r3, #2
 8008c7c:	73fb      	strb	r3, [r7, #15]
 8008c7e:	e001      	b.n	8008c84 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008c80:	2302      	movs	r3, #2
 8008c82:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3714      	adds	r7, #20
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr

08008c92 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b085      	sub	sp, #20
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008ca8:	78fa      	ldrb	r2, [r7, #3]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d204      	bcs.n	8008cb8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	78fa      	ldrb	r2, [r7, #3]
 8008cb2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008cb6:	e001      	b.n	8008cbc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008cb8:	2302      	movs	r3, #2
 8008cba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3714      	adds	r7, #20
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008cca:	b480      	push	{r7}
 8008ccc:	b087      	sub	sp, #28
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	4608      	mov	r0, r1
 8008cd4:	4611      	mov	r1, r2
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	4603      	mov	r3, r0
 8008cda:	70fb      	strb	r3, [r7, #3]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	70bb      	strb	r3, [r7, #2]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008cf2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008cf4:	e025      	b.n	8008d42 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008cf6:	7dfb      	ldrb	r3, [r7, #23]
 8008cf8:	221a      	movs	r2, #26
 8008cfa:	fb02 f303 	mul.w	r3, r2, r3
 8008cfe:	3308      	adds	r3, #8
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	4413      	add	r3, r2
 8008d04:	3302      	adds	r3, #2
 8008d06:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	795b      	ldrb	r3, [r3, #5]
 8008d0c:	78fa      	ldrb	r2, [r7, #3]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d002      	beq.n	8008d18 <USBH_FindInterface+0x4e>
 8008d12:	78fb      	ldrb	r3, [r7, #3]
 8008d14:	2bff      	cmp	r3, #255	@ 0xff
 8008d16:	d111      	bne.n	8008d3c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008d1c:	78ba      	ldrb	r2, [r7, #2]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d002      	beq.n	8008d28 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d22:	78bb      	ldrb	r3, [r7, #2]
 8008d24:	2bff      	cmp	r3, #255	@ 0xff
 8008d26:	d109      	bne.n	8008d3c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d2c:	787a      	ldrb	r2, [r7, #1]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d002      	beq.n	8008d38 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008d32:	787b      	ldrb	r3, [r7, #1]
 8008d34:	2bff      	cmp	r3, #255	@ 0xff
 8008d36:	d101      	bne.n	8008d3c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008d38:	7dfb      	ldrb	r3, [r7, #23]
 8008d3a:	e006      	b.n	8008d4a <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008d3c:	7dfb      	ldrb	r3, [r7, #23]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008d42:	7dfb      	ldrb	r3, [r7, #23]
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d9d6      	bls.n	8008cf6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008d48:	23ff      	movs	r3, #255	@ 0xff
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	371c      	adds	r7, #28
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b082      	sub	sp, #8
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f004 f9d8 	bl	800d114 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008d64:	2101      	movs	r1, #1
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f004 faf1 	bl	800d34e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3708      	adds	r7, #8
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
	...

08008d78 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b088      	sub	sp, #32
 8008d7c:	af04      	add	r7, sp, #16
 8008d7e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008d80:	2302      	movs	r3, #2
 8008d82:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008d84:	2300      	movs	r3, #0
 8008d86:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d102      	bne.n	8008d9a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2203      	movs	r2, #3
 8008d98:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	2b0b      	cmp	r3, #11
 8008da2:	f200 8244 	bhi.w	800922e <USBH_Process+0x4b6>
 8008da6:	a201      	add	r2, pc, #4	@ (adr r2, 8008dac <USBH_Process+0x34>)
 8008da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dac:	08008ddd 	.word	0x08008ddd
 8008db0:	08008e2b 	.word	0x08008e2b
 8008db4:	08008eaf 	.word	0x08008eaf
 8008db8:	080091ad 	.word	0x080091ad
 8008dbc:	0800922f 	.word	0x0800922f
 8008dc0:	08008f6b 	.word	0x08008f6b
 8008dc4:	08009137 	.word	0x08009137
 8008dc8:	08008fbd 	.word	0x08008fbd
 8008dcc:	08008ff9 	.word	0x08008ff9
 8008dd0:	08009031 	.word	0x08009031
 8008dd4:	0800908f 	.word	0x0800908f
 8008dd8:	08009195 	.word	0x08009195
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f000 8224 	beq.w	8009232 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2201      	movs	r2, #1
 8008dee:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008df0:	20c8      	movs	r0, #200	@ 0xc8
 8008df2:	f004 faf6 	bl	800d3e2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f004 f9e9 	bl	800d1ce <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008e20:	2200      	movs	r2, #0
 8008e22:	4619      	mov	r1, r3
 8008e24:	f001 fe08 	bl	800aa38 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008e28:	e203      	b.n	8009232 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d107      	bne.n	8008e44 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2202      	movs	r2, #2
 8008e40:	701a      	strb	r2, [r3, #0]
 8008e42:	e025      	b.n	8008e90 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008e4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e4e:	d914      	bls.n	8008e7a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008e56:	3301      	adds	r3, #1
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008e66:	2b03      	cmp	r3, #3
 8008e68:	d903      	bls.n	8008e72 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	220d      	movs	r2, #13
 8008e6e:	701a      	strb	r2, [r3, #0]
 8008e70:	e00e      	b.n	8008e90 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	701a      	strb	r2, [r3, #0]
 8008e78:	e00a      	b.n	8008e90 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008e80:	f103 020a 	add.w	r2, r3, #10
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008e8a:	200a      	movs	r0, #10
 8008e8c:	f004 faa9 	bl	800d3e2 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	f001 fdc6 	bl	800aa38 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008eac:	e1c8      	b.n	8009240 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d005      	beq.n	8008ec4 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ebe:	2104      	movs	r1, #4
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008ec4:	2064      	movs	r0, #100	@ 0x64
 8008ec6:	f004 fa8c 	bl	800d3e2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f004 f958 	bl	800d180 <USBH_LL_GetSpeed>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2205      	movs	r2, #5
 8008ede:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008ee0:	2100      	movs	r1, #0
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f001 fc8b 	bl	800a7fe <USBH_AllocPipe>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	461a      	mov	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008ef0:	2180      	movs	r1, #128	@ 0x80
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f001 fc83 	bl	800a7fe <USBH_AllocPipe>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	461a      	mov	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	7919      	ldrb	r1, [r3, #4]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008f14:	9202      	str	r2, [sp, #8]
 8008f16:	2200      	movs	r2, #0
 8008f18:	9201      	str	r2, [sp, #4]
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2280      	movs	r2, #128	@ 0x80
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f001 fc3d 	bl	800a7a0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	7959      	ldrb	r1, [r3, #5]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008f3a:	9202      	str	r2, [sp, #8]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	9201      	str	r2, [sp, #4]
 8008f40:	9300      	str	r3, [sp, #0]
 8008f42:	4603      	mov	r3, r0
 8008f44:	2200      	movs	r2, #0
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f001 fc2a 	bl	800a7a0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008f60:	2200      	movs	r2, #0
 8008f62:	4619      	mov	r1, r3
 8008f64:	f001 fd68 	bl	800aa38 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f68:	e16a      	b.n	8009240 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f96e 	bl	800924c <USBH_HandleEnum>
 8008f70:	4603      	mov	r3, r0
 8008f72:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008f74:	7bbb      	ldrb	r3, [r7, #14]
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f040 815c 	bne.w	8009236 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d103      	bne.n	8008f98 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2208      	movs	r2, #8
 8008f94:	701a      	strb	r2, [r3, #0]
 8008f96:	e002      	b.n	8008f9e <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2207      	movs	r2, #7
 8008f9c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2205      	movs	r2, #5
 8008fa2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	f001 fd3f 	bl	800aa38 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008fba:	e13c      	b.n	8009236 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f000 8139 	beq.w	800923a <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008fce:	2101      	movs	r1, #1
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2208      	movs	r2, #8
 8008fd8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2205      	movs	r2, #5
 8008fde:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008fee:	2200      	movs	r2, #0
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	f001 fd21 	bl	800aa38 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008ff6:	e120      	b.n	800923a <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008ffe:	4619      	mov	r1, r3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fd10 	bl	8009a26 <USBH_SetCfg>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d102      	bne.n	8009012 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2209      	movs	r2, #9
 8009010:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009026:	2200      	movs	r2, #0
 8009028:	4619      	mov	r1, r3
 800902a:	f001 fd05 	bl	800aa38 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800902e:	e107      	b.n	8009240 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009036:	f003 0320 	and.w	r3, r3, #32
 800903a:	2b00      	cmp	r3, #0
 800903c:	d015      	beq.n	800906a <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800903e:	2101      	movs	r1, #1
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 fd13 	bl	8009a6c <USBH_SetFeature>
 8009046:	4603      	mov	r3, r0
 8009048:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800904a:	7bbb      	ldrb	r3, [r7, #14]
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d103      	bne.n	800905a <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	220a      	movs	r2, #10
 8009056:	701a      	strb	r2, [r3, #0]
 8009058:	e00a      	b.n	8009070 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800905a:	7bbb      	ldrb	r3, [r7, #14]
 800905c:	b2db      	uxtb	r3, r3
 800905e:	2b03      	cmp	r3, #3
 8009060:	d106      	bne.n	8009070 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	220a      	movs	r2, #10
 8009066:	701a      	strb	r2, [r3, #0]
 8009068:	e002      	b.n	8009070 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	220a      	movs	r2, #10
 800906e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009084:	2200      	movs	r2, #0
 8009086:	4619      	mov	r1, r3
 8009088:	f001 fcd6 	bl	800aa38 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800908c:	e0d8      	b.n	8009240 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009094:	2b00      	cmp	r3, #0
 8009096:	d03f      	beq.n	8009118 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80090a0:	2300      	movs	r3, #0
 80090a2:	73fb      	strb	r3, [r7, #15]
 80090a4:	e016      	b.n	80090d4 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80090a6:	7bfa      	ldrb	r2, [r7, #15]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	32de      	adds	r2, #222	@ 0xde
 80090ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090b0:	791a      	ldrb	r2, [r3, #4]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d108      	bne.n	80090ce <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 80090bc:	7bfa      	ldrb	r2, [r7, #15]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	32de      	adds	r2, #222	@ 0xde
 80090c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80090cc:	e005      	b.n	80090da <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80090ce:	7bfb      	ldrb	r3, [r7, #15]
 80090d0:	3301      	adds	r3, #1
 80090d2:	73fb      	strb	r3, [r7, #15]
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d0e5      	beq.n	80090a6 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d016      	beq.n	8009112 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	4798      	blx	r3
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d109      	bne.n	800910a <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2206      	movs	r2, #6
 80090fa:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009102:	2103      	movs	r1, #3
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	4798      	blx	r3
 8009108:	e006      	b.n	8009118 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	220d      	movs	r2, #13
 800910e:	701a      	strb	r2, [r3, #0]
 8009110:	e002      	b.n	8009118 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	220d      	movs	r2, #13
 8009116:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2205      	movs	r2, #5
 800911c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800912c:	2200      	movs	r2, #0
 800912e:	4619      	mov	r1, r3
 8009130:	f001 fc82 	bl	800aa38 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009134:	e084      	b.n	8009240 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800913c:	2b00      	cmp	r3, #0
 800913e:	d017      	beq.n	8009170 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	4798      	blx	r3
 800914c:	4603      	mov	r3, r0
 800914e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009150:	7bbb      	ldrb	r3, [r7, #14]
 8009152:	b2db      	uxtb	r3, r3
 8009154:	2b00      	cmp	r3, #0
 8009156:	d103      	bne.n	8009160 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	220b      	movs	r2, #11
 800915c:	701a      	strb	r2, [r3, #0]
 800915e:	e00a      	b.n	8009176 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 8009160:	7bbb      	ldrb	r3, [r7, #14]
 8009162:	b2db      	uxtb	r3, r3
 8009164:	2b02      	cmp	r3, #2
 8009166:	d106      	bne.n	8009176 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	220d      	movs	r2, #13
 800916c:	701a      	strb	r2, [r3, #0]
 800916e:	e002      	b.n	8009176 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	220d      	movs	r2, #13
 8009174:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2205      	movs	r2, #5
 800917a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800918a:	2200      	movs	r2, #0
 800918c:	4619      	mov	r1, r3
 800918e:	f001 fc53 	bl	800aa38 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009192:	e055      	b.n	8009240 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800919a:	2b00      	cmp	r3, #0
 800919c:	d04f      	beq.n	800923e <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091a4:	695b      	ldr	r3, [r3, #20]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	4798      	blx	r3
      }
      break;
 80091aa:	e048      	b.n	800923e <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f7ff fccf 	bl	8008b58 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d009      	beq.n	80091d8 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d005      	beq.n	80091ee <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80091e8:	2105      	movs	r1, #5
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d107      	bne.n	800920a <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f7ff fda7 	bl	8008d56 <USBH_Start>
 8009208:	e002      	b.n	8009210 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f003 ff82 	bl	800d114 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009224:	2200      	movs	r2, #0
 8009226:	4619      	mov	r1, r3
 8009228:	f001 fc06 	bl	800aa38 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800922c:	e008      	b.n	8009240 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800922e:	bf00      	nop
 8009230:	e006      	b.n	8009240 <USBH_Process+0x4c8>
      break;
 8009232:	bf00      	nop
 8009234:	e004      	b.n	8009240 <USBH_Process+0x4c8>
      break;
 8009236:	bf00      	nop
 8009238:	e002      	b.n	8009240 <USBH_Process+0x4c8>
    break;
 800923a:	bf00      	nop
 800923c:	e000      	b.n	8009240 <USBH_Process+0x4c8>
      break;
 800923e:	bf00      	nop
  }
  return USBH_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop

0800924c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b088      	sub	sp, #32
 8009250:	af04      	add	r7, sp, #16
 8009252:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009254:	2301      	movs	r3, #1
 8009256:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009258:	2301      	movs	r3, #1
 800925a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	785b      	ldrb	r3, [r3, #1]
 8009260:	2b07      	cmp	r3, #7
 8009262:	f200 8204 	bhi.w	800966e <USBH_HandleEnum+0x422>
 8009266:	a201      	add	r2, pc, #4	@ (adr r2, 800926c <USBH_HandleEnum+0x20>)
 8009268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926c:	0800928d 	.word	0x0800928d
 8009270:	08009347 	.word	0x08009347
 8009274:	080093b1 	.word	0x080093b1
 8009278:	0800943b 	.word	0x0800943b
 800927c:	080094a5 	.word	0x080094a5
 8009280:	08009515 	.word	0x08009515
 8009284:	080095b1 	.word	0x080095b1
 8009288:	0800962f 	.word	0x0800962f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800928c:	2108      	movs	r1, #8
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fae6 	bl	8009860 <USBH_Get_DevDesc>
 8009294:	4603      	mov	r3, r0
 8009296:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009298:	7bbb      	ldrb	r3, [r7, #14]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d12e      	bne.n	80092fc <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	7919      	ldrb	r1, [r3, #4]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80092c2:	9202      	str	r2, [sp, #8]
 80092c4:	2200      	movs	r2, #0
 80092c6:	9201      	str	r2, [sp, #4]
 80092c8:	9300      	str	r3, [sp, #0]
 80092ca:	4603      	mov	r3, r0
 80092cc:	2280      	movs	r2, #128	@ 0x80
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f001 fa66 	bl	800a7a0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	7959      	ldrb	r1, [r3, #5]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80092e8:	9202      	str	r2, [sp, #8]
 80092ea:	2200      	movs	r2, #0
 80092ec:	9201      	str	r2, [sp, #4]
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	4603      	mov	r3, r0
 80092f2:	2200      	movs	r2, #0
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f001 fa53 	bl	800a7a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80092fa:	e1ba      	b.n	8009672 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092fc:	7bbb      	ldrb	r3, [r7, #14]
 80092fe:	2b03      	cmp	r3, #3
 8009300:	f040 81b7 	bne.w	8009672 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800930a:	3301      	adds	r3, #1
 800930c:	b2da      	uxtb	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800931a:	2b03      	cmp	r3, #3
 800931c:	d903      	bls.n	8009326 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	220d      	movs	r2, #13
 8009322:	701a      	strb	r2, [r3, #0]
      break;
 8009324:	e1a5      	b.n	8009672 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	795b      	ldrb	r3, [r3, #5]
 800932a:	4619      	mov	r1, r3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f001 fa87 	bl	800a840 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	791b      	ldrb	r3, [r3, #4]
 8009336:	4619      	mov	r1, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f001 fa81 	bl	800a840 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	701a      	strb	r2, [r3, #0]
      break;
 8009344:	e195      	b.n	8009672 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009346:	2112      	movs	r1, #18
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fa89 	bl	8009860 <USBH_Get_DevDesc>
 800934e:	4603      	mov	r3, r0
 8009350:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009352:	7bbb      	ldrb	r3, [r7, #14]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d103      	bne.n	8009360 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2202      	movs	r2, #2
 800935c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800935e:	e18a      	b.n	8009676 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009360:	7bbb      	ldrb	r3, [r7, #14]
 8009362:	2b03      	cmp	r3, #3
 8009364:	f040 8187 	bne.w	8009676 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800936e:	3301      	adds	r3, #1
 8009370:	b2da      	uxtb	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800937e:	2b03      	cmp	r3, #3
 8009380:	d903      	bls.n	800938a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	220d      	movs	r2, #13
 8009386:	701a      	strb	r2, [r3, #0]
      break;
 8009388:	e175      	b.n	8009676 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	795b      	ldrb	r3, [r3, #5]
 800938e:	4619      	mov	r1, r3
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f001 fa55 	bl	800a840 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	791b      	ldrb	r3, [r3, #4]
 800939a:	4619      	mov	r1, r3
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f001 fa4f 	bl	800a840 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	701a      	strb	r2, [r3, #0]
      break;
 80093ae:	e162      	b.n	8009676 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80093b0:	2101      	movs	r1, #1
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 fb13 	bl	80099de <USBH_SetAddress>
 80093b8:	4603      	mov	r3, r0
 80093ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80093bc:	7bbb      	ldrb	r3, [r7, #14]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d130      	bne.n	8009424 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80093c2:	2002      	movs	r0, #2
 80093c4:	f004 f80d 	bl	800d3e2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2203      	movs	r2, #3
 80093d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	7919      	ldrb	r1, [r3, #4]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80093ea:	9202      	str	r2, [sp, #8]
 80093ec:	2200      	movs	r2, #0
 80093ee:	9201      	str	r2, [sp, #4]
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	4603      	mov	r3, r0
 80093f4:	2280      	movs	r2, #128	@ 0x80
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f001 f9d2 	bl	800a7a0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	7959      	ldrb	r1, [r3, #5]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009410:	9202      	str	r2, [sp, #8]
 8009412:	2200      	movs	r2, #0
 8009414:	9201      	str	r2, [sp, #4]
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	4603      	mov	r3, r0
 800941a:	2200      	movs	r2, #0
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f001 f9bf 	bl	800a7a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009422:	e12a      	b.n	800967a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009424:	7bbb      	ldrb	r3, [r7, #14]
 8009426:	2b03      	cmp	r3, #3
 8009428:	f040 8127 	bne.w	800967a <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	220d      	movs	r2, #13
 8009430:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	705a      	strb	r2, [r3, #1]
      break;
 8009438:	e11f      	b.n	800967a <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800943a:	2109      	movs	r1, #9
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fa3b 	bl	80098b8 <USBH_Get_CfgDesc>
 8009442:	4603      	mov	r3, r0
 8009444:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009446:	7bbb      	ldrb	r3, [r7, #14]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d103      	bne.n	8009454 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2204      	movs	r2, #4
 8009450:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009452:	e114      	b.n	800967e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009454:	7bbb      	ldrb	r3, [r7, #14]
 8009456:	2b03      	cmp	r3, #3
 8009458:	f040 8111 	bne.w	800967e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009462:	3301      	adds	r3, #1
 8009464:	b2da      	uxtb	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009472:	2b03      	cmp	r3, #3
 8009474:	d903      	bls.n	800947e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	220d      	movs	r2, #13
 800947a:	701a      	strb	r2, [r3, #0]
      break;
 800947c:	e0ff      	b.n	800967e <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	795b      	ldrb	r3, [r3, #5]
 8009482:	4619      	mov	r1, r3
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f001 f9db 	bl	800a840 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	791b      	ldrb	r3, [r3, #4]
 800948e:	4619      	mov	r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f001 f9d5 	bl	800a840 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	701a      	strb	r2, [r3, #0]
      break;
 80094a2:	e0ec      	b.n	800967e <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80094aa:	4619      	mov	r1, r3
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 fa03 	bl	80098b8 <USBH_Get_CfgDesc>
 80094b2:	4603      	mov	r3, r0
 80094b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80094b6:	7bbb      	ldrb	r3, [r7, #14]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d103      	bne.n	80094c4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2205      	movs	r2, #5
 80094c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80094c2:	e0de      	b.n	8009682 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094c4:	7bbb      	ldrb	r3, [r7, #14]
 80094c6:	2b03      	cmp	r3, #3
 80094c8:	f040 80db 	bne.w	8009682 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80094d2:	3301      	adds	r3, #1
 80094d4:	b2da      	uxtb	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80094e2:	2b03      	cmp	r3, #3
 80094e4:	d903      	bls.n	80094ee <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	220d      	movs	r2, #13
 80094ea:	701a      	strb	r2, [r3, #0]
      break;
 80094ec:	e0c9      	b.n	8009682 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	795b      	ldrb	r3, [r3, #5]
 80094f2:	4619      	mov	r1, r3
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f001 f9a3 	bl	800a840 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	791b      	ldrb	r3, [r3, #4]
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f001 f99d 	bl	800a840 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	701a      	strb	r2, [r3, #0]
      break;
 8009512:	e0b6      	b.n	8009682 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800951a:	2b00      	cmp	r3, #0
 800951c:	d036      	beq.n	800958c <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800952a:	23ff      	movs	r3, #255	@ 0xff
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 f9ed 	bl	800990c <USBH_Get_StringDesc>
 8009532:	4603      	mov	r3, r0
 8009534:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009536:	7bbb      	ldrb	r3, [r7, #14]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d111      	bne.n	8009560 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2206      	movs	r2, #6
 8009540:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2205      	movs	r2, #5
 8009546:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009556:	2200      	movs	r2, #0
 8009558:	4619      	mov	r1, r3
 800955a:	f001 fa6d 	bl	800aa38 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800955e:	e092      	b.n	8009686 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009560:	7bbb      	ldrb	r3, [r7, #14]
 8009562:	2b03      	cmp	r3, #3
 8009564:	f040 808f 	bne.w	8009686 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2206      	movs	r2, #6
 800956c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2205      	movs	r2, #5
 8009572:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009582:	2200      	movs	r2, #0
 8009584:	4619      	mov	r1, r3
 8009586:	f001 fa57 	bl	800aa38 <osMessagePut>
      break;
 800958a:	e07c      	b.n	8009686 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2206      	movs	r2, #6
 8009590:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2205      	movs	r2, #5
 8009596:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80095a6:	2200      	movs	r2, #0
 80095a8:	4619      	mov	r1, r3
 80095aa:	f001 fa45 	bl	800aa38 <osMessagePut>
      break;
 80095ae:	e06a      	b.n	8009686 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d027      	beq.n	800960a <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80095c6:	23ff      	movs	r3, #255	@ 0xff
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f99f 	bl	800990c <USBH_Get_StringDesc>
 80095ce:	4603      	mov	r3, r0
 80095d0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80095d2:	7bbb      	ldrb	r3, [r7, #14]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d103      	bne.n	80095e0 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2207      	movs	r2, #7
 80095dc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80095de:	e054      	b.n	800968a <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095e0:	7bbb      	ldrb	r3, [r7, #14]
 80095e2:	2b03      	cmp	r3, #3
 80095e4:	d151      	bne.n	800968a <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2207      	movs	r2, #7
 80095ea:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2205      	movs	r2, #5
 80095f0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009600:	2200      	movs	r2, #0
 8009602:	4619      	mov	r1, r3
 8009604:	f001 fa18 	bl	800aa38 <osMessagePut>
      break;
 8009608:	e03f      	b.n	800968a <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2207      	movs	r2, #7
 800960e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2205      	movs	r2, #5
 8009614:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009624:	2200      	movs	r2, #0
 8009626:	4619      	mov	r1, r3
 8009628:	f001 fa06 	bl	800aa38 <osMessagePut>
      break;
 800962c:	e02d      	b.n	800968a <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009634:	2b00      	cmp	r3, #0
 8009636:	d017      	beq.n	8009668 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009644:	23ff      	movs	r3, #255	@ 0xff
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 f960 	bl	800990c <USBH_Get_StringDesc>
 800964c:	4603      	mov	r3, r0
 800964e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009650:	7bbb      	ldrb	r3, [r7, #14]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d102      	bne.n	800965c <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009656:	2300      	movs	r3, #0
 8009658:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800965a:	e018      	b.n	800968e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800965c:	7bbb      	ldrb	r3, [r7, #14]
 800965e:	2b03      	cmp	r3, #3
 8009660:	d115      	bne.n	800968e <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 8009662:	2300      	movs	r3, #0
 8009664:	73fb      	strb	r3, [r7, #15]
      break;
 8009666:	e012      	b.n	800968e <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8009668:	2300      	movs	r3, #0
 800966a:	73fb      	strb	r3, [r7, #15]
      break;
 800966c:	e00f      	b.n	800968e <USBH_HandleEnum+0x442>

    default:
      break;
 800966e:	bf00      	nop
 8009670:	e00e      	b.n	8009690 <USBH_HandleEnum+0x444>
      break;
 8009672:	bf00      	nop
 8009674:	e00c      	b.n	8009690 <USBH_HandleEnum+0x444>
      break;
 8009676:	bf00      	nop
 8009678:	e00a      	b.n	8009690 <USBH_HandleEnum+0x444>
      break;
 800967a:	bf00      	nop
 800967c:	e008      	b.n	8009690 <USBH_HandleEnum+0x444>
      break;
 800967e:	bf00      	nop
 8009680:	e006      	b.n	8009690 <USBH_HandleEnum+0x444>
      break;
 8009682:	bf00      	nop
 8009684:	e004      	b.n	8009690 <USBH_HandleEnum+0x444>
      break;
 8009686:	bf00      	nop
 8009688:	e002      	b.n	8009690 <USBH_HandleEnum+0x444>
      break;
 800968a:	bf00      	nop
 800968c:	e000      	b.n	8009690 <USBH_HandleEnum+0x444>
      break;
 800968e:	bf00      	nop
  }
  return Status;
 8009690:	7bfb      	ldrb	r3, [r7, #15]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop

0800969c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	683a      	ldr	r2, [r7, #0]
 80096aa:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80096ae:	bf00      	nop
 80096b0:	370c      	adds	r7, #12
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr

080096ba <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b082      	sub	sp, #8
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80096c8:	1c5a      	adds	r2, r3, #1
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 f804 	bl	80096de <USBH_HandleSof>
}
 80096d6:	bf00      	nop
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b082      	sub	sp, #8
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	2b0b      	cmp	r3, #11
 80096ee:	d10a      	bne.n	8009706 <USBH_HandleSof+0x28>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d005      	beq.n	8009706 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009700:	699b      	ldr	r3, [r3, #24]
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	4798      	blx	r3
  }
}
 8009706:	bf00      	nop
 8009708:	3708      	adds	r7, #8
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b082      	sub	sp, #8
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2201      	movs	r2, #1
 800971a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009732:	2200      	movs	r2, #0
 8009734:	4619      	mov	r1, r3
 8009736:	f001 f97f 	bl	800aa38 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800973a:	bf00      	nop
}
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009742:	b480      	push	{r7}
 8009744:	b083      	sub	sp, #12
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009752:	bf00      	nop
}
 8009754:	370c      	adds	r7, #12
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr

0800975e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b082      	sub	sp, #8
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2201      	movs	r2, #1
 800976a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2201      	movs	r2, #1
 8009782:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009792:	2200      	movs	r2, #0
 8009794:	4619      	mov	r1, r3
 8009796:	f001 f94f 	bl	800aa38 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800979a:	2300      	movs	r3, #0
}
 800979c:	4618      	mov	r0, r3
 800979e:	3708      	adds	r7, #8
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f003 fcc0 	bl	800d14a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	791b      	ldrb	r3, [r3, #4]
 80097ce:	4619      	mov	r1, r3
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f001 f835 	bl	800a840 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	795b      	ldrb	r3, [r3, #5]
 80097da:	4619      	mov	r1, r3
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f001 f82f 	bl	800a840 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80097f6:	2200      	movs	r2, #0
 80097f8:	4619      	mov	r1, r3
 80097fa:	f001 f91d 	bl	800aa38 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b086      	sub	sp, #24
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8009816:	f107 030c 	add.w	r3, r7, #12
 800981a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800981e:	4618      	mov	r0, r3
 8009820:	f001 f94a 	bl	800aab8 <osMessageGet>
    if (event.status == osEventMessage)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2b10      	cmp	r3, #16
 8009828:	d1f2      	bne.n	8009810 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f7ff faa4 	bl	8008d78 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8009830:	e7ee      	b.n	8009810 <USBH_Process_OS+0x8>

08009832 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b082      	sub	sp, #8
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2201      	movs	r2, #1
 800983e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800984e:	2200      	movs	r2, #0
 8009850:	4619      	mov	r1, r3
 8009852:	f001 f8f1 	bl	800aa38 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b086      	sub	sp, #24
 8009864:	af02      	add	r7, sp, #8
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	460b      	mov	r3, r1
 800986a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800986c:	887b      	ldrh	r3, [r7, #2]
 800986e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009872:	d901      	bls.n	8009878 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009874:	2303      	movs	r3, #3
 8009876:	e01b      	b.n	80098b0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800987e:	887b      	ldrh	r3, [r7, #2]
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	4613      	mov	r3, r2
 8009884:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009888:	2100      	movs	r1, #0
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f872 	bl	8009974 <USBH_GetDescriptor>
 8009890:	4603      	mov	r3, r0
 8009892:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009894:	7bfb      	ldrb	r3, [r7, #15]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d109      	bne.n	80098ae <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80098a0:	887a      	ldrh	r2, [r7, #2]
 80098a2:	4619      	mov	r1, r3
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 f929 	bl	8009afc <USBH_ParseDevDesc>
 80098aa:	4603      	mov	r3, r0
 80098ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80098ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b086      	sub	sp, #24
 80098bc:	af02      	add	r7, sp, #8
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	460b      	mov	r3, r1
 80098c2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	331c      	adds	r3, #28
 80098c8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80098ca:	887b      	ldrh	r3, [r7, #2]
 80098cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098d0:	d901      	bls.n	80098d6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80098d2:	2303      	movs	r3, #3
 80098d4:	e016      	b.n	8009904 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80098d6:	887b      	ldrh	r3, [r7, #2]
 80098d8:	9300      	str	r3, [sp, #0]
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098e0:	2100      	movs	r1, #0
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f846 	bl	8009974 <USBH_GetDescriptor>
 80098e8:	4603      	mov	r3, r0
 80098ea:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80098ec:	7bfb      	ldrb	r3, [r7, #15]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d107      	bne.n	8009902 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80098f2:	887b      	ldrh	r3, [r7, #2]
 80098f4:	461a      	mov	r2, r3
 80098f6:	68b9      	ldr	r1, [r7, #8]
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f9af 	bl	8009c5c <USBH_ParseCfgDesc>
 80098fe:	4603      	mov	r3, r0
 8009900:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009902:	7bfb      	ldrb	r3, [r7, #15]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b088      	sub	sp, #32
 8009910:	af02      	add	r7, sp, #8
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	607a      	str	r2, [r7, #4]
 8009916:	461a      	mov	r2, r3
 8009918:	460b      	mov	r3, r1
 800991a:	72fb      	strb	r3, [r7, #11]
 800991c:	4613      	mov	r3, r2
 800991e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009920:	893b      	ldrh	r3, [r7, #8]
 8009922:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009926:	d802      	bhi.n	800992e <USBH_Get_StringDesc+0x22>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d101      	bne.n	8009932 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800992e:	2303      	movs	r3, #3
 8009930:	e01c      	b.n	800996c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009932:	7afb      	ldrb	r3, [r7, #11]
 8009934:	b29b      	uxth	r3, r3
 8009936:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800993a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009942:	893b      	ldrh	r3, [r7, #8]
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	460b      	mov	r3, r1
 8009948:	2100      	movs	r1, #0
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f000 f812 	bl	8009974 <USBH_GetDescriptor>
 8009950:	4603      	mov	r3, r0
 8009952:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009954:	7dfb      	ldrb	r3, [r7, #23]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d107      	bne.n	800996a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009960:	893a      	ldrh	r2, [r7, #8]
 8009962:	6879      	ldr	r1, [r7, #4]
 8009964:	4618      	mov	r0, r3
 8009966:	f000 fb8d 	bl	800a084 <USBH_ParseStringDesc>
  }

  return status;
 800996a:	7dfb      	ldrb	r3, [r7, #23]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3718      	adds	r7, #24
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	607b      	str	r3, [r7, #4]
 800997e:	460b      	mov	r3, r1
 8009980:	72fb      	strb	r3, [r7, #11]
 8009982:	4613      	mov	r3, r2
 8009984:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	789b      	ldrb	r3, [r3, #2]
 800998a:	2b01      	cmp	r3, #1
 800998c:	d11c      	bne.n	80099c8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800998e:	7afb      	ldrb	r3, [r7, #11]
 8009990:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009994:	b2da      	uxtb	r2, r3
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2206      	movs	r2, #6
 800999e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	893a      	ldrh	r2, [r7, #8]
 80099a4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80099a6:	893b      	ldrh	r3, [r7, #8]
 80099a8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80099ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80099b0:	d104      	bne.n	80099bc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f240 4209 	movw	r2, #1033	@ 0x409
 80099b8:	829a      	strh	r2, [r3, #20]
 80099ba:	e002      	b.n	80099c2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2200      	movs	r2, #0
 80099c0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	8b3a      	ldrh	r2, [r7, #24]
 80099c6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80099c8:	8b3b      	ldrh	r3, [r7, #24]
 80099ca:	461a      	mov	r2, r3
 80099cc:	6879      	ldr	r1, [r7, #4]
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f000 fba5 	bl	800a11e <USBH_CtlReq>
 80099d4:	4603      	mov	r3, r0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b082      	sub	sp, #8
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
 80099e6:	460b      	mov	r3, r1
 80099e8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	789b      	ldrb	r3, [r3, #2]
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d10f      	bne.n	8009a12 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2205      	movs	r2, #5
 80099fc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80099fe:	78fb      	ldrb	r3, [r7, #3]
 8009a00:	b29a      	uxth	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009a12:	2200      	movs	r2, #0
 8009a14:	2100      	movs	r1, #0
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 fb81 	bl	800a11e <USBH_CtlReq>
 8009a1c:	4603      	mov	r3, r0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3708      	adds	r7, #8
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b082      	sub	sp, #8
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
 8009a2e:	460b      	mov	r3, r1
 8009a30:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	789b      	ldrb	r3, [r3, #2]
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d10e      	bne.n	8009a58 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2209      	movs	r2, #9
 8009a44:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	887a      	ldrh	r2, [r7, #2]
 8009a4a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009a58:	2200      	movs	r2, #0
 8009a5a:	2100      	movs	r1, #0
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fb5e 	bl	800a11e <USBH_CtlReq>
 8009a62:	4603      	mov	r3, r0
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3708      	adds	r7, #8
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	460b      	mov	r3, r1
 8009a76:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	789b      	ldrb	r3, [r3, #2]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d10f      	bne.n	8009aa0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2203      	movs	r2, #3
 8009a8a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009a8c:	78fb      	ldrb	r3, [r7, #3]
 8009a8e:	b29a      	uxth	r2, r3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fb3a 	bl	800a11e <USBH_CtlReq>
 8009aaa:	4603      	mov	r3, r0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3708      	adds	r7, #8
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	460b      	mov	r3, r1
 8009abe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	789b      	ldrb	r3, [r3, #2]
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d10f      	bne.n	8009ae8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2202      	movs	r2, #2
 8009acc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009ada:	78fb      	ldrb	r3, [r7, #3]
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009ae8:	2200      	movs	r2, #0
 8009aea:	2100      	movs	r1, #0
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 fb16 	bl	800a11e <USBH_CtlReq>
 8009af2:	4603      	mov	r3, r0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b087      	sub	sp, #28
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	4613      	mov	r3, r2
 8009b08:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009b10:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009b12:	2300      	movs	r3, #0
 8009b14:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d101      	bne.n	8009b20 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	e094      	b.n	8009c4a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	781a      	ldrb	r2, [r3, #0]
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	785a      	ldrb	r2, [r3, #1]
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	3302      	adds	r3, #2
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	461a      	mov	r2, r3
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	3303      	adds	r3, #3
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	021b      	lsls	r3, r3, #8
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	4313      	orrs	r3, r2
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	791a      	ldrb	r2, [r3, #4]
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	795a      	ldrb	r2, [r3, #5]
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	799a      	ldrb	r2, [r3, #6]
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	79da      	ldrb	r2, [r3, #7]
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d004      	beq.n	8009b7e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d11b      	bne.n	8009bb6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	79db      	ldrb	r3, [r3, #7]
 8009b82:	2b20      	cmp	r3, #32
 8009b84:	dc0f      	bgt.n	8009ba6 <USBH_ParseDevDesc+0xaa>
 8009b86:	2b08      	cmp	r3, #8
 8009b88:	db0f      	blt.n	8009baa <USBH_ParseDevDesc+0xae>
 8009b8a:	3b08      	subs	r3, #8
 8009b8c:	4a32      	ldr	r2, [pc, #200]	@ (8009c58 <USBH_ParseDevDesc+0x15c>)
 8009b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b92:	f003 0301 	and.w	r3, r3, #1
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	bf14      	ite	ne
 8009b9a:	2301      	movne	r3, #1
 8009b9c:	2300      	moveq	r3, #0
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d106      	bne.n	8009bb2 <USBH_ParseDevDesc+0xb6>
 8009ba4:	e001      	b.n	8009baa <USBH_ParseDevDesc+0xae>
 8009ba6:	2b40      	cmp	r3, #64	@ 0x40
 8009ba8:	d003      	beq.n	8009bb2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	2208      	movs	r2, #8
 8009bae:	71da      	strb	r2, [r3, #7]
        break;
 8009bb0:	e000      	b.n	8009bb4 <USBH_ParseDevDesc+0xb8>
        break;
 8009bb2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009bb4:	e00e      	b.n	8009bd4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d107      	bne.n	8009bd0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	79db      	ldrb	r3, [r3, #7]
 8009bc4:	2b08      	cmp	r3, #8
 8009bc6:	d005      	beq.n	8009bd4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	2208      	movs	r2, #8
 8009bcc:	71da      	strb	r2, [r3, #7]
 8009bce:	e001      	b.n	8009bd4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009bd4:	88fb      	ldrh	r3, [r7, #6]
 8009bd6:	2b08      	cmp	r3, #8
 8009bd8:	d936      	bls.n	8009c48 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	3308      	adds	r3, #8
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	461a      	mov	r2, r3
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	3309      	adds	r3, #9
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	021b      	lsls	r3, r3, #8
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	4313      	orrs	r3, r2
 8009bee:	b29a      	uxth	r2, r3
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	330a      	adds	r3, #10
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	330b      	adds	r3, #11
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	021b      	lsls	r3, r3, #8
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	4313      	orrs	r3, r2
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	330c      	adds	r3, #12
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	461a      	mov	r2, r3
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	330d      	adds	r3, #13
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	021b      	lsls	r3, r3, #8
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	4313      	orrs	r3, r2
 8009c22:	b29a      	uxth	r2, r3
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	7b9a      	ldrb	r2, [r3, #14]
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	7bda      	ldrb	r2, [r3, #15]
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	7c1a      	ldrb	r2, [r3, #16]
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	7c5a      	ldrb	r2, [r3, #17]
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	371c      	adds	r7, #28
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
 8009c56:	bf00      	nop
 8009c58:	01000101 	.word	0x01000101

08009c5c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b08c      	sub	sp, #48	@ 0x30
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	4613      	mov	r3, r2
 8009c68:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009c70:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009c72:	2300      	movs	r3, #0
 8009c74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d101      	bne.n	8009c8e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009c8a:	2302      	movs	r3, #2
 8009c8c:	e0da      	b.n	8009e44 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	781a      	ldrb	r2, [r3, #0]
 8009c96:	6a3b      	ldr	r3, [r7, #32]
 8009c98:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	785a      	ldrb	r2, [r3, #1]
 8009c9e:	6a3b      	ldr	r3, [r7, #32]
 8009ca0:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	3302      	adds	r3, #2
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	461a      	mov	r2, r3
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	3303      	adds	r3, #3
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	021b      	lsls	r3, r3, #8
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cbc:	bf28      	it	cs
 8009cbe:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	6a3b      	ldr	r3, [r7, #32]
 8009cc6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	791a      	ldrb	r2, [r3, #4]
 8009ccc:	6a3b      	ldr	r3, [r7, #32]
 8009cce:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	795a      	ldrb	r2, [r3, #5]
 8009cd4:	6a3b      	ldr	r3, [r7, #32]
 8009cd6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	799a      	ldrb	r2, [r3, #6]
 8009cdc:	6a3b      	ldr	r3, [r7, #32]
 8009cde:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	79da      	ldrb	r2, [r3, #7]
 8009ce4:	6a3b      	ldr	r3, [r7, #32]
 8009ce6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	7a1a      	ldrb	r2, [r3, #8]
 8009cec:	6a3b      	ldr	r3, [r7, #32]
 8009cee:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009cf0:	6a3b      	ldr	r3, [r7, #32]
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	2b09      	cmp	r3, #9
 8009cf6:	d002      	beq.n	8009cfe <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	2209      	movs	r2, #9
 8009cfc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009cfe:	88fb      	ldrh	r3, [r7, #6]
 8009d00:	2b09      	cmp	r3, #9
 8009d02:	f240 809d 	bls.w	8009e40 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009d06:	2309      	movs	r3, #9
 8009d08:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009d0e:	e081      	b.n	8009e14 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009d10:	f107 0316 	add.w	r3, r7, #22
 8009d14:	4619      	mov	r1, r3
 8009d16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d18:	f000 f9e7 	bl	800a0ea <USBH_GetNextDesc>
 8009d1c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d20:	785b      	ldrb	r3, [r3, #1]
 8009d22:	2b04      	cmp	r3, #4
 8009d24:	d176      	bne.n	8009e14 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	2b09      	cmp	r3, #9
 8009d2c:	d002      	beq.n	8009d34 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d30:	2209      	movs	r2, #9
 8009d32:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009d34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d38:	221a      	movs	r2, #26
 8009d3a:	fb02 f303 	mul.w	r3, r2, r3
 8009d3e:	3308      	adds	r3, #8
 8009d40:	6a3a      	ldr	r2, [r7, #32]
 8009d42:	4413      	add	r3, r2
 8009d44:	3302      	adds	r3, #2
 8009d46:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009d48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d4a:	69f8      	ldr	r0, [r7, #28]
 8009d4c:	f000 f87e 	bl	8009e4c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009d50:	2300      	movs	r3, #0
 8009d52:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009d56:	2300      	movs	r3, #0
 8009d58:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009d5a:	e043      	b.n	8009de4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009d5c:	f107 0316 	add.w	r3, r7, #22
 8009d60:	4619      	mov	r1, r3
 8009d62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d64:	f000 f9c1 	bl	800a0ea <USBH_GetNextDesc>
 8009d68:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d6c:	785b      	ldrb	r3, [r3, #1]
 8009d6e:	2b05      	cmp	r3, #5
 8009d70:	d138      	bne.n	8009de4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	795b      	ldrb	r3, [r3, #5]
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d113      	bne.n	8009da2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d003      	beq.n	8009d8a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	799b      	ldrb	r3, [r3, #6]
 8009d86:	2b03      	cmp	r3, #3
 8009d88:	d10b      	bne.n	8009da2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	79db      	ldrb	r3, [r3, #7]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d10b      	bne.n	8009daa <USBH_ParseCfgDesc+0x14e>
 8009d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	2b09      	cmp	r3, #9
 8009d98:	d007      	beq.n	8009daa <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d9c:	2209      	movs	r2, #9
 8009d9e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009da0:	e003      	b.n	8009daa <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009da4:	2207      	movs	r2, #7
 8009da6:	701a      	strb	r2, [r3, #0]
 8009da8:	e000      	b.n	8009dac <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009daa:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009dac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009db0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009db4:	3201      	adds	r2, #1
 8009db6:	00d2      	lsls	r2, r2, #3
 8009db8:	211a      	movs	r1, #26
 8009dba:	fb01 f303 	mul.w	r3, r1, r3
 8009dbe:	4413      	add	r3, r2
 8009dc0:	3308      	adds	r3, #8
 8009dc2:	6a3a      	ldr	r2, [r7, #32]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	3304      	adds	r3, #4
 8009dc8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009dca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009dcc:	69b9      	ldr	r1, [r7, #24]
 8009dce:	68f8      	ldr	r0, [r7, #12]
 8009dd0:	f000 f870 	bl	8009eb4 <USBH_ParseEPDesc>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009dda:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009dde:	3301      	adds	r3, #1
 8009de0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009de4:	69fb      	ldr	r3, [r7, #28]
 8009de6:	791b      	ldrb	r3, [r3, #4]
 8009de8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d204      	bcs.n	8009dfa <USBH_ParseCfgDesc+0x19e>
 8009df0:	6a3b      	ldr	r3, [r7, #32]
 8009df2:	885a      	ldrh	r2, [r3, #2]
 8009df4:	8afb      	ldrh	r3, [r7, #22]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d8b0      	bhi.n	8009d5c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	791b      	ldrb	r3, [r3, #4]
 8009dfe:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d201      	bcs.n	8009e0a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009e06:	2303      	movs	r3, #3
 8009e08:	e01c      	b.n	8009e44 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e0e:	3301      	adds	r3, #1
 8009e10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009e14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d805      	bhi.n	8009e28 <USBH_ParseCfgDesc+0x1cc>
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
 8009e1e:	885a      	ldrh	r2, [r3, #2]
 8009e20:	8afb      	ldrh	r3, [r7, #22]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	f63f af74 	bhi.w	8009d10 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009e28:	6a3b      	ldr	r3, [r7, #32]
 8009e2a:	791b      	ldrb	r3, [r3, #4]
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	bf28      	it	cs
 8009e30:	2302      	movcs	r3, #2
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d201      	bcs.n	8009e40 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	e001      	b.n	8009e44 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009e40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3730      	adds	r7, #48	@ 0x30
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	781a      	ldrb	r2, [r3, #0]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	785a      	ldrb	r2, [r3, #1]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	789a      	ldrb	r2, [r3, #2]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	78da      	ldrb	r2, [r3, #3]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	3304      	adds	r3, #4
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	2b02      	cmp	r3, #2
 8009e7e:	bf28      	it	cs
 8009e80:	2302      	movcs	r3, #2
 8009e82:	b2da      	uxtb	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	795a      	ldrb	r2, [r3, #5]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	799a      	ldrb	r2, [r3, #6]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	79da      	ldrb	r2, [r3, #7]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	7a1a      	ldrb	r2, [r3, #8]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	721a      	strb	r2, [r3, #8]
}
 8009ea8:	bf00      	nop
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b087      	sub	sp, #28
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	781a      	ldrb	r2, [r3, #0]
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	785a      	ldrb	r2, [r3, #1]
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	789a      	ldrb	r2, [r3, #2]
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	78da      	ldrb	r2, [r3, #3]
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	3304      	adds	r3, #4
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	461a      	mov	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	3305      	adds	r3, #5
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	021b      	lsls	r3, r3, #8
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	b29a      	uxth	r2, r3
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	799a      	ldrb	r2, [r3, #6]
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	889b      	ldrh	r3, [r3, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d009      	beq.n	8009f22 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009f12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f16:	d804      	bhi.n	8009f22 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f20:	d901      	bls.n	8009f26 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009f22:	2303      	movs	r3, #3
 8009f24:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d136      	bne.n	8009f9e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	78db      	ldrb	r3, [r3, #3]
 8009f34:	f003 0303 	and.w	r3, r3, #3
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	d108      	bne.n	8009f4e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	889b      	ldrh	r3, [r3, #4]
 8009f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f44:	f240 8097 	bls.w	800a076 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f48:	2303      	movs	r3, #3
 8009f4a:	75fb      	strb	r3, [r7, #23]
 8009f4c:	e093      	b.n	800a076 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	78db      	ldrb	r3, [r3, #3]
 8009f52:	f003 0303 	and.w	r3, r3, #3
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d107      	bne.n	8009f6a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	889b      	ldrh	r3, [r3, #4]
 8009f5e:	2b40      	cmp	r3, #64	@ 0x40
 8009f60:	f240 8089 	bls.w	800a076 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f64:	2303      	movs	r3, #3
 8009f66:	75fb      	strb	r3, [r7, #23]
 8009f68:	e085      	b.n	800a076 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	78db      	ldrb	r3, [r3, #3]
 8009f6e:	f003 0303 	and.w	r3, r3, #3
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d005      	beq.n	8009f82 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	78db      	ldrb	r3, [r3, #3]
 8009f7a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009f7e:	2b03      	cmp	r3, #3
 8009f80:	d10a      	bne.n	8009f98 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	799b      	ldrb	r3, [r3, #6]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d003      	beq.n	8009f92 <USBH_ParseEPDesc+0xde>
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	799b      	ldrb	r3, [r3, #6]
 8009f8e:	2b10      	cmp	r3, #16
 8009f90:	d970      	bls.n	800a074 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009f92:	2303      	movs	r3, #3
 8009f94:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009f96:	e06d      	b.n	800a074 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	75fb      	strb	r3, [r7, #23]
 8009f9c:	e06b      	b.n	800a076 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d13c      	bne.n	800a022 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	78db      	ldrb	r3, [r3, #3]
 8009fac:	f003 0303 	and.w	r3, r3, #3
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d005      	beq.n	8009fc0 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	78db      	ldrb	r3, [r3, #3]
 8009fb8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d106      	bne.n	8009fce <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	889b      	ldrh	r3, [r3, #4]
 8009fc4:	2b40      	cmp	r3, #64	@ 0x40
 8009fc6:	d956      	bls.n	800a076 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009fc8:	2303      	movs	r3, #3
 8009fca:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009fcc:	e053      	b.n	800a076 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	78db      	ldrb	r3, [r3, #3]
 8009fd2:	f003 0303 	and.w	r3, r3, #3
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d10e      	bne.n	8009ff8 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	799b      	ldrb	r3, [r3, #6]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d007      	beq.n	8009ff2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009fe6:	2b10      	cmp	r3, #16
 8009fe8:	d803      	bhi.n	8009ff2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009fee:	2b40      	cmp	r3, #64	@ 0x40
 8009ff0:	d941      	bls.n	800a076 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	75fb      	strb	r3, [r7, #23]
 8009ff6:	e03e      	b.n	800a076 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	78db      	ldrb	r3, [r3, #3]
 8009ffc:	f003 0303 	and.w	r3, r3, #3
 800a000:	2b03      	cmp	r3, #3
 800a002:	d10b      	bne.n	800a01c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	799b      	ldrb	r3, [r3, #6]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d004      	beq.n	800a016 <USBH_ParseEPDesc+0x162>
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	889b      	ldrh	r3, [r3, #4]
 800a010:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a014:	d32f      	bcc.n	800a076 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a016:	2303      	movs	r3, #3
 800a018:	75fb      	strb	r3, [r7, #23]
 800a01a:	e02c      	b.n	800a076 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a01c:	2303      	movs	r3, #3
 800a01e:	75fb      	strb	r3, [r7, #23]
 800a020:	e029      	b.n	800a076 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a028:	2b02      	cmp	r3, #2
 800a02a:	d120      	bne.n	800a06e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	78db      	ldrb	r3, [r3, #3]
 800a030:	f003 0303 	and.w	r3, r3, #3
 800a034:	2b00      	cmp	r3, #0
 800a036:	d106      	bne.n	800a046 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	889b      	ldrh	r3, [r3, #4]
 800a03c:	2b08      	cmp	r3, #8
 800a03e:	d01a      	beq.n	800a076 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a040:	2303      	movs	r3, #3
 800a042:	75fb      	strb	r3, [r7, #23]
 800a044:	e017      	b.n	800a076 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	78db      	ldrb	r3, [r3, #3]
 800a04a:	f003 0303 	and.w	r3, r3, #3
 800a04e:	2b03      	cmp	r3, #3
 800a050:	d10a      	bne.n	800a068 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	799b      	ldrb	r3, [r3, #6]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d003      	beq.n	800a062 <USBH_ParseEPDesc+0x1ae>
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	889b      	ldrh	r3, [r3, #4]
 800a05e:	2b08      	cmp	r3, #8
 800a060:	d909      	bls.n	800a076 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a062:	2303      	movs	r3, #3
 800a064:	75fb      	strb	r3, [r7, #23]
 800a066:	e006      	b.n	800a076 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a068:	2303      	movs	r3, #3
 800a06a:	75fb      	strb	r3, [r7, #23]
 800a06c:	e003      	b.n	800a076 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a06e:	2303      	movs	r3, #3
 800a070:	75fb      	strb	r3, [r7, #23]
 800a072:	e000      	b.n	800a076 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a074:	bf00      	nop
  }

  return status;
 800a076:	7dfb      	ldrb	r3, [r7, #23]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	371c      	adds	r7, #28
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a084:	b480      	push	{r7}
 800a086:	b087      	sub	sp, #28
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	4613      	mov	r3, r2
 800a090:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	3301      	adds	r3, #1
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	2b03      	cmp	r3, #3
 800a09a:	d120      	bne.n	800a0de <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	1e9a      	subs	r2, r3, #2
 800a0a2:	88fb      	ldrh	r3, [r7, #6]
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	bf28      	it	cs
 800a0a8:	4613      	movcs	r3, r2
 800a0aa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	3302      	adds	r3, #2
 800a0b0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	82fb      	strh	r3, [r7, #22]
 800a0b6:	e00b      	b.n	800a0d0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a0b8:	8afb      	ldrh	r3, [r7, #22]
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	4413      	add	r3, r2
 800a0be:	781a      	ldrb	r2, [r3, #0]
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a0ca:	8afb      	ldrh	r3, [r7, #22]
 800a0cc:	3302      	adds	r3, #2
 800a0ce:	82fb      	strh	r3, [r7, #22]
 800a0d0:	8afa      	ldrh	r2, [r7, #22]
 800a0d2:	8abb      	ldrh	r3, [r7, #20]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d3ef      	bcc.n	800a0b8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	701a      	strb	r2, [r3, #0]
  }
}
 800a0de:	bf00      	nop
 800a0e0:	371c      	adds	r7, #28
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b085      	sub	sp, #20
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
 800a0f2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	881b      	ldrh	r3, [r3, #0]
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	7812      	ldrb	r2, [r2, #0]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	b29a      	uxth	r2, r3
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4413      	add	r3, r2
 800a10e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a110:	68fb      	ldr	r3, [r7, #12]
}
 800a112:	4618      	mov	r0, r3
 800a114:	3714      	adds	r7, #20
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr

0800a11e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b086      	sub	sp, #24
 800a122:	af00      	add	r7, sp, #0
 800a124:	60f8      	str	r0, [r7, #12]
 800a126:	60b9      	str	r1, [r7, #8]
 800a128:	4613      	mov	r3, r2
 800a12a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a12c:	2301      	movs	r3, #1
 800a12e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	789b      	ldrb	r3, [r3, #2]
 800a134:	2b01      	cmp	r3, #1
 800a136:	d002      	beq.n	800a13e <USBH_CtlReq+0x20>
 800a138:	2b02      	cmp	r3, #2
 800a13a:	d01d      	beq.n	800a178 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800a13c:	e043      	b.n	800a1c6 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	88fa      	ldrh	r2, [r7, #6]
 800a148:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2201      	movs	r2, #1
 800a14e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2202      	movs	r2, #2
 800a154:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a156:	2301      	movs	r3, #1
 800a158:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2203      	movs	r2, #3
 800a15e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a16e:	2200      	movs	r2, #0
 800a170:	4619      	mov	r1, r3
 800a172:	f000 fc61 	bl	800aa38 <osMessagePut>
      break;
 800a176:	e026      	b.n	800a1c6 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f000 f829 	bl	800a1d0 <USBH_HandleControl>
 800a17e:	4603      	mov	r3, r0
 800a180:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a182:	7dfb      	ldrb	r3, [r7, #23]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d002      	beq.n	800a18e <USBH_CtlReq+0x70>
 800a188:	7dfb      	ldrb	r3, [r7, #23]
 800a18a:	2b03      	cmp	r3, #3
 800a18c:	d106      	bne.n	800a19c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2201      	movs	r2, #1
 800a192:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2200      	movs	r2, #0
 800a198:	761a      	strb	r2, [r3, #24]
 800a19a:	e005      	b.n	800a1a8 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800a19c:	7dfb      	ldrb	r3, [r7, #23]
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	d102      	bne.n	800a1a8 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2203      	movs	r2, #3
 800a1ac:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a1bc:	2200      	movs	r2, #0
 800a1be:	4619      	mov	r1, r3
 800a1c0:	f000 fc3a 	bl	800aa38 <osMessagePut>
      break;
 800a1c4:	bf00      	nop
  }
  return status;
 800a1c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3718      	adds	r7, #24
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af02      	add	r7, sp, #8
 800a1d6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	7e1b      	ldrb	r3, [r3, #24]
 800a1e4:	3b01      	subs	r3, #1
 800a1e6:	2b0a      	cmp	r3, #10
 800a1e8:	f200 8229 	bhi.w	800a63e <USBH_HandleControl+0x46e>
 800a1ec:	a201      	add	r2, pc, #4	@ (adr r2, 800a1f4 <USBH_HandleControl+0x24>)
 800a1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f2:	bf00      	nop
 800a1f4:	0800a221 	.word	0x0800a221
 800a1f8:	0800a23b 	.word	0x0800a23b
 800a1fc:	0800a2dd 	.word	0x0800a2dd
 800a200:	0800a303 	.word	0x0800a303
 800a204:	0800a38f 	.word	0x0800a38f
 800a208:	0800a3b9 	.word	0x0800a3b9
 800a20c:	0800a47b 	.word	0x0800a47b
 800a210:	0800a49d 	.word	0x0800a49d
 800a214:	0800a52f 	.word	0x0800a52f
 800a218:	0800a555 	.word	0x0800a555
 800a21c:	0800a5e7 	.word	0x0800a5e7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f103 0110 	add.w	r1, r3, #16
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	795b      	ldrb	r3, [r3, #5]
 800a22a:	461a      	mov	r2, r3
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 fa17 	bl	800a660 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2202      	movs	r2, #2
 800a236:	761a      	strb	r2, [r3, #24]
      break;
 800a238:	e20c      	b.n	800a654 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	795b      	ldrb	r3, [r3, #5]
 800a23e:	4619      	mov	r1, r3
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f003 f871 	bl	800d328 <USBH_LL_GetURBState>
 800a246:	4603      	mov	r3, r0
 800a248:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a24a:	7bbb      	ldrb	r3, [r7, #14]
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d12c      	bne.n	800a2aa <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	7c1b      	ldrb	r3, [r3, #16]
 800a254:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a258:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	8adb      	ldrh	r3, [r3, #22]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00a      	beq.n	800a278 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a262:	7b7b      	ldrb	r3, [r7, #13]
 800a264:	2b80      	cmp	r3, #128	@ 0x80
 800a266:	d103      	bne.n	800a270 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2203      	movs	r2, #3
 800a26c:	761a      	strb	r2, [r3, #24]
 800a26e:	e00d      	b.n	800a28c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2205      	movs	r2, #5
 800a274:	761a      	strb	r2, [r3, #24]
 800a276:	e009      	b.n	800a28c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800a278:	7b7b      	ldrb	r3, [r7, #13]
 800a27a:	2b80      	cmp	r3, #128	@ 0x80
 800a27c:	d103      	bne.n	800a286 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2209      	movs	r2, #9
 800a282:	761a      	strb	r2, [r3, #24]
 800a284:	e002      	b.n	800a28c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2207      	movs	r2, #7
 800a28a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2203      	movs	r2, #3
 800a290:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	f000 fbc8 	bl	800aa38 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a2a8:	e1cb      	b.n	800a642 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a2aa:	7bbb      	ldrb	r3, [r7, #14]
 800a2ac:	2b04      	cmp	r3, #4
 800a2ae:	d003      	beq.n	800a2b8 <USBH_HandleControl+0xe8>
 800a2b0:	7bbb      	ldrb	r3, [r7, #14]
 800a2b2:	2b02      	cmp	r3, #2
 800a2b4:	f040 81c5 	bne.w	800a642 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	220b      	movs	r2, #11
 800a2bc:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2203      	movs	r2, #3
 800a2c2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	f000 fbaf 	bl	800aa38 <osMessagePut>
      break;
 800a2da:	e1b2      	b.n	800a642 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a2e2:	b29a      	uxth	r2, r3
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6899      	ldr	r1, [r3, #8]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	899a      	ldrh	r2, [r3, #12]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	791b      	ldrb	r3, [r3, #4]
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 f9f2 	bl	800a6de <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2204      	movs	r2, #4
 800a2fe:	761a      	strb	r2, [r3, #24]
      break;
 800a300:	e1a8      	b.n	800a654 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	791b      	ldrb	r3, [r3, #4]
 800a306:	4619      	mov	r1, r3
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f003 f80d 	bl	800d328 <USBH_LL_GetURBState>
 800a30e:	4603      	mov	r3, r0
 800a310:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a312:	7bbb      	ldrb	r3, [r7, #14]
 800a314:	2b01      	cmp	r3, #1
 800a316:	d110      	bne.n	800a33a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2209      	movs	r2, #9
 800a31c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2203      	movs	r2, #3
 800a322:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a332:	2200      	movs	r2, #0
 800a334:	4619      	mov	r1, r3
 800a336:	f000 fb7f 	bl	800aa38 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a33a:	7bbb      	ldrb	r3, [r7, #14]
 800a33c:	2b05      	cmp	r3, #5
 800a33e:	d110      	bne.n	800a362 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a340:	2303      	movs	r3, #3
 800a342:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2203      	movs	r2, #3
 800a348:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a358:	2200      	movs	r2, #0
 800a35a:	4619      	mov	r1, r3
 800a35c:	f000 fb6c 	bl	800aa38 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a360:	e171      	b.n	800a646 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800a362:	7bbb      	ldrb	r3, [r7, #14]
 800a364:	2b04      	cmp	r3, #4
 800a366:	f040 816e 	bne.w	800a646 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	220b      	movs	r2, #11
 800a36e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2203      	movs	r2, #3
 800a374:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a384:	2200      	movs	r2, #0
 800a386:	4619      	mov	r1, r3
 800a388:	f000 fb56 	bl	800aa38 <osMessagePut>
      break;
 800a38c:	e15b      	b.n	800a646 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6899      	ldr	r1, [r3, #8]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	899a      	ldrh	r2, [r3, #12]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	795b      	ldrb	r3, [r3, #5]
 800a39a:	2001      	movs	r0, #1
 800a39c:	9000      	str	r0, [sp, #0]
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 f978 	bl	800a694 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2206      	movs	r2, #6
 800a3b4:	761a      	strb	r2, [r3, #24]
      break;
 800a3b6:	e14d      	b.n	800a654 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	795b      	ldrb	r3, [r3, #5]
 800a3bc:	4619      	mov	r1, r3
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f002 ffb2 	bl	800d328 <USBH_LL_GetURBState>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a3c8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d111      	bne.n	800a3f2 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2207      	movs	r2, #7
 800a3d2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2203      	movs	r2, #3
 800a3d8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	f000 fb24 	bl	800aa38 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a3f0:	e12b      	b.n	800a64a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800a3f2:	7bbb      	ldrb	r3, [r7, #14]
 800a3f4:	2b05      	cmp	r3, #5
 800a3f6:	d113      	bne.n	800a420 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	220c      	movs	r2, #12
 800a3fc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a3fe:	2303      	movs	r3, #3
 800a400:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2203      	movs	r2, #3
 800a406:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a416:	2200      	movs	r2, #0
 800a418:	4619      	mov	r1, r3
 800a41a:	f000 fb0d 	bl	800aa38 <osMessagePut>
      break;
 800a41e:	e114      	b.n	800a64a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a420:	7bbb      	ldrb	r3, [r7, #14]
 800a422:	2b02      	cmp	r3, #2
 800a424:	d111      	bne.n	800a44a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2205      	movs	r2, #5
 800a42a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2203      	movs	r2, #3
 800a430:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a440:	2200      	movs	r2, #0
 800a442:	4619      	mov	r1, r3
 800a444:	f000 faf8 	bl	800aa38 <osMessagePut>
      break;
 800a448:	e0ff      	b.n	800a64a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800a44a:	7bbb      	ldrb	r3, [r7, #14]
 800a44c:	2b04      	cmp	r3, #4
 800a44e:	f040 80fc 	bne.w	800a64a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	220b      	movs	r2, #11
 800a456:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a458:	2302      	movs	r3, #2
 800a45a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2203      	movs	r2, #3
 800a460:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a470:	2200      	movs	r2, #0
 800a472:	4619      	mov	r1, r3
 800a474:	f000 fae0 	bl	800aa38 <osMessagePut>
      break;
 800a478:	e0e7      	b.n	800a64a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	791b      	ldrb	r3, [r3, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	2100      	movs	r1, #0
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f92b 	bl	800a6de <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a48e:	b29a      	uxth	r2, r3
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2208      	movs	r2, #8
 800a498:	761a      	strb	r2, [r3, #24]

      break;
 800a49a:	e0db      	b.n	800a654 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	791b      	ldrb	r3, [r3, #4]
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f002 ff40 	bl	800d328 <USBH_LL_GetURBState>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a4ac:	7bbb      	ldrb	r3, [r7, #14]
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d113      	bne.n	800a4da <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	220d      	movs	r2, #13
 800a4b6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2203      	movs	r2, #3
 800a4c0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	f000 fab0 	bl	800aa38 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a4d8:	e0b9      	b.n	800a64e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800a4da:	7bbb      	ldrb	r3, [r7, #14]
 800a4dc:	2b04      	cmp	r3, #4
 800a4de:	d111      	bne.n	800a504 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	220b      	movs	r2, #11
 800a4e4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2203      	movs	r2, #3
 800a4ea:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	f000 fa9b 	bl	800aa38 <osMessagePut>
      break;
 800a502:	e0a4      	b.n	800a64e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800a504:	7bbb      	ldrb	r3, [r7, #14]
 800a506:	2b05      	cmp	r3, #5
 800a508:	f040 80a1 	bne.w	800a64e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800a50c:	2303      	movs	r3, #3
 800a50e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2203      	movs	r2, #3
 800a514:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a524:	2200      	movs	r2, #0
 800a526:	4619      	mov	r1, r3
 800a528:	f000 fa86 	bl	800aa38 <osMessagePut>
      break;
 800a52c:	e08f      	b.n	800a64e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	795b      	ldrb	r3, [r3, #5]
 800a532:	2201      	movs	r2, #1
 800a534:	9200      	str	r2, [sp, #0]
 800a536:	2200      	movs	r2, #0
 800a538:	2100      	movs	r1, #0
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f8aa 	bl	800a694 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a546:	b29a      	uxth	r2, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	220a      	movs	r2, #10
 800a550:	761a      	strb	r2, [r3, #24]
      break;
 800a552:	e07f      	b.n	800a654 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	795b      	ldrb	r3, [r3, #5]
 800a558:	4619      	mov	r1, r3
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f002 fee4 	bl	800d328 <USBH_LL_GetURBState>
 800a560:	4603      	mov	r3, r0
 800a562:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a564:	7bbb      	ldrb	r3, [r7, #14]
 800a566:	2b01      	cmp	r3, #1
 800a568:	d113      	bne.n	800a592 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800a56a:	2300      	movs	r3, #0
 800a56c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	220d      	movs	r2, #13
 800a572:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2203      	movs	r2, #3
 800a578:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a588:	2200      	movs	r2, #0
 800a58a:	4619      	mov	r1, r3
 800a58c:	f000 fa54 	bl	800aa38 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a590:	e05f      	b.n	800a652 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a592:	7bbb      	ldrb	r3, [r7, #14]
 800a594:	2b02      	cmp	r3, #2
 800a596:	d111      	bne.n	800a5bc <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2209      	movs	r2, #9
 800a59c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2203      	movs	r2, #3
 800a5a2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	f000 fa3f 	bl	800aa38 <osMessagePut>
      break;
 800a5ba:	e04a      	b.n	800a652 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800a5bc:	7bbb      	ldrb	r3, [r7, #14]
 800a5be:	2b04      	cmp	r3, #4
 800a5c0:	d147      	bne.n	800a652 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	220b      	movs	r2, #11
 800a5c6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2203      	movs	r2, #3
 800a5cc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a5dc:	2200      	movs	r2, #0
 800a5de:	4619      	mov	r1, r3
 800a5e0:	f000 fa2a 	bl	800aa38 <osMessagePut>
      break;
 800a5e4:	e035      	b.n	800a652 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	7e5b      	ldrb	r3, [r3, #25]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	b2da      	uxtb	r2, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	765a      	strb	r2, [r3, #25]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	7e5b      	ldrb	r3, [r3, #25]
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d806      	bhi.n	800a608 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a606:	e025      	b.n	800a654 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a60e:	2106      	movs	r1, #6
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2200      	movs	r2, #0
 800a618:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	795b      	ldrb	r3, [r3, #5]
 800a61e:	4619      	mov	r1, r3
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 f90d 	bl	800a840 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	791b      	ldrb	r3, [r3, #4]
 800a62a:	4619      	mov	r1, r3
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 f907 	bl	800a840 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a638:	2302      	movs	r3, #2
 800a63a:	73fb      	strb	r3, [r7, #15]
      break;
 800a63c:	e00a      	b.n	800a654 <USBH_HandleControl+0x484>

    default:
      break;
 800a63e:	bf00      	nop
 800a640:	e008      	b.n	800a654 <USBH_HandleControl+0x484>
      break;
 800a642:	bf00      	nop
 800a644:	e006      	b.n	800a654 <USBH_HandleControl+0x484>
      break;
 800a646:	bf00      	nop
 800a648:	e004      	b.n	800a654 <USBH_HandleControl+0x484>
      break;
 800a64a:	bf00      	nop
 800a64c:	e002      	b.n	800a654 <USBH_HandleControl+0x484>
      break;
 800a64e:	bf00      	nop
 800a650:	e000      	b.n	800a654 <USBH_HandleControl+0x484>
      break;
 800a652:	bf00      	nop
  }

  return status;
 800a654:	7bfb      	ldrb	r3, [r7, #15]
}
 800a656:	4618      	mov	r0, r3
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop

0800a660 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b088      	sub	sp, #32
 800a664:	af04      	add	r7, sp, #16
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	4613      	mov	r3, r2
 800a66c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a66e:	79f9      	ldrb	r1, [r7, #7]
 800a670:	2300      	movs	r3, #0
 800a672:	9303      	str	r3, [sp, #12]
 800a674:	2308      	movs	r3, #8
 800a676:	9302      	str	r3, [sp, #8]
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	9301      	str	r3, [sp, #4]
 800a67c:	2300      	movs	r3, #0
 800a67e:	9300      	str	r3, [sp, #0]
 800a680:	2300      	movs	r3, #0
 800a682:	2200      	movs	r2, #0
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f002 fe1e 	bl	800d2c6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b088      	sub	sp, #32
 800a698:	af04      	add	r7, sp, #16
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	60b9      	str	r1, [r7, #8]
 800a69e:	4611      	mov	r1, r2
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	80fb      	strh	r3, [r7, #6]
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d001      	beq.n	800a6b8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a6b8:	7979      	ldrb	r1, [r7, #5]
 800a6ba:	7e3b      	ldrb	r3, [r7, #24]
 800a6bc:	9303      	str	r3, [sp, #12]
 800a6be:	88fb      	ldrh	r3, [r7, #6]
 800a6c0:	9302      	str	r3, [sp, #8]
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	9301      	str	r3, [sp, #4]
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	9300      	str	r3, [sp, #0]
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f002 fdf9 	bl	800d2c6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b088      	sub	sp, #32
 800a6e2:	af04      	add	r7, sp, #16
 800a6e4:	60f8      	str	r0, [r7, #12]
 800a6e6:	60b9      	str	r1, [r7, #8]
 800a6e8:	4611      	mov	r1, r2
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	80fb      	strh	r3, [r7, #6]
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a6f4:	7979      	ldrb	r1, [r7, #5]
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	9303      	str	r3, [sp, #12]
 800a6fa:	88fb      	ldrh	r3, [r7, #6]
 800a6fc:	9302      	str	r3, [sp, #8]
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	9301      	str	r3, [sp, #4]
 800a702:	2301      	movs	r3, #1
 800a704:	9300      	str	r3, [sp, #0]
 800a706:	2300      	movs	r3, #0
 800a708:	2201      	movs	r2, #1
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f002 fddb 	bl	800d2c6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a710:	2300      	movs	r3, #0

}
 800a712:	4618      	mov	r0, r3
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b088      	sub	sp, #32
 800a71e:	af04      	add	r7, sp, #16
 800a720:	60f8      	str	r0, [r7, #12]
 800a722:	60b9      	str	r1, [r7, #8]
 800a724:	4611      	mov	r1, r2
 800a726:	461a      	mov	r2, r3
 800a728:	460b      	mov	r3, r1
 800a72a:	80fb      	strh	r3, [r7, #6]
 800a72c:	4613      	mov	r3, r2
 800a72e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a736:	2b00      	cmp	r3, #0
 800a738:	d001      	beq.n	800a73e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a73a:	2300      	movs	r3, #0
 800a73c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a73e:	7979      	ldrb	r1, [r7, #5]
 800a740:	7e3b      	ldrb	r3, [r7, #24]
 800a742:	9303      	str	r3, [sp, #12]
 800a744:	88fb      	ldrh	r3, [r7, #6]
 800a746:	9302      	str	r3, [sp, #8]
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	9301      	str	r3, [sp, #4]
 800a74c:	2301      	movs	r3, #1
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	2302      	movs	r3, #2
 800a752:	2200      	movs	r2, #0
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f002 fdb6 	bl	800d2c6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a75a:	2300      	movs	r3, #0
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3710      	adds	r7, #16
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b088      	sub	sp, #32
 800a768:	af04      	add	r7, sp, #16
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	4611      	mov	r1, r2
 800a770:	461a      	mov	r2, r3
 800a772:	460b      	mov	r3, r1
 800a774:	80fb      	strh	r3, [r7, #6]
 800a776:	4613      	mov	r3, r2
 800a778:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a77a:	7979      	ldrb	r1, [r7, #5]
 800a77c:	2300      	movs	r3, #0
 800a77e:	9303      	str	r3, [sp, #12]
 800a780:	88fb      	ldrh	r3, [r7, #6]
 800a782:	9302      	str	r3, [sp, #8]
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	9301      	str	r3, [sp, #4]
 800a788:	2301      	movs	r3, #1
 800a78a:	9300      	str	r3, [sp, #0]
 800a78c:	2302      	movs	r3, #2
 800a78e:	2201      	movs	r2, #1
 800a790:	68f8      	ldr	r0, [r7, #12]
 800a792:	f002 fd98 	bl	800d2c6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b086      	sub	sp, #24
 800a7a4:	af04      	add	r7, sp, #16
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	4608      	mov	r0, r1
 800a7aa:	4611      	mov	r1, r2
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	70fb      	strb	r3, [r7, #3]
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	70bb      	strb	r3, [r7, #2]
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a7ba:	7878      	ldrb	r0, [r7, #1]
 800a7bc:	78ba      	ldrb	r2, [r7, #2]
 800a7be:	78f9      	ldrb	r1, [r7, #3]
 800a7c0:	8b3b      	ldrh	r3, [r7, #24]
 800a7c2:	9302      	str	r3, [sp, #8]
 800a7c4:	7d3b      	ldrb	r3, [r7, #20]
 800a7c6:	9301      	str	r3, [sp, #4]
 800a7c8:	7c3b      	ldrb	r3, [r7, #16]
 800a7ca:	9300      	str	r3, [sp, #0]
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f002 fd2b 	bl	800d22a <USBH_LL_OpenPipe>

  return USBH_OK;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3708      	adds	r7, #8
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b082      	sub	sp, #8
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a7ea:	78fb      	ldrb	r3, [r7, #3]
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f002 fd4a 	bl	800d288 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b084      	sub	sp, #16
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
 800a806:	460b      	mov	r3, r1
 800a808:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 f836 	bl	800a87c <USBH_GetFreePipe>
 800a810:	4603      	mov	r3, r0
 800a812:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a814:	89fb      	ldrh	r3, [r7, #14]
 800a816:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d00a      	beq.n	800a834 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a81e:	78fa      	ldrb	r2, [r7, #3]
 800a820:	89fb      	ldrh	r3, [r7, #14]
 800a822:	f003 030f 	and.w	r3, r3, #15
 800a826:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a82a:	6879      	ldr	r1, [r7, #4]
 800a82c:	33e0      	adds	r3, #224	@ 0xe0
 800a82e:	009b      	lsls	r3, r3, #2
 800a830:	440b      	add	r3, r1
 800a832:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a834:	89fb      	ldrh	r3, [r7, #14]
 800a836:	b2db      	uxtb	r3, r3
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3710      	adds	r7, #16
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	460b      	mov	r3, r1
 800a84a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a84c:	78fb      	ldrb	r3, [r7, #3]
 800a84e:	2b0f      	cmp	r3, #15
 800a850:	d80d      	bhi.n	800a86e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a852:	78fb      	ldrb	r3, [r7, #3]
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	33e0      	adds	r3, #224	@ 0xe0
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	4413      	add	r3, r2
 800a85c:	685a      	ldr	r2, [r3, #4]
 800a85e:	78fb      	ldrb	r3, [r7, #3]
 800a860:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a864:	6879      	ldr	r1, [r7, #4]
 800a866:	33e0      	adds	r3, #224	@ 0xe0
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	440b      	add	r3, r1
 800a86c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b085      	sub	sp, #20
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a884:	2300      	movs	r3, #0
 800a886:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a888:	2300      	movs	r3, #0
 800a88a:	73fb      	strb	r3, [r7, #15]
 800a88c:	e00f      	b.n	800a8ae <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a88e:	7bfb      	ldrb	r3, [r7, #15]
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	33e0      	adds	r3, #224	@ 0xe0
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	4413      	add	r3, r2
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d102      	bne.n	800a8a8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a8a2:	7bfb      	ldrb	r3, [r7, #15]
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	e007      	b.n	800a8b8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a8a8:	7bfb      	ldrb	r3, [r7, #15]
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	73fb      	strb	r3, [r7, #15]
 800a8ae:	7bfb      	ldrb	r3, [r7, #15]
 800a8b0:	2b0f      	cmp	r3, #15
 800a8b2:	d9ec      	bls.n	800a88e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a8b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3714      	adds	r7, #20
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b085      	sub	sp, #20
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a8d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a8d6:	2b84      	cmp	r3, #132	@ 0x84
 800a8d8:	d005      	beq.n	800a8e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a8da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	3303      	adds	r3, #3
 800a8e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3714      	adds	r7, #20
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8fa:	f3ef 8305 	mrs	r3, IPSR
 800a8fe:	607b      	str	r3, [r7, #4]
  return(result);
 800a900:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a902:	2b00      	cmp	r3, #0
 800a904:	bf14      	ite	ne
 800a906:	2301      	movne	r3, #1
 800a908:	2300      	moveq	r3, #0
 800a90a:	b2db      	uxtb	r3, r3
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a91c:	f001 f922 	bl	800bb64 <vTaskStartScheduler>
  
  return osOK;
 800a920:	2300      	movs	r3, #0
}
 800a922:	4618      	mov	r0, r3
 800a924:	bd80      	pop	{r7, pc}

0800a926 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a926:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a928:	b089      	sub	sp, #36	@ 0x24
 800a92a:	af04      	add	r7, sp, #16
 800a92c:	6078      	str	r0, [r7, #4]
 800a92e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	695b      	ldr	r3, [r3, #20]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d020      	beq.n	800a97a <osThreadCreate+0x54>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	699b      	ldr	r3, [r3, #24]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d01c      	beq.n	800a97a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	685c      	ldr	r4, [r3, #4]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	691e      	ldr	r6, [r3, #16]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a952:	4618      	mov	r0, r3
 800a954:	f7ff ffb6 	bl	800a8c4 <makeFreeRtosPriority>
 800a958:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	695b      	ldr	r3, [r3, #20]
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a962:	9202      	str	r2, [sp, #8]
 800a964:	9301      	str	r3, [sp, #4]
 800a966:	9100      	str	r1, [sp, #0]
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	4632      	mov	r2, r6
 800a96c:	4629      	mov	r1, r5
 800a96e:	4620      	mov	r0, r4
 800a970:	f000 ff20 	bl	800b7b4 <xTaskCreateStatic>
 800a974:	4603      	mov	r3, r0
 800a976:	60fb      	str	r3, [r7, #12]
 800a978:	e01c      	b.n	800a9b4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	685c      	ldr	r4, [r3, #4]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a986:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a98e:	4618      	mov	r0, r3
 800a990:	f7ff ff98 	bl	800a8c4 <makeFreeRtosPriority>
 800a994:	4602      	mov	r2, r0
 800a996:	f107 030c 	add.w	r3, r7, #12
 800a99a:	9301      	str	r3, [sp, #4]
 800a99c:	9200      	str	r2, [sp, #0]
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	4632      	mov	r2, r6
 800a9a2:	4629      	mov	r1, r5
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	f000 ff65 	bl	800b874 <xTaskCreate>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d001      	beq.n	800a9b4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	e000      	b.n	800a9b6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3714      	adds	r7, #20
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a9be <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b084      	sub	sp, #16
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d001      	beq.n	800a9d4 <osDelay+0x16>
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	e000      	b.n	800a9d6 <osDelay+0x18>
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f001 f88e 	bl	800baf8 <vTaskDelay>
  
  return osOK;
 800a9dc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3710      	adds	r7, #16
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a9e6:	b590      	push	{r4, r7, lr}
 800a9e8:	b085      	sub	sp, #20
 800a9ea:	af02      	add	r7, sp, #8
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d011      	beq.n	800aa1c <osMessageCreate+0x36>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d00d      	beq.n	800aa1c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6818      	ldr	r0, [r3, #0]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6859      	ldr	r1, [r3, #4]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	689a      	ldr	r2, [r3, #8]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	2400      	movs	r4, #0
 800aa12:	9400      	str	r4, [sp, #0]
 800aa14:	f000 f9e2 	bl	800addc <xQueueGenericCreateStatic>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	e008      	b.n	800aa2e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6818      	ldr	r0, [r3, #0]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	4619      	mov	r1, r3
 800aa28:	f000 fa55 	bl	800aed6 <xQueueGenericCreate>
 800aa2c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	370c      	adds	r7, #12
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd90      	pop	{r4, r7, pc}
	...

0800aa38 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b086      	sub	sp, #24
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800aa44:	2300      	movs	r3, #0
 800aa46:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d101      	bne.n	800aa56 <osMessagePut+0x1e>
    ticks = 1;
 800aa52:	2301      	movs	r3, #1
 800aa54:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800aa56:	f7ff ff4d 	bl	800a8f4 <inHandlerMode>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d018      	beq.n	800aa92 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800aa60:	f107 0210 	add.w	r2, r7, #16
 800aa64:	f107 0108 	add.w	r1, r7, #8
 800aa68:	2300      	movs	r3, #0
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	f000 fb90 	bl	800b190 <xQueueGenericSendFromISR>
 800aa70:	4603      	mov	r3, r0
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d001      	beq.n	800aa7a <osMessagePut+0x42>
      return osErrorOS;
 800aa76:	23ff      	movs	r3, #255	@ 0xff
 800aa78:	e018      	b.n	800aaac <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d014      	beq.n	800aaaa <osMessagePut+0x72>
 800aa80:	4b0c      	ldr	r3, [pc, #48]	@ (800aab4 <osMessagePut+0x7c>)
 800aa82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa86:	601a      	str	r2, [r3, #0]
 800aa88:	f3bf 8f4f 	dsb	sy
 800aa8c:	f3bf 8f6f 	isb	sy
 800aa90:	e00b      	b.n	800aaaa <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800aa92:	f107 0108 	add.w	r1, r7, #8
 800aa96:	2300      	movs	r3, #0
 800aa98:	697a      	ldr	r2, [r7, #20]
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f000 fa76 	bl	800af8c <xQueueGenericSend>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d001      	beq.n	800aaaa <osMessagePut+0x72>
      return osErrorOS;
 800aaa6:	23ff      	movs	r3, #255	@ 0xff
 800aaa8:	e000      	b.n	800aaac <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3718      	adds	r7, #24
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	e000ed04 	.word	0xe000ed04

0800aab8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800aab8:	b590      	push	{r4, r7, lr}
 800aaba:	b08b      	sub	sp, #44	@ 0x2c
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800aac8:	2300      	movs	r3, #0
 800aaca:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d10a      	bne.n	800aae8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800aad2:	2380      	movs	r3, #128	@ 0x80
 800aad4:	617b      	str	r3, [r7, #20]
    return event;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	461c      	mov	r4, r3
 800aada:	f107 0314 	add.w	r3, r7, #20
 800aade:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aae2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aae6:	e054      	b.n	800ab92 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800aae8:	2300      	movs	r3, #0
 800aaea:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800aaec:	2300      	movs	r3, #0
 800aaee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aaf6:	d103      	bne.n	800ab00 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800aaf8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aafc:	627b      	str	r3, [r7, #36]	@ 0x24
 800aafe:	e009      	b.n	800ab14 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d006      	beq.n	800ab14 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d101      	bne.n	800ab14 <osMessageGet+0x5c>
      ticks = 1;
 800ab10:	2301      	movs	r3, #1
 800ab12:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800ab14:	f7ff feee 	bl	800a8f4 <inHandlerMode>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d01c      	beq.n	800ab58 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800ab1e:	f107 0220 	add.w	r2, r7, #32
 800ab22:	f107 0314 	add.w	r3, r7, #20
 800ab26:	3304      	adds	r3, #4
 800ab28:	4619      	mov	r1, r3
 800ab2a:	68b8      	ldr	r0, [r7, #8]
 800ab2c:	f000 fcb0 	bl	800b490 <xQueueReceiveFromISR>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d102      	bne.n	800ab3c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800ab36:	2310      	movs	r3, #16
 800ab38:	617b      	str	r3, [r7, #20]
 800ab3a:	e001      	b.n	800ab40 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ab40:	6a3b      	ldr	r3, [r7, #32]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d01d      	beq.n	800ab82 <osMessageGet+0xca>
 800ab46:	4b15      	ldr	r3, [pc, #84]	@ (800ab9c <osMessageGet+0xe4>)
 800ab48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab4c:	601a      	str	r2, [r3, #0]
 800ab4e:	f3bf 8f4f 	dsb	sy
 800ab52:	f3bf 8f6f 	isb	sy
 800ab56:	e014      	b.n	800ab82 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800ab58:	f107 0314 	add.w	r3, r7, #20
 800ab5c:	3304      	adds	r3, #4
 800ab5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab60:	4619      	mov	r1, r3
 800ab62:	68b8      	ldr	r0, [r7, #8]
 800ab64:	f000 fbb2 	bl	800b2cc <xQueueReceive>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d102      	bne.n	800ab74 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800ab6e:	2310      	movs	r3, #16
 800ab70:	617b      	str	r3, [r7, #20]
 800ab72:	e006      	b.n	800ab82 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800ab74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d101      	bne.n	800ab7e <osMessageGet+0xc6>
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	e000      	b.n	800ab80 <osMessageGet+0xc8>
 800ab7e:	2340      	movs	r3, #64	@ 0x40
 800ab80:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	461c      	mov	r4, r3
 800ab86:	f107 0314 	add.w	r3, r7, #20
 800ab8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ab8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ab92:	68f8      	ldr	r0, [r7, #12]
 800ab94:	372c      	adds	r7, #44	@ 0x2c
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd90      	pop	{r4, r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	e000ed04 	.word	0xe000ed04

0800aba0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f103 0208 	add.w	r2, r3, #8
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800abb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f103 0208 	add.w	r2, r3, #8
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f103 0208 	add.w	r2, r3, #8
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800abd4:	bf00      	nop
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800abee:	bf00      	nop
 800abf0:	370c      	adds	r7, #12
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr

0800abfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800abfa:	b480      	push	{r7}
 800abfc:	b085      	sub	sp, #20
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
 800ac02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	689a      	ldr	r2, [r3, #8]
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	683a      	ldr	r2, [r7, #0]
 800ac1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	683a      	ldr	r2, [r7, #0]
 800ac24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	1c5a      	adds	r2, r3, #1
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	601a      	str	r2, [r3, #0]
}
 800ac36:	bf00      	nop
 800ac38:	3714      	adds	r7, #20
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr

0800ac42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac42:	b480      	push	{r7}
 800ac44:	b085      	sub	sp, #20
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
 800ac4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac58:	d103      	bne.n	800ac62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	691b      	ldr	r3, [r3, #16]
 800ac5e:	60fb      	str	r3, [r7, #12]
 800ac60:	e00c      	b.n	800ac7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	3308      	adds	r3, #8
 800ac66:	60fb      	str	r3, [r7, #12]
 800ac68:	e002      	b.n	800ac70 <vListInsert+0x2e>
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	60fb      	str	r3, [r7, #12]
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	68ba      	ldr	r2, [r7, #8]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d2f6      	bcs.n	800ac6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	685a      	ldr	r2, [r3, #4]
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	683a      	ldr	r2, [r7, #0]
 800ac8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	68fa      	ldr	r2, [r7, #12]
 800ac90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	683a      	ldr	r2, [r7, #0]
 800ac96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	1c5a      	adds	r2, r3, #1
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	601a      	str	r2, [r3, #0]
}
 800aca8:	bf00      	nop
 800acaa:	3714      	adds	r7, #20
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr

0800acb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800acb4:	b480      	push	{r7}
 800acb6:	b085      	sub	sp, #20
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	691b      	ldr	r3, [r3, #16]
 800acc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	6892      	ldr	r2, [r2, #8]
 800acca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	6852      	ldr	r2, [r2, #4]
 800acd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d103      	bne.n	800ace8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	689a      	ldr	r2, [r3, #8]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	1e5a      	subs	r2, r3, #1
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3714      	adds	r7, #20
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d10b      	bne.n	800ad34 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ad1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad20:	f383 8811 	msr	BASEPRI, r3
 800ad24:	f3bf 8f6f 	isb	sy
 800ad28:	f3bf 8f4f 	dsb	sy
 800ad2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ad2e:	bf00      	nop
 800ad30:	bf00      	nop
 800ad32:	e7fd      	b.n	800ad30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ad34:	f001 fd88 	bl	800c848 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad40:	68f9      	ldr	r1, [r7, #12]
 800ad42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ad44:	fb01 f303 	mul.w	r3, r1, r3
 800ad48:	441a      	add	r2, r3
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2200      	movs	r2, #0
 800ad52:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681a      	ldr	r2, [r3, #0]
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad64:	3b01      	subs	r3, #1
 800ad66:	68f9      	ldr	r1, [r7, #12]
 800ad68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ad6a:	fb01 f303 	mul.w	r3, r1, r3
 800ad6e:	441a      	add	r2, r3
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	22ff      	movs	r2, #255	@ 0xff
 800ad78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	22ff      	movs	r2, #255	@ 0xff
 800ad80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d114      	bne.n	800adb4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	691b      	ldr	r3, [r3, #16]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d01a      	beq.n	800adc8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	3310      	adds	r3, #16
 800ad96:	4618      	mov	r0, r3
 800ad98:	f001 f954 	bl	800c044 <xTaskRemoveFromEventList>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d012      	beq.n	800adc8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ada2:	4b0d      	ldr	r3, [pc, #52]	@ (800add8 <xQueueGenericReset+0xd0>)
 800ada4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ada8:	601a      	str	r2, [r3, #0]
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	f3bf 8f6f 	isb	sy
 800adb2:	e009      	b.n	800adc8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	3310      	adds	r3, #16
 800adb8:	4618      	mov	r0, r3
 800adba:	f7ff fef1 	bl	800aba0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	3324      	adds	r3, #36	@ 0x24
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7ff feec 	bl	800aba0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800adc8:	f001 fd70 	bl	800c8ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800adcc:	2301      	movs	r3, #1
}
 800adce:	4618      	mov	r0, r3
 800add0:	3710      	adds	r7, #16
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	e000ed04 	.word	0xe000ed04

0800addc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800addc:	b580      	push	{r7, lr}
 800adde:	b08e      	sub	sp, #56	@ 0x38
 800ade0:	af02      	add	r7, sp, #8
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
 800ade8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d10b      	bne.n	800ae08 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800adf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf4:	f383 8811 	msr	BASEPRI, r3
 800adf8:	f3bf 8f6f 	isb	sy
 800adfc:	f3bf 8f4f 	dsb	sy
 800ae00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ae02:	bf00      	nop
 800ae04:	bf00      	nop
 800ae06:	e7fd      	b.n	800ae04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d10b      	bne.n	800ae26 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ae0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae12:	f383 8811 	msr	BASEPRI, r3
 800ae16:	f3bf 8f6f 	isb	sy
 800ae1a:	f3bf 8f4f 	dsb	sy
 800ae1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ae20:	bf00      	nop
 800ae22:	bf00      	nop
 800ae24:	e7fd      	b.n	800ae22 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d002      	beq.n	800ae32 <xQueueGenericCreateStatic+0x56>
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d001      	beq.n	800ae36 <xQueueGenericCreateStatic+0x5a>
 800ae32:	2301      	movs	r3, #1
 800ae34:	e000      	b.n	800ae38 <xQueueGenericCreateStatic+0x5c>
 800ae36:	2300      	movs	r3, #0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d10b      	bne.n	800ae54 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ae3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae40:	f383 8811 	msr	BASEPRI, r3
 800ae44:	f3bf 8f6f 	isb	sy
 800ae48:	f3bf 8f4f 	dsb	sy
 800ae4c:	623b      	str	r3, [r7, #32]
}
 800ae4e:	bf00      	nop
 800ae50:	bf00      	nop
 800ae52:	e7fd      	b.n	800ae50 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d102      	bne.n	800ae60 <xQueueGenericCreateStatic+0x84>
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d101      	bne.n	800ae64 <xQueueGenericCreateStatic+0x88>
 800ae60:	2301      	movs	r3, #1
 800ae62:	e000      	b.n	800ae66 <xQueueGenericCreateStatic+0x8a>
 800ae64:	2300      	movs	r3, #0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d10b      	bne.n	800ae82 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ae6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae6e:	f383 8811 	msr	BASEPRI, r3
 800ae72:	f3bf 8f6f 	isb	sy
 800ae76:	f3bf 8f4f 	dsb	sy
 800ae7a:	61fb      	str	r3, [r7, #28]
}
 800ae7c:	bf00      	nop
 800ae7e:	bf00      	nop
 800ae80:	e7fd      	b.n	800ae7e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ae82:	2348      	movs	r3, #72	@ 0x48
 800ae84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	2b48      	cmp	r3, #72	@ 0x48
 800ae8a:	d00b      	beq.n	800aea4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ae8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae90:	f383 8811 	msr	BASEPRI, r3
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	f3bf 8f4f 	dsb	sy
 800ae9c:	61bb      	str	r3, [r7, #24]
}
 800ae9e:	bf00      	nop
 800aea0:	bf00      	nop
 800aea2:	e7fd      	b.n	800aea0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aea4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800aeaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d00d      	beq.n	800aecc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aeb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aeb8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800aebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aebe:	9300      	str	r3, [sp, #0]
 800aec0:	4613      	mov	r3, r2
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	68b9      	ldr	r1, [r7, #8]
 800aec6:	68f8      	ldr	r0, [r7, #12]
 800aec8:	f000 f840 	bl	800af4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800aece:	4618      	mov	r0, r3
 800aed0:	3730      	adds	r7, #48	@ 0x30
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b08a      	sub	sp, #40	@ 0x28
 800aeda:	af02      	add	r7, sp, #8
 800aedc:	60f8      	str	r0, [r7, #12]
 800aede:	60b9      	str	r1, [r7, #8]
 800aee0:	4613      	mov	r3, r2
 800aee2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d10b      	bne.n	800af02 <xQueueGenericCreate+0x2c>
	__asm volatile
 800aeea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeee:	f383 8811 	msr	BASEPRI, r3
 800aef2:	f3bf 8f6f 	isb	sy
 800aef6:	f3bf 8f4f 	dsb	sy
 800aefa:	613b      	str	r3, [r7, #16]
}
 800aefc:	bf00      	nop
 800aefe:	bf00      	nop
 800af00:	e7fd      	b.n	800aefe <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	68ba      	ldr	r2, [r7, #8]
 800af06:	fb02 f303 	mul.w	r3, r2, r3
 800af0a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	3348      	adds	r3, #72	@ 0x48
 800af10:	4618      	mov	r0, r3
 800af12:	f001 fdbb 	bl	800ca8c <pvPortMalloc>
 800af16:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d011      	beq.n	800af42 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	3348      	adds	r3, #72	@ 0x48
 800af26:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800af30:	79fa      	ldrb	r2, [r7, #7]
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	9300      	str	r3, [sp, #0]
 800af36:	4613      	mov	r3, r2
 800af38:	697a      	ldr	r2, [r7, #20]
 800af3a:	68b9      	ldr	r1, [r7, #8]
 800af3c:	68f8      	ldr	r0, [r7, #12]
 800af3e:	f000 f805 	bl	800af4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800af42:	69bb      	ldr	r3, [r7, #24]
	}
 800af44:	4618      	mov	r0, r3
 800af46:	3720      	adds	r7, #32
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	607a      	str	r2, [r7, #4]
 800af58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d103      	bne.n	800af68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	69ba      	ldr	r2, [r7, #24]
 800af64:	601a      	str	r2, [r3, #0]
 800af66:	e002      	b.n	800af6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	68fa      	ldr	r2, [r7, #12]
 800af72:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	68ba      	ldr	r2, [r7, #8]
 800af78:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800af7a:	2101      	movs	r1, #1
 800af7c:	69b8      	ldr	r0, [r7, #24]
 800af7e:	f7ff fec3 	bl	800ad08 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800af82:	bf00      	nop
 800af84:	3710      	adds	r7, #16
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
	...

0800af8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b08e      	sub	sp, #56	@ 0x38
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	607a      	str	r2, [r7, #4]
 800af98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800af9a:	2300      	movs	r3, #0
 800af9c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800afa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d10b      	bne.n	800afc0 <xQueueGenericSend+0x34>
	__asm volatile
 800afa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afac:	f383 8811 	msr	BASEPRI, r3
 800afb0:	f3bf 8f6f 	isb	sy
 800afb4:	f3bf 8f4f 	dsb	sy
 800afb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800afba:	bf00      	nop
 800afbc:	bf00      	nop
 800afbe:	e7fd      	b.n	800afbc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d103      	bne.n	800afce <xQueueGenericSend+0x42>
 800afc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d101      	bne.n	800afd2 <xQueueGenericSend+0x46>
 800afce:	2301      	movs	r3, #1
 800afd0:	e000      	b.n	800afd4 <xQueueGenericSend+0x48>
 800afd2:	2300      	movs	r3, #0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d10b      	bne.n	800aff0 <xQueueGenericSend+0x64>
	__asm volatile
 800afd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afdc:	f383 8811 	msr	BASEPRI, r3
 800afe0:	f3bf 8f6f 	isb	sy
 800afe4:	f3bf 8f4f 	dsb	sy
 800afe8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800afea:	bf00      	nop
 800afec:	bf00      	nop
 800afee:	e7fd      	b.n	800afec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	2b02      	cmp	r3, #2
 800aff4:	d103      	bne.n	800affe <xQueueGenericSend+0x72>
 800aff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800affa:	2b01      	cmp	r3, #1
 800affc:	d101      	bne.n	800b002 <xQueueGenericSend+0x76>
 800affe:	2301      	movs	r3, #1
 800b000:	e000      	b.n	800b004 <xQueueGenericSend+0x78>
 800b002:	2300      	movs	r3, #0
 800b004:	2b00      	cmp	r3, #0
 800b006:	d10b      	bne.n	800b020 <xQueueGenericSend+0x94>
	__asm volatile
 800b008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b00c:	f383 8811 	msr	BASEPRI, r3
 800b010:	f3bf 8f6f 	isb	sy
 800b014:	f3bf 8f4f 	dsb	sy
 800b018:	623b      	str	r3, [r7, #32]
}
 800b01a:	bf00      	nop
 800b01c:	bf00      	nop
 800b01e:	e7fd      	b.n	800b01c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b020:	f001 f9d2 	bl	800c3c8 <xTaskGetSchedulerState>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d102      	bne.n	800b030 <xQueueGenericSend+0xa4>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d101      	bne.n	800b034 <xQueueGenericSend+0xa8>
 800b030:	2301      	movs	r3, #1
 800b032:	e000      	b.n	800b036 <xQueueGenericSend+0xaa>
 800b034:	2300      	movs	r3, #0
 800b036:	2b00      	cmp	r3, #0
 800b038:	d10b      	bne.n	800b052 <xQueueGenericSend+0xc6>
	__asm volatile
 800b03a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b03e:	f383 8811 	msr	BASEPRI, r3
 800b042:	f3bf 8f6f 	isb	sy
 800b046:	f3bf 8f4f 	dsb	sy
 800b04a:	61fb      	str	r3, [r7, #28]
}
 800b04c:	bf00      	nop
 800b04e:	bf00      	nop
 800b050:	e7fd      	b.n	800b04e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b052:	f001 fbf9 	bl	800c848 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b058:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b05c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b05e:	429a      	cmp	r2, r3
 800b060:	d302      	bcc.n	800b068 <xQueueGenericSend+0xdc>
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	2b02      	cmp	r3, #2
 800b066:	d129      	bne.n	800b0bc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b068:	683a      	ldr	r2, [r7, #0]
 800b06a:	68b9      	ldr	r1, [r7, #8]
 800b06c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b06e:	f000 fa91 	bl	800b594 <prvCopyDataToQueue>
 800b072:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d010      	beq.n	800b09e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b07e:	3324      	adds	r3, #36	@ 0x24
 800b080:	4618      	mov	r0, r3
 800b082:	f000 ffdf 	bl	800c044 <xTaskRemoveFromEventList>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d013      	beq.n	800b0b4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b08c:	4b3f      	ldr	r3, [pc, #252]	@ (800b18c <xQueueGenericSend+0x200>)
 800b08e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b092:	601a      	str	r2, [r3, #0]
 800b094:	f3bf 8f4f 	dsb	sy
 800b098:	f3bf 8f6f 	isb	sy
 800b09c:	e00a      	b.n	800b0b4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b09e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d007      	beq.n	800b0b4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b0a4:	4b39      	ldr	r3, [pc, #228]	@ (800b18c <xQueueGenericSend+0x200>)
 800b0a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0aa:	601a      	str	r2, [r3, #0]
 800b0ac:	f3bf 8f4f 	dsb	sy
 800b0b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b0b4:	f001 fbfa 	bl	800c8ac <vPortExitCritical>
				return pdPASS;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e063      	b.n	800b184 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d103      	bne.n	800b0ca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b0c2:	f001 fbf3 	bl	800c8ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	e05c      	b.n	800b184 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b0ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d106      	bne.n	800b0de <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b0d0:	f107 0314 	add.w	r3, r7, #20
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f001 f819 	bl	800c10c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b0de:	f001 fbe5 	bl	800c8ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b0e2:	f000 fda1 	bl	800bc28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b0e6:	f001 fbaf 	bl	800c848 <vPortEnterCritical>
 800b0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0f0:	b25b      	sxtb	r3, r3
 800b0f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0f6:	d103      	bne.n	800b100 <xQueueGenericSend+0x174>
 800b0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b102:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b106:	b25b      	sxtb	r3, r3
 800b108:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b10c:	d103      	bne.n	800b116 <xQueueGenericSend+0x18a>
 800b10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b110:	2200      	movs	r2, #0
 800b112:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b116:	f001 fbc9 	bl	800c8ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b11a:	1d3a      	adds	r2, r7, #4
 800b11c:	f107 0314 	add.w	r3, r7, #20
 800b120:	4611      	mov	r1, r2
 800b122:	4618      	mov	r0, r3
 800b124:	f001 f808 	bl	800c138 <xTaskCheckForTimeOut>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d124      	bne.n	800b178 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b12e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b130:	f000 fb28 	bl	800b784 <prvIsQueueFull>
 800b134:	4603      	mov	r3, r0
 800b136:	2b00      	cmp	r3, #0
 800b138:	d018      	beq.n	800b16c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13c:	3310      	adds	r3, #16
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	4611      	mov	r1, r2
 800b142:	4618      	mov	r0, r3
 800b144:	f000 ff58 	bl	800bff8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b148:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b14a:	f000 fab3 	bl	800b6b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b14e:	f000 fd79 	bl	800bc44 <xTaskResumeAll>
 800b152:	4603      	mov	r3, r0
 800b154:	2b00      	cmp	r3, #0
 800b156:	f47f af7c 	bne.w	800b052 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b15a:	4b0c      	ldr	r3, [pc, #48]	@ (800b18c <xQueueGenericSend+0x200>)
 800b15c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b160:	601a      	str	r2, [r3, #0]
 800b162:	f3bf 8f4f 	dsb	sy
 800b166:	f3bf 8f6f 	isb	sy
 800b16a:	e772      	b.n	800b052 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b16c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b16e:	f000 faa1 	bl	800b6b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b172:	f000 fd67 	bl	800bc44 <xTaskResumeAll>
 800b176:	e76c      	b.n	800b052 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b178:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b17a:	f000 fa9b 	bl	800b6b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b17e:	f000 fd61 	bl	800bc44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b182:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b184:	4618      	mov	r0, r3
 800b186:	3738      	adds	r7, #56	@ 0x38
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	e000ed04 	.word	0xe000ed04

0800b190 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b090      	sub	sp, #64	@ 0x40
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	607a      	str	r2, [r7, #4]
 800b19c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b1a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d10b      	bne.n	800b1c0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b1a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ac:	f383 8811 	msr	BASEPRI, r3
 800b1b0:	f3bf 8f6f 	isb	sy
 800b1b4:	f3bf 8f4f 	dsb	sy
 800b1b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b1ba:	bf00      	nop
 800b1bc:	bf00      	nop
 800b1be:	e7fd      	b.n	800b1bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d103      	bne.n	800b1ce <xQueueGenericSendFromISR+0x3e>
 800b1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d101      	bne.n	800b1d2 <xQueueGenericSendFromISR+0x42>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e000      	b.n	800b1d4 <xQueueGenericSendFromISR+0x44>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d10b      	bne.n	800b1f0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b1d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1dc:	f383 8811 	msr	BASEPRI, r3
 800b1e0:	f3bf 8f6f 	isb	sy
 800b1e4:	f3bf 8f4f 	dsb	sy
 800b1e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b1ea:	bf00      	nop
 800b1ec:	bf00      	nop
 800b1ee:	e7fd      	b.n	800b1ec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	2b02      	cmp	r3, #2
 800b1f4:	d103      	bne.n	800b1fe <xQueueGenericSendFromISR+0x6e>
 800b1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d101      	bne.n	800b202 <xQueueGenericSendFromISR+0x72>
 800b1fe:	2301      	movs	r3, #1
 800b200:	e000      	b.n	800b204 <xQueueGenericSendFromISR+0x74>
 800b202:	2300      	movs	r3, #0
 800b204:	2b00      	cmp	r3, #0
 800b206:	d10b      	bne.n	800b220 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b20c:	f383 8811 	msr	BASEPRI, r3
 800b210:	f3bf 8f6f 	isb	sy
 800b214:	f3bf 8f4f 	dsb	sy
 800b218:	623b      	str	r3, [r7, #32]
}
 800b21a:	bf00      	nop
 800b21c:	bf00      	nop
 800b21e:	e7fd      	b.n	800b21c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b220:	f001 fbf2 	bl	800ca08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b224:	f3ef 8211 	mrs	r2, BASEPRI
 800b228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b22c:	f383 8811 	msr	BASEPRI, r3
 800b230:	f3bf 8f6f 	isb	sy
 800b234:	f3bf 8f4f 	dsb	sy
 800b238:	61fa      	str	r2, [r7, #28]
 800b23a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b23c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b23e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b242:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b248:	429a      	cmp	r2, r3
 800b24a:	d302      	bcc.n	800b252 <xQueueGenericSendFromISR+0xc2>
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	2b02      	cmp	r3, #2
 800b250:	d12f      	bne.n	800b2b2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b254:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b258:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b25e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b260:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b262:	683a      	ldr	r2, [r7, #0]
 800b264:	68b9      	ldr	r1, [r7, #8]
 800b266:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b268:	f000 f994 	bl	800b594 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b26c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b270:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b274:	d112      	bne.n	800b29c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d016      	beq.n	800b2ac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b27e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b280:	3324      	adds	r3, #36	@ 0x24
 800b282:	4618      	mov	r0, r3
 800b284:	f000 fede 	bl	800c044 <xTaskRemoveFromEventList>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00e      	beq.n	800b2ac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d00b      	beq.n	800b2ac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2201      	movs	r2, #1
 800b298:	601a      	str	r2, [r3, #0]
 800b29a:	e007      	b.n	800b2ac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b29c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	b25a      	sxtb	r2, r3
 800b2a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b2b0:	e001      	b.n	800b2b6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2b8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b2c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b2c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3740      	adds	r7, #64	@ 0x40
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b08c      	sub	sp, #48	@ 0x30
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b2e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d10b      	bne.n	800b2fe <xQueueReceive+0x32>
	__asm volatile
 800b2e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ea:	f383 8811 	msr	BASEPRI, r3
 800b2ee:	f3bf 8f6f 	isb	sy
 800b2f2:	f3bf 8f4f 	dsb	sy
 800b2f6:	623b      	str	r3, [r7, #32]
}
 800b2f8:	bf00      	nop
 800b2fa:	bf00      	nop
 800b2fc:	e7fd      	b.n	800b2fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d103      	bne.n	800b30c <xQueueReceive+0x40>
 800b304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d101      	bne.n	800b310 <xQueueReceive+0x44>
 800b30c:	2301      	movs	r3, #1
 800b30e:	e000      	b.n	800b312 <xQueueReceive+0x46>
 800b310:	2300      	movs	r3, #0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d10b      	bne.n	800b32e <xQueueReceive+0x62>
	__asm volatile
 800b316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b31a:	f383 8811 	msr	BASEPRI, r3
 800b31e:	f3bf 8f6f 	isb	sy
 800b322:	f3bf 8f4f 	dsb	sy
 800b326:	61fb      	str	r3, [r7, #28]
}
 800b328:	bf00      	nop
 800b32a:	bf00      	nop
 800b32c:	e7fd      	b.n	800b32a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b32e:	f001 f84b 	bl	800c3c8 <xTaskGetSchedulerState>
 800b332:	4603      	mov	r3, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d102      	bne.n	800b33e <xQueueReceive+0x72>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d101      	bne.n	800b342 <xQueueReceive+0x76>
 800b33e:	2301      	movs	r3, #1
 800b340:	e000      	b.n	800b344 <xQueueReceive+0x78>
 800b342:	2300      	movs	r3, #0
 800b344:	2b00      	cmp	r3, #0
 800b346:	d10b      	bne.n	800b360 <xQueueReceive+0x94>
	__asm volatile
 800b348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b34c:	f383 8811 	msr	BASEPRI, r3
 800b350:	f3bf 8f6f 	isb	sy
 800b354:	f3bf 8f4f 	dsb	sy
 800b358:	61bb      	str	r3, [r7, #24]
}
 800b35a:	bf00      	nop
 800b35c:	bf00      	nop
 800b35e:	e7fd      	b.n	800b35c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b360:	f001 fa72 	bl	800c848 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b368:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d01f      	beq.n	800b3b0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b370:	68b9      	ldr	r1, [r7, #8]
 800b372:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b374:	f000 f978 	bl	800b668 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b37a:	1e5a      	subs	r2, r3, #1
 800b37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b37e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b382:	691b      	ldr	r3, [r3, #16]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d00f      	beq.n	800b3a8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b38a:	3310      	adds	r3, #16
 800b38c:	4618      	mov	r0, r3
 800b38e:	f000 fe59 	bl	800c044 <xTaskRemoveFromEventList>
 800b392:	4603      	mov	r3, r0
 800b394:	2b00      	cmp	r3, #0
 800b396:	d007      	beq.n	800b3a8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b398:	4b3c      	ldr	r3, [pc, #240]	@ (800b48c <xQueueReceive+0x1c0>)
 800b39a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b39e:	601a      	str	r2, [r3, #0]
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b3a8:	f001 fa80 	bl	800c8ac <vPortExitCritical>
				return pdPASS;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e069      	b.n	800b484 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d103      	bne.n	800b3be <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b3b6:	f001 fa79 	bl	800c8ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	e062      	b.n	800b484 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b3be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d106      	bne.n	800b3d2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b3c4:	f107 0310 	add.w	r3, r7, #16
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f000 fe9f 	bl	800c10c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b3d2:	f001 fa6b 	bl	800c8ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b3d6:	f000 fc27 	bl	800bc28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3da:	f001 fa35 	bl	800c848 <vPortEnterCritical>
 800b3de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b3e4:	b25b      	sxtb	r3, r3
 800b3e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3ea:	d103      	bne.n	800b3f4 <xQueueReceive+0x128>
 800b3ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b3fa:	b25b      	sxtb	r3, r3
 800b3fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b400:	d103      	bne.n	800b40a <xQueueReceive+0x13e>
 800b402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b404:	2200      	movs	r2, #0
 800b406:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b40a:	f001 fa4f 	bl	800c8ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b40e:	1d3a      	adds	r2, r7, #4
 800b410:	f107 0310 	add.w	r3, r7, #16
 800b414:	4611      	mov	r1, r2
 800b416:	4618      	mov	r0, r3
 800b418:	f000 fe8e 	bl	800c138 <xTaskCheckForTimeOut>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d123      	bne.n	800b46a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b422:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b424:	f000 f998 	bl	800b758 <prvIsQueueEmpty>
 800b428:	4603      	mov	r3, r0
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d017      	beq.n	800b45e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b42e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b430:	3324      	adds	r3, #36	@ 0x24
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	4611      	mov	r1, r2
 800b436:	4618      	mov	r0, r3
 800b438:	f000 fdde 	bl	800bff8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b43c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b43e:	f000 f939 	bl	800b6b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b442:	f000 fbff 	bl	800bc44 <xTaskResumeAll>
 800b446:	4603      	mov	r3, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d189      	bne.n	800b360 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b44c:	4b0f      	ldr	r3, [pc, #60]	@ (800b48c <xQueueReceive+0x1c0>)
 800b44e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b452:	601a      	str	r2, [r3, #0]
 800b454:	f3bf 8f4f 	dsb	sy
 800b458:	f3bf 8f6f 	isb	sy
 800b45c:	e780      	b.n	800b360 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b45e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b460:	f000 f928 	bl	800b6b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b464:	f000 fbee 	bl	800bc44 <xTaskResumeAll>
 800b468:	e77a      	b.n	800b360 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b46a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b46c:	f000 f922 	bl	800b6b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b470:	f000 fbe8 	bl	800bc44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b474:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b476:	f000 f96f 	bl	800b758 <prvIsQueueEmpty>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	f43f af6f 	beq.w	800b360 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b482:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b484:	4618      	mov	r0, r3
 800b486:	3730      	adds	r7, #48	@ 0x30
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	e000ed04 	.word	0xe000ed04

0800b490 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b08e      	sub	sp, #56	@ 0x38
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d10b      	bne.n	800b4be <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4aa:	f383 8811 	msr	BASEPRI, r3
 800b4ae:	f3bf 8f6f 	isb	sy
 800b4b2:	f3bf 8f4f 	dsb	sy
 800b4b6:	623b      	str	r3, [r7, #32]
}
 800b4b8:	bf00      	nop
 800b4ba:	bf00      	nop
 800b4bc:	e7fd      	b.n	800b4ba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d103      	bne.n	800b4cc <xQueueReceiveFromISR+0x3c>
 800b4c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d101      	bne.n	800b4d0 <xQueueReceiveFromISR+0x40>
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e000      	b.n	800b4d2 <xQueueReceiveFromISR+0x42>
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d10b      	bne.n	800b4ee <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4da:	f383 8811 	msr	BASEPRI, r3
 800b4de:	f3bf 8f6f 	isb	sy
 800b4e2:	f3bf 8f4f 	dsb	sy
 800b4e6:	61fb      	str	r3, [r7, #28]
}
 800b4e8:	bf00      	nop
 800b4ea:	bf00      	nop
 800b4ec:	e7fd      	b.n	800b4ea <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b4ee:	f001 fa8b 	bl	800ca08 <vPortValidateInterruptPriority>
	__asm volatile
 800b4f2:	f3ef 8211 	mrs	r2, BASEPRI
 800b4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4fa:	f383 8811 	msr	BASEPRI, r3
 800b4fe:	f3bf 8f6f 	isb	sy
 800b502:	f3bf 8f4f 	dsb	sy
 800b506:	61ba      	str	r2, [r7, #24]
 800b508:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b50a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b50c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b512:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b516:	2b00      	cmp	r3, #0
 800b518:	d02f      	beq.n	800b57a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b51c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b520:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b524:	68b9      	ldr	r1, [r7, #8]
 800b526:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b528:	f000 f89e 	bl	800b668 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b52c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b52e:	1e5a      	subs	r2, r3, #1
 800b530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b532:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b534:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b538:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b53c:	d112      	bne.n	800b564 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b540:	691b      	ldr	r3, [r3, #16]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d016      	beq.n	800b574 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b548:	3310      	adds	r3, #16
 800b54a:	4618      	mov	r0, r3
 800b54c:	f000 fd7a 	bl	800c044 <xTaskRemoveFromEventList>
 800b550:	4603      	mov	r3, r0
 800b552:	2b00      	cmp	r3, #0
 800b554:	d00e      	beq.n	800b574 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d00b      	beq.n	800b574 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2201      	movs	r2, #1
 800b560:	601a      	str	r2, [r3, #0]
 800b562:	e007      	b.n	800b574 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b564:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b568:	3301      	adds	r3, #1
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	b25a      	sxtb	r2, r3
 800b56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b570:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b574:	2301      	movs	r3, #1
 800b576:	637b      	str	r3, [r7, #52]	@ 0x34
 800b578:	e001      	b.n	800b57e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b57a:	2300      	movs	r3, #0
 800b57c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b57e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b580:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	f383 8811 	msr	BASEPRI, r3
}
 800b588:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b58a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3738      	adds	r7, #56	@ 0x38
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b086      	sub	sp, #24
 800b598:	af00      	add	r7, sp, #0
 800b59a:	60f8      	str	r0, [r7, #12]
 800b59c:	60b9      	str	r1, [r7, #8]
 800b59e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d10d      	bne.n	800b5ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d14d      	bne.n	800b656 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	689b      	ldr	r3, [r3, #8]
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f000 ff20 	bl	800c404 <xTaskPriorityDisinherit>
 800b5c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	609a      	str	r2, [r3, #8]
 800b5cc:	e043      	b.n	800b656 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d119      	bne.n	800b608 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6858      	ldr	r0, [r3, #4]
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5dc:	461a      	mov	r2, r3
 800b5de:	68b9      	ldr	r1, [r7, #8]
 800b5e0:	f002 f854 	bl	800d68c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	685a      	ldr	r2, [r3, #4]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5ec:	441a      	add	r2, r3
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	685a      	ldr	r2, [r3, #4]
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	689b      	ldr	r3, [r3, #8]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d32b      	bcc.n	800b656 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	605a      	str	r2, [r3, #4]
 800b606:	e026      	b.n	800b656 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	68d8      	ldr	r0, [r3, #12]
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b610:	461a      	mov	r2, r3
 800b612:	68b9      	ldr	r1, [r7, #8]
 800b614:	f002 f83a 	bl	800d68c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	68da      	ldr	r2, [r3, #12]
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b620:	425b      	negs	r3, r3
 800b622:	441a      	add	r2, r3
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	68da      	ldr	r2, [r3, #12]
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	429a      	cmp	r2, r3
 800b632:	d207      	bcs.n	800b644 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	689a      	ldr	r2, [r3, #8]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b63c:	425b      	negs	r3, r3
 800b63e:	441a      	add	r2, r3
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2b02      	cmp	r3, #2
 800b648:	d105      	bne.n	800b656 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d002      	beq.n	800b656 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	3b01      	subs	r3, #1
 800b654:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	1c5a      	adds	r2, r3, #1
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b65e:	697b      	ldr	r3, [r7, #20]
}
 800b660:	4618      	mov	r0, r3
 800b662:	3718      	adds	r7, #24
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b676:	2b00      	cmp	r3, #0
 800b678:	d018      	beq.n	800b6ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	68da      	ldr	r2, [r3, #12]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b682:	441a      	add	r2, r3
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	68da      	ldr	r2, [r3, #12]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	689b      	ldr	r3, [r3, #8]
 800b690:	429a      	cmp	r2, r3
 800b692:	d303      	bcc.n	800b69c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	68d9      	ldr	r1, [r3, #12]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6a4:	461a      	mov	r2, r3
 800b6a6:	6838      	ldr	r0, [r7, #0]
 800b6a8:	f001 fff0 	bl	800d68c <memcpy>
	}
}
 800b6ac:	bf00      	nop
 800b6ae:	3708      	adds	r7, #8
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b6bc:	f001 f8c4 	bl	800c848 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b6c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b6c8:	e011      	b.n	800b6ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d012      	beq.n	800b6f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	3324      	adds	r3, #36	@ 0x24
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f000 fcb4 	bl	800c044 <xTaskRemoveFromEventList>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d001      	beq.n	800b6e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b6e2:	f000 fd8d 	bl	800c200 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b6e6:	7bfb      	ldrb	r3, [r7, #15]
 800b6e8:	3b01      	subs	r3, #1
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b6ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	dce9      	bgt.n	800b6ca <prvUnlockQueue+0x16>
 800b6f6:	e000      	b.n	800b6fa <prvUnlockQueue+0x46>
					break;
 800b6f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	22ff      	movs	r2, #255	@ 0xff
 800b6fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b702:	f001 f8d3 	bl	800c8ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b706:	f001 f89f 	bl	800c848 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b710:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b712:	e011      	b.n	800b738 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	691b      	ldr	r3, [r3, #16]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d012      	beq.n	800b742 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	3310      	adds	r3, #16
 800b720:	4618      	mov	r0, r3
 800b722:	f000 fc8f 	bl	800c044 <xTaskRemoveFromEventList>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d001      	beq.n	800b730 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b72c:	f000 fd68 	bl	800c200 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b730:	7bbb      	ldrb	r3, [r7, #14]
 800b732:	3b01      	subs	r3, #1
 800b734:	b2db      	uxtb	r3, r3
 800b736:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b738:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	dce9      	bgt.n	800b714 <prvUnlockQueue+0x60>
 800b740:	e000      	b.n	800b744 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b742:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	22ff      	movs	r2, #255	@ 0xff
 800b748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b74c:	f001 f8ae 	bl	800c8ac <vPortExitCritical>
}
 800b750:	bf00      	nop
 800b752:	3710      	adds	r7, #16
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b760:	f001 f872 	bl	800c848 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d102      	bne.n	800b772 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b76c:	2301      	movs	r3, #1
 800b76e:	60fb      	str	r3, [r7, #12]
 800b770:	e001      	b.n	800b776 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b772:	2300      	movs	r3, #0
 800b774:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b776:	f001 f899 	bl	800c8ac <vPortExitCritical>

	return xReturn;
 800b77a:	68fb      	ldr	r3, [r7, #12]
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3710      	adds	r7, #16
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b084      	sub	sp, #16
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b78c:	f001 f85c 	bl	800c848 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b798:	429a      	cmp	r2, r3
 800b79a:	d102      	bne.n	800b7a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b79c:	2301      	movs	r3, #1
 800b79e:	60fb      	str	r3, [r7, #12]
 800b7a0:	e001      	b.n	800b7a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b7a6:	f001 f881 	bl	800c8ac <vPortExitCritical>

	return xReturn;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3710      	adds	r7, #16
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b08e      	sub	sp, #56	@ 0x38
 800b7b8:	af04      	add	r7, sp, #16
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	607a      	str	r2, [r7, #4]
 800b7c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b7c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d10b      	bne.n	800b7e0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b7c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7cc:	f383 8811 	msr	BASEPRI, r3
 800b7d0:	f3bf 8f6f 	isb	sy
 800b7d4:	f3bf 8f4f 	dsb	sy
 800b7d8:	623b      	str	r3, [r7, #32]
}
 800b7da:	bf00      	nop
 800b7dc:	bf00      	nop
 800b7de:	e7fd      	b.n	800b7dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d10b      	bne.n	800b7fe <xTaskCreateStatic+0x4a>
	__asm volatile
 800b7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ea:	f383 8811 	msr	BASEPRI, r3
 800b7ee:	f3bf 8f6f 	isb	sy
 800b7f2:	f3bf 8f4f 	dsb	sy
 800b7f6:	61fb      	str	r3, [r7, #28]
}
 800b7f8:	bf00      	nop
 800b7fa:	bf00      	nop
 800b7fc:	e7fd      	b.n	800b7fa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b7fe:	2358      	movs	r3, #88	@ 0x58
 800b800:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	2b58      	cmp	r3, #88	@ 0x58
 800b806:	d00b      	beq.n	800b820 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b80c:	f383 8811 	msr	BASEPRI, r3
 800b810:	f3bf 8f6f 	isb	sy
 800b814:	f3bf 8f4f 	dsb	sy
 800b818:	61bb      	str	r3, [r7, #24]
}
 800b81a:	bf00      	nop
 800b81c:	bf00      	nop
 800b81e:	e7fd      	b.n	800b81c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b820:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b824:	2b00      	cmp	r3, #0
 800b826:	d01e      	beq.n	800b866 <xTaskCreateStatic+0xb2>
 800b828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d01b      	beq.n	800b866 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b82e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b830:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b834:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b836:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b83a:	2202      	movs	r2, #2
 800b83c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b840:	2300      	movs	r3, #0
 800b842:	9303      	str	r3, [sp, #12]
 800b844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b846:	9302      	str	r3, [sp, #8]
 800b848:	f107 0314 	add.w	r3, r7, #20
 800b84c:	9301      	str	r3, [sp, #4]
 800b84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b850:	9300      	str	r3, [sp, #0]
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	68b9      	ldr	r1, [r7, #8]
 800b858:	68f8      	ldr	r0, [r7, #12]
 800b85a:	f000 f850 	bl	800b8fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b85e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b860:	f000 f8e0 	bl	800ba24 <prvAddNewTaskToReadyList>
 800b864:	e001      	b.n	800b86a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b866:	2300      	movs	r3, #0
 800b868:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b86a:	697b      	ldr	r3, [r7, #20]
	}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3728      	adds	r7, #40	@ 0x28
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b874:	b580      	push	{r7, lr}
 800b876:	b08c      	sub	sp, #48	@ 0x30
 800b878:	af04      	add	r7, sp, #16
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	60b9      	str	r1, [r7, #8]
 800b87e:	603b      	str	r3, [r7, #0]
 800b880:	4613      	mov	r3, r2
 800b882:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b884:	88fb      	ldrh	r3, [r7, #6]
 800b886:	009b      	lsls	r3, r3, #2
 800b888:	4618      	mov	r0, r3
 800b88a:	f001 f8ff 	bl	800ca8c <pvPortMalloc>
 800b88e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d00e      	beq.n	800b8b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b896:	2058      	movs	r0, #88	@ 0x58
 800b898:	f001 f8f8 	bl	800ca8c <pvPortMalloc>
 800b89c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b89e:	69fb      	ldr	r3, [r7, #28]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d003      	beq.n	800b8ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b8a4:	69fb      	ldr	r3, [r7, #28]
 800b8a6:	697a      	ldr	r2, [r7, #20]
 800b8a8:	631a      	str	r2, [r3, #48]	@ 0x30
 800b8aa:	e005      	b.n	800b8b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b8ac:	6978      	ldr	r0, [r7, #20]
 800b8ae:	f001 f9c1 	bl	800cc34 <vPortFree>
 800b8b2:	e001      	b.n	800b8b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d017      	beq.n	800b8ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b8c6:	88fa      	ldrh	r2, [r7, #6]
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	9303      	str	r3, [sp, #12]
 800b8cc:	69fb      	ldr	r3, [r7, #28]
 800b8ce:	9302      	str	r3, [sp, #8]
 800b8d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8d2:	9301      	str	r3, [sp, #4]
 800b8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	68b9      	ldr	r1, [r7, #8]
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f000 f80e 	bl	800b8fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b8e2:	69f8      	ldr	r0, [r7, #28]
 800b8e4:	f000 f89e 	bl	800ba24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	61bb      	str	r3, [r7, #24]
 800b8ec:	e002      	b.n	800b8f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b8ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b8f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b8f4:	69bb      	ldr	r3, [r7, #24]
	}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3720      	adds	r7, #32
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b088      	sub	sp, #32
 800b902:	af00      	add	r7, sp, #0
 800b904:	60f8      	str	r0, [r7, #12]
 800b906:	60b9      	str	r1, [r7, #8]
 800b908:	607a      	str	r2, [r7, #4]
 800b90a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b90e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	461a      	mov	r2, r3
 800b916:	21a5      	movs	r1, #165	@ 0xa5
 800b918:	f001 fe74 	bl	800d604 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b91e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b926:	3b01      	subs	r3, #1
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	4413      	add	r3, r2
 800b92c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b92e:	69bb      	ldr	r3, [r7, #24]
 800b930:	f023 0307 	bic.w	r3, r3, #7
 800b934:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	f003 0307 	and.w	r3, r3, #7
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00b      	beq.n	800b958 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b944:	f383 8811 	msr	BASEPRI, r3
 800b948:	f3bf 8f6f 	isb	sy
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	617b      	str	r3, [r7, #20]
}
 800b952:	bf00      	nop
 800b954:	bf00      	nop
 800b956:	e7fd      	b.n	800b954 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d01f      	beq.n	800b99e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b95e:	2300      	movs	r3, #0
 800b960:	61fb      	str	r3, [r7, #28]
 800b962:	e012      	b.n	800b98a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b964:	68ba      	ldr	r2, [r7, #8]
 800b966:	69fb      	ldr	r3, [r7, #28]
 800b968:	4413      	add	r3, r2
 800b96a:	7819      	ldrb	r1, [r3, #0]
 800b96c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b96e:	69fb      	ldr	r3, [r7, #28]
 800b970:	4413      	add	r3, r2
 800b972:	3334      	adds	r3, #52	@ 0x34
 800b974:	460a      	mov	r2, r1
 800b976:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b978:	68ba      	ldr	r2, [r7, #8]
 800b97a:	69fb      	ldr	r3, [r7, #28]
 800b97c:	4413      	add	r3, r2
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d006      	beq.n	800b992 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	3301      	adds	r3, #1
 800b988:	61fb      	str	r3, [r7, #28]
 800b98a:	69fb      	ldr	r3, [r7, #28]
 800b98c:	2b0f      	cmp	r3, #15
 800b98e:	d9e9      	bls.n	800b964 <prvInitialiseNewTask+0x66>
 800b990:	e000      	b.n	800b994 <prvInitialiseNewTask+0x96>
			{
				break;
 800b992:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b996:	2200      	movs	r2, #0
 800b998:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b99c:	e003      	b.n	800b9a6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9a8:	2b06      	cmp	r3, #6
 800b9aa:	d901      	bls.n	800b9b0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b9ac:	2306      	movs	r3, #6
 800b9ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9b4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9ba:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b9bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9be:	2200      	movs	r2, #0
 800b9c0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c4:	3304      	adds	r3, #4
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7ff f90a 	bl	800abe0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b9cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ce:	3318      	adds	r3, #24
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7ff f905 	bl	800abe0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9de:	f1c3 0207 	rsb	r2, r3, #7
 800b9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9ea:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800b9ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ba00:	683a      	ldr	r2, [r7, #0]
 800ba02:	68f9      	ldr	r1, [r7, #12]
 800ba04:	69b8      	ldr	r0, [r7, #24]
 800ba06:	f000 fdeb 	bl	800c5e0 <pxPortInitialiseStack>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba0e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ba10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d002      	beq.n	800ba1c <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ba16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba1a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba1c:	bf00      	nop
 800ba1e:	3720      	adds	r7, #32
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ba2c:	f000 ff0c 	bl	800c848 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ba30:	4b2a      	ldr	r3, [pc, #168]	@ (800badc <prvAddNewTaskToReadyList+0xb8>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	3301      	adds	r3, #1
 800ba36:	4a29      	ldr	r2, [pc, #164]	@ (800badc <prvAddNewTaskToReadyList+0xb8>)
 800ba38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ba3a:	4b29      	ldr	r3, [pc, #164]	@ (800bae0 <prvAddNewTaskToReadyList+0xbc>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d109      	bne.n	800ba56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ba42:	4a27      	ldr	r2, [pc, #156]	@ (800bae0 <prvAddNewTaskToReadyList+0xbc>)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ba48:	4b24      	ldr	r3, [pc, #144]	@ (800badc <prvAddNewTaskToReadyList+0xb8>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d110      	bne.n	800ba72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ba50:	f000 fbfc 	bl	800c24c <prvInitialiseTaskLists>
 800ba54:	e00d      	b.n	800ba72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ba56:	4b23      	ldr	r3, [pc, #140]	@ (800bae4 <prvAddNewTaskToReadyList+0xc0>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d109      	bne.n	800ba72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ba5e:	4b20      	ldr	r3, [pc, #128]	@ (800bae0 <prvAddNewTaskToReadyList+0xbc>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d802      	bhi.n	800ba72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ba6c:	4a1c      	ldr	r2, [pc, #112]	@ (800bae0 <prvAddNewTaskToReadyList+0xbc>)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ba72:	4b1d      	ldr	r3, [pc, #116]	@ (800bae8 <prvAddNewTaskToReadyList+0xc4>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	3301      	adds	r3, #1
 800ba78:	4a1b      	ldr	r2, [pc, #108]	@ (800bae8 <prvAddNewTaskToReadyList+0xc4>)
 800ba7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba80:	2201      	movs	r2, #1
 800ba82:	409a      	lsls	r2, r3
 800ba84:	4b19      	ldr	r3, [pc, #100]	@ (800baec <prvAddNewTaskToReadyList+0xc8>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	4a18      	ldr	r2, [pc, #96]	@ (800baec <prvAddNewTaskToReadyList+0xc8>)
 800ba8c:	6013      	str	r3, [r2, #0]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba92:	4613      	mov	r3, r2
 800ba94:	009b      	lsls	r3, r3, #2
 800ba96:	4413      	add	r3, r2
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	4a15      	ldr	r2, [pc, #84]	@ (800baf0 <prvAddNewTaskToReadyList+0xcc>)
 800ba9c:	441a      	add	r2, r3
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	3304      	adds	r3, #4
 800baa2:	4619      	mov	r1, r3
 800baa4:	4610      	mov	r0, r2
 800baa6:	f7ff f8a8 	bl	800abfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800baaa:	f000 feff 	bl	800c8ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800baae:	4b0d      	ldr	r3, [pc, #52]	@ (800bae4 <prvAddNewTaskToReadyList+0xc0>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d00e      	beq.n	800bad4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bab6:	4b0a      	ldr	r3, [pc, #40]	@ (800bae0 <prvAddNewTaskToReadyList+0xbc>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d207      	bcs.n	800bad4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bac4:	4b0b      	ldr	r3, [pc, #44]	@ (800baf4 <prvAddNewTaskToReadyList+0xd0>)
 800bac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800baca:	601a      	str	r2, [r3, #0]
 800bacc:	f3bf 8f4f 	dsb	sy
 800bad0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bad4:	bf00      	nop
 800bad6:	3708      	adds	r7, #8
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}
 800badc:	20000708 	.word	0x20000708
 800bae0:	20000608 	.word	0x20000608
 800bae4:	20000714 	.word	0x20000714
 800bae8:	20000724 	.word	0x20000724
 800baec:	20000710 	.word	0x20000710
 800baf0:	2000060c 	.word	0x2000060c
 800baf4:	e000ed04 	.word	0xe000ed04

0800baf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b084      	sub	sp, #16
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bb00:	2300      	movs	r3, #0
 800bb02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d018      	beq.n	800bb3c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bb0a:	4b14      	ldr	r3, [pc, #80]	@ (800bb5c <vTaskDelay+0x64>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d00b      	beq.n	800bb2a <vTaskDelay+0x32>
	__asm volatile
 800bb12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb16:	f383 8811 	msr	BASEPRI, r3
 800bb1a:	f3bf 8f6f 	isb	sy
 800bb1e:	f3bf 8f4f 	dsb	sy
 800bb22:	60bb      	str	r3, [r7, #8]
}
 800bb24:	bf00      	nop
 800bb26:	bf00      	nop
 800bb28:	e7fd      	b.n	800bb26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bb2a:	f000 f87d 	bl	800bc28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bb2e:	2100      	movs	r1, #0
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 fcef 	bl	800c514 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bb36:	f000 f885 	bl	800bc44 <xTaskResumeAll>
 800bb3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d107      	bne.n	800bb52 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bb42:	4b07      	ldr	r3, [pc, #28]	@ (800bb60 <vTaskDelay+0x68>)
 800bb44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb48:	601a      	str	r2, [r3, #0]
 800bb4a:	f3bf 8f4f 	dsb	sy
 800bb4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb52:	bf00      	nop
 800bb54:	3710      	adds	r7, #16
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	20000730 	.word	0x20000730
 800bb60:	e000ed04 	.word	0xe000ed04

0800bb64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b08a      	sub	sp, #40	@ 0x28
 800bb68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bb72:	463a      	mov	r2, r7
 800bb74:	1d39      	adds	r1, r7, #4
 800bb76:	f107 0308 	add.w	r3, r7, #8
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7f4 fcca 	bl	8000514 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bb80:	6839      	ldr	r1, [r7, #0]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	68ba      	ldr	r2, [r7, #8]
 800bb86:	9202      	str	r2, [sp, #8]
 800bb88:	9301      	str	r3, [sp, #4]
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	9300      	str	r3, [sp, #0]
 800bb8e:	2300      	movs	r3, #0
 800bb90:	460a      	mov	r2, r1
 800bb92:	491f      	ldr	r1, [pc, #124]	@ (800bc10 <vTaskStartScheduler+0xac>)
 800bb94:	481f      	ldr	r0, [pc, #124]	@ (800bc14 <vTaskStartScheduler+0xb0>)
 800bb96:	f7ff fe0d 	bl	800b7b4 <xTaskCreateStatic>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	4a1e      	ldr	r2, [pc, #120]	@ (800bc18 <vTaskStartScheduler+0xb4>)
 800bb9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bba0:	4b1d      	ldr	r3, [pc, #116]	@ (800bc18 <vTaskStartScheduler+0xb4>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d002      	beq.n	800bbae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	617b      	str	r3, [r7, #20]
 800bbac:	e001      	b.n	800bbb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	d116      	bne.n	800bbe6 <vTaskStartScheduler+0x82>
	__asm volatile
 800bbb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbbc:	f383 8811 	msr	BASEPRI, r3
 800bbc0:	f3bf 8f6f 	isb	sy
 800bbc4:	f3bf 8f4f 	dsb	sy
 800bbc8:	613b      	str	r3, [r7, #16]
}
 800bbca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bbcc:	4b13      	ldr	r3, [pc, #76]	@ (800bc1c <vTaskStartScheduler+0xb8>)
 800bbce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bbd2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bbd4:	4b12      	ldr	r3, [pc, #72]	@ (800bc20 <vTaskStartScheduler+0xbc>)
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bbda:	4b12      	ldr	r3, [pc, #72]	@ (800bc24 <vTaskStartScheduler+0xc0>)
 800bbdc:	2200      	movs	r2, #0
 800bbde:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bbe0:	f000 fd8e 	bl	800c700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bbe4:	e00f      	b.n	800bc06 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bbec:	d10b      	bne.n	800bc06 <vTaskStartScheduler+0xa2>
	__asm volatile
 800bbee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbf2:	f383 8811 	msr	BASEPRI, r3
 800bbf6:	f3bf 8f6f 	isb	sy
 800bbfa:	f3bf 8f4f 	dsb	sy
 800bbfe:	60fb      	str	r3, [r7, #12]
}
 800bc00:	bf00      	nop
 800bc02:	bf00      	nop
 800bc04:	e7fd      	b.n	800bc02 <vTaskStartScheduler+0x9e>
}
 800bc06:	bf00      	nop
 800bc08:	3718      	adds	r7, #24
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	0800d7b8 	.word	0x0800d7b8
 800bc14:	0800c219 	.word	0x0800c219
 800bc18:	2000072c 	.word	0x2000072c
 800bc1c:	20000728 	.word	0x20000728
 800bc20:	20000714 	.word	0x20000714
 800bc24:	2000070c 	.word	0x2000070c

0800bc28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bc28:	b480      	push	{r7}
 800bc2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bc2c:	4b04      	ldr	r3, [pc, #16]	@ (800bc40 <vTaskSuspendAll+0x18>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	3301      	adds	r3, #1
 800bc32:	4a03      	ldr	r2, [pc, #12]	@ (800bc40 <vTaskSuspendAll+0x18>)
 800bc34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bc36:	bf00      	nop
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr
 800bc40:	20000730 	.word	0x20000730

0800bc44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bc52:	4b42      	ldr	r3, [pc, #264]	@ (800bd5c <xTaskResumeAll+0x118>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d10b      	bne.n	800bc72 <xTaskResumeAll+0x2e>
	__asm volatile
 800bc5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc5e:	f383 8811 	msr	BASEPRI, r3
 800bc62:	f3bf 8f6f 	isb	sy
 800bc66:	f3bf 8f4f 	dsb	sy
 800bc6a:	603b      	str	r3, [r7, #0]
}
 800bc6c:	bf00      	nop
 800bc6e:	bf00      	nop
 800bc70:	e7fd      	b.n	800bc6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bc72:	f000 fde9 	bl	800c848 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bc76:	4b39      	ldr	r3, [pc, #228]	@ (800bd5c <xTaskResumeAll+0x118>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	3b01      	subs	r3, #1
 800bc7c:	4a37      	ldr	r2, [pc, #220]	@ (800bd5c <xTaskResumeAll+0x118>)
 800bc7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc80:	4b36      	ldr	r3, [pc, #216]	@ (800bd5c <xTaskResumeAll+0x118>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d161      	bne.n	800bd4c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bc88:	4b35      	ldr	r3, [pc, #212]	@ (800bd60 <xTaskResumeAll+0x11c>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d05d      	beq.n	800bd4c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc90:	e02e      	b.n	800bcf0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc92:	4b34      	ldr	r3, [pc, #208]	@ (800bd64 <xTaskResumeAll+0x120>)
 800bc94:	68db      	ldr	r3, [r3, #12]
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	3318      	adds	r3, #24
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7ff f808 	bl	800acb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	3304      	adds	r3, #4
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f7ff f803 	bl	800acb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	409a      	lsls	r2, r3
 800bcb6:	4b2c      	ldr	r3, [pc, #176]	@ (800bd68 <xTaskResumeAll+0x124>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	4a2a      	ldr	r2, [pc, #168]	@ (800bd68 <xTaskResumeAll+0x124>)
 800bcbe:	6013      	str	r3, [r2, #0]
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	009b      	lsls	r3, r3, #2
 800bcc8:	4413      	add	r3, r2
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	4a27      	ldr	r2, [pc, #156]	@ (800bd6c <xTaskResumeAll+0x128>)
 800bcce:	441a      	add	r2, r3
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	3304      	adds	r3, #4
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	4610      	mov	r0, r2
 800bcd8:	f7fe ff8f 	bl	800abfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bce0:	4b23      	ldr	r3, [pc, #140]	@ (800bd70 <xTaskResumeAll+0x12c>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d302      	bcc.n	800bcf0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bcea:	4b22      	ldr	r3, [pc, #136]	@ (800bd74 <xTaskResumeAll+0x130>)
 800bcec:	2201      	movs	r2, #1
 800bcee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bcf0:	4b1c      	ldr	r3, [pc, #112]	@ (800bd64 <xTaskResumeAll+0x120>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d1cc      	bne.n	800bc92 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d001      	beq.n	800bd02 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bcfe:	f000 fb43 	bl	800c388 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bd02:	4b1d      	ldr	r3, [pc, #116]	@ (800bd78 <xTaskResumeAll+0x134>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d010      	beq.n	800bd30 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bd0e:	f000 f837 	bl	800bd80 <xTaskIncrementTick>
 800bd12:	4603      	mov	r3, r0
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d002      	beq.n	800bd1e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bd18:	4b16      	ldr	r3, [pc, #88]	@ (800bd74 <xTaskResumeAll+0x130>)
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	3b01      	subs	r3, #1
 800bd22:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d1f1      	bne.n	800bd0e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bd2a:	4b13      	ldr	r3, [pc, #76]	@ (800bd78 <xTaskResumeAll+0x134>)
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bd30:	4b10      	ldr	r3, [pc, #64]	@ (800bd74 <xTaskResumeAll+0x130>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d009      	beq.n	800bd4c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bd38:	2301      	movs	r3, #1
 800bd3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bd3c:	4b0f      	ldr	r3, [pc, #60]	@ (800bd7c <xTaskResumeAll+0x138>)
 800bd3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd42:	601a      	str	r2, [r3, #0]
 800bd44:	f3bf 8f4f 	dsb	sy
 800bd48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd4c:	f000 fdae 	bl	800c8ac <vPortExitCritical>

	return xAlreadyYielded;
 800bd50:	68bb      	ldr	r3, [r7, #8]
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	20000730 	.word	0x20000730
 800bd60:	20000708 	.word	0x20000708
 800bd64:	200006c8 	.word	0x200006c8
 800bd68:	20000710 	.word	0x20000710
 800bd6c:	2000060c 	.word	0x2000060c
 800bd70:	20000608 	.word	0x20000608
 800bd74:	2000071c 	.word	0x2000071c
 800bd78:	20000718 	.word	0x20000718
 800bd7c:	e000ed04 	.word	0xe000ed04

0800bd80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b086      	sub	sp, #24
 800bd84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bd86:	2300      	movs	r3, #0
 800bd88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd8a:	4b4f      	ldr	r3, [pc, #316]	@ (800bec8 <xTaskIncrementTick+0x148>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	f040 808f 	bne.w	800beb2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bd94:	4b4d      	ldr	r3, [pc, #308]	@ (800becc <xTaskIncrementTick+0x14c>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	3301      	adds	r3, #1
 800bd9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bd9c:	4a4b      	ldr	r2, [pc, #300]	@ (800becc <xTaskIncrementTick+0x14c>)
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d121      	bne.n	800bdec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bda8:	4b49      	ldr	r3, [pc, #292]	@ (800bed0 <xTaskIncrementTick+0x150>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d00b      	beq.n	800bdca <xTaskIncrementTick+0x4a>
	__asm volatile
 800bdb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdb6:	f383 8811 	msr	BASEPRI, r3
 800bdba:	f3bf 8f6f 	isb	sy
 800bdbe:	f3bf 8f4f 	dsb	sy
 800bdc2:	603b      	str	r3, [r7, #0]
}
 800bdc4:	bf00      	nop
 800bdc6:	bf00      	nop
 800bdc8:	e7fd      	b.n	800bdc6 <xTaskIncrementTick+0x46>
 800bdca:	4b41      	ldr	r3, [pc, #260]	@ (800bed0 <xTaskIncrementTick+0x150>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	60fb      	str	r3, [r7, #12]
 800bdd0:	4b40      	ldr	r3, [pc, #256]	@ (800bed4 <xTaskIncrementTick+0x154>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4a3e      	ldr	r2, [pc, #248]	@ (800bed0 <xTaskIncrementTick+0x150>)
 800bdd6:	6013      	str	r3, [r2, #0]
 800bdd8:	4a3e      	ldr	r2, [pc, #248]	@ (800bed4 <xTaskIncrementTick+0x154>)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	6013      	str	r3, [r2, #0]
 800bdde:	4b3e      	ldr	r3, [pc, #248]	@ (800bed8 <xTaskIncrementTick+0x158>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	3301      	adds	r3, #1
 800bde4:	4a3c      	ldr	r2, [pc, #240]	@ (800bed8 <xTaskIncrementTick+0x158>)
 800bde6:	6013      	str	r3, [r2, #0]
 800bde8:	f000 face 	bl	800c388 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bdec:	4b3b      	ldr	r3, [pc, #236]	@ (800bedc <xTaskIncrementTick+0x15c>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d348      	bcc.n	800be88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bdf6:	4b36      	ldr	r3, [pc, #216]	@ (800bed0 <xTaskIncrementTick+0x150>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d104      	bne.n	800be0a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be00:	4b36      	ldr	r3, [pc, #216]	@ (800bedc <xTaskIncrementTick+0x15c>)
 800be02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be06:	601a      	str	r2, [r3, #0]
					break;
 800be08:	e03e      	b.n	800be88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be0a:	4b31      	ldr	r3, [pc, #196]	@ (800bed0 <xTaskIncrementTick+0x150>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	68db      	ldr	r3, [r3, #12]
 800be12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	685b      	ldr	r3, [r3, #4]
 800be18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800be1a:	693a      	ldr	r2, [r7, #16]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	429a      	cmp	r2, r3
 800be20:	d203      	bcs.n	800be2a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800be22:	4a2e      	ldr	r2, [pc, #184]	@ (800bedc <xTaskIncrementTick+0x15c>)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800be28:	e02e      	b.n	800be88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	3304      	adds	r3, #4
 800be2e:	4618      	mov	r0, r3
 800be30:	f7fe ff40 	bl	800acb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d004      	beq.n	800be46 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	3318      	adds	r3, #24
 800be40:	4618      	mov	r0, r3
 800be42:	f7fe ff37 	bl	800acb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be4a:	2201      	movs	r2, #1
 800be4c:	409a      	lsls	r2, r3
 800be4e:	4b24      	ldr	r3, [pc, #144]	@ (800bee0 <xTaskIncrementTick+0x160>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	4313      	orrs	r3, r2
 800be54:	4a22      	ldr	r2, [pc, #136]	@ (800bee0 <xTaskIncrementTick+0x160>)
 800be56:	6013      	str	r3, [r2, #0]
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be5c:	4613      	mov	r3, r2
 800be5e:	009b      	lsls	r3, r3, #2
 800be60:	4413      	add	r3, r2
 800be62:	009b      	lsls	r3, r3, #2
 800be64:	4a1f      	ldr	r2, [pc, #124]	@ (800bee4 <xTaskIncrementTick+0x164>)
 800be66:	441a      	add	r2, r3
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	3304      	adds	r3, #4
 800be6c:	4619      	mov	r1, r3
 800be6e:	4610      	mov	r0, r2
 800be70:	f7fe fec3 	bl	800abfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be78:	4b1b      	ldr	r3, [pc, #108]	@ (800bee8 <xTaskIncrementTick+0x168>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be7e:	429a      	cmp	r2, r3
 800be80:	d3b9      	bcc.n	800bdf6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800be82:	2301      	movs	r3, #1
 800be84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be86:	e7b6      	b.n	800bdf6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800be88:	4b17      	ldr	r3, [pc, #92]	@ (800bee8 <xTaskIncrementTick+0x168>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be8e:	4915      	ldr	r1, [pc, #84]	@ (800bee4 <xTaskIncrementTick+0x164>)
 800be90:	4613      	mov	r3, r2
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	4413      	add	r3, r2
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	440b      	add	r3, r1
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d901      	bls.n	800bea4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bea0:	2301      	movs	r3, #1
 800bea2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bea4:	4b11      	ldr	r3, [pc, #68]	@ (800beec <xTaskIncrementTick+0x16c>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d007      	beq.n	800bebc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800beac:	2301      	movs	r3, #1
 800beae:	617b      	str	r3, [r7, #20]
 800beb0:	e004      	b.n	800bebc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800beb2:	4b0f      	ldr	r3, [pc, #60]	@ (800bef0 <xTaskIncrementTick+0x170>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	3301      	adds	r3, #1
 800beb8:	4a0d      	ldr	r2, [pc, #52]	@ (800bef0 <xTaskIncrementTick+0x170>)
 800beba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bebc:	697b      	ldr	r3, [r7, #20]
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3718      	adds	r7, #24
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
 800bec6:	bf00      	nop
 800bec8:	20000730 	.word	0x20000730
 800becc:	2000070c 	.word	0x2000070c
 800bed0:	200006c0 	.word	0x200006c0
 800bed4:	200006c4 	.word	0x200006c4
 800bed8:	20000720 	.word	0x20000720
 800bedc:	20000728 	.word	0x20000728
 800bee0:	20000710 	.word	0x20000710
 800bee4:	2000060c 	.word	0x2000060c
 800bee8:	20000608 	.word	0x20000608
 800beec:	2000071c 	.word	0x2000071c
 800bef0:	20000718 	.word	0x20000718

0800bef4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b088      	sub	sp, #32
 800bef8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800befa:	4b3a      	ldr	r3, [pc, #232]	@ (800bfe4 <vTaskSwitchContext+0xf0>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d003      	beq.n	800bf0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bf02:	4b39      	ldr	r3, [pc, #228]	@ (800bfe8 <vTaskSwitchContext+0xf4>)
 800bf04:	2201      	movs	r2, #1
 800bf06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bf08:	e067      	b.n	800bfda <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800bf0a:	4b37      	ldr	r3, [pc, #220]	@ (800bfe8 <vTaskSwitchContext+0xf4>)
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800bf10:	4b36      	ldr	r3, [pc, #216]	@ (800bfec <vTaskSwitchContext+0xf8>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf16:	61fb      	str	r3, [r7, #28]
 800bf18:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800bf1c:	61bb      	str	r3, [r7, #24]
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	69ba      	ldr	r2, [r7, #24]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d111      	bne.n	800bf4c <vTaskSwitchContext+0x58>
 800bf28:	69fb      	ldr	r3, [r7, #28]
 800bf2a:	3304      	adds	r3, #4
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	69ba      	ldr	r2, [r7, #24]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d10b      	bne.n	800bf4c <vTaskSwitchContext+0x58>
 800bf34:	69fb      	ldr	r3, [r7, #28]
 800bf36:	3308      	adds	r3, #8
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	69ba      	ldr	r2, [r7, #24]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d105      	bne.n	800bf4c <vTaskSwitchContext+0x58>
 800bf40:	69fb      	ldr	r3, [r7, #28]
 800bf42:	330c      	adds	r3, #12
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	69ba      	ldr	r2, [r7, #24]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d008      	beq.n	800bf5e <vTaskSwitchContext+0x6a>
 800bf4c:	4b27      	ldr	r3, [pc, #156]	@ (800bfec <vTaskSwitchContext+0xf8>)
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	4b26      	ldr	r3, [pc, #152]	@ (800bfec <vTaskSwitchContext+0xf8>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	3334      	adds	r3, #52	@ 0x34
 800bf56:	4619      	mov	r1, r3
 800bf58:	4610      	mov	r0, r2
 800bf5a:	f7f4 fac8 	bl	80004ee <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf5e:	4b24      	ldr	r3, [pc, #144]	@ (800bff0 <vTaskSwitchContext+0xfc>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	fab3 f383 	clz	r3, r3
 800bf6a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bf6c:	7afb      	ldrb	r3, [r7, #11]
 800bf6e:	f1c3 031f 	rsb	r3, r3, #31
 800bf72:	617b      	str	r3, [r7, #20]
 800bf74:	491f      	ldr	r1, [pc, #124]	@ (800bff4 <vTaskSwitchContext+0x100>)
 800bf76:	697a      	ldr	r2, [r7, #20]
 800bf78:	4613      	mov	r3, r2
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	4413      	add	r3, r2
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	440b      	add	r3, r1
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d10b      	bne.n	800bfa0 <vTaskSwitchContext+0xac>
	__asm volatile
 800bf88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf8c:	f383 8811 	msr	BASEPRI, r3
 800bf90:	f3bf 8f6f 	isb	sy
 800bf94:	f3bf 8f4f 	dsb	sy
 800bf98:	607b      	str	r3, [r7, #4]
}
 800bf9a:	bf00      	nop
 800bf9c:	bf00      	nop
 800bf9e:	e7fd      	b.n	800bf9c <vTaskSwitchContext+0xa8>
 800bfa0:	697a      	ldr	r2, [r7, #20]
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	4413      	add	r3, r2
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	4a12      	ldr	r2, [pc, #72]	@ (800bff4 <vTaskSwitchContext+0x100>)
 800bfac:	4413      	add	r3, r2
 800bfae:	613b      	str	r3, [r7, #16]
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	685a      	ldr	r2, [r3, #4]
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	605a      	str	r2, [r3, #4]
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	685a      	ldr	r2, [r3, #4]
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	3308      	adds	r3, #8
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d104      	bne.n	800bfd0 <vTaskSwitchContext+0xdc>
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	685a      	ldr	r2, [r3, #4]
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	605a      	str	r2, [r3, #4]
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	68db      	ldr	r3, [r3, #12]
 800bfd6:	4a05      	ldr	r2, [pc, #20]	@ (800bfec <vTaskSwitchContext+0xf8>)
 800bfd8:	6013      	str	r3, [r2, #0]
}
 800bfda:	bf00      	nop
 800bfdc:	3720      	adds	r7, #32
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	20000730 	.word	0x20000730
 800bfe8:	2000071c 	.word	0x2000071c
 800bfec:	20000608 	.word	0x20000608
 800bff0:	20000710 	.word	0x20000710
 800bff4:	2000060c 	.word	0x2000060c

0800bff8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d10b      	bne.n	800c020 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c00c:	f383 8811 	msr	BASEPRI, r3
 800c010:	f3bf 8f6f 	isb	sy
 800c014:	f3bf 8f4f 	dsb	sy
 800c018:	60fb      	str	r3, [r7, #12]
}
 800c01a:	bf00      	nop
 800c01c:	bf00      	nop
 800c01e:	e7fd      	b.n	800c01c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c020:	4b07      	ldr	r3, [pc, #28]	@ (800c040 <vTaskPlaceOnEventList+0x48>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	3318      	adds	r3, #24
 800c026:	4619      	mov	r1, r3
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f7fe fe0a 	bl	800ac42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c02e:	2101      	movs	r1, #1
 800c030:	6838      	ldr	r0, [r7, #0]
 800c032:	f000 fa6f 	bl	800c514 <prvAddCurrentTaskToDelayedList>
}
 800c036:	bf00      	nop
 800c038:	3710      	adds	r7, #16
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	20000608 	.word	0x20000608

0800c044 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b086      	sub	sp, #24
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d10b      	bne.n	800c072 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c05e:	f383 8811 	msr	BASEPRI, r3
 800c062:	f3bf 8f6f 	isb	sy
 800c066:	f3bf 8f4f 	dsb	sy
 800c06a:	60fb      	str	r3, [r7, #12]
}
 800c06c:	bf00      	nop
 800c06e:	bf00      	nop
 800c070:	e7fd      	b.n	800c06e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	3318      	adds	r3, #24
 800c076:	4618      	mov	r0, r3
 800c078:	f7fe fe1c 	bl	800acb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c07c:	4b1d      	ldr	r3, [pc, #116]	@ (800c0f4 <xTaskRemoveFromEventList+0xb0>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d11c      	bne.n	800c0be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	3304      	adds	r3, #4
 800c088:	4618      	mov	r0, r3
 800c08a:	f7fe fe13 	bl	800acb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c092:	2201      	movs	r2, #1
 800c094:	409a      	lsls	r2, r3
 800c096:	4b18      	ldr	r3, [pc, #96]	@ (800c0f8 <xTaskRemoveFromEventList+0xb4>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4313      	orrs	r3, r2
 800c09c:	4a16      	ldr	r2, [pc, #88]	@ (800c0f8 <xTaskRemoveFromEventList+0xb4>)
 800c09e:	6013      	str	r3, [r2, #0]
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	4413      	add	r3, r2
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	4a13      	ldr	r2, [pc, #76]	@ (800c0fc <xTaskRemoveFromEventList+0xb8>)
 800c0ae:	441a      	add	r2, r3
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	3304      	adds	r3, #4
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	4610      	mov	r0, r2
 800c0b8:	f7fe fd9f 	bl	800abfa <vListInsertEnd>
 800c0bc:	e005      	b.n	800c0ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	3318      	adds	r3, #24
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	480e      	ldr	r0, [pc, #56]	@ (800c100 <xTaskRemoveFromEventList+0xbc>)
 800c0c6:	f7fe fd98 	bl	800abfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0ce:	4b0d      	ldr	r3, [pc, #52]	@ (800c104 <xTaskRemoveFromEventList+0xc0>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d905      	bls.n	800c0e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c0dc:	4b0a      	ldr	r3, [pc, #40]	@ (800c108 <xTaskRemoveFromEventList+0xc4>)
 800c0de:	2201      	movs	r2, #1
 800c0e0:	601a      	str	r2, [r3, #0]
 800c0e2:	e001      	b.n	800c0e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c0e8:	697b      	ldr	r3, [r7, #20]
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3718      	adds	r7, #24
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	20000730 	.word	0x20000730
 800c0f8:	20000710 	.word	0x20000710
 800c0fc:	2000060c 	.word	0x2000060c
 800c100:	200006c8 	.word	0x200006c8
 800c104:	20000608 	.word	0x20000608
 800c108:	2000071c 	.word	0x2000071c

0800c10c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c10c:	b480      	push	{r7}
 800c10e:	b083      	sub	sp, #12
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c114:	4b06      	ldr	r3, [pc, #24]	@ (800c130 <vTaskInternalSetTimeOutState+0x24>)
 800c116:	681a      	ldr	r2, [r3, #0]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c11c:	4b05      	ldr	r3, [pc, #20]	@ (800c134 <vTaskInternalSetTimeOutState+0x28>)
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	605a      	str	r2, [r3, #4]
}
 800c124:	bf00      	nop
 800c126:	370c      	adds	r7, #12
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr
 800c130:	20000720 	.word	0x20000720
 800c134:	2000070c 	.word	0x2000070c

0800c138 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b088      	sub	sp, #32
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d10b      	bne.n	800c160 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c14c:	f383 8811 	msr	BASEPRI, r3
 800c150:	f3bf 8f6f 	isb	sy
 800c154:	f3bf 8f4f 	dsb	sy
 800c158:	613b      	str	r3, [r7, #16]
}
 800c15a:	bf00      	nop
 800c15c:	bf00      	nop
 800c15e:	e7fd      	b.n	800c15c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d10b      	bne.n	800c17e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c16a:	f383 8811 	msr	BASEPRI, r3
 800c16e:	f3bf 8f6f 	isb	sy
 800c172:	f3bf 8f4f 	dsb	sy
 800c176:	60fb      	str	r3, [r7, #12]
}
 800c178:	bf00      	nop
 800c17a:	bf00      	nop
 800c17c:	e7fd      	b.n	800c17a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c17e:	f000 fb63 	bl	800c848 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c182:	4b1d      	ldr	r3, [pc, #116]	@ (800c1f8 <xTaskCheckForTimeOut+0xc0>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	69ba      	ldr	r2, [r7, #24]
 800c18e:	1ad3      	subs	r3, r2, r3
 800c190:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c19a:	d102      	bne.n	800c1a2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c19c:	2300      	movs	r3, #0
 800c19e:	61fb      	str	r3, [r7, #28]
 800c1a0:	e023      	b.n	800c1ea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	4b15      	ldr	r3, [pc, #84]	@ (800c1fc <xTaskCheckForTimeOut+0xc4>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d007      	beq.n	800c1be <xTaskCheckForTimeOut+0x86>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	69ba      	ldr	r2, [r7, #24]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d302      	bcc.n	800c1be <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	61fb      	str	r3, [r7, #28]
 800c1bc:	e015      	b.n	800c1ea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	697a      	ldr	r2, [r7, #20]
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d20b      	bcs.n	800c1e0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	1ad2      	subs	r2, r2, r3
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f7ff ff99 	bl	800c10c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	61fb      	str	r3, [r7, #28]
 800c1de:	e004      	b.n	800c1ea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c1ea:	f000 fb5f 	bl	800c8ac <vPortExitCritical>

	return xReturn;
 800c1ee:	69fb      	ldr	r3, [r7, #28]
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3720      	adds	r7, #32
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	2000070c 	.word	0x2000070c
 800c1fc:	20000720 	.word	0x20000720

0800c200 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c200:	b480      	push	{r7}
 800c202:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c204:	4b03      	ldr	r3, [pc, #12]	@ (800c214 <vTaskMissedYield+0x14>)
 800c206:	2201      	movs	r2, #1
 800c208:	601a      	str	r2, [r3, #0]
}
 800c20a:	bf00      	nop
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr
 800c214:	2000071c 	.word	0x2000071c

0800c218 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c220:	f000 f854 	bl	800c2cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c224:	4b07      	ldr	r3, [pc, #28]	@ (800c244 <prvIdleTask+0x2c>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d907      	bls.n	800c23c <prvIdleTask+0x24>
			{
				taskYIELD();
 800c22c:	4b06      	ldr	r3, [pc, #24]	@ (800c248 <prvIdleTask+0x30>)
 800c22e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c232:	601a      	str	r2, [r3, #0]
 800c234:	f3bf 8f4f 	dsb	sy
 800c238:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800c23c:	f7f4 f950 	bl	80004e0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800c240:	e7ee      	b.n	800c220 <prvIdleTask+0x8>
 800c242:	bf00      	nop
 800c244:	2000060c 	.word	0x2000060c
 800c248:	e000ed04 	.word	0xe000ed04

0800c24c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c252:	2300      	movs	r3, #0
 800c254:	607b      	str	r3, [r7, #4]
 800c256:	e00c      	b.n	800c272 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	4613      	mov	r3, r2
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	4413      	add	r3, r2
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	4a12      	ldr	r2, [pc, #72]	@ (800c2ac <prvInitialiseTaskLists+0x60>)
 800c264:	4413      	add	r3, r2
 800c266:	4618      	mov	r0, r3
 800c268:	f7fe fc9a 	bl	800aba0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	3301      	adds	r3, #1
 800c270:	607b      	str	r3, [r7, #4]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2b06      	cmp	r3, #6
 800c276:	d9ef      	bls.n	800c258 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c278:	480d      	ldr	r0, [pc, #52]	@ (800c2b0 <prvInitialiseTaskLists+0x64>)
 800c27a:	f7fe fc91 	bl	800aba0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c27e:	480d      	ldr	r0, [pc, #52]	@ (800c2b4 <prvInitialiseTaskLists+0x68>)
 800c280:	f7fe fc8e 	bl	800aba0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c284:	480c      	ldr	r0, [pc, #48]	@ (800c2b8 <prvInitialiseTaskLists+0x6c>)
 800c286:	f7fe fc8b 	bl	800aba0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c28a:	480c      	ldr	r0, [pc, #48]	@ (800c2bc <prvInitialiseTaskLists+0x70>)
 800c28c:	f7fe fc88 	bl	800aba0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c290:	480b      	ldr	r0, [pc, #44]	@ (800c2c0 <prvInitialiseTaskLists+0x74>)
 800c292:	f7fe fc85 	bl	800aba0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c296:	4b0b      	ldr	r3, [pc, #44]	@ (800c2c4 <prvInitialiseTaskLists+0x78>)
 800c298:	4a05      	ldr	r2, [pc, #20]	@ (800c2b0 <prvInitialiseTaskLists+0x64>)
 800c29a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c29c:	4b0a      	ldr	r3, [pc, #40]	@ (800c2c8 <prvInitialiseTaskLists+0x7c>)
 800c29e:	4a05      	ldr	r2, [pc, #20]	@ (800c2b4 <prvInitialiseTaskLists+0x68>)
 800c2a0:	601a      	str	r2, [r3, #0]
}
 800c2a2:	bf00      	nop
 800c2a4:	3708      	adds	r7, #8
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	2000060c 	.word	0x2000060c
 800c2b0:	20000698 	.word	0x20000698
 800c2b4:	200006ac 	.word	0x200006ac
 800c2b8:	200006c8 	.word	0x200006c8
 800c2bc:	200006dc 	.word	0x200006dc
 800c2c0:	200006f4 	.word	0x200006f4
 800c2c4:	200006c0 	.word	0x200006c0
 800c2c8:	200006c4 	.word	0x200006c4

0800c2cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c2d2:	e019      	b.n	800c308 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c2d4:	f000 fab8 	bl	800c848 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2d8:	4b10      	ldr	r3, [pc, #64]	@ (800c31c <prvCheckTasksWaitingTermination+0x50>)
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	68db      	ldr	r3, [r3, #12]
 800c2de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	3304      	adds	r3, #4
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7fe fce5 	bl	800acb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c2ea:	4b0d      	ldr	r3, [pc, #52]	@ (800c320 <prvCheckTasksWaitingTermination+0x54>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	3b01      	subs	r3, #1
 800c2f0:	4a0b      	ldr	r2, [pc, #44]	@ (800c320 <prvCheckTasksWaitingTermination+0x54>)
 800c2f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c2f4:	4b0b      	ldr	r3, [pc, #44]	@ (800c324 <prvCheckTasksWaitingTermination+0x58>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	3b01      	subs	r3, #1
 800c2fa:	4a0a      	ldr	r2, [pc, #40]	@ (800c324 <prvCheckTasksWaitingTermination+0x58>)
 800c2fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c2fe:	f000 fad5 	bl	800c8ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f000 f810 	bl	800c328 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c308:	4b06      	ldr	r3, [pc, #24]	@ (800c324 <prvCheckTasksWaitingTermination+0x58>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d1e1      	bne.n	800c2d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c310:	bf00      	nop
 800c312:	bf00      	nop
 800c314:	3708      	adds	r7, #8
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	200006dc 	.word	0x200006dc
 800c320:	20000708 	.word	0x20000708
 800c324:	200006f0 	.word	0x200006f0

0800c328 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b084      	sub	sp, #16
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800c336:	2b00      	cmp	r3, #0
 800c338:	d108      	bne.n	800c34c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c33e:	4618      	mov	r0, r3
 800c340:	f000 fc78 	bl	800cc34 <vPortFree>
				vPortFree( pxTCB );
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f000 fc75 	bl	800cc34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c34a:	e019      	b.n	800c380 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800c352:	2b01      	cmp	r3, #1
 800c354:	d103      	bne.n	800c35e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 fc6c 	bl	800cc34 <vPortFree>
	}
 800c35c:	e010      	b.n	800c380 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800c364:	2b02      	cmp	r3, #2
 800c366:	d00b      	beq.n	800c380 <prvDeleteTCB+0x58>
	__asm volatile
 800c368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c36c:	f383 8811 	msr	BASEPRI, r3
 800c370:	f3bf 8f6f 	isb	sy
 800c374:	f3bf 8f4f 	dsb	sy
 800c378:	60fb      	str	r3, [r7, #12]
}
 800c37a:	bf00      	nop
 800c37c:	bf00      	nop
 800c37e:	e7fd      	b.n	800c37c <prvDeleteTCB+0x54>
	}
 800c380:	bf00      	nop
 800c382:	3710      	adds	r7, #16
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c38e:	4b0c      	ldr	r3, [pc, #48]	@ (800c3c0 <prvResetNextTaskUnblockTime+0x38>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d104      	bne.n	800c3a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c398:	4b0a      	ldr	r3, [pc, #40]	@ (800c3c4 <prvResetNextTaskUnblockTime+0x3c>)
 800c39a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c39e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c3a0:	e008      	b.n	800c3b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3a2:	4b07      	ldr	r3, [pc, #28]	@ (800c3c0 <prvResetNextTaskUnblockTime+0x38>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	68db      	ldr	r3, [r3, #12]
 800c3aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	4a04      	ldr	r2, [pc, #16]	@ (800c3c4 <prvResetNextTaskUnblockTime+0x3c>)
 800c3b2:	6013      	str	r3, [r2, #0]
}
 800c3b4:	bf00      	nop
 800c3b6:	370c      	adds	r7, #12
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr
 800c3c0:	200006c0 	.word	0x200006c0
 800c3c4:	20000728 	.word	0x20000728

0800c3c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b083      	sub	sp, #12
 800c3cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c3ce:	4b0b      	ldr	r3, [pc, #44]	@ (800c3fc <xTaskGetSchedulerState+0x34>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d102      	bne.n	800c3dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	607b      	str	r3, [r7, #4]
 800c3da:	e008      	b.n	800c3ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3dc:	4b08      	ldr	r3, [pc, #32]	@ (800c400 <xTaskGetSchedulerState+0x38>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d102      	bne.n	800c3ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c3e4:	2302      	movs	r3, #2
 800c3e6:	607b      	str	r3, [r7, #4]
 800c3e8:	e001      	b.n	800c3ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c3ee:	687b      	ldr	r3, [r7, #4]
	}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	370c      	adds	r7, #12
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr
 800c3fc:	20000714 	.word	0x20000714
 800c400:	20000730 	.word	0x20000730

0800c404 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c404:	b580      	push	{r7, lr}
 800c406:	b086      	sub	sp, #24
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c410:	2300      	movs	r3, #0
 800c412:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d070      	beq.n	800c4fc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c41a:	4b3b      	ldr	r3, [pc, #236]	@ (800c508 <xTaskPriorityDisinherit+0x104>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	693a      	ldr	r2, [r7, #16]
 800c420:	429a      	cmp	r2, r3
 800c422:	d00b      	beq.n	800c43c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c428:	f383 8811 	msr	BASEPRI, r3
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	60fb      	str	r3, [r7, #12]
}
 800c436:	bf00      	nop
 800c438:	bf00      	nop
 800c43a:	e7fd      	b.n	800c438 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c440:	2b00      	cmp	r3, #0
 800c442:	d10b      	bne.n	800c45c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c448:	f383 8811 	msr	BASEPRI, r3
 800c44c:	f3bf 8f6f 	isb	sy
 800c450:	f3bf 8f4f 	dsb	sy
 800c454:	60bb      	str	r3, [r7, #8]
}
 800c456:	bf00      	nop
 800c458:	bf00      	nop
 800c45a:	e7fd      	b.n	800c458 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c460:	1e5a      	subs	r2, r3, #1
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c46e:	429a      	cmp	r2, r3
 800c470:	d044      	beq.n	800c4fc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c476:	2b00      	cmp	r3, #0
 800c478:	d140      	bne.n	800c4fc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	3304      	adds	r3, #4
 800c47e:	4618      	mov	r0, r3
 800c480:	f7fe fc18 	bl	800acb4 <uxListRemove>
 800c484:	4603      	mov	r3, r0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d115      	bne.n	800c4b6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c48e:	491f      	ldr	r1, [pc, #124]	@ (800c50c <xTaskPriorityDisinherit+0x108>)
 800c490:	4613      	mov	r3, r2
 800c492:	009b      	lsls	r3, r3, #2
 800c494:	4413      	add	r3, r2
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	440b      	add	r3, r1
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d10a      	bne.n	800c4b6 <xTaskPriorityDisinherit+0xb2>
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4a4:	2201      	movs	r2, #1
 800c4a6:	fa02 f303 	lsl.w	r3, r2, r3
 800c4aa:	43da      	mvns	r2, r3
 800c4ac:	4b18      	ldr	r3, [pc, #96]	@ (800c510 <xTaskPriorityDisinherit+0x10c>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4013      	ands	r3, r2
 800c4b2:	4a17      	ldr	r2, [pc, #92]	@ (800c510 <xTaskPriorityDisinherit+0x10c>)
 800c4b4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4c2:	f1c3 0207 	rsb	r2, r3, #7
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	409a      	lsls	r2, r3
 800c4d2:	4b0f      	ldr	r3, [pc, #60]	@ (800c510 <xTaskPriorityDisinherit+0x10c>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	4a0d      	ldr	r2, [pc, #52]	@ (800c510 <xTaskPriorityDisinherit+0x10c>)
 800c4da:	6013      	str	r3, [r2, #0]
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4e0:	4613      	mov	r3, r2
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	4413      	add	r3, r2
 800c4e6:	009b      	lsls	r3, r3, #2
 800c4e8:	4a08      	ldr	r2, [pc, #32]	@ (800c50c <xTaskPriorityDisinherit+0x108>)
 800c4ea:	441a      	add	r2, r3
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	3304      	adds	r3, #4
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	4610      	mov	r0, r2
 800c4f4:	f7fe fb81 	bl	800abfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c4fc:	697b      	ldr	r3, [r7, #20]
	}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3718      	adds	r7, #24
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	20000608 	.word	0x20000608
 800c50c:	2000060c 	.word	0x2000060c
 800c510:	20000710 	.word	0x20000710

0800c514 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c51e:	4b29      	ldr	r3, [pc, #164]	@ (800c5c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c524:	4b28      	ldr	r3, [pc, #160]	@ (800c5c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	3304      	adds	r3, #4
 800c52a:	4618      	mov	r0, r3
 800c52c:	f7fe fbc2 	bl	800acb4 <uxListRemove>
 800c530:	4603      	mov	r3, r0
 800c532:	2b00      	cmp	r3, #0
 800c534:	d10b      	bne.n	800c54e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c536:	4b24      	ldr	r3, [pc, #144]	@ (800c5c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c53c:	2201      	movs	r2, #1
 800c53e:	fa02 f303 	lsl.w	r3, r2, r3
 800c542:	43da      	mvns	r2, r3
 800c544:	4b21      	ldr	r3, [pc, #132]	@ (800c5cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4013      	ands	r3, r2
 800c54a:	4a20      	ldr	r2, [pc, #128]	@ (800c5cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800c54c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c554:	d10a      	bne.n	800c56c <prvAddCurrentTaskToDelayedList+0x58>
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d007      	beq.n	800c56c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c55c:	4b1a      	ldr	r3, [pc, #104]	@ (800c5c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	3304      	adds	r3, #4
 800c562:	4619      	mov	r1, r3
 800c564:	481a      	ldr	r0, [pc, #104]	@ (800c5d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c566:	f7fe fb48 	bl	800abfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c56a:	e026      	b.n	800c5ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c56c:	68fa      	ldr	r2, [r7, #12]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	4413      	add	r3, r2
 800c572:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c574:	4b14      	ldr	r3, [pc, #80]	@ (800c5c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	68ba      	ldr	r2, [r7, #8]
 800c57a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c57c:	68ba      	ldr	r2, [r7, #8]
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	429a      	cmp	r2, r3
 800c582:	d209      	bcs.n	800c598 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c584:	4b13      	ldr	r3, [pc, #76]	@ (800c5d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	4b0f      	ldr	r3, [pc, #60]	@ (800c5c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	3304      	adds	r3, #4
 800c58e:	4619      	mov	r1, r3
 800c590:	4610      	mov	r0, r2
 800c592:	f7fe fb56 	bl	800ac42 <vListInsert>
}
 800c596:	e010      	b.n	800c5ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c598:	4b0f      	ldr	r3, [pc, #60]	@ (800c5d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c59a:	681a      	ldr	r2, [r3, #0]
 800c59c:	4b0a      	ldr	r3, [pc, #40]	@ (800c5c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	3304      	adds	r3, #4
 800c5a2:	4619      	mov	r1, r3
 800c5a4:	4610      	mov	r0, r2
 800c5a6:	f7fe fb4c 	bl	800ac42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c5aa:	4b0c      	ldr	r3, [pc, #48]	@ (800c5dc <prvAddCurrentTaskToDelayedList+0xc8>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	68ba      	ldr	r2, [r7, #8]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d202      	bcs.n	800c5ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c5b4:	4a09      	ldr	r2, [pc, #36]	@ (800c5dc <prvAddCurrentTaskToDelayedList+0xc8>)
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	6013      	str	r3, [r2, #0]
}
 800c5ba:	bf00      	nop
 800c5bc:	3710      	adds	r7, #16
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	2000070c 	.word	0x2000070c
 800c5c8:	20000608 	.word	0x20000608
 800c5cc:	20000710 	.word	0x20000710
 800c5d0:	200006f4 	.word	0x200006f4
 800c5d4:	200006c4 	.word	0x200006c4
 800c5d8:	200006c0 	.word	0x200006c0
 800c5dc:	20000728 	.word	0x20000728

0800c5e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b085      	sub	sp, #20
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	3b04      	subs	r3, #4
 800c5f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c5f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	3b04      	subs	r3, #4
 800c5fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	f023 0201 	bic.w	r2, r3, #1
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	3b04      	subs	r3, #4
 800c60e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c610:	4a0c      	ldr	r2, [pc, #48]	@ (800c644 <pxPortInitialiseStack+0x64>)
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	3b14      	subs	r3, #20
 800c61a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	3b04      	subs	r3, #4
 800c626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f06f 0202 	mvn.w	r2, #2
 800c62e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	3b20      	subs	r3, #32
 800c634:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c636:	68fb      	ldr	r3, [r7, #12]
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3714      	adds	r7, #20
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr
 800c644:	0800c649 	.word	0x0800c649

0800c648 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c648:	b480      	push	{r7}
 800c64a:	b085      	sub	sp, #20
 800c64c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c64e:	2300      	movs	r3, #0
 800c650:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c652:	4b13      	ldr	r3, [pc, #76]	@ (800c6a0 <prvTaskExitError+0x58>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c65a:	d00b      	beq.n	800c674 <prvTaskExitError+0x2c>
	__asm volatile
 800c65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c660:	f383 8811 	msr	BASEPRI, r3
 800c664:	f3bf 8f6f 	isb	sy
 800c668:	f3bf 8f4f 	dsb	sy
 800c66c:	60fb      	str	r3, [r7, #12]
}
 800c66e:	bf00      	nop
 800c670:	bf00      	nop
 800c672:	e7fd      	b.n	800c670 <prvTaskExitError+0x28>
	__asm volatile
 800c674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c678:	f383 8811 	msr	BASEPRI, r3
 800c67c:	f3bf 8f6f 	isb	sy
 800c680:	f3bf 8f4f 	dsb	sy
 800c684:	60bb      	str	r3, [r7, #8]
}
 800c686:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c688:	bf00      	nop
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d0fc      	beq.n	800c68a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c690:	bf00      	nop
 800c692:	bf00      	nop
 800c694:	3714      	adds	r7, #20
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr
 800c69e:	bf00      	nop
 800c6a0:	20000034 	.word	0x20000034
	...

0800c6b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c6b0:	4b07      	ldr	r3, [pc, #28]	@ (800c6d0 <pxCurrentTCBConst2>)
 800c6b2:	6819      	ldr	r1, [r3, #0]
 800c6b4:	6808      	ldr	r0, [r1, #0]
 800c6b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ba:	f380 8809 	msr	PSP, r0
 800c6be:	f3bf 8f6f 	isb	sy
 800c6c2:	f04f 0000 	mov.w	r0, #0
 800c6c6:	f380 8811 	msr	BASEPRI, r0
 800c6ca:	4770      	bx	lr
 800c6cc:	f3af 8000 	nop.w

0800c6d0 <pxCurrentTCBConst2>:
 800c6d0:	20000608 	.word	0x20000608
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c6d4:	bf00      	nop
 800c6d6:	bf00      	nop

0800c6d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c6d8:	4808      	ldr	r0, [pc, #32]	@ (800c6fc <prvPortStartFirstTask+0x24>)
 800c6da:	6800      	ldr	r0, [r0, #0]
 800c6dc:	6800      	ldr	r0, [r0, #0]
 800c6de:	f380 8808 	msr	MSP, r0
 800c6e2:	f04f 0000 	mov.w	r0, #0
 800c6e6:	f380 8814 	msr	CONTROL, r0
 800c6ea:	b662      	cpsie	i
 800c6ec:	b661      	cpsie	f
 800c6ee:	f3bf 8f4f 	dsb	sy
 800c6f2:	f3bf 8f6f 	isb	sy
 800c6f6:	df00      	svc	0
 800c6f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c6fa:	bf00      	nop
 800c6fc:	e000ed08 	.word	0xe000ed08

0800c700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b086      	sub	sp, #24
 800c704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c706:	4b47      	ldr	r3, [pc, #284]	@ (800c824 <xPortStartScheduler+0x124>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4a47      	ldr	r2, [pc, #284]	@ (800c828 <xPortStartScheduler+0x128>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d10b      	bne.n	800c728 <xPortStartScheduler+0x28>
	__asm volatile
 800c710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c714:	f383 8811 	msr	BASEPRI, r3
 800c718:	f3bf 8f6f 	isb	sy
 800c71c:	f3bf 8f4f 	dsb	sy
 800c720:	613b      	str	r3, [r7, #16]
}
 800c722:	bf00      	nop
 800c724:	bf00      	nop
 800c726:	e7fd      	b.n	800c724 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c728:	4b3e      	ldr	r3, [pc, #248]	@ (800c824 <xPortStartScheduler+0x124>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4a3f      	ldr	r2, [pc, #252]	@ (800c82c <xPortStartScheduler+0x12c>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d10b      	bne.n	800c74a <xPortStartScheduler+0x4a>
	__asm volatile
 800c732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c736:	f383 8811 	msr	BASEPRI, r3
 800c73a:	f3bf 8f6f 	isb	sy
 800c73e:	f3bf 8f4f 	dsb	sy
 800c742:	60fb      	str	r3, [r7, #12]
}
 800c744:	bf00      	nop
 800c746:	bf00      	nop
 800c748:	e7fd      	b.n	800c746 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c74a:	4b39      	ldr	r3, [pc, #228]	@ (800c830 <xPortStartScheduler+0x130>)
 800c74c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	b2db      	uxtb	r3, r3
 800c754:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	22ff      	movs	r2, #255	@ 0xff
 800c75a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	b2db      	uxtb	r3, r3
 800c762:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c764:	78fb      	ldrb	r3, [r7, #3]
 800c766:	b2db      	uxtb	r3, r3
 800c768:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c76c:	b2da      	uxtb	r2, r3
 800c76e:	4b31      	ldr	r3, [pc, #196]	@ (800c834 <xPortStartScheduler+0x134>)
 800c770:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c772:	4b31      	ldr	r3, [pc, #196]	@ (800c838 <xPortStartScheduler+0x138>)
 800c774:	2207      	movs	r2, #7
 800c776:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c778:	e009      	b.n	800c78e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c77a:	4b2f      	ldr	r3, [pc, #188]	@ (800c838 <xPortStartScheduler+0x138>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	3b01      	subs	r3, #1
 800c780:	4a2d      	ldr	r2, [pc, #180]	@ (800c838 <xPortStartScheduler+0x138>)
 800c782:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c784:	78fb      	ldrb	r3, [r7, #3]
 800c786:	b2db      	uxtb	r3, r3
 800c788:	005b      	lsls	r3, r3, #1
 800c78a:	b2db      	uxtb	r3, r3
 800c78c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c78e:	78fb      	ldrb	r3, [r7, #3]
 800c790:	b2db      	uxtb	r3, r3
 800c792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c796:	2b80      	cmp	r3, #128	@ 0x80
 800c798:	d0ef      	beq.n	800c77a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c79a:	4b27      	ldr	r3, [pc, #156]	@ (800c838 <xPortStartScheduler+0x138>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f1c3 0307 	rsb	r3, r3, #7
 800c7a2:	2b04      	cmp	r3, #4
 800c7a4:	d00b      	beq.n	800c7be <xPortStartScheduler+0xbe>
	__asm volatile
 800c7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7aa:	f383 8811 	msr	BASEPRI, r3
 800c7ae:	f3bf 8f6f 	isb	sy
 800c7b2:	f3bf 8f4f 	dsb	sy
 800c7b6:	60bb      	str	r3, [r7, #8]
}
 800c7b8:	bf00      	nop
 800c7ba:	bf00      	nop
 800c7bc:	e7fd      	b.n	800c7ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c7be:	4b1e      	ldr	r3, [pc, #120]	@ (800c838 <xPortStartScheduler+0x138>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	021b      	lsls	r3, r3, #8
 800c7c4:	4a1c      	ldr	r2, [pc, #112]	@ (800c838 <xPortStartScheduler+0x138>)
 800c7c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c7c8:	4b1b      	ldr	r3, [pc, #108]	@ (800c838 <xPortStartScheduler+0x138>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c7d0:	4a19      	ldr	r2, [pc, #100]	@ (800c838 <xPortStartScheduler+0x138>)
 800c7d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	b2da      	uxtb	r2, r3
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c7dc:	4b17      	ldr	r3, [pc, #92]	@ (800c83c <xPortStartScheduler+0x13c>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4a16      	ldr	r2, [pc, #88]	@ (800c83c <xPortStartScheduler+0x13c>)
 800c7e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c7e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c7e8:	4b14      	ldr	r3, [pc, #80]	@ (800c83c <xPortStartScheduler+0x13c>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4a13      	ldr	r2, [pc, #76]	@ (800c83c <xPortStartScheduler+0x13c>)
 800c7ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c7f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c7f4:	f000 f8da 	bl	800c9ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c7f8:	4b11      	ldr	r3, [pc, #68]	@ (800c840 <xPortStartScheduler+0x140>)
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c7fe:	f000 f8f9 	bl	800c9f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c802:	4b10      	ldr	r3, [pc, #64]	@ (800c844 <xPortStartScheduler+0x144>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	4a0f      	ldr	r2, [pc, #60]	@ (800c844 <xPortStartScheduler+0x144>)
 800c808:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c80c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c80e:	f7ff ff63 	bl	800c6d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c812:	f7ff fb6f 	bl	800bef4 <vTaskSwitchContext>
	prvTaskExitError();
 800c816:	f7ff ff17 	bl	800c648 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c81a:	2300      	movs	r3, #0
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3718      	adds	r7, #24
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}
 800c824:	e000ed00 	.word	0xe000ed00
 800c828:	410fc271 	.word	0x410fc271
 800c82c:	410fc270 	.word	0x410fc270
 800c830:	e000e400 	.word	0xe000e400
 800c834:	20000734 	.word	0x20000734
 800c838:	20000738 	.word	0x20000738
 800c83c:	e000ed20 	.word	0xe000ed20
 800c840:	20000034 	.word	0x20000034
 800c844:	e000ef34 	.word	0xe000ef34

0800c848 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
	__asm volatile
 800c84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c852:	f383 8811 	msr	BASEPRI, r3
 800c856:	f3bf 8f6f 	isb	sy
 800c85a:	f3bf 8f4f 	dsb	sy
 800c85e:	607b      	str	r3, [r7, #4]
}
 800c860:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c862:	4b10      	ldr	r3, [pc, #64]	@ (800c8a4 <vPortEnterCritical+0x5c>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	3301      	adds	r3, #1
 800c868:	4a0e      	ldr	r2, [pc, #56]	@ (800c8a4 <vPortEnterCritical+0x5c>)
 800c86a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c86c:	4b0d      	ldr	r3, [pc, #52]	@ (800c8a4 <vPortEnterCritical+0x5c>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2b01      	cmp	r3, #1
 800c872:	d110      	bne.n	800c896 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c874:	4b0c      	ldr	r3, [pc, #48]	@ (800c8a8 <vPortEnterCritical+0x60>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	b2db      	uxtb	r3, r3
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d00b      	beq.n	800c896 <vPortEnterCritical+0x4e>
	__asm volatile
 800c87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c882:	f383 8811 	msr	BASEPRI, r3
 800c886:	f3bf 8f6f 	isb	sy
 800c88a:	f3bf 8f4f 	dsb	sy
 800c88e:	603b      	str	r3, [r7, #0]
}
 800c890:	bf00      	nop
 800c892:	bf00      	nop
 800c894:	e7fd      	b.n	800c892 <vPortEnterCritical+0x4a>
	}
}
 800c896:	bf00      	nop
 800c898:	370c      	adds	r7, #12
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr
 800c8a2:	bf00      	nop
 800c8a4:	20000034 	.word	0x20000034
 800c8a8:	e000ed04 	.word	0xe000ed04

0800c8ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b083      	sub	sp, #12
 800c8b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c8b2:	4b12      	ldr	r3, [pc, #72]	@ (800c8fc <vPortExitCritical+0x50>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d10b      	bne.n	800c8d2 <vPortExitCritical+0x26>
	__asm volatile
 800c8ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8be:	f383 8811 	msr	BASEPRI, r3
 800c8c2:	f3bf 8f6f 	isb	sy
 800c8c6:	f3bf 8f4f 	dsb	sy
 800c8ca:	607b      	str	r3, [r7, #4]
}
 800c8cc:	bf00      	nop
 800c8ce:	bf00      	nop
 800c8d0:	e7fd      	b.n	800c8ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c8d2:	4b0a      	ldr	r3, [pc, #40]	@ (800c8fc <vPortExitCritical+0x50>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	4a08      	ldr	r2, [pc, #32]	@ (800c8fc <vPortExitCritical+0x50>)
 800c8da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c8dc:	4b07      	ldr	r3, [pc, #28]	@ (800c8fc <vPortExitCritical+0x50>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d105      	bne.n	800c8f0 <vPortExitCritical+0x44>
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	f383 8811 	msr	BASEPRI, r3
}
 800c8ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c8f0:	bf00      	nop
 800c8f2:	370c      	adds	r7, #12
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr
 800c8fc:	20000034 	.word	0x20000034

0800c900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c900:	f3ef 8009 	mrs	r0, PSP
 800c904:	f3bf 8f6f 	isb	sy
 800c908:	4b15      	ldr	r3, [pc, #84]	@ (800c960 <pxCurrentTCBConst>)
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	f01e 0f10 	tst.w	lr, #16
 800c910:	bf08      	it	eq
 800c912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c91a:	6010      	str	r0, [r2, #0]
 800c91c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c920:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c924:	f380 8811 	msr	BASEPRI, r0
 800c928:	f3bf 8f4f 	dsb	sy
 800c92c:	f3bf 8f6f 	isb	sy
 800c930:	f7ff fae0 	bl	800bef4 <vTaskSwitchContext>
 800c934:	f04f 0000 	mov.w	r0, #0
 800c938:	f380 8811 	msr	BASEPRI, r0
 800c93c:	bc09      	pop	{r0, r3}
 800c93e:	6819      	ldr	r1, [r3, #0]
 800c940:	6808      	ldr	r0, [r1, #0]
 800c942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c946:	f01e 0f10 	tst.w	lr, #16
 800c94a:	bf08      	it	eq
 800c94c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c950:	f380 8809 	msr	PSP, r0
 800c954:	f3bf 8f6f 	isb	sy
 800c958:	4770      	bx	lr
 800c95a:	bf00      	nop
 800c95c:	f3af 8000 	nop.w

0800c960 <pxCurrentTCBConst>:
 800c960:	20000608 	.word	0x20000608
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c964:	bf00      	nop
 800c966:	bf00      	nop

0800c968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af00      	add	r7, sp, #0
	__asm volatile
 800c96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c972:	f383 8811 	msr	BASEPRI, r3
 800c976:	f3bf 8f6f 	isb	sy
 800c97a:	f3bf 8f4f 	dsb	sy
 800c97e:	607b      	str	r3, [r7, #4]
}
 800c980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c982:	f7ff f9fd 	bl	800bd80 <xTaskIncrementTick>
 800c986:	4603      	mov	r3, r0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d003      	beq.n	800c994 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c98c:	4b06      	ldr	r3, [pc, #24]	@ (800c9a8 <SysTick_Handler+0x40>)
 800c98e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c992:	601a      	str	r2, [r3, #0]
 800c994:	2300      	movs	r3, #0
 800c996:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	f383 8811 	msr	BASEPRI, r3
}
 800c99e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c9a0:	bf00      	nop
 800c9a2:	3708      	adds	r7, #8
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	e000ed04 	.word	0xe000ed04

0800c9ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c9b0:	4b0b      	ldr	r3, [pc, #44]	@ (800c9e0 <vPortSetupTimerInterrupt+0x34>)
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c9b6:	4b0b      	ldr	r3, [pc, #44]	@ (800c9e4 <vPortSetupTimerInterrupt+0x38>)
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c9bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c9e8 <vPortSetupTimerInterrupt+0x3c>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a0a      	ldr	r2, [pc, #40]	@ (800c9ec <vPortSetupTimerInterrupt+0x40>)
 800c9c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9c6:	099b      	lsrs	r3, r3, #6
 800c9c8:	4a09      	ldr	r2, [pc, #36]	@ (800c9f0 <vPortSetupTimerInterrupt+0x44>)
 800c9ca:	3b01      	subs	r3, #1
 800c9cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c9ce:	4b04      	ldr	r3, [pc, #16]	@ (800c9e0 <vPortSetupTimerInterrupt+0x34>)
 800c9d0:	2207      	movs	r2, #7
 800c9d2:	601a      	str	r2, [r3, #0]
}
 800c9d4:	bf00      	nop
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9dc:	4770      	bx	lr
 800c9de:	bf00      	nop
 800c9e0:	e000e010 	.word	0xe000e010
 800c9e4:	e000e018 	.word	0xe000e018
 800c9e8:	20000008 	.word	0x20000008
 800c9ec:	10624dd3 	.word	0x10624dd3
 800c9f0:	e000e014 	.word	0xe000e014

0800c9f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c9f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ca04 <vPortEnableVFP+0x10>
 800c9f8:	6801      	ldr	r1, [r0, #0]
 800c9fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c9fe:	6001      	str	r1, [r0, #0]
 800ca00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ca02:	bf00      	nop
 800ca04:	e000ed88 	.word	0xe000ed88

0800ca08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ca08:	b480      	push	{r7}
 800ca0a:	b085      	sub	sp, #20
 800ca0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ca0e:	f3ef 8305 	mrs	r3, IPSR
 800ca12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2b0f      	cmp	r3, #15
 800ca18:	d915      	bls.n	800ca46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ca1a:	4a18      	ldr	r2, [pc, #96]	@ (800ca7c <vPortValidateInterruptPriority+0x74>)
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	4413      	add	r3, r2
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ca24:	4b16      	ldr	r3, [pc, #88]	@ (800ca80 <vPortValidateInterruptPriority+0x78>)
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	7afa      	ldrb	r2, [r7, #11]
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d20b      	bcs.n	800ca46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ca2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca32:	f383 8811 	msr	BASEPRI, r3
 800ca36:	f3bf 8f6f 	isb	sy
 800ca3a:	f3bf 8f4f 	dsb	sy
 800ca3e:	607b      	str	r3, [r7, #4]
}
 800ca40:	bf00      	nop
 800ca42:	bf00      	nop
 800ca44:	e7fd      	b.n	800ca42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ca46:	4b0f      	ldr	r3, [pc, #60]	@ (800ca84 <vPortValidateInterruptPriority+0x7c>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ca4e:	4b0e      	ldr	r3, [pc, #56]	@ (800ca88 <vPortValidateInterruptPriority+0x80>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d90b      	bls.n	800ca6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ca56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca5a:	f383 8811 	msr	BASEPRI, r3
 800ca5e:	f3bf 8f6f 	isb	sy
 800ca62:	f3bf 8f4f 	dsb	sy
 800ca66:	603b      	str	r3, [r7, #0]
}
 800ca68:	bf00      	nop
 800ca6a:	bf00      	nop
 800ca6c:	e7fd      	b.n	800ca6a <vPortValidateInterruptPriority+0x62>
	}
 800ca6e:	bf00      	nop
 800ca70:	3714      	adds	r7, #20
 800ca72:	46bd      	mov	sp, r7
 800ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca78:	4770      	bx	lr
 800ca7a:	bf00      	nop
 800ca7c:	e000e3f0 	.word	0xe000e3f0
 800ca80:	20000734 	.word	0x20000734
 800ca84:	e000ed0c 	.word	0xe000ed0c
 800ca88:	20000738 	.word	0x20000738

0800ca8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b08a      	sub	sp, #40	@ 0x28
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ca94:	2300      	movs	r3, #0
 800ca96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ca98:	f7ff f8c6 	bl	800bc28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ca9c:	4b5f      	ldr	r3, [pc, #380]	@ (800cc1c <pvPortMalloc+0x190>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d101      	bne.n	800caa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800caa4:	f000 f92a 	bl	800ccfc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800caa8:	4b5d      	ldr	r3, [pc, #372]	@ (800cc20 <pvPortMalloc+0x194>)
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	4013      	ands	r3, r2
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	f040 8095 	bne.w	800cbe0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d01e      	beq.n	800cafa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cabc:	2208      	movs	r2, #8
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4413      	add	r3, r2
 800cac2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f003 0307 	and.w	r3, r3, #7
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d015      	beq.n	800cafa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f023 0307 	bic.w	r3, r3, #7
 800cad4:	3308      	adds	r3, #8
 800cad6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f003 0307 	and.w	r3, r3, #7
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d00b      	beq.n	800cafa <pvPortMalloc+0x6e>
	__asm volatile
 800cae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cae6:	f383 8811 	msr	BASEPRI, r3
 800caea:	f3bf 8f6f 	isb	sy
 800caee:	f3bf 8f4f 	dsb	sy
 800caf2:	617b      	str	r3, [r7, #20]
}
 800caf4:	bf00      	nop
 800caf6:	bf00      	nop
 800caf8:	e7fd      	b.n	800caf6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d06f      	beq.n	800cbe0 <pvPortMalloc+0x154>
 800cb00:	4b48      	ldr	r3, [pc, #288]	@ (800cc24 <pvPortMalloc+0x198>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d86a      	bhi.n	800cbe0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cb0a:	4b47      	ldr	r3, [pc, #284]	@ (800cc28 <pvPortMalloc+0x19c>)
 800cb0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cb0e:	4b46      	ldr	r3, [pc, #280]	@ (800cc28 <pvPortMalloc+0x19c>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb14:	e004      	b.n	800cb20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cb16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb22:	685b      	ldr	r3, [r3, #4]
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d903      	bls.n	800cb32 <pvPortMalloc+0xa6>
 800cb2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d1f1      	bne.n	800cb16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cb32:	4b3a      	ldr	r3, [pc, #232]	@ (800cc1c <pvPortMalloc+0x190>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d051      	beq.n	800cbe0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cb3c:	6a3b      	ldr	r3, [r7, #32]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	2208      	movs	r2, #8
 800cb42:	4413      	add	r3, r2
 800cb44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cb46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	6a3b      	ldr	r3, [r7, #32]
 800cb4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cb4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb50:	685a      	ldr	r2, [r3, #4]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	1ad2      	subs	r2, r2, r3
 800cb56:	2308      	movs	r3, #8
 800cb58:	005b      	lsls	r3, r3, #1
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d920      	bls.n	800cba0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cb5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	4413      	add	r3, r2
 800cb64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb66:	69bb      	ldr	r3, [r7, #24]
 800cb68:	f003 0307 	and.w	r3, r3, #7
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d00b      	beq.n	800cb88 <pvPortMalloc+0xfc>
	__asm volatile
 800cb70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb74:	f383 8811 	msr	BASEPRI, r3
 800cb78:	f3bf 8f6f 	isb	sy
 800cb7c:	f3bf 8f4f 	dsb	sy
 800cb80:	613b      	str	r3, [r7, #16]
}
 800cb82:	bf00      	nop
 800cb84:	bf00      	nop
 800cb86:	e7fd      	b.n	800cb84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cb88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb8a:	685a      	ldr	r2, [r3, #4]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	1ad2      	subs	r2, r2, r3
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cb94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb96:	687a      	ldr	r2, [r7, #4]
 800cb98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cb9a:	69b8      	ldr	r0, [r7, #24]
 800cb9c:	f000 f910 	bl	800cdc0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cba0:	4b20      	ldr	r3, [pc, #128]	@ (800cc24 <pvPortMalloc+0x198>)
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	1ad3      	subs	r3, r2, r3
 800cbaa:	4a1e      	ldr	r2, [pc, #120]	@ (800cc24 <pvPortMalloc+0x198>)
 800cbac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cbae:	4b1d      	ldr	r3, [pc, #116]	@ (800cc24 <pvPortMalloc+0x198>)
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	4b1e      	ldr	r3, [pc, #120]	@ (800cc2c <pvPortMalloc+0x1a0>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d203      	bcs.n	800cbc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cbba:	4b1a      	ldr	r3, [pc, #104]	@ (800cc24 <pvPortMalloc+0x198>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	4a1b      	ldr	r2, [pc, #108]	@ (800cc2c <pvPortMalloc+0x1a0>)
 800cbc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc4:	685a      	ldr	r2, [r3, #4]
 800cbc6:	4b16      	ldr	r3, [pc, #88]	@ (800cc20 <pvPortMalloc+0x194>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	431a      	orrs	r2, r3
 800cbcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cbd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cbd6:	4b16      	ldr	r3, [pc, #88]	@ (800cc30 <pvPortMalloc+0x1a4>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	3301      	adds	r3, #1
 800cbdc:	4a14      	ldr	r2, [pc, #80]	@ (800cc30 <pvPortMalloc+0x1a4>)
 800cbde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cbe0:	f7ff f830 	bl	800bc44 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d101      	bne.n	800cbee <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800cbea:	f7f3 fc8b 	bl	8000504 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbee:	69fb      	ldr	r3, [r7, #28]
 800cbf0:	f003 0307 	and.w	r3, r3, #7
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d00b      	beq.n	800cc10 <pvPortMalloc+0x184>
	__asm volatile
 800cbf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbfc:	f383 8811 	msr	BASEPRI, r3
 800cc00:	f3bf 8f6f 	isb	sy
 800cc04:	f3bf 8f4f 	dsb	sy
 800cc08:	60fb      	str	r3, [r7, #12]
}
 800cc0a:	bf00      	nop
 800cc0c:	bf00      	nop
 800cc0e:	e7fd      	b.n	800cc0c <pvPortMalloc+0x180>
	return pvReturn;
 800cc10:	69fb      	ldr	r3, [r7, #28]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3728      	adds	r7, #40	@ 0x28
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	20008744 	.word	0x20008744
 800cc20:	20008758 	.word	0x20008758
 800cc24:	20008748 	.word	0x20008748
 800cc28:	2000873c 	.word	0x2000873c
 800cc2c:	2000874c 	.word	0x2000874c
 800cc30:	20008750 	.word	0x20008750

0800cc34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b086      	sub	sp, #24
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d04f      	beq.n	800cce6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cc46:	2308      	movs	r3, #8
 800cc48:	425b      	negs	r3, r3
 800cc4a:	697a      	ldr	r2, [r7, #20]
 800cc4c:	4413      	add	r3, r2
 800cc4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	685a      	ldr	r2, [r3, #4]
 800cc58:	4b25      	ldr	r3, [pc, #148]	@ (800ccf0 <vPortFree+0xbc>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4013      	ands	r3, r2
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d10b      	bne.n	800cc7a <vPortFree+0x46>
	__asm volatile
 800cc62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc66:	f383 8811 	msr	BASEPRI, r3
 800cc6a:	f3bf 8f6f 	isb	sy
 800cc6e:	f3bf 8f4f 	dsb	sy
 800cc72:	60fb      	str	r3, [r7, #12]
}
 800cc74:	bf00      	nop
 800cc76:	bf00      	nop
 800cc78:	e7fd      	b.n	800cc76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d00b      	beq.n	800cc9a <vPortFree+0x66>
	__asm volatile
 800cc82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc86:	f383 8811 	msr	BASEPRI, r3
 800cc8a:	f3bf 8f6f 	isb	sy
 800cc8e:	f3bf 8f4f 	dsb	sy
 800cc92:	60bb      	str	r3, [r7, #8]
}
 800cc94:	bf00      	nop
 800cc96:	bf00      	nop
 800cc98:	e7fd      	b.n	800cc96 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	685a      	ldr	r2, [r3, #4]
 800cc9e:	4b14      	ldr	r3, [pc, #80]	@ (800ccf0 <vPortFree+0xbc>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	4013      	ands	r3, r2
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d01e      	beq.n	800cce6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d11a      	bne.n	800cce6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	685a      	ldr	r2, [r3, #4]
 800ccb4:	4b0e      	ldr	r3, [pc, #56]	@ (800ccf0 <vPortFree+0xbc>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	43db      	mvns	r3, r3
 800ccba:	401a      	ands	r2, r3
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ccc0:	f7fe ffb2 	bl	800bc28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	685a      	ldr	r2, [r3, #4]
 800ccc8:	4b0a      	ldr	r3, [pc, #40]	@ (800ccf4 <vPortFree+0xc0>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	4413      	add	r3, r2
 800ccce:	4a09      	ldr	r2, [pc, #36]	@ (800ccf4 <vPortFree+0xc0>)
 800ccd0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ccd2:	6938      	ldr	r0, [r7, #16]
 800ccd4:	f000 f874 	bl	800cdc0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ccd8:	4b07      	ldr	r3, [pc, #28]	@ (800ccf8 <vPortFree+0xc4>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	3301      	adds	r3, #1
 800ccde:	4a06      	ldr	r2, [pc, #24]	@ (800ccf8 <vPortFree+0xc4>)
 800cce0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cce2:	f7fe ffaf 	bl	800bc44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cce6:	bf00      	nop
 800cce8:	3718      	adds	r7, #24
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	20008758 	.word	0x20008758
 800ccf4:	20008748 	.word	0x20008748
 800ccf8:	20008754 	.word	0x20008754

0800ccfc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b085      	sub	sp, #20
 800cd00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cd02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cd08:	4b27      	ldr	r3, [pc, #156]	@ (800cda8 <prvHeapInit+0xac>)
 800cd0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f003 0307 	and.w	r3, r3, #7
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d00c      	beq.n	800cd30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	3307      	adds	r3, #7
 800cd1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f023 0307 	bic.w	r3, r3, #7
 800cd22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cd24:	68ba      	ldr	r2, [r7, #8]
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	1ad3      	subs	r3, r2, r3
 800cd2a:	4a1f      	ldr	r2, [pc, #124]	@ (800cda8 <prvHeapInit+0xac>)
 800cd2c:	4413      	add	r3, r2
 800cd2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cd34:	4a1d      	ldr	r2, [pc, #116]	@ (800cdac <prvHeapInit+0xb0>)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cd3a:	4b1c      	ldr	r3, [pc, #112]	@ (800cdac <prvHeapInit+0xb0>)
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	68ba      	ldr	r2, [r7, #8]
 800cd44:	4413      	add	r3, r2
 800cd46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cd48:	2208      	movs	r2, #8
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	1a9b      	subs	r3, r3, r2
 800cd4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f023 0307 	bic.w	r3, r3, #7
 800cd56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	4a15      	ldr	r2, [pc, #84]	@ (800cdb0 <prvHeapInit+0xb4>)
 800cd5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cd5e:	4b14      	ldr	r3, [pc, #80]	@ (800cdb0 <prvHeapInit+0xb4>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	2200      	movs	r2, #0
 800cd64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cd66:	4b12      	ldr	r3, [pc, #72]	@ (800cdb0 <prvHeapInit+0xb4>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	68fa      	ldr	r2, [r7, #12]
 800cd76:	1ad2      	subs	r2, r2, r3
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd7c:	4b0c      	ldr	r3, [pc, #48]	@ (800cdb0 <prvHeapInit+0xb4>)
 800cd7e:	681a      	ldr	r2, [r3, #0]
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	4a0a      	ldr	r2, [pc, #40]	@ (800cdb4 <prvHeapInit+0xb8>)
 800cd8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	685b      	ldr	r3, [r3, #4]
 800cd90:	4a09      	ldr	r2, [pc, #36]	@ (800cdb8 <prvHeapInit+0xbc>)
 800cd92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cd94:	4b09      	ldr	r3, [pc, #36]	@ (800cdbc <prvHeapInit+0xc0>)
 800cd96:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cd9a:	601a      	str	r2, [r3, #0]
}
 800cd9c:	bf00      	nop
 800cd9e:	3714      	adds	r7, #20
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr
 800cda8:	2000073c 	.word	0x2000073c
 800cdac:	2000873c 	.word	0x2000873c
 800cdb0:	20008744 	.word	0x20008744
 800cdb4:	2000874c 	.word	0x2000874c
 800cdb8:	20008748 	.word	0x20008748
 800cdbc:	20008758 	.word	0x20008758

0800cdc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cdc8:	4b28      	ldr	r3, [pc, #160]	@ (800ce6c <prvInsertBlockIntoFreeList+0xac>)
 800cdca:	60fb      	str	r3, [r7, #12]
 800cdcc:	e002      	b.n	800cdd4 <prvInsertBlockIntoFreeList+0x14>
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	60fb      	str	r3, [r7, #12]
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	687a      	ldr	r2, [r7, #4]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d8f7      	bhi.n	800cdce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	68ba      	ldr	r2, [r7, #8]
 800cde8:	4413      	add	r3, r2
 800cdea:	687a      	ldr	r2, [r7, #4]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d108      	bne.n	800ce02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	685a      	ldr	r2, [r3, #4]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	441a      	add	r2, r3
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	68ba      	ldr	r2, [r7, #8]
 800ce0c:	441a      	add	r2, r3
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d118      	bne.n	800ce48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	4b15      	ldr	r3, [pc, #84]	@ (800ce70 <prvInsertBlockIntoFreeList+0xb0>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d00d      	beq.n	800ce3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	685a      	ldr	r2, [r3, #4]
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	441a      	add	r2, r3
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	601a      	str	r2, [r3, #0]
 800ce3c:	e008      	b.n	800ce50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ce3e:	4b0c      	ldr	r3, [pc, #48]	@ (800ce70 <prvInsertBlockIntoFreeList+0xb0>)
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	601a      	str	r2, [r3, #0]
 800ce46:	e003      	b.n	800ce50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681a      	ldr	r2, [r3, #0]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ce50:	68fa      	ldr	r2, [r7, #12]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d002      	beq.n	800ce5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce5e:	bf00      	nop
 800ce60:	3714      	adds	r7, #20
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr
 800ce6a:	bf00      	nop
 800ce6c:	2000873c 	.word	0x2000873c
 800ce70:	20008744 	.word	0x20008744

0800ce74 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800ce78:	2200      	movs	r2, #0
 800ce7a:	490e      	ldr	r1, [pc, #56]	@ (800ceb4 <MX_USB_HOST_Init+0x40>)
 800ce7c:	480e      	ldr	r0, [pc, #56]	@ (800ceb8 <MX_USB_HOST_Init+0x44>)
 800ce7e:	f7fb fe09 	bl	8008a94 <USBH_Init>
 800ce82:	4603      	mov	r3, r0
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d001      	beq.n	800ce8c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ce88:	f7f3 ffe2 	bl	8000e50 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800ce8c:	490b      	ldr	r1, [pc, #44]	@ (800cebc <MX_USB_HOST_Init+0x48>)
 800ce8e:	480a      	ldr	r0, [pc, #40]	@ (800ceb8 <MX_USB_HOST_Init+0x44>)
 800ce90:	f7fb fed5 	bl	8008c3e <USBH_RegisterClass>
 800ce94:	4603      	mov	r3, r0
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d001      	beq.n	800ce9e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ce9a:	f7f3 ffd9 	bl	8000e50 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800ce9e:	4806      	ldr	r0, [pc, #24]	@ (800ceb8 <MX_USB_HOST_Init+0x44>)
 800cea0:	f7fb ff59 	bl	8008d56 <USBH_Start>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d001      	beq.n	800ceae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ceaa:	f7f3 ffd1 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ceae:	bf00      	nop
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	0800cec1 	.word	0x0800cec1
 800ceb8:	2000875c 	.word	0x2000875c
 800cebc:	20000014 	.word	0x20000014

0800cec0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	460b      	mov	r3, r1
 800ceca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800cecc:	78fb      	ldrb	r3, [r7, #3]
 800cece:	3b01      	subs	r3, #1
 800ced0:	2b04      	cmp	r3, #4
 800ced2:	d819      	bhi.n	800cf08 <USBH_UserProcess+0x48>
 800ced4:	a201      	add	r2, pc, #4	@ (adr r2, 800cedc <USBH_UserProcess+0x1c>)
 800ced6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceda:	bf00      	nop
 800cedc:	0800cf09 	.word	0x0800cf09
 800cee0:	0800cef9 	.word	0x0800cef9
 800cee4:	0800cf09 	.word	0x0800cf09
 800cee8:	0800cf01 	.word	0x0800cf01
 800ceec:	0800cef1 	.word	0x0800cef1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800cef0:	4b09      	ldr	r3, [pc, #36]	@ (800cf18 <USBH_UserProcess+0x58>)
 800cef2:	2203      	movs	r2, #3
 800cef4:	701a      	strb	r2, [r3, #0]
  break;
 800cef6:	e008      	b.n	800cf0a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800cef8:	4b07      	ldr	r3, [pc, #28]	@ (800cf18 <USBH_UserProcess+0x58>)
 800cefa:	2202      	movs	r2, #2
 800cefc:	701a      	strb	r2, [r3, #0]
  break;
 800cefe:	e004      	b.n	800cf0a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800cf00:	4b05      	ldr	r3, [pc, #20]	@ (800cf18 <USBH_UserProcess+0x58>)
 800cf02:	2201      	movs	r2, #1
 800cf04:	701a      	strb	r2, [r3, #0]
  break;
 800cf06:	e000      	b.n	800cf0a <USBH_UserProcess+0x4a>

  default:
  break;
 800cf08:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800cf0a:	bf00      	nop
 800cf0c:	370c      	adds	r7, #12
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr
 800cf16:	bf00      	nop
 800cf18:	20008b40 	.word	0x20008b40

0800cf1c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b08a      	sub	sp, #40	@ 0x28
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf24:	f107 0314 	add.w	r3, r7, #20
 800cf28:	2200      	movs	r2, #0
 800cf2a:	601a      	str	r2, [r3, #0]
 800cf2c:	605a      	str	r2, [r3, #4]
 800cf2e:	609a      	str	r2, [r3, #8]
 800cf30:	60da      	str	r2, [r3, #12]
 800cf32:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	4a24      	ldr	r2, [pc, #144]	@ (800cfcc <HAL_HCD_MspInit+0xb0>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d141      	bne.n	800cfc2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cf3e:	2300      	movs	r3, #0
 800cf40:	613b      	str	r3, [r7, #16]
 800cf42:	4b23      	ldr	r3, [pc, #140]	@ (800cfd0 <HAL_HCD_MspInit+0xb4>)
 800cf44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf46:	4a22      	ldr	r2, [pc, #136]	@ (800cfd0 <HAL_HCD_MspInit+0xb4>)
 800cf48:	f043 0302 	orr.w	r3, r3, #2
 800cf4c:	6313      	str	r3, [r2, #48]	@ 0x30
 800cf4e:	4b20      	ldr	r3, [pc, #128]	@ (800cfd0 <HAL_HCD_MspInit+0xb4>)
 800cf50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf52:	f003 0302 	and.w	r3, r3, #2
 800cf56:	613b      	str	r3, [r7, #16]
 800cf58:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800cf5a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800cf5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf60:	2302      	movs	r3, #2
 800cf62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf64:	2300      	movs	r3, #0
 800cf66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800cf6c:	230c      	movs	r3, #12
 800cf6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cf70:	f107 0314 	add.w	r3, r7, #20
 800cf74:	4619      	mov	r1, r3
 800cf76:	4817      	ldr	r0, [pc, #92]	@ (800cfd4 <HAL_HCD_MspInit+0xb8>)
 800cf78:	f7f4 ffa8 	bl	8001ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800cf7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cf80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cf82:	2300      	movs	r3, #0
 800cf84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf86:	2300      	movs	r3, #0
 800cf88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800cf8a:	f107 0314 	add.w	r3, r7, #20
 800cf8e:	4619      	mov	r1, r3
 800cf90:	4810      	ldr	r0, [pc, #64]	@ (800cfd4 <HAL_HCD_MspInit+0xb8>)
 800cf92:	f7f4 ff9b 	bl	8001ecc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800cf96:	2300      	movs	r3, #0
 800cf98:	60fb      	str	r3, [r7, #12]
 800cf9a:	4b0d      	ldr	r3, [pc, #52]	@ (800cfd0 <HAL_HCD_MspInit+0xb4>)
 800cf9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf9e:	4a0c      	ldr	r2, [pc, #48]	@ (800cfd0 <HAL_HCD_MspInit+0xb4>)
 800cfa0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800cfa4:	6313      	str	r3, [r2, #48]	@ 0x30
 800cfa6:	4b0a      	ldr	r3, [pc, #40]	@ (800cfd0 <HAL_HCD_MspInit+0xb4>)
 800cfa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cfae:	60fb      	str	r3, [r7, #12]
 800cfb0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	2105      	movs	r1, #5
 800cfb6:	204d      	movs	r0, #77	@ 0x4d
 800cfb8:	f7f4 fd56 	bl	8001a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800cfbc:	204d      	movs	r0, #77	@ 0x4d
 800cfbe:	f7f4 fd6f 	bl	8001aa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800cfc2:	bf00      	nop
 800cfc4:	3728      	adds	r7, #40	@ 0x28
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	40040000 	.word	0x40040000
 800cfd0:	40023800 	.word	0x40023800
 800cfd4:	40020400 	.word	0x40020400

0800cfd8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7fc fb67 	bl	80096ba <USBH_LL_IncTimer>
}
 800cfec:	bf00      	nop
 800cfee:	3708      	adds	r7, #8
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b082      	sub	sp, #8
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d002:	4618      	mov	r0, r3
 800d004:	f7fc fbab 	bl	800975e <USBH_LL_Connect>
}
 800d008:	bf00      	nop
 800d00a:	3708      	adds	r7, #8
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b082      	sub	sp, #8
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d01e:	4618      	mov	r0, r3
 800d020:	f7fc fbc0 	bl	80097a4 <USBH_LL_Disconnect>
}
 800d024:	bf00      	nop
 800d026:	3708      	adds	r7, #8
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	460b      	mov	r3, r1
 800d036:	70fb      	strb	r3, [r7, #3]
 800d038:	4613      	mov	r3, r2
 800d03a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d042:	4618      	mov	r0, r3
 800d044:	f7fc fbf5 	bl	8009832 <USBH_LL_NotifyURBChange>
#endif
}
 800d048:	bf00      	nop
 800d04a:	3708      	adds	r7, #8
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}

0800d050 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d05e:	4618      	mov	r0, r3
 800d060:	f7fc fb55 	bl	800970e <USBH_LL_PortEnabled>
}
 800d064:	bf00      	nop
 800d066:	3708      	adds	r7, #8
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}

0800d06c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d07a:	4618      	mov	r0, r3
 800d07c:	f7fc fb61 	bl	8009742 <USBH_LL_PortDisabled>
}
 800d080:	bf00      	nop
 800d082:	3708      	adds	r7, #8
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b082      	sub	sp, #8
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800d096:	2b00      	cmp	r3, #0
 800d098:	d132      	bne.n	800d100 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800d09a:	4a1c      	ldr	r2, [pc, #112]	@ (800d10c <USBH_LL_Init+0x84>)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	4a19      	ldr	r2, [pc, #100]	@ (800d10c <USBH_LL_Init+0x84>)
 800d0a6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800d0aa:	4b18      	ldr	r3, [pc, #96]	@ (800d10c <USBH_LL_Init+0x84>)
 800d0ac:	4a18      	ldr	r2, [pc, #96]	@ (800d110 <USBH_LL_Init+0x88>)
 800d0ae:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800d0b0:	4b16      	ldr	r3, [pc, #88]	@ (800d10c <USBH_LL_Init+0x84>)
 800d0b2:	220c      	movs	r2, #12
 800d0b4:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800d0b6:	4b15      	ldr	r3, [pc, #84]	@ (800d10c <USBH_LL_Init+0x84>)
 800d0b8:	2201      	movs	r2, #1
 800d0ba:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800d0bc:	4b13      	ldr	r3, [pc, #76]	@ (800d10c <USBH_LL_Init+0x84>)
 800d0be:	2200      	movs	r2, #0
 800d0c0:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800d0c2:	4b12      	ldr	r3, [pc, #72]	@ (800d10c <USBH_LL_Init+0x84>)
 800d0c4:	2202      	movs	r2, #2
 800d0c6:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800d0c8:	4b10      	ldr	r3, [pc, #64]	@ (800d10c <USBH_LL_Init+0x84>)
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800d0ce:	4b0f      	ldr	r3, [pc, #60]	@ (800d10c <USBH_LL_Init+0x84>)
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800d0d4:	4b0d      	ldr	r3, [pc, #52]	@ (800d10c <USBH_LL_Init+0x84>)
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800d0da:	4b0c      	ldr	r3, [pc, #48]	@ (800d10c <USBH_LL_Init+0x84>)
 800d0dc:	2200      	movs	r2, #0
 800d0de:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800d0e0:	480a      	ldr	r0, [pc, #40]	@ (800d10c <USBH_LL_Init+0x84>)
 800d0e2:	f7f5 f8d2 	bl	800228a <HAL_HCD_Init>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d001      	beq.n	800d0f0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800d0ec:	f7f3 feb0 	bl	8000e50 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800d0f0:	4806      	ldr	r0, [pc, #24]	@ (800d10c <USBH_LL_Init+0x84>)
 800d0f2:	f7f5 fd33 	bl	8002b5c <HAL_HCD_GetCurrentFrame>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7fc face 	bl	800969c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d100:	2300      	movs	r3, #0
}
 800d102:	4618      	mov	r0, r3
 800d104:	3708      	adds	r7, #8
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	20008b44 	.word	0x20008b44
 800d110:	40040000 	.word	0x40040000

0800d114 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b084      	sub	sp, #16
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d11c:	2300      	movs	r3, #0
 800d11e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d120:	2300      	movs	r3, #0
 800d122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7f5 fc9e 	bl	8002a6c <HAL_HCD_Start>
 800d130:	4603      	mov	r3, r0
 800d132:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d134:	7bfb      	ldrb	r3, [r7, #15]
 800d136:	4618      	mov	r0, r3
 800d138:	f000 f95e 	bl	800d3f8 <USBH_Get_USB_Status>
 800d13c:	4603      	mov	r3, r0
 800d13e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d140:	7bbb      	ldrb	r3, [r7, #14]
}
 800d142:	4618      	mov	r0, r3
 800d144:	3710      	adds	r7, #16
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}

0800d14a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d14a:	b580      	push	{r7, lr}
 800d14c:	b084      	sub	sp, #16
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d152:	2300      	movs	r3, #0
 800d154:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d156:	2300      	movs	r3, #0
 800d158:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d160:	4618      	mov	r0, r3
 800d162:	f7f5 fca6 	bl	8002ab2 <HAL_HCD_Stop>
 800d166:	4603      	mov	r3, r0
 800d168:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d16a:	7bfb      	ldrb	r3, [r7, #15]
 800d16c:	4618      	mov	r0, r3
 800d16e:	f000 f943 	bl	800d3f8 <USBH_Get_USB_Status>
 800d172:	4603      	mov	r3, r0
 800d174:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d176:	7bbb      	ldrb	r3, [r7, #14]
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3710      	adds	r7, #16
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d188:	2301      	movs	r3, #1
 800d18a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d192:	4618      	mov	r0, r3
 800d194:	f7f5 fcf0 	bl	8002b78 <HAL_HCD_GetCurrentSpeed>
 800d198:	4603      	mov	r3, r0
 800d19a:	2b02      	cmp	r3, #2
 800d19c:	d00c      	beq.n	800d1b8 <USBH_LL_GetSpeed+0x38>
 800d19e:	2b02      	cmp	r3, #2
 800d1a0:	d80d      	bhi.n	800d1be <USBH_LL_GetSpeed+0x3e>
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d002      	beq.n	800d1ac <USBH_LL_GetSpeed+0x2c>
 800d1a6:	2b01      	cmp	r3, #1
 800d1a8:	d003      	beq.n	800d1b2 <USBH_LL_GetSpeed+0x32>
 800d1aa:	e008      	b.n	800d1be <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	73fb      	strb	r3, [r7, #15]
    break;
 800d1b0:	e008      	b.n	800d1c4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	73fb      	strb	r3, [r7, #15]
    break;
 800d1b6:	e005      	b.n	800d1c4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d1b8:	2302      	movs	r3, #2
 800d1ba:	73fb      	strb	r3, [r7, #15]
    break;
 800d1bc:	e002      	b.n	800d1c4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d1be:	2301      	movs	r3, #1
 800d1c0:	73fb      	strb	r3, [r7, #15]
    break;
 800d1c2:	bf00      	nop
  }
  return  speed;
 800d1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3710      	adds	r7, #16
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b084      	sub	sp, #16
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f7f5 fc81 	bl	8002aec <HAL_HCD_ResetPort>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d1ee:	7bfb      	ldrb	r3, [r7, #15]
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f000 f901 	bl	800d3f8 <USBH_Get_USB_Status>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3710      	adds	r7, #16
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}

0800d204 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b082      	sub	sp, #8
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	460b      	mov	r3, r1
 800d20e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d216:	78fa      	ldrb	r2, [r7, #3]
 800d218:	4611      	mov	r1, r2
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7f5 fc89 	bl	8002b32 <HAL_HCD_HC_GetXferCount>
 800d220:	4603      	mov	r3, r0
}
 800d222:	4618      	mov	r0, r3
 800d224:	3708      	adds	r7, #8
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}

0800d22a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d22a:	b590      	push	{r4, r7, lr}
 800d22c:	b089      	sub	sp, #36	@ 0x24
 800d22e:	af04      	add	r7, sp, #16
 800d230:	6078      	str	r0, [r7, #4]
 800d232:	4608      	mov	r0, r1
 800d234:	4611      	mov	r1, r2
 800d236:	461a      	mov	r2, r3
 800d238:	4603      	mov	r3, r0
 800d23a:	70fb      	strb	r3, [r7, #3]
 800d23c:	460b      	mov	r3, r1
 800d23e:	70bb      	strb	r3, [r7, #2]
 800d240:	4613      	mov	r3, r2
 800d242:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d244:	2300      	movs	r3, #0
 800d246:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d248:	2300      	movs	r3, #0
 800d24a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800d252:	787c      	ldrb	r4, [r7, #1]
 800d254:	78ba      	ldrb	r2, [r7, #2]
 800d256:	78f9      	ldrb	r1, [r7, #3]
 800d258:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d25a:	9302      	str	r3, [sp, #8]
 800d25c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d260:	9301      	str	r3, [sp, #4]
 800d262:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d266:	9300      	str	r3, [sp, #0]
 800d268:	4623      	mov	r3, r4
 800d26a:	f7f5 f875 	bl	8002358 <HAL_HCD_HC_Init>
 800d26e:	4603      	mov	r3, r0
 800d270:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d272:	7bfb      	ldrb	r3, [r7, #15]
 800d274:	4618      	mov	r0, r3
 800d276:	f000 f8bf 	bl	800d3f8 <USBH_Get_USB_Status>
 800d27a:	4603      	mov	r3, r0
 800d27c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d27e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d280:	4618      	mov	r0, r3
 800d282:	3714      	adds	r7, #20
 800d284:	46bd      	mov	sp, r7
 800d286:	bd90      	pop	{r4, r7, pc}

0800d288 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b084      	sub	sp, #16
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	460b      	mov	r3, r1
 800d292:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d294:	2300      	movs	r3, #0
 800d296:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d298:	2300      	movs	r3, #0
 800d29a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d2a2:	78fa      	ldrb	r2, [r7, #3]
 800d2a4:	4611      	mov	r1, r2
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7f5 f90e 	bl	80024c8 <HAL_HCD_HC_Halt>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d2b0:	7bfb      	ldrb	r3, [r7, #15]
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f000 f8a0 	bl	800d3f8 <USBH_Get_USB_Status>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3710      	adds	r7, #16
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}

0800d2c6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d2c6:	b590      	push	{r4, r7, lr}
 800d2c8:	b089      	sub	sp, #36	@ 0x24
 800d2ca:	af04      	add	r7, sp, #16
 800d2cc:	6078      	str	r0, [r7, #4]
 800d2ce:	4608      	mov	r0, r1
 800d2d0:	4611      	mov	r1, r2
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	70fb      	strb	r3, [r7, #3]
 800d2d8:	460b      	mov	r3, r1
 800d2da:	70bb      	strb	r3, [r7, #2]
 800d2dc:	4613      	mov	r3, r2
 800d2de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800d2ee:	787c      	ldrb	r4, [r7, #1]
 800d2f0:	78ba      	ldrb	r2, [r7, #2]
 800d2f2:	78f9      	ldrb	r1, [r7, #3]
 800d2f4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d2f8:	9303      	str	r3, [sp, #12]
 800d2fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d2fc:	9302      	str	r3, [sp, #8]
 800d2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d300:	9301      	str	r3, [sp, #4]
 800d302:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d306:	9300      	str	r3, [sp, #0]
 800d308:	4623      	mov	r3, r4
 800d30a:	f7f5 f901 	bl	8002510 <HAL_HCD_HC_SubmitRequest>
 800d30e:	4603      	mov	r3, r0
 800d310:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d312:	7bfb      	ldrb	r3, [r7, #15]
 800d314:	4618      	mov	r0, r3
 800d316:	f000 f86f 	bl	800d3f8 <USBH_Get_USB_Status>
 800d31a:	4603      	mov	r3, r0
 800d31c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d31e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d320:	4618      	mov	r0, r3
 800d322:	3714      	adds	r7, #20
 800d324:	46bd      	mov	sp, r7
 800d326:	bd90      	pop	{r4, r7, pc}

0800d328 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	460b      	mov	r3, r1
 800d332:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d33a:	78fa      	ldrb	r2, [r7, #3]
 800d33c:	4611      	mov	r1, r2
 800d33e:	4618      	mov	r0, r3
 800d340:	f7f5 fbe2 	bl	8002b08 <HAL_HCD_HC_GetURBState>
 800d344:	4603      	mov	r3, r0
}
 800d346:	4618      	mov	r0, r3
 800d348:	3708      	adds	r7, #8
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}

0800d34e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d34e:	b580      	push	{r7, lr}
 800d350:	b082      	sub	sp, #8
 800d352:	af00      	add	r7, sp, #0
 800d354:	6078      	str	r0, [r7, #4]
 800d356:	460b      	mov	r3, r1
 800d358:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800d360:	2b00      	cmp	r3, #0
 800d362:	d103      	bne.n	800d36c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800d364:	78fb      	ldrb	r3, [r7, #3]
 800d366:	4618      	mov	r0, r3
 800d368:	f000 f872 	bl	800d450 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d36c:	20c8      	movs	r0, #200	@ 0xc8
 800d36e:	f7f4 fa9f 	bl	80018b0 <HAL_Delay>
  return USBH_OK;
 800d372:	2300      	movs	r3, #0
}
 800d374:	4618      	mov	r0, r3
 800d376:	3708      	adds	r7, #8
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}

0800d37c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b085      	sub	sp, #20
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	460b      	mov	r3, r1
 800d386:	70fb      	strb	r3, [r7, #3]
 800d388:	4613      	mov	r3, r2
 800d38a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d392:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d394:	78fa      	ldrb	r2, [r7, #3]
 800d396:	68f9      	ldr	r1, [r7, #12]
 800d398:	4613      	mov	r3, r2
 800d39a:	011b      	lsls	r3, r3, #4
 800d39c:	1a9b      	subs	r3, r3, r2
 800d39e:	009b      	lsls	r3, r3, #2
 800d3a0:	440b      	add	r3, r1
 800d3a2:	3317      	adds	r3, #23
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d00a      	beq.n	800d3c0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d3aa:	78fa      	ldrb	r2, [r7, #3]
 800d3ac:	68f9      	ldr	r1, [r7, #12]
 800d3ae:	4613      	mov	r3, r2
 800d3b0:	011b      	lsls	r3, r3, #4
 800d3b2:	1a9b      	subs	r3, r3, r2
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	440b      	add	r3, r1
 800d3b8:	333c      	adds	r3, #60	@ 0x3c
 800d3ba:	78ba      	ldrb	r2, [r7, #2]
 800d3bc:	701a      	strb	r2, [r3, #0]
 800d3be:	e009      	b.n	800d3d4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d3c0:	78fa      	ldrb	r2, [r7, #3]
 800d3c2:	68f9      	ldr	r1, [r7, #12]
 800d3c4:	4613      	mov	r3, r2
 800d3c6:	011b      	lsls	r3, r3, #4
 800d3c8:	1a9b      	subs	r3, r3, r2
 800d3ca:	009b      	lsls	r3, r3, #2
 800d3cc:	440b      	add	r3, r1
 800d3ce:	333d      	adds	r3, #61	@ 0x3d
 800d3d0:	78ba      	ldrb	r2, [r7, #2]
 800d3d2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d3d4:	2300      	movs	r3, #0
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3714      	adds	r7, #20
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr

0800d3e2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d3e2:	b580      	push	{r7, lr}
 800d3e4:	b082      	sub	sp, #8
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f7f4 fa60 	bl	80018b0 <HAL_Delay>
}
 800d3f0:	bf00      	nop
 800d3f2:	3708      	adds	r7, #8
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}

0800d3f8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b085      	sub	sp, #20
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	4603      	mov	r3, r0
 800d400:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d402:	2300      	movs	r3, #0
 800d404:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d406:	79fb      	ldrb	r3, [r7, #7]
 800d408:	2b03      	cmp	r3, #3
 800d40a:	d817      	bhi.n	800d43c <USBH_Get_USB_Status+0x44>
 800d40c:	a201      	add	r2, pc, #4	@ (adr r2, 800d414 <USBH_Get_USB_Status+0x1c>)
 800d40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d412:	bf00      	nop
 800d414:	0800d425 	.word	0x0800d425
 800d418:	0800d42b 	.word	0x0800d42b
 800d41c:	0800d431 	.word	0x0800d431
 800d420:	0800d437 	.word	0x0800d437
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d424:	2300      	movs	r3, #0
 800d426:	73fb      	strb	r3, [r7, #15]
    break;
 800d428:	e00b      	b.n	800d442 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d42a:	2302      	movs	r3, #2
 800d42c:	73fb      	strb	r3, [r7, #15]
    break;
 800d42e:	e008      	b.n	800d442 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d430:	2301      	movs	r3, #1
 800d432:	73fb      	strb	r3, [r7, #15]
    break;
 800d434:	e005      	b.n	800d442 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d436:	2302      	movs	r3, #2
 800d438:	73fb      	strb	r3, [r7, #15]
    break;
 800d43a:	e002      	b.n	800d442 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d43c:	2302      	movs	r3, #2
 800d43e:	73fb      	strb	r3, [r7, #15]
    break;
 800d440:	bf00      	nop
  }
  return usb_status;
 800d442:	7bfb      	ldrb	r3, [r7, #15]
}
 800d444:	4618      	mov	r0, r3
 800d446:	3714      	adds	r7, #20
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr

0800d450 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b084      	sub	sp, #16
 800d454:	af00      	add	r7, sp, #0
 800d456:	4603      	mov	r3, r0
 800d458:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d45a:	79fb      	ldrb	r3, [r7, #7]
 800d45c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800d45e:	79fb      	ldrb	r3, [r7, #7]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d102      	bne.n	800d46a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800d464:	2301      	movs	r3, #1
 800d466:	73fb      	strb	r3, [r7, #15]
 800d468:	e001      	b.n	800d46e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800d46a:	2300      	movs	r3, #0
 800d46c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800d46e:	7bfb      	ldrb	r3, [r7, #15]
 800d470:	461a      	mov	r2, r3
 800d472:	2110      	movs	r1, #16
 800d474:	4803      	ldr	r0, [pc, #12]	@ (800d484 <MX_DriverVbusHS+0x34>)
 800d476:	f7f4 fed5 	bl	8002224 <HAL_GPIO_WritePin>
}
 800d47a:	bf00      	nop
 800d47c:	3710      	adds	r7, #16
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	bf00      	nop
 800d484:	40020800 	.word	0x40020800

0800d488 <malloc>:
 800d488:	4b02      	ldr	r3, [pc, #8]	@ (800d494 <malloc+0xc>)
 800d48a:	4601      	mov	r1, r0
 800d48c:	6818      	ldr	r0, [r3, #0]
 800d48e:	f000 b82d 	b.w	800d4ec <_malloc_r>
 800d492:	bf00      	nop
 800d494:	20000038 	.word	0x20000038

0800d498 <free>:
 800d498:	4b02      	ldr	r3, [pc, #8]	@ (800d4a4 <free+0xc>)
 800d49a:	4601      	mov	r1, r0
 800d49c:	6818      	ldr	r0, [r3, #0]
 800d49e:	f000 b903 	b.w	800d6a8 <_free_r>
 800d4a2:	bf00      	nop
 800d4a4:	20000038 	.word	0x20000038

0800d4a8 <sbrk_aligned>:
 800d4a8:	b570      	push	{r4, r5, r6, lr}
 800d4aa:	4e0f      	ldr	r6, [pc, #60]	@ (800d4e8 <sbrk_aligned+0x40>)
 800d4ac:	460c      	mov	r4, r1
 800d4ae:	6831      	ldr	r1, [r6, #0]
 800d4b0:	4605      	mov	r5, r0
 800d4b2:	b911      	cbnz	r1, 800d4ba <sbrk_aligned+0x12>
 800d4b4:	f000 f8ae 	bl	800d614 <_sbrk_r>
 800d4b8:	6030      	str	r0, [r6, #0]
 800d4ba:	4621      	mov	r1, r4
 800d4bc:	4628      	mov	r0, r5
 800d4be:	f000 f8a9 	bl	800d614 <_sbrk_r>
 800d4c2:	1c43      	adds	r3, r0, #1
 800d4c4:	d103      	bne.n	800d4ce <sbrk_aligned+0x26>
 800d4c6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	bd70      	pop	{r4, r5, r6, pc}
 800d4ce:	1cc4      	adds	r4, r0, #3
 800d4d0:	f024 0403 	bic.w	r4, r4, #3
 800d4d4:	42a0      	cmp	r0, r4
 800d4d6:	d0f8      	beq.n	800d4ca <sbrk_aligned+0x22>
 800d4d8:	1a21      	subs	r1, r4, r0
 800d4da:	4628      	mov	r0, r5
 800d4dc:	f000 f89a 	bl	800d614 <_sbrk_r>
 800d4e0:	3001      	adds	r0, #1
 800d4e2:	d1f2      	bne.n	800d4ca <sbrk_aligned+0x22>
 800d4e4:	e7ef      	b.n	800d4c6 <sbrk_aligned+0x1e>
 800d4e6:	bf00      	nop
 800d4e8:	20008f24 	.word	0x20008f24

0800d4ec <_malloc_r>:
 800d4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4f0:	1ccd      	adds	r5, r1, #3
 800d4f2:	f025 0503 	bic.w	r5, r5, #3
 800d4f6:	3508      	adds	r5, #8
 800d4f8:	2d0c      	cmp	r5, #12
 800d4fa:	bf38      	it	cc
 800d4fc:	250c      	movcc	r5, #12
 800d4fe:	2d00      	cmp	r5, #0
 800d500:	4606      	mov	r6, r0
 800d502:	db01      	blt.n	800d508 <_malloc_r+0x1c>
 800d504:	42a9      	cmp	r1, r5
 800d506:	d904      	bls.n	800d512 <_malloc_r+0x26>
 800d508:	230c      	movs	r3, #12
 800d50a:	6033      	str	r3, [r6, #0]
 800d50c:	2000      	movs	r0, #0
 800d50e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d512:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d5e8 <_malloc_r+0xfc>
 800d516:	f000 f869 	bl	800d5ec <__malloc_lock>
 800d51a:	f8d8 3000 	ldr.w	r3, [r8]
 800d51e:	461c      	mov	r4, r3
 800d520:	bb44      	cbnz	r4, 800d574 <_malloc_r+0x88>
 800d522:	4629      	mov	r1, r5
 800d524:	4630      	mov	r0, r6
 800d526:	f7ff ffbf 	bl	800d4a8 <sbrk_aligned>
 800d52a:	1c43      	adds	r3, r0, #1
 800d52c:	4604      	mov	r4, r0
 800d52e:	d158      	bne.n	800d5e2 <_malloc_r+0xf6>
 800d530:	f8d8 4000 	ldr.w	r4, [r8]
 800d534:	4627      	mov	r7, r4
 800d536:	2f00      	cmp	r7, #0
 800d538:	d143      	bne.n	800d5c2 <_malloc_r+0xd6>
 800d53a:	2c00      	cmp	r4, #0
 800d53c:	d04b      	beq.n	800d5d6 <_malloc_r+0xea>
 800d53e:	6823      	ldr	r3, [r4, #0]
 800d540:	4639      	mov	r1, r7
 800d542:	4630      	mov	r0, r6
 800d544:	eb04 0903 	add.w	r9, r4, r3
 800d548:	f000 f864 	bl	800d614 <_sbrk_r>
 800d54c:	4581      	cmp	r9, r0
 800d54e:	d142      	bne.n	800d5d6 <_malloc_r+0xea>
 800d550:	6821      	ldr	r1, [r4, #0]
 800d552:	1a6d      	subs	r5, r5, r1
 800d554:	4629      	mov	r1, r5
 800d556:	4630      	mov	r0, r6
 800d558:	f7ff ffa6 	bl	800d4a8 <sbrk_aligned>
 800d55c:	3001      	adds	r0, #1
 800d55e:	d03a      	beq.n	800d5d6 <_malloc_r+0xea>
 800d560:	6823      	ldr	r3, [r4, #0]
 800d562:	442b      	add	r3, r5
 800d564:	6023      	str	r3, [r4, #0]
 800d566:	f8d8 3000 	ldr.w	r3, [r8]
 800d56a:	685a      	ldr	r2, [r3, #4]
 800d56c:	bb62      	cbnz	r2, 800d5c8 <_malloc_r+0xdc>
 800d56e:	f8c8 7000 	str.w	r7, [r8]
 800d572:	e00f      	b.n	800d594 <_malloc_r+0xa8>
 800d574:	6822      	ldr	r2, [r4, #0]
 800d576:	1b52      	subs	r2, r2, r5
 800d578:	d420      	bmi.n	800d5bc <_malloc_r+0xd0>
 800d57a:	2a0b      	cmp	r2, #11
 800d57c:	d917      	bls.n	800d5ae <_malloc_r+0xc2>
 800d57e:	1961      	adds	r1, r4, r5
 800d580:	42a3      	cmp	r3, r4
 800d582:	6025      	str	r5, [r4, #0]
 800d584:	bf18      	it	ne
 800d586:	6059      	strne	r1, [r3, #4]
 800d588:	6863      	ldr	r3, [r4, #4]
 800d58a:	bf08      	it	eq
 800d58c:	f8c8 1000 	streq.w	r1, [r8]
 800d590:	5162      	str	r2, [r4, r5]
 800d592:	604b      	str	r3, [r1, #4]
 800d594:	4630      	mov	r0, r6
 800d596:	f000 f82f 	bl	800d5f8 <__malloc_unlock>
 800d59a:	f104 000b 	add.w	r0, r4, #11
 800d59e:	1d23      	adds	r3, r4, #4
 800d5a0:	f020 0007 	bic.w	r0, r0, #7
 800d5a4:	1ac2      	subs	r2, r0, r3
 800d5a6:	bf1c      	itt	ne
 800d5a8:	1a1b      	subne	r3, r3, r0
 800d5aa:	50a3      	strne	r3, [r4, r2]
 800d5ac:	e7af      	b.n	800d50e <_malloc_r+0x22>
 800d5ae:	6862      	ldr	r2, [r4, #4]
 800d5b0:	42a3      	cmp	r3, r4
 800d5b2:	bf0c      	ite	eq
 800d5b4:	f8c8 2000 	streq.w	r2, [r8]
 800d5b8:	605a      	strne	r2, [r3, #4]
 800d5ba:	e7eb      	b.n	800d594 <_malloc_r+0xa8>
 800d5bc:	4623      	mov	r3, r4
 800d5be:	6864      	ldr	r4, [r4, #4]
 800d5c0:	e7ae      	b.n	800d520 <_malloc_r+0x34>
 800d5c2:	463c      	mov	r4, r7
 800d5c4:	687f      	ldr	r7, [r7, #4]
 800d5c6:	e7b6      	b.n	800d536 <_malloc_r+0x4a>
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	42a3      	cmp	r3, r4
 800d5ce:	d1fb      	bne.n	800d5c8 <_malloc_r+0xdc>
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	6053      	str	r3, [r2, #4]
 800d5d4:	e7de      	b.n	800d594 <_malloc_r+0xa8>
 800d5d6:	230c      	movs	r3, #12
 800d5d8:	6033      	str	r3, [r6, #0]
 800d5da:	4630      	mov	r0, r6
 800d5dc:	f000 f80c 	bl	800d5f8 <__malloc_unlock>
 800d5e0:	e794      	b.n	800d50c <_malloc_r+0x20>
 800d5e2:	6005      	str	r5, [r0, #0]
 800d5e4:	e7d6      	b.n	800d594 <_malloc_r+0xa8>
 800d5e6:	bf00      	nop
 800d5e8:	20008f28 	.word	0x20008f28

0800d5ec <__malloc_lock>:
 800d5ec:	4801      	ldr	r0, [pc, #4]	@ (800d5f4 <__malloc_lock+0x8>)
 800d5ee:	f000 b84b 	b.w	800d688 <__retarget_lock_acquire_recursive>
 800d5f2:	bf00      	nop
 800d5f4:	20009068 	.word	0x20009068

0800d5f8 <__malloc_unlock>:
 800d5f8:	4801      	ldr	r0, [pc, #4]	@ (800d600 <__malloc_unlock+0x8>)
 800d5fa:	f000 b846 	b.w	800d68a <__retarget_lock_release_recursive>
 800d5fe:	bf00      	nop
 800d600:	20009068 	.word	0x20009068

0800d604 <memset>:
 800d604:	4402      	add	r2, r0
 800d606:	4603      	mov	r3, r0
 800d608:	4293      	cmp	r3, r2
 800d60a:	d100      	bne.n	800d60e <memset+0xa>
 800d60c:	4770      	bx	lr
 800d60e:	f803 1b01 	strb.w	r1, [r3], #1
 800d612:	e7f9      	b.n	800d608 <memset+0x4>

0800d614 <_sbrk_r>:
 800d614:	b538      	push	{r3, r4, r5, lr}
 800d616:	4d06      	ldr	r5, [pc, #24]	@ (800d630 <_sbrk_r+0x1c>)
 800d618:	2300      	movs	r3, #0
 800d61a:	4604      	mov	r4, r0
 800d61c:	4608      	mov	r0, r1
 800d61e:	602b      	str	r3, [r5, #0]
 800d620:	f7f4 f892 	bl	8001748 <_sbrk>
 800d624:	1c43      	adds	r3, r0, #1
 800d626:	d102      	bne.n	800d62e <_sbrk_r+0x1a>
 800d628:	682b      	ldr	r3, [r5, #0]
 800d62a:	b103      	cbz	r3, 800d62e <_sbrk_r+0x1a>
 800d62c:	6023      	str	r3, [r4, #0]
 800d62e:	bd38      	pop	{r3, r4, r5, pc}
 800d630:	20009064 	.word	0x20009064

0800d634 <__errno>:
 800d634:	4b01      	ldr	r3, [pc, #4]	@ (800d63c <__errno+0x8>)
 800d636:	6818      	ldr	r0, [r3, #0]
 800d638:	4770      	bx	lr
 800d63a:	bf00      	nop
 800d63c:	20000038 	.word	0x20000038

0800d640 <__libc_init_array>:
 800d640:	b570      	push	{r4, r5, r6, lr}
 800d642:	4d0d      	ldr	r5, [pc, #52]	@ (800d678 <__libc_init_array+0x38>)
 800d644:	4c0d      	ldr	r4, [pc, #52]	@ (800d67c <__libc_init_array+0x3c>)
 800d646:	1b64      	subs	r4, r4, r5
 800d648:	10a4      	asrs	r4, r4, #2
 800d64a:	2600      	movs	r6, #0
 800d64c:	42a6      	cmp	r6, r4
 800d64e:	d109      	bne.n	800d664 <__libc_init_array+0x24>
 800d650:	4d0b      	ldr	r5, [pc, #44]	@ (800d680 <__libc_init_array+0x40>)
 800d652:	4c0c      	ldr	r4, [pc, #48]	@ (800d684 <__libc_init_array+0x44>)
 800d654:	f000 f872 	bl	800d73c <_init>
 800d658:	1b64      	subs	r4, r4, r5
 800d65a:	10a4      	asrs	r4, r4, #2
 800d65c:	2600      	movs	r6, #0
 800d65e:	42a6      	cmp	r6, r4
 800d660:	d105      	bne.n	800d66e <__libc_init_array+0x2e>
 800d662:	bd70      	pop	{r4, r5, r6, pc}
 800d664:	f855 3b04 	ldr.w	r3, [r5], #4
 800d668:	4798      	blx	r3
 800d66a:	3601      	adds	r6, #1
 800d66c:	e7ee      	b.n	800d64c <__libc_init_array+0xc>
 800d66e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d672:	4798      	blx	r3
 800d674:	3601      	adds	r6, #1
 800d676:	e7f2      	b.n	800d65e <__libc_init_array+0x1e>
 800d678:	081148b0 	.word	0x081148b0
 800d67c:	081148b0 	.word	0x081148b0
 800d680:	081148b0 	.word	0x081148b0
 800d684:	081148b4 	.word	0x081148b4

0800d688 <__retarget_lock_acquire_recursive>:
 800d688:	4770      	bx	lr

0800d68a <__retarget_lock_release_recursive>:
 800d68a:	4770      	bx	lr

0800d68c <memcpy>:
 800d68c:	440a      	add	r2, r1
 800d68e:	4291      	cmp	r1, r2
 800d690:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d694:	d100      	bne.n	800d698 <memcpy+0xc>
 800d696:	4770      	bx	lr
 800d698:	b510      	push	{r4, lr}
 800d69a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d69e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6a2:	4291      	cmp	r1, r2
 800d6a4:	d1f9      	bne.n	800d69a <memcpy+0xe>
 800d6a6:	bd10      	pop	{r4, pc}

0800d6a8 <_free_r>:
 800d6a8:	b538      	push	{r3, r4, r5, lr}
 800d6aa:	4605      	mov	r5, r0
 800d6ac:	2900      	cmp	r1, #0
 800d6ae:	d041      	beq.n	800d734 <_free_r+0x8c>
 800d6b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6b4:	1f0c      	subs	r4, r1, #4
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	bfb8      	it	lt
 800d6ba:	18e4      	addlt	r4, r4, r3
 800d6bc:	f7ff ff96 	bl	800d5ec <__malloc_lock>
 800d6c0:	4a1d      	ldr	r2, [pc, #116]	@ (800d738 <_free_r+0x90>)
 800d6c2:	6813      	ldr	r3, [r2, #0]
 800d6c4:	b933      	cbnz	r3, 800d6d4 <_free_r+0x2c>
 800d6c6:	6063      	str	r3, [r4, #4]
 800d6c8:	6014      	str	r4, [r2, #0]
 800d6ca:	4628      	mov	r0, r5
 800d6cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6d0:	f7ff bf92 	b.w	800d5f8 <__malloc_unlock>
 800d6d4:	42a3      	cmp	r3, r4
 800d6d6:	d908      	bls.n	800d6ea <_free_r+0x42>
 800d6d8:	6820      	ldr	r0, [r4, #0]
 800d6da:	1821      	adds	r1, r4, r0
 800d6dc:	428b      	cmp	r3, r1
 800d6de:	bf01      	itttt	eq
 800d6e0:	6819      	ldreq	r1, [r3, #0]
 800d6e2:	685b      	ldreq	r3, [r3, #4]
 800d6e4:	1809      	addeq	r1, r1, r0
 800d6e6:	6021      	streq	r1, [r4, #0]
 800d6e8:	e7ed      	b.n	800d6c6 <_free_r+0x1e>
 800d6ea:	461a      	mov	r2, r3
 800d6ec:	685b      	ldr	r3, [r3, #4]
 800d6ee:	b10b      	cbz	r3, 800d6f4 <_free_r+0x4c>
 800d6f0:	42a3      	cmp	r3, r4
 800d6f2:	d9fa      	bls.n	800d6ea <_free_r+0x42>
 800d6f4:	6811      	ldr	r1, [r2, #0]
 800d6f6:	1850      	adds	r0, r2, r1
 800d6f8:	42a0      	cmp	r0, r4
 800d6fa:	d10b      	bne.n	800d714 <_free_r+0x6c>
 800d6fc:	6820      	ldr	r0, [r4, #0]
 800d6fe:	4401      	add	r1, r0
 800d700:	1850      	adds	r0, r2, r1
 800d702:	4283      	cmp	r3, r0
 800d704:	6011      	str	r1, [r2, #0]
 800d706:	d1e0      	bne.n	800d6ca <_free_r+0x22>
 800d708:	6818      	ldr	r0, [r3, #0]
 800d70a:	685b      	ldr	r3, [r3, #4]
 800d70c:	6053      	str	r3, [r2, #4]
 800d70e:	4408      	add	r0, r1
 800d710:	6010      	str	r0, [r2, #0]
 800d712:	e7da      	b.n	800d6ca <_free_r+0x22>
 800d714:	d902      	bls.n	800d71c <_free_r+0x74>
 800d716:	230c      	movs	r3, #12
 800d718:	602b      	str	r3, [r5, #0]
 800d71a:	e7d6      	b.n	800d6ca <_free_r+0x22>
 800d71c:	6820      	ldr	r0, [r4, #0]
 800d71e:	1821      	adds	r1, r4, r0
 800d720:	428b      	cmp	r3, r1
 800d722:	bf04      	itt	eq
 800d724:	6819      	ldreq	r1, [r3, #0]
 800d726:	685b      	ldreq	r3, [r3, #4]
 800d728:	6063      	str	r3, [r4, #4]
 800d72a:	bf04      	itt	eq
 800d72c:	1809      	addeq	r1, r1, r0
 800d72e:	6021      	streq	r1, [r4, #0]
 800d730:	6054      	str	r4, [r2, #4]
 800d732:	e7ca      	b.n	800d6ca <_free_r+0x22>
 800d734:	bd38      	pop	{r3, r4, r5, pc}
 800d736:	bf00      	nop
 800d738:	20008f28 	.word	0x20008f28

0800d73c <_init>:
 800d73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d73e:	bf00      	nop
 800d740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d742:	bc08      	pop	{r3}
 800d744:	469e      	mov	lr, r3
 800d746:	4770      	bx	lr

0800d748 <_fini>:
 800d748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d74a:	bf00      	nop
 800d74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d74e:	bc08      	pop	{r3}
 800d750:	469e      	mov	lr, r3
 800d752:	4770      	bx	lr
