
flasher-keyless.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5a4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0010c374  0800d754  0800d754  0000e754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08119ac8  08119ac8  0011b088  2**0
                  CONTENTS
  4 .ARM          00000008  08119ac8  08119ac8  0011aac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08119ad0  08119ad0  0011b088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08119ad0  08119ad0  0011aad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08119ad4  08119ad4  0011aad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08119ad8  0011b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0011b088  2**0
                  CONTENTS
 10 .bss          00008fe4  20000088  20000088  0011b088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000906c  2000906c  0011b088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0011b088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002985f  00000000  00000000  0011b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005da6  00000000  00000000  00144917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022d8  00000000  00000000  0014a6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b2ef  00000000  00000000  0014c998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002aba9  00000000  00000000  00177c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5483  00000000  00000000  001a2830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00297cb3  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00001aec  00000000  00000000  00297cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009718  00000000  00000000  002997e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  002a2efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d73c 	.word	0x0800d73c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800d73c 	.word	0x0800d73c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
 80004f6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
	...

08000514 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	4a07      	ldr	r2, [pc, #28]	@ (8000540 <vApplicationGetIdleTaskMemory+0x2c>)
 8000524:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	4a06      	ldr	r2, [pc, #24]	@ (8000544 <vApplicationGetIdleTaskMemory+0x30>)
 800052a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2280      	movs	r2, #128	@ 0x80
 8000530:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	200000a4 	.word	0x200000a4
 8000544:	200000fc 	.word	0x200000fc

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b5b0      	push	{r4, r5, r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f001 f971 	bl	8001834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f82d 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 fac5 	bl	8000ae4 <MX_GPIO_Init>
  MX_CRC_Init();
 800055a:	f000 f893 	bl	8000684 <MX_CRC_Init>
  MX_DMA2D_Init();
 800055e:	f000 f8a5 	bl	80006ac <MX_DMA2D_Init>
  MX_FMC_Init();
 8000562:	f000 fa6f 	bl	8000a44 <MX_FMC_Init>
  MX_I2C3_Init();
 8000566:	f000 f8d3 	bl	8000710 <MX_I2C3_Init>
  MX_LTDC_Init();
 800056a:	f000 f911 	bl	8000790 <MX_LTDC_Init>
  MX_SPI5_Init();
 800056e:	f000 f98f 	bl	8000890 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000572:	f000 f9c3 	bl	80008fc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000576:	f000 fa3b 	bl	80009f0 <MX_USART1_UART_Init>
  MX_UART5_Init();
 800057a:	f000 fa0f 	bl	800099c <MX_UART5_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800057e:	4b0a      	ldr	r3, [pc, #40]	@ (80005a8 <main+0x60>)
 8000580:	1d3c      	adds	r4, r7, #4
 8000582:	461d      	mov	r5, r3
 8000584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000588:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f00a f9ca 	bl	800a92e <osThreadCreate>
 800059a:	4603      	mov	r3, r0
 800059c:	4a03      	ldr	r2, [pc, #12]	@ (80005ac <main+0x64>)
 800059e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005a0:	f00a f9be 	bl	800a920 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a4:	bf00      	nop
 80005a6:	e7fd      	b.n	80005a4 <main+0x5c>
 80005a8:	0800d760 	.word	0x0800d760
 80005ac:	200005a4 	.word	0x200005a4

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b094      	sub	sp, #80	@ 0x50
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2230      	movs	r2, #48	@ 0x30
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f00d f820 	bl	800d604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	4b28      	ldr	r3, [pc, #160]	@ (800067c <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	4a27      	ldr	r2, [pc, #156]	@ (800067c <SystemClock_Config+0xcc>)
 80005de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e4:	4b25      	ldr	r3, [pc, #148]	@ (800067c <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	4b22      	ldr	r3, [pc, #136]	@ (8000680 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005fc:	4a20      	ldr	r2, [pc, #128]	@ (8000680 <SystemClock_Config+0xd0>)
 80005fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b1e      	ldr	r3, [pc, #120]	@ (8000680 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000610:	2301      	movs	r3, #1
 8000612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000614:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000618:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000624:	2304      	movs	r3, #4
 8000626:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000628:	2348      	movs	r3, #72	@ 0x48
 800062a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000630:	2303      	movs	r3, #3
 8000632:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0320 	add.w	r3, r7, #32
 8000638:	4618      	mov	r0, r3
 800063a:	f004 fc6d 	bl	8004f18 <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000644:	f000 fc08 	bl	8000e58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2302      	movs	r3, #2
 800064e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000654:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	2102      	movs	r1, #2
 8000664:	4618      	mov	r0, r3
 8000666:	f004 fecf 	bl	8005408 <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000670:	f000 fbf2 	bl	8000e58 <Error_Handler>
  }
}
 8000674:	bf00      	nop
 8000676:	3750      	adds	r7, #80	@ 0x50
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000688:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <MX_CRC_Init+0x20>)
 800068a:	4a07      	ldr	r2, [pc, #28]	@ (80006a8 <MX_CRC_Init+0x24>)
 800068c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	@ (80006a4 <MX_CRC_Init+0x20>)
 8000690:	f001 fa18 	bl	8001ac4 <HAL_CRC_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800069a:	f000 fbdd 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200002fc 	.word	0x200002fc
 80006a8:	40023000 	.word	0x40023000

080006ac <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006b0:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006b2:	4a16      	ldr	r2, [pc, #88]	@ (800070c <MX_DMA2D_Init+0x60>)
 80006b4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006b6:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006bc:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006c2:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006da:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006e0:	4809      	ldr	r0, [pc, #36]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006e2:	f001 fa0b 	bl	8001afc <HAL_DMA2D_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006ec:	f000 fbb4 	bl	8000e58 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006f0:	2101      	movs	r1, #1
 80006f2:	4805      	ldr	r0, [pc, #20]	@ (8000708 <MX_DMA2D_Init+0x5c>)
 80006f4:	f001 fb5c 	bl	8001db0 <HAL_DMA2D_ConfigLayer>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80006fe:	f000 fbab 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000304 	.word	0x20000304
 800070c:	4002b000 	.word	0x4002b000

08000710 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <MX_I2C3_Init+0x74>)
 8000716:	4a1c      	ldr	r2, [pc, #112]	@ (8000788 <MX_I2C3_Init+0x78>)
 8000718:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <MX_I2C3_Init+0x74>)
 800071c:	4a1b      	ldr	r2, [pc, #108]	@ (800078c <MX_I2C3_Init+0x7c>)
 800071e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <MX_I2C3_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <MX_I2C3_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <MX_I2C3_Init+0x74>)
 800072e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000732:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <MX_I2C3_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800073a:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <MX_I2C3_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000740:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <MX_I2C3_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000746:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_I2C3_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800074c:	480d      	ldr	r0, [pc, #52]	@ (8000784 <MX_I2C3_Init+0x74>)
 800074e:	f003 febb 	bl	80044c8 <HAL_I2C_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000758:	f000 fb7e 	bl	8000e58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800075c:	2100      	movs	r1, #0
 800075e:	4809      	ldr	r0, [pc, #36]	@ (8000784 <MX_I2C3_Init+0x74>)
 8000760:	f003 fff6 	bl	8004750 <HAL_I2CEx_ConfigAnalogFilter>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800076a:	f000 fb75 	bl	8000e58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800076e:	2100      	movs	r1, #0
 8000770:	4804      	ldr	r0, [pc, #16]	@ (8000784 <MX_I2C3_Init+0x74>)
 8000772:	f004 f829 	bl	80047c8 <HAL_I2CEx_ConfigDigitalFilter>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800077c:	f000 fb6c 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000344 	.word	0x20000344
 8000788:	40005c00 	.word	0x40005c00
 800078c:	000186a0 	.word	0x000186a0

08000790 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08e      	sub	sp, #56	@ 0x38
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2234      	movs	r2, #52	@ 0x34
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f00c ff31 	bl	800d604 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007a2:	4b39      	ldr	r3, [pc, #228]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007a4:	4a39      	ldr	r2, [pc, #228]	@ (800088c <MX_LTDC_Init+0xfc>)
 80007a6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007a8:	4b37      	ldr	r3, [pc, #220]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007ae:	4b36      	ldr	r3, [pc, #216]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007b4:	4b34      	ldr	r3, [pc, #208]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007ba:	4b33      	ldr	r3, [pc, #204]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80007c0:	4b31      	ldr	r3, [pc, #196]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007c2:	2209      	movs	r2, #9
 80007c4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80007c6:	4b30      	ldr	r3, [pc, #192]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80007cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007ce:	221d      	movs	r2, #29
 80007d0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80007d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007d4:	2203      	movs	r2, #3
 80007d6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80007d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007da:	f240 120d 	movw	r2, #269	@ 0x10d
 80007de:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80007e0:	4b29      	ldr	r3, [pc, #164]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007e2:	f240 1243 	movw	r2, #323	@ 0x143
 80007e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 80007e8:	4b27      	ldr	r3, [pc, #156]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007ea:	f240 1217 	movw	r2, #279	@ 0x117
 80007ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 80007f0:	4b25      	ldr	r3, [pc, #148]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007f2:	f240 1247 	movw	r2, #327	@ 0x147
 80007f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80007f8:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <MX_LTDC_Init+0xf8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000800:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <MX_LTDC_Init+0xf8>)
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000808:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <MX_LTDC_Init+0xf8>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000810:	481d      	ldr	r0, [pc, #116]	@ (8000888 <MX_LTDC_Init+0xf8>)
 8000812:	f004 f819 	bl	8004848 <HAL_LTDC_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800081c:	f000 fb1c 	bl	8000e58 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000824:	23f0      	movs	r3, #240	@ 0xf0
 8000826:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 800082c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000830:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000832:	2302      	movs	r3, #2
 8000834:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000836:	23ff      	movs	r3, #255	@ 0xff
 8000838:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800083e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000842:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000844:	2307      	movs	r3, #7
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000848:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 800084c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 800084e:	23f0      	movs	r3, #240	@ 0xf0
 8000850:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8000852:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000856:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2200      	movs	r2, #0
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_LTDC_Init+0xf8>)
 8000872:	f004 f97b 	bl	8004b6c <HAL_LTDC_ConfigLayer>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 800087c:	f000 faec 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	3738      	adds	r7, #56	@ 0x38
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000398 	.word	0x20000398
 800088c:	40016800 	.word	0x40016800

08000890 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000894:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <MX_SPI5_Init+0x64>)
 8000896:	4a18      	ldr	r2, [pc, #96]	@ (80008f8 <MX_SPI5_Init+0x68>)
 8000898:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800089a:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <MX_SPI5_Init+0x64>)
 800089c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008a0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008a2:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008c0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008c4:	2218      	movs	r2, #24
 80008c6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d4:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008dc:	220a      	movs	r2, #10
 80008de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	@ (80008f4 <MX_SPI5_Init+0x64>)
 80008e2:	f005 f9d7 	bl	8005c94 <HAL_SPI_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80008ec:	f000 fab4 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000440 	.word	0x20000440
 80008f8:	40015000 	.word	0x40015000

080008fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000918:	4b1e      	ldr	r3, [pc, #120]	@ (8000994 <MX_TIM1_Init+0x98>)
 800091a:	4a1f      	ldr	r2, [pc, #124]	@ (8000998 <MX_TIM1_Init+0x9c>)
 800091c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800091e:	4b1d      	ldr	r3, [pc, #116]	@ (8000994 <MX_TIM1_Init+0x98>)
 8000920:	2200      	movs	r2, #0
 8000922:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000924:	4b1b      	ldr	r3, [pc, #108]	@ (8000994 <MX_TIM1_Init+0x98>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800092a:	4b1a      	ldr	r3, [pc, #104]	@ (8000994 <MX_TIM1_Init+0x98>)
 800092c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000930:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000932:	4b18      	ldr	r3, [pc, #96]	@ (8000994 <MX_TIM1_Init+0x98>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000938:	4b16      	ldr	r3, [pc, #88]	@ (8000994 <MX_TIM1_Init+0x98>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093e:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <MX_TIM1_Init+0x98>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000944:	4813      	ldr	r0, [pc, #76]	@ (8000994 <MX_TIM1_Init+0x98>)
 8000946:	f005 fa2e 	bl	8005da6 <HAL_TIM_Base_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000950:	f000 fa82 	bl	8000e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000954:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000958:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800095a:	f107 0308 	add.w	r3, r7, #8
 800095e:	4619      	mov	r1, r3
 8000960:	480c      	ldr	r0, [pc, #48]	@ (8000994 <MX_TIM1_Init+0x98>)
 8000962:	f005 fbcf 	bl	8006104 <HAL_TIM_ConfigClockSource>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800096c:	f000 fa74 	bl	8000e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000970:	2300      	movs	r3, #0
 8000972:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000978:	463b      	mov	r3, r7
 800097a:	4619      	mov	r1, r3
 800097c:	4805      	ldr	r0, [pc, #20]	@ (8000994 <MX_TIM1_Init+0x98>)
 800097e:	f005 fdf7 	bl	8006570 <HAL_TIMEx_MasterConfigSynchronization>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000988:	f000 fa66 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000498 	.word	0x20000498
 8000998:	40010000 	.word	0x40010000

0800099c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80009a0:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	@ (80009ec <MX_UART5_Init+0x50>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009ac:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <MX_UART5_Init+0x4c>)
 80009d4:	f005 fe5c 	bl	8006690 <HAL_UART_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80009de:	f000 fa3b 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200004e0 	.word	0x200004e0
 80009ec:	40005000 	.word	0x40005000

080009f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f4:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	@ (8000a40 <MX_USART1_UART_Init+0x50>)
 80009f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009fa:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 80009fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a14:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a28:	f005 fe32 	bl	8006690 <HAL_UART_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a32:	f000 fa11 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000528 	.word	0x20000528
 8000a40:	40011000 	.word	0x40011000

08000a44 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
 8000a58:	615a      	str	r2, [r3, #20]
 8000a5a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a5e:	4a20      	ldr	r2, [pc, #128]	@ (8000ae0 <MX_FMC_Init+0x9c>)
 8000a60:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a62:	4b1e      	ldr	r3, [pc, #120]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a68:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a70:	2204      	movs	r2, #4
 8000a72:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a74:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a76:	2210      	movs	r2, #16
 8000a78:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a7a:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a7c:	2240      	movs	r2, #64	@ 0x40
 8000a7e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a80:	4b16      	ldr	r3, [pc, #88]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a82:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000a86:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a88:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a94:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a96:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <MX_FMC_Init+0x98>)
 8000a9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aa2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000aac:	2304      	movs	r3, #4
 8000aae:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000ab0:	2307      	movs	r3, #7
 8000ab2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4805      	ldr	r0, [pc, #20]	@ (8000adc <MX_FMC_Init+0x98>)
 8000ac6:	f005 f8b1 	bl	8005c2c <HAL_SDRAM_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000ad0:	f000 f9c2 	bl	8000e58 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000ad4:	bf00      	nop
 8000ad6:	3720      	adds	r7, #32
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000570 	.word	0x20000570
 8000ae0:	a0000140 	.word	0xa0000140

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08e      	sub	sp, #56	@ 0x38
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
 8000afe:	4b7b      	ldr	r3, [pc, #492]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a7a      	ldr	r2, [pc, #488]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b04:	f043 0304 	orr.w	r3, r3, #4
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b78      	ldr	r3, [pc, #480]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	623b      	str	r3, [r7, #32]
 8000b14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
 8000b1a:	4b74      	ldr	r3, [pc, #464]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a73      	ldr	r2, [pc, #460]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b20:	f043 0320 	orr.w	r3, r3, #32
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b71      	ldr	r3, [pc, #452]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0320 	and.w	r3, r3, #32
 8000b2e:	61fb      	str	r3, [r7, #28]
 8000b30:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	61bb      	str	r3, [r7, #24]
 8000b36:	4b6d      	ldr	r3, [pc, #436]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4a6c      	ldr	r2, [pc, #432]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b42:	4b6a      	ldr	r3, [pc, #424]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b4a:	61bb      	str	r3, [r7, #24]
 8000b4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	4b66      	ldr	r3, [pc, #408]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a65      	ldr	r2, [pc, #404]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b63      	ldr	r3, [pc, #396]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b5f      	ldr	r3, [pc, #380]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a5e      	ldr	r2, [pc, #376]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b5c      	ldr	r3, [pc, #368]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b58      	ldr	r3, [pc, #352]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a57      	ldr	r2, [pc, #348]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b55      	ldr	r3, [pc, #340]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	4b51      	ldr	r3, [pc, #324]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	4a50      	ldr	r2, [pc, #320]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000bac:	f043 0310 	orr.w	r3, r3, #16
 8000bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb2:	4b4e      	ldr	r3, [pc, #312]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	f003 0310 	and.w	r3, r3, #16
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b4a      	ldr	r3, [pc, #296]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a49      	ldr	r2, [pc, #292]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000bc8:	f043 0308 	orr.w	r3, r3, #8
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b47      	ldr	r3, [pc, #284]	@ (8000cec <MX_GPIO_Init+0x208>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f003 0308 	and.w	r3, r3, #8
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2116      	movs	r1, #22
 8000bde:	4844      	ldr	r0, [pc, #272]	@ (8000cf0 <MX_GPIO_Init+0x20c>)
 8000be0:	f001 fb24 	bl	800222c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2180      	movs	r1, #128	@ 0x80
 8000be8:	4842      	ldr	r0, [pc, #264]	@ (8000cf4 <MX_GPIO_Init+0x210>)
 8000bea:	f001 fb1f 	bl	800222c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000bf4:	4840      	ldr	r0, [pc, #256]	@ (8000cf8 <MX_GPIO_Init+0x214>)
 8000bf6:	f001 fb19 	bl	800222c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000c00:	483e      	ldr	r0, [pc, #248]	@ (8000cfc <MX_GPIO_Init+0x218>)
 8000c02:	f001 fb13 	bl	800222c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000c06:	2316      	movs	r3, #22
 8000c08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4834      	ldr	r0, [pc, #208]	@ (8000cf0 <MX_GPIO_Init+0x20c>)
 8000c1e:	f001 f959 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000c22:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c28:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	482e      	ldr	r0, [pc, #184]	@ (8000cf4 <MX_GPIO_Init+0x210>)
 8000c3a:	f001 f94b 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c3e:	2380      	movs	r3, #128	@ 0x80
 8000c40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c52:	4619      	mov	r1, r3
 8000c54:	4827      	ldr	r0, [pc, #156]	@ (8000cf4 <MX_GPIO_Init+0x210>)
 8000c56:	f001 f93d 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c5a:	2320      	movs	r3, #32
 8000c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c5e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4820      	ldr	r0, [pc, #128]	@ (8000cf0 <MX_GPIO_Init+0x20c>)
 8000c70:	f001 f930 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c74:	2304      	movs	r3, #4
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c84:	4619      	mov	r1, r3
 8000c86:	481e      	ldr	r0, [pc, #120]	@ (8000d00 <MX_GPIO_Init+0x21c>)
 8000c88:	f001 f924 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4815      	ldr	r0, [pc, #84]	@ (8000cf8 <MX_GPIO_Init+0x214>)
 8000ca2:	f001 f917 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000ca6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000caa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480e      	ldr	r0, [pc, #56]	@ (8000cf8 <MX_GPIO_Init+0x214>)
 8000cc0:	f001 f908 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000cc4:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4807      	ldr	r0, [pc, #28]	@ (8000cfc <MX_GPIO_Init+0x218>)
 8000cde:	f001 f8f9 	bl	8001ed4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ce2:	bf00      	nop
 8000ce4:	3738      	adds	r7, #56	@ 0x38
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020800 	.word	0x40020800
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40020c00 	.word	0x40020c00
 8000cfc:	40021800 	.word	0x40021800
 8000d00:	40020400 	.word	0x40020400

08000d04 <StartDefaultTask>:
  * @retval None
  */
#define binfile ble_data
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000d0c:	f00c f8b2 	bl	800ce74 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  flashstate = 1;
 8000d10:	4b40      	ldr	r3, [pc, #256]	@ (8000e14 <StartDefaultTask+0x110>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d1c:	483e      	ldr	r0, [pc, #248]	@ (8000e18 <StartDefaultTask+0x114>)
 8000d1e:	f001 fa85 	bl	800222c <HAL_GPIO_WritePin>
  HAL_UART_Transmit(&huart5, sync_data, sizeof(sync_data), 10);
 8000d22:	230a      	movs	r3, #10
 8000d24:	2206      	movs	r2, #6
 8000d26:	493d      	ldr	r1, [pc, #244]	@ (8000e1c <StartDefaultTask+0x118>)
 8000d28:	483d      	ldr	r0, [pc, #244]	@ (8000e20 <StartDefaultTask+0x11c>)
 8000d2a:	f005 fd01 	bl	8006730 <HAL_UART_Transmit>
  osDelay(1000);
 8000d2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d32:	f009 fe48 	bl	800a9c6 <osDelay>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d3c:	4836      	ldr	r0, [pc, #216]	@ (8000e18 <StartDefaultTask+0x114>)
 8000d3e:	f001 fa75 	bl	800222c <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	if(flashstate == 1)
 8000d42:	4b34      	ldr	r3, [pc, #208]	@ (8000e14 <StartDefaultTask+0x110>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d15d      	bne.n	8000e06 <StartDefaultTask+0x102>
	{
		flashstate = 0;
 8000d4a:	4b32      	ldr	r3, [pc, #200]	@ (8000e14 <StartDefaultTask+0x110>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < sizeof(binfile); i++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	e045      	b.n	8000de2 <StartDefaultTask+0xde>
		{
			if ((i % 1024) == 0)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d10c      	bne.n	8000d7a <StartDefaultTask+0x76>
			{
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000d60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d64:	482c      	ldr	r0, [pc, #176]	@ (8000e18 <StartDefaultTask+0x114>)
 8000d66:	f001 fa7a 	bl	800225e <HAL_GPIO_TogglePin>
				if (i == 1024)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d70:	d103      	bne.n	8000d7a <StartDefaultTask+0x76>
				{
					osDelay(4000);
 8000d72:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000d76:	f009 fe26 	bl	800a9c6 <osDelay>
				}
			}
			HAL_UART_Transmit(&huart5, &binfile[i], 1, 10);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	4a29      	ldr	r2, [pc, #164]	@ (8000e24 <StartDefaultTask+0x120>)
 8000d7e:	1899      	adds	r1, r3, r2
 8000d80:	230a      	movs	r3, #10
 8000d82:	2201      	movs	r2, #1
 8000d84:	4826      	ldr	r0, [pc, #152]	@ (8000e20 <StartDefaultTask+0x11c>)
 8000d86:	f005 fcd3 	bl	8006730 <HAL_UART_Transmit>
			crc ^= binfile[i];
 8000d8a:	4a26      	ldr	r2, [pc, #152]	@ (8000e24 <StartDefaultTask+0x120>)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4413      	add	r3, r2
 8000d90:	781a      	ldrb	r2, [r3, #0]
 8000d92:	4b25      	ldr	r3, [pc, #148]	@ (8000e28 <StartDefaultTask+0x124>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	4053      	eors	r3, r2
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4b23      	ldr	r3, [pc, #140]	@ (8000e28 <StartDefaultTask+0x124>)
 8000d9c:	701a      	strb	r2, [r3, #0]
			for (uint8_t j = 0; j < 8; j++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	72fb      	strb	r3, [r7, #11]
 8000da2:	e018      	b.n	8000dd6 <StartDefaultTask+0xd2>
			{
				if (crc & 0x80)
 8000da4:	4b20      	ldr	r3, [pc, #128]	@ (8000e28 <StartDefaultTask+0x124>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	da0a      	bge.n	8000dc4 <StartDefaultTask+0xc0>
				{
					crc = (crc << 1) ^ 0x07;
 8000dae:	4b1e      	ldr	r3, [pc, #120]	@ (8000e28 <StartDefaultTask+0x124>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	b25b      	sxtb	r3, r3
 8000db6:	f083 0307 	eor.w	r3, r3, #7
 8000dba:	b25b      	sxtb	r3, r3
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <StartDefaultTask+0x124>)
 8000dc0:	701a      	strb	r2, [r3, #0]
 8000dc2:	e005      	b.n	8000dd0 <StartDefaultTask+0xcc>
				}
				else
				{
					crc <<= 1;
 8000dc4:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <StartDefaultTask+0x124>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	4b16      	ldr	r3, [pc, #88]	@ (8000e28 <StartDefaultTask+0x124>)
 8000dce:	701a      	strb	r2, [r3, #0]
			for (uint8_t j = 0; j < 8; j++)
 8000dd0:	7afb      	ldrb	r3, [r7, #11]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	72fb      	strb	r3, [r7, #11]
 8000dd6:	7afb      	ldrb	r3, [r7, #11]
 8000dd8:	2b07      	cmp	r3, #7
 8000dda:	d9e3      	bls.n	8000da4 <StartDefaultTask+0xa0>
		for (int i = 0; i < sizeof(binfile); i++)
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	3301      	adds	r3, #1
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	4a11      	ldr	r2, [pc, #68]	@ (8000e2c <StartDefaultTask+0x128>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d9b5      	bls.n	8000d56 <StartDefaultTask+0x52>
				}
			}
		}
		crc_send[0] = crc;
 8000dea:	4b0f      	ldr	r3, [pc, #60]	@ (8000e28 <StartDefaultTask+0x124>)
 8000dec:	781a      	ldrb	r2, [r3, #0]
 8000dee:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <StartDefaultTask+0x12c>)
 8000df0:	701a      	strb	r2, [r3, #0]
		osDelay(6000);
 8000df2:	f241 7070 	movw	r0, #6000	@ 0x1770
 8000df6:	f009 fde6 	bl	800a9c6 <osDelay>
		HAL_UART_Transmit(&huart5, &crc_send[0], sizeof(crc_send), 10);
 8000dfa:	230a      	movs	r3, #10
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	490c      	ldr	r1, [pc, #48]	@ (8000e30 <StartDefaultTask+0x12c>)
 8000e00:	4807      	ldr	r0, [pc, #28]	@ (8000e20 <StartDefaultTask+0x11c>)
 8000e02:	f005 fc95 	bl	8006730 <HAL_UART_Transmit>
	}
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e0c:	4802      	ldr	r0, [pc, #8]	@ (8000e18 <StartDefaultTask+0x114>)
 8000e0e:	f001 fa0d 	bl	800222c <HAL_GPIO_WritePin>
	if(flashstate == 1)
 8000e12:	e796      	b.n	8000d42 <StartDefaultTask+0x3e>
 8000e14:	200005a8 	.word	0x200005a8
 8000e18:	40021800 	.word	0x40021800
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	200004e0 	.word	0x200004e0
 8000e24:	0800d7c0 	.word	0x0800d7c0
 8000e28:	200005ac 	.word	0x200005ac
 8000e2c:	0010c2ef 	.word	0x0010c2ef
 8000e30:	200005b0 	.word	0x200005b0

08000e34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a04      	ldr	r2, [pc, #16]	@ (8000e54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d101      	bne.n	8000e4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e46:	f000 fd17 	bl	8001878 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40001000 	.word	0x40001000

08000e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5c:	b672      	cpsid	i
}
 8000e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <Error_Handler+0x8>

08000e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <HAL_MspInit+0x54>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e72:	4a11      	ldr	r2, [pc, #68]	@ (8000eb8 <HAL_MspInit+0x54>)
 8000e74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <HAL_MspInit+0x54>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb8 <HAL_MspInit+0x54>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb8 <HAL_MspInit+0x54>)
 8000e90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e96:	4b08      	ldr	r3, [pc, #32]	@ (8000eb8 <HAL_MspInit+0x54>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	210f      	movs	r1, #15
 8000ea6:	f06f 0001 	mvn.w	r0, #1
 8000eaa:	f000 fde1 	bl	8001a70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800

08000ebc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ef8 <HAL_CRC_MspInit+0x3c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d10d      	bne.n	8000eea <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8000efc <HAL_CRC_MspInit+0x40>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	4a09      	ldr	r2, [pc, #36]	@ (8000efc <HAL_CRC_MspInit+0x40>)
 8000ed8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ede:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <HAL_CRC_MspInit+0x40>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40023000 	.word	0x40023000
 8000efc:	40023800 	.word	0x40023800

08000f00 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0e      	ldr	r2, [pc, #56]	@ (8000f48 <HAL_DMA2D_MspInit+0x48>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d115      	bne.n	8000f3e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <HAL_DMA2D_MspInit+0x4c>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f4c <HAL_DMA2D_MspInit+0x4c>)
 8000f1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <HAL_DMA2D_MspInit+0x4c>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2105      	movs	r1, #5
 8000f32:	205a      	movs	r0, #90	@ 0x5a
 8000f34:	f000 fd9c 	bl	8001a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f38:	205a      	movs	r0, #90	@ 0x5a
 8000f3a:	f000 fdb5 	bl	8001aa8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	4002b000 	.word	0x4002b000
 8000f4c:	40023800 	.word	0x40023800

08000f50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	@ 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a29      	ldr	r2, [pc, #164]	@ (8001014 <HAL_I2C_MspInit+0xc4>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d14b      	bne.n	800100a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b28      	ldr	r3, [pc, #160]	@ (8001018 <HAL_I2C_MspInit+0xc8>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	4a27      	ldr	r2, [pc, #156]	@ (8001018 <HAL_I2C_MspInit+0xc8>)
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f82:	4b25      	ldr	r3, [pc, #148]	@ (8001018 <HAL_I2C_MspInit+0xc8>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b21      	ldr	r3, [pc, #132]	@ (8001018 <HAL_I2C_MspInit+0xc8>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	4a20      	ldr	r2, [pc, #128]	@ (8001018 <HAL_I2C_MspInit+0xc8>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001018 <HAL_I2C_MspInit+0xc8>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000faa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb0:	2312      	movs	r3, #18
 8000fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4815      	ldr	r0, [pc, #84]	@ (800101c <HAL_I2C_MspInit+0xcc>)
 8000fc8:	f000 ff84 	bl	8001ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000fcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd2:	2312      	movs	r3, #18
 8000fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480d      	ldr	r0, [pc, #52]	@ (8001020 <HAL_I2C_MspInit+0xd0>)
 8000fea:	f000 ff73 	bl	8001ed4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <HAL_I2C_MspInit+0xc8>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	4a08      	ldr	r2, [pc, #32]	@ (8001018 <HAL_I2C_MspInit+0xc8>)
 8000ff8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ffe:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <HAL_I2C_MspInit+0xc8>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800100a:	bf00      	nop
 800100c:	3728      	adds	r7, #40	@ 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40005c00 	.word	0x40005c00
 8001018:	40023800 	.word	0x40023800
 800101c:	40020800 	.word	0x40020800
 8001020:	40020000 	.word	0x40020000

08001024 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b09a      	sub	sp, #104	@ 0x68
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800103c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001040:	2230      	movs	r2, #48	@ 0x30
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f00c fadd 	bl	800d604 <memset>
  if(hltdc->Instance==LTDC)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a85      	ldr	r2, [pc, #532]	@ (8001264 <HAL_LTDC_MspInit+0x240>)
 8001050:	4293      	cmp	r3, r2
 8001052:	f040 8102 	bne.w	800125a <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001056:	2308      	movs	r3, #8
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800105a:	2332      	movs	r3, #50	@ 0x32
 800105c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800105e:	2302      	movs	r3, #2
 8001060:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001062:	2300      	movs	r3, #0
 8001064:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001066:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800106a:	4618      	mov	r0, r3
 800106c:	f004 fc1e 	bl	80058ac <HAL_RCCEx_PeriphCLKConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001076:	f7ff feef 	bl	8000e58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
 800107e:	4b7a      	ldr	r3, [pc, #488]	@ (8001268 <HAL_LTDC_MspInit+0x244>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001082:	4a79      	ldr	r2, [pc, #484]	@ (8001268 <HAL_LTDC_MspInit+0x244>)
 8001084:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001088:	6453      	str	r3, [r2, #68]	@ 0x44
 800108a:	4b77      	ldr	r3, [pc, #476]	@ (8001268 <HAL_LTDC_MspInit+0x244>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001092:	623b      	str	r3, [r7, #32]
 8001094:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
 800109a:	4b73      	ldr	r3, [pc, #460]	@ (8001268 <HAL_LTDC_MspInit+0x244>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a72      	ldr	r2, [pc, #456]	@ (8001268 <HAL_LTDC_MspInit+0x244>)
 80010a0:	f043 0320 	orr.w	r3, r3, #32
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b70      	ldr	r3, [pc, #448]	@ (8001268 <HAL_LTDC_MspInit+0x244>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0320 	and.w	r3, r3, #32
 80010ae:	61fb      	str	r3, [r7, #28]
 80010b0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
 80010b6:	4b6c      	ldr	r3, [pc, #432]	@ (8001268 <HAL_LTDC_MspInit+0x244>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a6b      	ldr	r2, [pc, #428]	@ (8001268 <HAL_LTDC_MspInit+0x244>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b69      	ldr	r3, [pc, #420]	@ (8001268 <HAL_LTDC_MspInit+0x244>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	61bb      	str	r3, [r7, #24]
 80010cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	4b65      	ldr	r3, [pc, #404]	@ (8001268 <HAL_LTDC_MspInit+0x244>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	4a64      	ldr	r2, [pc, #400]	@ (8001268 <HAL_LTDC_MspInit+0x244>)
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010de:	4b62      	ldr	r3, [pc, #392]	@ (8001268 <HAL_LTDC_MspInit+0x244>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	4b5e      	ldr	r3, [pc, #376]	@ (8001268 <HAL_LTDC_MspInit+0x244>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	4a5d      	ldr	r2, [pc, #372]	@ (8001268 <HAL_LTDC_MspInit+0x244>)
 80010f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001268 <HAL_LTDC_MspInit+0x244>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	4b57      	ldr	r3, [pc, #348]	@ (8001268 <HAL_LTDC_MspInit+0x244>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	4a56      	ldr	r2, [pc, #344]	@ (8001268 <HAL_LTDC_MspInit+0x244>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	6313      	str	r3, [r2, #48]	@ 0x30
 8001116:	4b54      	ldr	r3, [pc, #336]	@ (8001268 <HAL_LTDC_MspInit+0x244>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	4b50      	ldr	r3, [pc, #320]	@ (8001268 <HAL_LTDC_MspInit+0x244>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a4f      	ldr	r2, [pc, #316]	@ (8001268 <HAL_LTDC_MspInit+0x244>)
 800112c:	f043 0308 	orr.w	r3, r3, #8
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b4d      	ldr	r3, [pc, #308]	@ (8001268 <HAL_LTDC_MspInit+0x244>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800113e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001142:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001150:	230e      	movs	r3, #14
 8001152:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001158:	4619      	mov	r1, r3
 800115a:	4844      	ldr	r0, [pc, #272]	@ (800126c <HAL_LTDC_MspInit+0x248>)
 800115c:	f000 feba 	bl	8001ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001160:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001164:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001172:	230e      	movs	r3, #14
 8001174:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800117a:	4619      	mov	r1, r3
 800117c:	483c      	ldr	r0, [pc, #240]	@ (8001270 <HAL_LTDC_MspInit+0x24c>)
 800117e:	f000 fea9 	bl	8001ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001182:	2303      	movs	r3, #3
 8001184:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001192:	2309      	movs	r3, #9
 8001194:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800119a:	4619      	mov	r1, r3
 800119c:	4835      	ldr	r0, [pc, #212]	@ (8001274 <HAL_LTDC_MspInit+0x250>)
 800119e:	f000 fe99 	bl	8001ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80011a2:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80011a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011b4:	230e      	movs	r3, #14
 80011b6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011bc:	4619      	mov	r1, r3
 80011be:	482d      	ldr	r0, [pc, #180]	@ (8001274 <HAL_LTDC_MspInit+0x250>)
 80011c0:	f000 fe88 	bl	8001ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80011c4:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80011c8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011d6:	230e      	movs	r3, #14
 80011d8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011de:	4619      	mov	r1, r3
 80011e0:	4825      	ldr	r0, [pc, #148]	@ (8001278 <HAL_LTDC_MspInit+0x254>)
 80011e2:	f000 fe77 	bl	8001ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80011e6:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80011ea:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011f8:	230e      	movs	r3, #14
 80011fa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001200:	4619      	mov	r1, r3
 8001202:	481e      	ldr	r0, [pc, #120]	@ (800127c <HAL_LTDC_MspInit+0x258>)
 8001204:	f000 fe66 	bl	8001ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001208:	2348      	movs	r3, #72	@ 0x48
 800120a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001218:	230e      	movs	r3, #14
 800121a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800121c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001220:	4619      	mov	r1, r3
 8001222:	4817      	ldr	r0, [pc, #92]	@ (8001280 <HAL_LTDC_MspInit+0x25c>)
 8001224:	f000 fe56 	bl	8001ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001228:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800122c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	2302      	movs	r3, #2
 8001230:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800123a:	2309      	movs	r3, #9
 800123c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800123e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001242:	4619      	mov	r1, r3
 8001244:	480c      	ldr	r0, [pc, #48]	@ (8001278 <HAL_LTDC_MspInit+0x254>)
 8001246:	f000 fe45 	bl	8001ed4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2105      	movs	r1, #5
 800124e:	2058      	movs	r0, #88	@ 0x58
 8001250:	f000 fc0e 	bl	8001a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001254:	2058      	movs	r0, #88	@ 0x58
 8001256:	f000 fc27 	bl	8001aa8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800125a:	bf00      	nop
 800125c:	3768      	adds	r7, #104	@ 0x68
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40016800 	.word	0x40016800
 8001268:	40023800 	.word	0x40023800
 800126c:	40021400 	.word	0x40021400
 8001270:	40020000 	.word	0x40020000
 8001274:	40020400 	.word	0x40020400
 8001278:	40021800 	.word	0x40021800
 800127c:	40020800 	.word	0x40020800
 8001280:	40020c00 	.word	0x40020c00

08001284 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	@ 0x28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a19      	ldr	r2, [pc, #100]	@ (8001308 <HAL_SPI_MspInit+0x84>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d12c      	bne.n	8001300 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	4b18      	ldr	r3, [pc, #96]	@ (800130c <HAL_SPI_MspInit+0x88>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ae:	4a17      	ldr	r2, [pc, #92]	@ (800130c <HAL_SPI_MspInit+0x88>)
 80012b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80012b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <HAL_SPI_MspInit+0x88>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b11      	ldr	r3, [pc, #68]	@ (800130c <HAL_SPI_MspInit+0x88>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a10      	ldr	r2, [pc, #64]	@ (800130c <HAL_SPI_MspInit+0x88>)
 80012cc:	f043 0320 	orr.w	r3, r3, #32
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <HAL_SPI_MspInit+0x88>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0320 	and.w	r3, r3, #32
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80012de:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80012e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80012f0:	2305      	movs	r3, #5
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4805      	ldr	r0, [pc, #20]	@ (8001310 <HAL_SPI_MspInit+0x8c>)
 80012fc:	f000 fdea 	bl	8001ed4 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001300:	bf00      	nop
 8001302:	3728      	adds	r7, #40	@ 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40015000 	.word	0x40015000
 800130c:	40023800 	.word	0x40023800
 8001310:	40021400 	.word	0x40021400

08001314 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0b      	ldr	r2, [pc, #44]	@ (8001350 <HAL_TIM_Base_MspInit+0x3c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d10d      	bne.n	8001342 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <HAL_TIM_Base_MspInit+0x40>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132e:	4a09      	ldr	r2, [pc, #36]	@ (8001354 <HAL_TIM_Base_MspInit+0x40>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6453      	str	r3, [r2, #68]	@ 0x44
 8001336:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <HAL_TIM_Base_MspInit+0x40>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001342:	bf00      	nop
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40010000 	.word	0x40010000
 8001354:	40023800 	.word	0x40023800

08001358 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08c      	sub	sp, #48	@ 0x30
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a42      	ldr	r2, [pc, #264]	@ (8001480 <HAL_UART_MspInit+0x128>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d14b      	bne.n	8001412 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
 800137e:	4b41      	ldr	r3, [pc, #260]	@ (8001484 <HAL_UART_MspInit+0x12c>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	4a40      	ldr	r2, [pc, #256]	@ (8001484 <HAL_UART_MspInit+0x12c>)
 8001384:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001388:	6413      	str	r3, [r2, #64]	@ 0x40
 800138a:	4b3e      	ldr	r3, [pc, #248]	@ (8001484 <HAL_UART_MspInit+0x12c>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001392:	61bb      	str	r3, [r7, #24]
 8001394:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	4b3a      	ldr	r3, [pc, #232]	@ (8001484 <HAL_UART_MspInit+0x12c>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	4a39      	ldr	r2, [pc, #228]	@ (8001484 <HAL_UART_MspInit+0x12c>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a6:	4b37      	ldr	r3, [pc, #220]	@ (8001484 <HAL_UART_MspInit+0x12c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	4b33      	ldr	r3, [pc, #204]	@ (8001484 <HAL_UART_MspInit+0x12c>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	4a32      	ldr	r2, [pc, #200]	@ (8001484 <HAL_UART_MspInit+0x12c>)
 80013bc:	f043 0308 	orr.w	r3, r3, #8
 80013c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c2:	4b30      	ldr	r3, [pc, #192]	@ (8001484 <HAL_UART_MspInit+0x12c>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80013e0:	2308      	movs	r3, #8
 80013e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	4619      	mov	r1, r3
 80013ea:	4827      	ldr	r0, [pc, #156]	@ (8001488 <HAL_UART_MspInit+0x130>)
 80013ec:	f000 fd72 	bl	8001ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013f0:	2304      	movs	r3, #4
 80013f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001400:	2308      	movs	r3, #8
 8001402:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	4619      	mov	r1, r3
 800140a:	4820      	ldr	r0, [pc, #128]	@ (800148c <HAL_UART_MspInit+0x134>)
 800140c:	f000 fd62 	bl	8001ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001410:	e031      	b.n	8001476 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a1e      	ldr	r2, [pc, #120]	@ (8001490 <HAL_UART_MspInit+0x138>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d12c      	bne.n	8001476 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	4b18      	ldr	r3, [pc, #96]	@ (8001484 <HAL_UART_MspInit+0x12c>)
 8001422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001424:	4a17      	ldr	r2, [pc, #92]	@ (8001484 <HAL_UART_MspInit+0x12c>)
 8001426:	f043 0310 	orr.w	r3, r3, #16
 800142a:	6453      	str	r3, [r2, #68]	@ 0x44
 800142c:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <HAL_UART_MspInit+0x12c>)
 800142e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001430:	f003 0310 	and.w	r3, r3, #16
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <HAL_UART_MspInit+0x12c>)
 800143e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001440:	4a10      	ldr	r2, [pc, #64]	@ (8001484 <HAL_UART_MspInit+0x12c>)
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	6313      	str	r3, [r2, #48]	@ 0x30
 8001448:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <HAL_UART_MspInit+0x12c>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001454:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001466:	2307      	movs	r3, #7
 8001468:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	4619      	mov	r1, r3
 8001470:	4808      	ldr	r0, [pc, #32]	@ (8001494 <HAL_UART_MspInit+0x13c>)
 8001472:	f000 fd2f 	bl	8001ed4 <HAL_GPIO_Init>
}
 8001476:	bf00      	nop
 8001478:	3730      	adds	r7, #48	@ 0x30
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40005000 	.word	0x40005000
 8001484:	40023800 	.word	0x40023800
 8001488:	40020800 	.word	0x40020800
 800148c:	40020c00 	.word	0x40020c00
 8001490:	40011000 	.word	0x40011000
 8001494:	40020000 	.word	0x40020000

08001498 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80014ac:	4b3b      	ldr	r3, [pc, #236]	@ (800159c <HAL_FMC_MspInit+0x104>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d16f      	bne.n	8001594 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80014b4:	4b39      	ldr	r3, [pc, #228]	@ (800159c <HAL_FMC_MspInit+0x104>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	603b      	str	r3, [r7, #0]
 80014be:	4b38      	ldr	r3, [pc, #224]	@ (80015a0 <HAL_FMC_MspInit+0x108>)
 80014c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014c2:	4a37      	ldr	r2, [pc, #220]	@ (80015a0 <HAL_FMC_MspInit+0x108>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6393      	str	r3, [r2, #56]	@ 0x38
 80014ca:	4b35      	ldr	r3, [pc, #212]	@ (80015a0 <HAL_FMC_MspInit+0x108>)
 80014cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80014d6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80014da:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014e8:	230c      	movs	r3, #12
 80014ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	4619      	mov	r1, r3
 80014f0:	482c      	ldr	r0, [pc, #176]	@ (80015a4 <HAL_FMC_MspInit+0x10c>)
 80014f2:	f000 fcef 	bl	8001ed4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80014f6:	2301      	movs	r3, #1
 80014f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001502:	2303      	movs	r3, #3
 8001504:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001506:	230c      	movs	r3, #12
 8001508:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	4619      	mov	r1, r3
 800150e:	4826      	ldr	r0, [pc, #152]	@ (80015a8 <HAL_FMC_MspInit+0x110>)
 8001510:	f000 fce0 	bl	8001ed4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001514:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001518:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001526:	230c      	movs	r3, #12
 8001528:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	4619      	mov	r1, r3
 800152e:	481f      	ldr	r0, [pc, #124]	@ (80015ac <HAL_FMC_MspInit+0x114>)
 8001530:	f000 fcd0 	bl	8001ed4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001534:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001538:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001546:	230c      	movs	r3, #12
 8001548:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4818      	ldr	r0, [pc, #96]	@ (80015b0 <HAL_FMC_MspInit+0x118>)
 8001550:	f000 fcc0 	bl	8001ed4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001554:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001558:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001566:	230c      	movs	r3, #12
 8001568:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	4619      	mov	r1, r3
 800156e:	4811      	ldr	r0, [pc, #68]	@ (80015b4 <HAL_FMC_MspInit+0x11c>)
 8001570:	f000 fcb0 	bl	8001ed4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001574:	2360      	movs	r3, #96	@ 0x60
 8001576:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001584:	230c      	movs	r3, #12
 8001586:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	4619      	mov	r1, r3
 800158c:	480a      	ldr	r0, [pc, #40]	@ (80015b8 <HAL_FMC_MspInit+0x120>)
 800158e:	f000 fca1 	bl	8001ed4 <HAL_GPIO_Init>
 8001592:	e000      	b.n	8001596 <HAL_FMC_MspInit+0xfe>
    return;
 8001594:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	200005b4 	.word	0x200005b4
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40021400 	.word	0x40021400
 80015a8:	40020800 	.word	0x40020800
 80015ac:	40021800 	.word	0x40021800
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40020c00 	.word	0x40020c00
 80015b8:	40020400 	.word	0x40020400

080015bc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80015c4:	f7ff ff68 	bl	8001498 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08e      	sub	sp, #56	@ 0x38
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	4b33      	ldr	r3, [pc, #204]	@ (80016b4 <HAL_InitTick+0xe4>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e8:	4a32      	ldr	r2, [pc, #200]	@ (80016b4 <HAL_InitTick+0xe4>)
 80015ea:	f043 0310 	orr.w	r3, r3, #16
 80015ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80015f0:	4b30      	ldr	r3, [pc, #192]	@ (80016b4 <HAL_InitTick+0xe4>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f4:	f003 0310 	and.w	r3, r3, #16
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015fc:	f107 0210 	add.w	r2, r7, #16
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f004 f91e 	bl	8005848 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800160c:	6a3b      	ldr	r3, [r7, #32]
 800160e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001612:	2b00      	cmp	r3, #0
 8001614:	d103      	bne.n	800161e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001616:	f004 f8ef 	bl	80057f8 <HAL_RCC_GetPCLK1Freq>
 800161a:	6378      	str	r0, [r7, #52]	@ 0x34
 800161c:	e004      	b.n	8001628 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800161e:	f004 f8eb 	bl	80057f8 <HAL_RCC_GetPCLK1Freq>
 8001622:	4603      	mov	r3, r0
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800162a:	4a23      	ldr	r2, [pc, #140]	@ (80016b8 <HAL_InitTick+0xe8>)
 800162c:	fba2 2303 	umull	r2, r3, r2, r3
 8001630:	0c9b      	lsrs	r3, r3, #18
 8001632:	3b01      	subs	r3, #1
 8001634:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001636:	4b21      	ldr	r3, [pc, #132]	@ (80016bc <HAL_InitTick+0xec>)
 8001638:	4a21      	ldr	r2, [pc, #132]	@ (80016c0 <HAL_InitTick+0xf0>)
 800163a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800163c:	4b1f      	ldr	r3, [pc, #124]	@ (80016bc <HAL_InitTick+0xec>)
 800163e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001642:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001644:	4a1d      	ldr	r2, [pc, #116]	@ (80016bc <HAL_InitTick+0xec>)
 8001646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001648:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800164a:	4b1c      	ldr	r3, [pc, #112]	@ (80016bc <HAL_InitTick+0xec>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001650:	4b1a      	ldr	r3, [pc, #104]	@ (80016bc <HAL_InitTick+0xec>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001656:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <HAL_InitTick+0xec>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800165c:	4817      	ldr	r0, [pc, #92]	@ (80016bc <HAL_InitTick+0xec>)
 800165e:	f004 fba2 	bl	8005da6 <HAL_TIM_Base_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001668:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800166c:	2b00      	cmp	r3, #0
 800166e:	d11b      	bne.n	80016a8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001670:	4812      	ldr	r0, [pc, #72]	@ (80016bc <HAL_InitTick+0xec>)
 8001672:	f004 fbe7 	bl	8005e44 <HAL_TIM_Base_Start_IT>
 8001676:	4603      	mov	r3, r0
 8001678:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800167c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001680:	2b00      	cmp	r3, #0
 8001682:	d111      	bne.n	80016a8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001684:	2036      	movs	r0, #54	@ 0x36
 8001686:	f000 fa0f 	bl	8001aa8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d808      	bhi.n	80016a2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001690:	2200      	movs	r2, #0
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	2036      	movs	r0, #54	@ 0x36
 8001696:	f000 f9eb 	bl	8001a70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800169a:	4a0a      	ldr	r2, [pc, #40]	@ (80016c4 <HAL_InitTick+0xf4>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	e002      	b.n	80016a8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3738      	adds	r7, #56	@ 0x38
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800
 80016b8:	431bde83 	.word	0x431bde83
 80016bc:	200005b8 	.word	0x200005b8
 80016c0:	40001000 	.word	0x40001000
 80016c4:	2000000c 	.word	0x2000000c

080016c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <NMI_Handler+0x4>

080016d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <HardFault_Handler+0x4>

080016d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <MemManage_Handler+0x4>

080016e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <BusFault_Handler+0x4>

080016e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <UsageFault_Handler+0x4>

080016f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001704:	4802      	ldr	r0, [pc, #8]	@ (8001710 <TIM6_DAC_IRQHandler+0x10>)
 8001706:	f004 fc0d 	bl	8005f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200005b8 	.word	0x200005b8

08001714 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001718:	4802      	ldr	r0, [pc, #8]	@ (8001724 <OTG_HS_IRQHandler+0x10>)
 800171a:	f001 f89b 	bl	8002854 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20008b44 	.word	0x20008b44

08001728 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800172c:	4802      	ldr	r0, [pc, #8]	@ (8001738 <LTDC_IRQHandler+0x10>)
 800172e:	f003 f95b 	bl	80049e8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000398 	.word	0x20000398

0800173c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001740:	4802      	ldr	r0, [pc, #8]	@ (800174c <DMA2D_IRQHandler+0x10>)
 8001742:	f000 fa24 	bl	8001b8e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000304 	.word	0x20000304

08001750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001758:	4a14      	ldr	r2, [pc, #80]	@ (80017ac <_sbrk+0x5c>)
 800175a:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <_sbrk+0x60>)
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001764:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d102      	bne.n	8001772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800176c:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <_sbrk+0x64>)
 800176e:	4a12      	ldr	r2, [pc, #72]	@ (80017b8 <_sbrk+0x68>)
 8001770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001772:	4b10      	ldr	r3, [pc, #64]	@ (80017b4 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	429a      	cmp	r2, r3
 800177e:	d207      	bcs.n	8001790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001780:	f00b ff58 	bl	800d634 <__errno>
 8001784:	4603      	mov	r3, r0
 8001786:	220c      	movs	r2, #12
 8001788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800178e:	e009      	b.n	80017a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001790:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001796:	4b07      	ldr	r3, [pc, #28]	@ (80017b4 <_sbrk+0x64>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	4a05      	ldr	r2, [pc, #20]	@ (80017b4 <_sbrk+0x64>)
 80017a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a2:	68fb      	ldr	r3, [r7, #12]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20030000 	.word	0x20030000
 80017b0:	00000400 	.word	0x00000400
 80017b4:	20000600 	.word	0x20000600
 80017b8:	20009070 	.word	0x20009070

080017bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <SystemInit+0x20>)
 80017c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017c6:	4a05      	ldr	r2, [pc, #20]	@ (80017dc <SystemInit+0x20>)
 80017c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001818 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017e4:	f7ff ffea 	bl	80017bc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e8:	480c      	ldr	r0, [pc, #48]	@ (800181c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ea:	490d      	ldr	r1, [pc, #52]	@ (8001820 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001824 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f0:	e002      	b.n	80017f8 <LoopCopyDataInit>

080017f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f6:	3304      	adds	r3, #4

080017f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017fc:	d3f9      	bcc.n	80017f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001828 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001800:	4c0a      	ldr	r4, [pc, #40]	@ (800182c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001804:	e001      	b.n	800180a <LoopFillZerobss>

08001806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001808:	3204      	adds	r2, #4

0800180a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800180c:	d3fb      	bcc.n	8001806 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800180e:	f00b ff17 	bl	800d640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001812:	f7fe fe99 	bl	8000548 <main>
  bx  lr    
 8001816:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001818:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001824:	08119ad8 	.word	0x08119ad8
  ldr r2, =_sbss
 8001828:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800182c:	2000906c 	.word	0x2000906c

08001830 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC_IRQHandler>
	...

08001834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001838:	4b0e      	ldr	r3, [pc, #56]	@ (8001874 <HAL_Init+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0d      	ldr	r2, [pc, #52]	@ (8001874 <HAL_Init+0x40>)
 800183e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001842:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001844:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <HAL_Init+0x40>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0a      	ldr	r2, [pc, #40]	@ (8001874 <HAL_Init+0x40>)
 800184a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800184e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001850:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a07      	ldr	r2, [pc, #28]	@ (8001874 <HAL_Init+0x40>)
 8001856:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800185a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800185c:	2003      	movs	r0, #3
 800185e:	f000 f8fc 	bl	8001a5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001862:	2000      	movs	r0, #0
 8001864:	f7ff feb4 	bl	80015d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001868:	f7ff fafc 	bl	8000e64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023c00 	.word	0x40023c00

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	@ (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000010 	.word	0x20000010
 800189c:	20000604 	.word	0x20000604

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	@ (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000604 	.word	0x20000604

080018b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff ffee 	bl	80018a0 <HAL_GetTick>
 80018c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018d0:	d005      	beq.n	80018de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d2:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <HAL_Delay+0x44>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018de:	bf00      	nop
 80018e0:	f7ff ffde 	bl	80018a0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d8f7      	bhi.n	80018e0 <HAL_Delay+0x28>
  {
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000010 	.word	0x20000010

08001900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001910:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800191c:	4013      	ands	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001928:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800192c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	@ (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800194c:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <__NVIC_GetPriorityGrouping+0x18>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	f003 0307 	and.w	r3, r3, #7
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	db0b      	blt.n	800198e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f003 021f 	and.w	r2, r3, #31
 800197c:	4907      	ldr	r1, [pc, #28]	@ (800199c <__NVIC_EnableIRQ+0x38>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	2001      	movs	r0, #1
 8001986:	fa00 f202 	lsl.w	r2, r0, r2
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000e100 	.word	0xe000e100

080019a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	@ (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	@ (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	@ 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
         );
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	@ 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ff4c 	bl	8001900 <__NVIC_SetPriorityGrouping>
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a82:	f7ff ff61 	bl	8001948 <__NVIC_GetPriorityGrouping>
 8001a86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	68b9      	ldr	r1, [r7, #8]
 8001a8c:	6978      	ldr	r0, [r7, #20]
 8001a8e:	f7ff ffb1 	bl	80019f4 <NVIC_EncodePriority>
 8001a92:	4602      	mov	r2, r0
 8001a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff ff80 	bl	80019a0 <__NVIC_SetPriority>
}
 8001aa0:	bf00      	nop
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff ff54 	bl	8001964 <__NVIC_EnableIRQ>
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00e      	b.n	8001af4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	795b      	ldrb	r3, [r3, #5]
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d105      	bne.n	8001aec <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff f9e8 	bl	8000ebc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e03b      	b.n	8001b86 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d106      	bne.n	8001b28 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff f9ec 	bl	8000f00 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b4c:	f023 0107 	bic.w	r1, r3, #7
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b66:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	68d1      	ldr	r1, [r2, #12]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	430b      	orrs	r3, r1
 8001b74:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b084      	sub	sp, #16
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d026      	beq.n	8001bfe <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d021      	beq.n	8001bfe <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bc8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bce:	f043 0201 	orr.w	r2, r3, #1
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2204      	movs	r2, #4
 8001be2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f003 0320 	and.w	r3, r3, #32
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d026      	beq.n	8001c56 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d021      	beq.n	8001c56 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c20:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2220      	movs	r2, #32
 8001c28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c2e:	f043 0202 	orr.w	r2, r3, #2
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2204      	movs	r2, #4
 8001c3a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d026      	beq.n	8001cae <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d021      	beq.n	8001cae <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c78:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2208      	movs	r2, #8
 8001c80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c86:	f043 0204 	orr.w	r2, r3, #4
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2204      	movs	r2, #4
 8001c92:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d013      	beq.n	8001ce0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00e      	beq.n	8001ce0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cd0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f853 	bl	8001d86 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d024      	beq.n	8001d34 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d01f      	beq.n	8001d34 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d02:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d01f      	beq.n	8001d7e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d01a      	beq.n	8001d7e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001d56:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2210      	movs	r2, #16
 8001d5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f80e 	bl	8001d9a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_DMA2D_ConfigLayer+0x20>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e079      	b.n	8001ec4 <HAL_DMA2D_ConfigLayer+0x114>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	3318      	adds	r3, #24
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	041b      	lsls	r3, r3, #16
 8001df6:	4313      	orrs	r3, r2
 8001df8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001dfa:	4b35      	ldr	r3, [pc, #212]	@ (8001ed0 <HAL_DMA2D_ConfigLayer+0x120>)
 8001dfc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b0a      	cmp	r3, #10
 8001e04:	d003      	beq.n	8001e0e <HAL_DMA2D_ConfigLayer+0x5e>
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b09      	cmp	r3, #9
 8001e0c:	d107      	bne.n	8001e1e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	e005      	b.n	8001e2a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	061b      	lsls	r3, r3, #24
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d120      	bne.n	8001e72 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	ea02 0103 	and.w	r1, r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b0a      	cmp	r3, #10
 8001e58:	d003      	beq.n	8001e62 <HAL_DMA2D_ConfigLayer+0xb2>
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b09      	cmp	r3, #9
 8001e60:	d127      	bne.n	8001eb2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001e6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e70:	e01f      	b.n	8001eb2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	69da      	ldr	r2, [r3, #28]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	ea02 0103 	and.w	r1, r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b0a      	cmp	r3, #10
 8001e9a:	d003      	beq.n	8001ea4 <HAL_DMA2D_ConfigLayer+0xf4>
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b09      	cmp	r3, #9
 8001ea2:	d106      	bne.n	8001eb2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001eb0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	371c      	adds	r7, #28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	ff03000f 	.word	0xff03000f

08001ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	@ 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	e177      	b.n	80021e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	f040 8166 	bne.w	80021da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d005      	beq.n	8001f26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d130      	bne.n	8001f88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	2203      	movs	r2, #3
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 0201 	and.w	r2, r3, #1
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	d017      	beq.n	8001fc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d123      	bne.n	8002018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	08da      	lsrs	r2, r3, #3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3208      	adds	r2, #8
 8001fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	08da      	lsrs	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3208      	adds	r2, #8
 8002012:	69b9      	ldr	r1, [r7, #24]
 8002014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	2203      	movs	r2, #3
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0203 	and.w	r2, r3, #3
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80c0 	beq.w	80021da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b66      	ldr	r3, [pc, #408]	@ (80021f8 <HAL_GPIO_Init+0x324>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002062:	4a65      	ldr	r2, [pc, #404]	@ (80021f8 <HAL_GPIO_Init+0x324>)
 8002064:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002068:	6453      	str	r3, [r2, #68]	@ 0x44
 800206a:	4b63      	ldr	r3, [pc, #396]	@ (80021f8 <HAL_GPIO_Init+0x324>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002076:	4a61      	ldr	r2, [pc, #388]	@ (80021fc <HAL_GPIO_Init+0x328>)
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	3302      	adds	r3, #2
 800207e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	220f      	movs	r2, #15
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a58      	ldr	r2, [pc, #352]	@ (8002200 <HAL_GPIO_Init+0x32c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d037      	beq.n	8002112 <HAL_GPIO_Init+0x23e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a57      	ldr	r2, [pc, #348]	@ (8002204 <HAL_GPIO_Init+0x330>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d031      	beq.n	800210e <HAL_GPIO_Init+0x23a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a56      	ldr	r2, [pc, #344]	@ (8002208 <HAL_GPIO_Init+0x334>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d02b      	beq.n	800210a <HAL_GPIO_Init+0x236>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a55      	ldr	r2, [pc, #340]	@ (800220c <HAL_GPIO_Init+0x338>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d025      	beq.n	8002106 <HAL_GPIO_Init+0x232>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a54      	ldr	r2, [pc, #336]	@ (8002210 <HAL_GPIO_Init+0x33c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d01f      	beq.n	8002102 <HAL_GPIO_Init+0x22e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a53      	ldr	r2, [pc, #332]	@ (8002214 <HAL_GPIO_Init+0x340>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d019      	beq.n	80020fe <HAL_GPIO_Init+0x22a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a52      	ldr	r2, [pc, #328]	@ (8002218 <HAL_GPIO_Init+0x344>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d013      	beq.n	80020fa <HAL_GPIO_Init+0x226>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a51      	ldr	r2, [pc, #324]	@ (800221c <HAL_GPIO_Init+0x348>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00d      	beq.n	80020f6 <HAL_GPIO_Init+0x222>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a50      	ldr	r2, [pc, #320]	@ (8002220 <HAL_GPIO_Init+0x34c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d007      	beq.n	80020f2 <HAL_GPIO_Init+0x21e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002224 <HAL_GPIO_Init+0x350>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d101      	bne.n	80020ee <HAL_GPIO_Init+0x21a>
 80020ea:	2309      	movs	r3, #9
 80020ec:	e012      	b.n	8002114 <HAL_GPIO_Init+0x240>
 80020ee:	230a      	movs	r3, #10
 80020f0:	e010      	b.n	8002114 <HAL_GPIO_Init+0x240>
 80020f2:	2308      	movs	r3, #8
 80020f4:	e00e      	b.n	8002114 <HAL_GPIO_Init+0x240>
 80020f6:	2307      	movs	r3, #7
 80020f8:	e00c      	b.n	8002114 <HAL_GPIO_Init+0x240>
 80020fa:	2306      	movs	r3, #6
 80020fc:	e00a      	b.n	8002114 <HAL_GPIO_Init+0x240>
 80020fe:	2305      	movs	r3, #5
 8002100:	e008      	b.n	8002114 <HAL_GPIO_Init+0x240>
 8002102:	2304      	movs	r3, #4
 8002104:	e006      	b.n	8002114 <HAL_GPIO_Init+0x240>
 8002106:	2303      	movs	r3, #3
 8002108:	e004      	b.n	8002114 <HAL_GPIO_Init+0x240>
 800210a:	2302      	movs	r3, #2
 800210c:	e002      	b.n	8002114 <HAL_GPIO_Init+0x240>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <HAL_GPIO_Init+0x240>
 8002112:	2300      	movs	r3, #0
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	f002 0203 	and.w	r2, r2, #3
 800211a:	0092      	lsls	r2, r2, #2
 800211c:	4093      	lsls	r3, r2
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002124:	4935      	ldr	r1, [pc, #212]	@ (80021fc <HAL_GPIO_Init+0x328>)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	089b      	lsrs	r3, r3, #2
 800212a:	3302      	adds	r3, #2
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002132:	4b3d      	ldr	r3, [pc, #244]	@ (8002228 <HAL_GPIO_Init+0x354>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002156:	4a34      	ldr	r2, [pc, #208]	@ (8002228 <HAL_GPIO_Init+0x354>)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800215c:	4b32      	ldr	r3, [pc, #200]	@ (8002228 <HAL_GPIO_Init+0x354>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002180:	4a29      	ldr	r2, [pc, #164]	@ (8002228 <HAL_GPIO_Init+0x354>)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002186:	4b28      	ldr	r3, [pc, #160]	@ (8002228 <HAL_GPIO_Init+0x354>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002228 <HAL_GPIO_Init+0x354>)
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002228 <HAL_GPIO_Init+0x354>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021d4:	4a14      	ldr	r2, [pc, #80]	@ (8002228 <HAL_GPIO_Init+0x354>)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3301      	adds	r3, #1
 80021de:	61fb      	str	r3, [r7, #28]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	2b0f      	cmp	r3, #15
 80021e4:	f67f ae84 	bls.w	8001ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021e8:	bf00      	nop
 80021ea:	bf00      	nop
 80021ec:	3724      	adds	r7, #36	@ 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40013800 	.word	0x40013800
 8002200:	40020000 	.word	0x40020000
 8002204:	40020400 	.word	0x40020400
 8002208:	40020800 	.word	0x40020800
 800220c:	40020c00 	.word	0x40020c00
 8002210:	40021000 	.word	0x40021000
 8002214:	40021400 	.word	0x40021400
 8002218:	40021800 	.word	0x40021800
 800221c:	40021c00 	.word	0x40021c00
 8002220:	40022000 	.word	0x40022000
 8002224:	40022400 	.word	0x40022400
 8002228:	40013c00 	.word	0x40013c00

0800222c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	807b      	strh	r3, [r7, #2]
 8002238:	4613      	mov	r3, r2
 800223a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800223c:	787b      	ldrb	r3, [r7, #1]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002242:	887a      	ldrh	r2, [r7, #2]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002248:	e003      	b.n	8002252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800224a:	887b      	ldrh	r3, [r7, #2]
 800224c:	041a      	lsls	r2, r3, #16
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	619a      	str	r2, [r3, #24]
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800225e:	b480      	push	{r7}
 8002260:	b085      	sub	sp, #20
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	460b      	mov	r3, r1
 8002268:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002270:	887a      	ldrh	r2, [r7, #2]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4013      	ands	r3, r2
 8002276:	041a      	lsls	r2, r3, #16
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	43d9      	mvns	r1, r3
 800227c:	887b      	ldrh	r3, [r7, #2]
 800227e:	400b      	ands	r3, r1
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	619a      	str	r2, [r3, #24]
}
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b086      	sub	sp, #24
 8002296:	af02      	add	r7, sp, #8
 8002298:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e059      	b.n	8002358 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f00a fe2c 	bl	800cf1c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2203      	movs	r2, #3
 80022c8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022d2:	d102      	bne.n	80022da <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f004 ff1d 	bl	800711e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	7c1a      	ldrb	r2, [r3, #16]
 80022ec:	f88d 2000 	strb.w	r2, [sp]
 80022f0:	3304      	adds	r3, #4
 80022f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022f4:	f004 fe9e 	bl	8007034 <USB_CoreInit>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2202      	movs	r2, #2
 8002302:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e026      	b.n	8002358 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2101      	movs	r1, #1
 8002310:	4618      	mov	r0, r3
 8002312:	f004 ff15 	bl	8007140 <USB_SetCurrentMode>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e017      	b.n	8002358 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6818      	ldr	r0, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	7c1a      	ldrb	r2, [r3, #16]
 8002330:	f88d 2000 	strb.w	r2, [sp]
 8002334:	3304      	adds	r3, #4
 8002336:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002338:	f005 f8b8 	bl	80074ac <USB_HostInit>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d005      	beq.n	800234e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2202      	movs	r2, #2
 8002346:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e004      	b.n	8002358 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002360:	b590      	push	{r4, r7, lr}
 8002362:	b08b      	sub	sp, #44	@ 0x2c
 8002364:	af04      	add	r7, sp, #16
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	4608      	mov	r0, r1
 800236a:	4611      	mov	r1, r2
 800236c:	461a      	mov	r2, r3
 800236e:	4603      	mov	r3, r0
 8002370:	70fb      	strb	r3, [r7, #3]
 8002372:	460b      	mov	r3, r1
 8002374:	70bb      	strb	r3, [r7, #2]
 8002376:	4613      	mov	r3, r2
 8002378:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800237a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800237c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <HAL_HCD_HC_Init+0x2c>
 8002388:	2302      	movs	r3, #2
 800238a:	e09d      	b.n	80024c8 <HAL_HCD_HC_Init+0x168>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	3319      	adds	r3, #25
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80023a8:	78fa      	ldrb	r2, [r7, #3]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	3314      	adds	r3, #20
 80023b8:	787a      	ldrb	r2, [r7, #1]
 80023ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80023bc:	78fa      	ldrb	r2, [r7, #3]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	3315      	adds	r3, #21
 80023cc:	78fa      	ldrb	r2, [r7, #3]
 80023ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80023d0:	78fa      	ldrb	r2, [r7, #3]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	1a9b      	subs	r3, r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	3326      	adds	r3, #38	@ 0x26
 80023e0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80023e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80023e6:	78fa      	ldrb	r2, [r7, #3]
 80023e8:	78bb      	ldrb	r3, [r7, #2]
 80023ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023ee:	b2d8      	uxtb	r0, r3
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	1a9b      	subs	r3, r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	3316      	adds	r3, #22
 80023fe:	4602      	mov	r2, r0
 8002400:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	4619      	mov	r1, r3
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fbc8 	bl	8002b9c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800240c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002410:	2b00      	cmp	r3, #0
 8002412:	da0a      	bge.n	800242a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	3317      	adds	r3, #23
 8002424:	2201      	movs	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]
 8002428:	e009      	b.n	800243e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800242a:	78fa      	ldrb	r2, [r7, #3]
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	1a9b      	subs	r3, r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	3317      	adds	r3, #23
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f005 f996 	bl	8007774 <USB_GetHostSpeed>
 8002448:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800244a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800244e:	2b01      	cmp	r3, #1
 8002450:	d10b      	bne.n	800246a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002452:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002456:	2b01      	cmp	r3, #1
 8002458:	d107      	bne.n	800246a <HAL_HCD_HC_Init+0x10a>
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d104      	bne.n	800246a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2bbc      	cmp	r3, #188	@ 0xbc
 8002464:	d901      	bls.n	800246a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002466:	23bc      	movs	r3, #188	@ 0xbc
 8002468:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800246a:	78fa      	ldrb	r2, [r7, #3]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	1a9b      	subs	r3, r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	3318      	adds	r3, #24
 800247a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800247e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	b298      	uxth	r0, r3
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	3328      	adds	r3, #40	@ 0x28
 8002494:	4602      	mov	r2, r0
 8002496:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	787c      	ldrb	r4, [r7, #1]
 80024a2:	78ba      	ldrb	r2, [r7, #2]
 80024a4:	78f9      	ldrb	r1, [r7, #3]
 80024a6:	9302      	str	r3, [sp, #8]
 80024a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	4623      	mov	r3, r4
 80024b6:	f005 f985 	bl	80077c4 <USB_HC_Init>
 80024ba:	4603      	mov	r3, r0
 80024bc:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	371c      	adds	r7, #28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd90      	pop	{r4, r7, pc}

080024d0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_HCD_HC_Halt+0x1e>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e00f      	b.n	800250e <HAL_HCD_HC_Halt+0x3e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	78fa      	ldrb	r2, [r7, #3]
 80024fc:	4611      	mov	r1, r2
 80024fe:	4618      	mov	r0, r3
 8002500:	f005 fd17 	bl	8007f32 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800250c:	7bfb      	ldrb	r3, [r7, #15]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	4608      	mov	r0, r1
 8002522:	4611      	mov	r1, r2
 8002524:	461a      	mov	r2, r3
 8002526:	4603      	mov	r3, r0
 8002528:	70fb      	strb	r3, [r7, #3]
 800252a:	460b      	mov	r3, r1
 800252c:	70bb      	strb	r3, [r7, #2]
 800252e:	4613      	mov	r3, r2
 8002530:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002532:	78fa      	ldrb	r2, [r7, #3]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	1a9b      	subs	r3, r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	440b      	add	r3, r1
 8002540:	3317      	adds	r3, #23
 8002542:	78ba      	ldrb	r2, [r7, #2]
 8002544:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002546:	78fa      	ldrb	r2, [r7, #3]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	1a9b      	subs	r3, r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	3326      	adds	r3, #38	@ 0x26
 8002556:	787a      	ldrb	r2, [r7, #1]
 8002558:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800255a:	7c3b      	ldrb	r3, [r7, #16]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d114      	bne.n	800258a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002560:	78fa      	ldrb	r2, [r7, #3]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	332a      	adds	r3, #42	@ 0x2a
 8002570:	2203      	movs	r2, #3
 8002572:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002574:	78fa      	ldrb	r2, [r7, #3]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	3319      	adds	r3, #25
 8002584:	7f3a      	ldrb	r2, [r7, #28]
 8002586:	701a      	strb	r2, [r3, #0]
 8002588:	e009      	b.n	800259e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800258a:	78fa      	ldrb	r2, [r7, #3]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	1a9b      	subs	r3, r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	332a      	adds	r3, #42	@ 0x2a
 800259a:	2202      	movs	r2, #2
 800259c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800259e:	787b      	ldrb	r3, [r7, #1]
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	f200 8102 	bhi.w	80027aa <HAL_HCD_HC_SubmitRequest+0x292>
 80025a6:	a201      	add	r2, pc, #4	@ (adr r2, 80025ac <HAL_HCD_HC_SubmitRequest+0x94>)
 80025a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ac:	080025bd 	.word	0x080025bd
 80025b0:	08002795 	.word	0x08002795
 80025b4:	08002681 	.word	0x08002681
 80025b8:	0800270b 	.word	0x0800270b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80025bc:	7c3b      	ldrb	r3, [r7, #16]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	f040 80f5 	bne.w	80027ae <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80025c4:	78bb      	ldrb	r3, [r7, #2]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d12d      	bne.n	8002626 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80025ca:	8b3b      	ldrh	r3, [r7, #24]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d109      	bne.n	80025e4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80025d0:	78fa      	ldrb	r2, [r7, #3]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	333d      	adds	r3, #61	@ 0x3d
 80025e0:	2201      	movs	r2, #1
 80025e2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	333d      	adds	r3, #61	@ 0x3d
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10a      	bne.n	8002610 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025fa:	78fa      	ldrb	r2, [r7, #3]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	1a9b      	subs	r3, r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	332a      	adds	r3, #42	@ 0x2a
 800260a:	2200      	movs	r2, #0
 800260c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800260e:	e0ce      	b.n	80027ae <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	332a      	adds	r3, #42	@ 0x2a
 8002620:	2202      	movs	r2, #2
 8002622:	701a      	strb	r2, [r3, #0]
      break;
 8002624:	e0c3      	b.n	80027ae <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002626:	78fa      	ldrb	r2, [r7, #3]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	1a9b      	subs	r3, r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	331a      	adds	r3, #26
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b01      	cmp	r3, #1
 800263a:	f040 80b8 	bne.w	80027ae <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800263e:	78fa      	ldrb	r2, [r7, #3]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	1a9b      	subs	r3, r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	333c      	adds	r3, #60	@ 0x3c
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10a      	bne.n	800266a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002654:	78fa      	ldrb	r2, [r7, #3]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	1a9b      	subs	r3, r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	332a      	adds	r3, #42	@ 0x2a
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
      break;
 8002668:	e0a1      	b.n	80027ae <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800266a:	78fa      	ldrb	r2, [r7, #3]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	1a9b      	subs	r3, r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	332a      	adds	r3, #42	@ 0x2a
 800267a:	2202      	movs	r2, #2
 800267c:	701a      	strb	r2, [r3, #0]
      break;
 800267e:	e096      	b.n	80027ae <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002680:	78bb      	ldrb	r3, [r7, #2]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d120      	bne.n	80026c8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	333d      	adds	r3, #61	@ 0x3d
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10a      	bne.n	80026b2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	332a      	adds	r3, #42	@ 0x2a
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80026b0:	e07e      	b.n	80027b0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	332a      	adds	r3, #42	@ 0x2a
 80026c2:	2202      	movs	r2, #2
 80026c4:	701a      	strb	r2, [r3, #0]
      break;
 80026c6:	e073      	b.n	80027b0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	333c      	adds	r3, #60	@ 0x3c
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10a      	bne.n	80026f4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	1a9b      	subs	r3, r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	332a      	adds	r3, #42	@ 0x2a
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
      break;
 80026f2:	e05d      	b.n	80027b0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026f4:	78fa      	ldrb	r2, [r7, #3]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	332a      	adds	r3, #42	@ 0x2a
 8002704:	2202      	movs	r2, #2
 8002706:	701a      	strb	r2, [r3, #0]
      break;
 8002708:	e052      	b.n	80027b0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800270a:	78bb      	ldrb	r3, [r7, #2]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d120      	bne.n	8002752 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	333d      	adds	r3, #61	@ 0x3d
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10a      	bne.n	800273c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002726:	78fa      	ldrb	r2, [r7, #3]
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	1a9b      	subs	r3, r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	332a      	adds	r3, #42	@ 0x2a
 8002736:	2200      	movs	r2, #0
 8002738:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800273a:	e039      	b.n	80027b0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800273c:	78fa      	ldrb	r2, [r7, #3]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	332a      	adds	r3, #42	@ 0x2a
 800274c:	2202      	movs	r2, #2
 800274e:	701a      	strb	r2, [r3, #0]
      break;
 8002750:	e02e      	b.n	80027b0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002752:	78fa      	ldrb	r2, [r7, #3]
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	1a9b      	subs	r3, r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	333c      	adds	r3, #60	@ 0x3c
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002768:	78fa      	ldrb	r2, [r7, #3]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	1a9b      	subs	r3, r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	332a      	adds	r3, #42	@ 0x2a
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]
      break;
 800277c:	e018      	b.n	80027b0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800277e:	78fa      	ldrb	r2, [r7, #3]
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	4613      	mov	r3, r2
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	1a9b      	subs	r3, r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	440b      	add	r3, r1
 800278c:	332a      	adds	r3, #42	@ 0x2a
 800278e:	2202      	movs	r2, #2
 8002790:	701a      	strb	r2, [r3, #0]
      break;
 8002792:	e00d      	b.n	80027b0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002794:	78fa      	ldrb	r2, [r7, #3]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	1a9b      	subs	r3, r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	332a      	adds	r3, #42	@ 0x2a
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
      break;
 80027a8:	e002      	b.n	80027b0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80027aa:	bf00      	nop
 80027ac:	e000      	b.n	80027b0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80027ae:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	332c      	adds	r3, #44	@ 0x2c
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	8b39      	ldrh	r1, [r7, #24]
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	1a9b      	subs	r3, r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4403      	add	r3, r0
 80027d4:	3334      	adds	r3, #52	@ 0x34
 80027d6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80027d8:	78fa      	ldrb	r2, [r7, #3]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	334c      	adds	r3, #76	@ 0x4c
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80027ec:	78fa      	ldrb	r2, [r7, #3]
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	4613      	mov	r3, r2
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	1a9b      	subs	r3, r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	3338      	adds	r3, #56	@ 0x38
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002800:	78fa      	ldrb	r2, [r7, #3]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	3315      	adds	r3, #21
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002814:	78fa      	ldrb	r2, [r7, #3]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	334d      	adds	r3, #77	@ 0x4d
 8002824:	2200      	movs	r2, #0
 8002826:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	4613      	mov	r3, r2
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	1a9b      	subs	r3, r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	3310      	adds	r3, #16
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	4413      	add	r3, r2
 800283c:	1d19      	adds	r1, r3, #4
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	799b      	ldrb	r3, [r3, #6]
 8002842:	461a      	mov	r2, r3
 8002844:	f005 f8ea 	bl	8007a1c <USB_HC_StartXfer>
 8002848:	4603      	mov	r3, r0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop

08002854 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f004 fdde 	bl	800742c <USB_GetMode>
 8002870:	4603      	mov	r3, r0
 8002872:	2b01      	cmp	r3, #1
 8002874:	f040 80fb 	bne.w	8002a6e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f004 fda1 	bl	80073c4 <USB_ReadInterrupts>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 80f1 	beq.w	8002a6c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f004 fd98 	bl	80073c4 <USB_ReadInterrupts>
 8002894:	4603      	mov	r3, r0
 8002896:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800289a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800289e:	d104      	bne.n	80028aa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80028a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f004 fd88 	bl	80073c4 <USB_ReadInterrupts>
 80028b4:	4603      	mov	r3, r0
 80028b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028be:	d104      	bne.n	80028ca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80028c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f004 fd78 	bl	80073c4 <USB_ReadInterrupts>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028de:	d104      	bne.n	80028ea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80028e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f004 fd68 	bl	80073c4 <USB_ReadInterrupts>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d103      	bne.n	8002906 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2202      	movs	r2, #2
 8002904:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f004 fd5a 	bl	80073c4 <USB_ReadInterrupts>
 8002910:	4603      	mov	r3, r0
 8002912:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002916:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800291a:	d120      	bne.n	800295e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002924:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d113      	bne.n	800295e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002936:	2110      	movs	r1, #16
 8002938:	6938      	ldr	r0, [r7, #16]
 800293a:	f004 fc4d 	bl	80071d8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800293e:	6938      	ldr	r0, [r7, #16]
 8002940:	f004 fc7c 	bl	800723c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	7a5b      	ldrb	r3, [r3, #9]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d105      	bne.n	8002958 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2101      	movs	r1, #1
 8002952:	4618      	mov	r0, r3
 8002954:	f004 fe6e 	bl	8007634 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f00a fb59 	bl	800d010 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f004 fd2e 	bl	80073c4 <USB_ReadInterrupts>
 8002968:	4603      	mov	r3, r0
 800296a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800296e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002972:	d102      	bne.n	800297a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f001 fd33 	bl	80043e0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f004 fd20 	bl	80073c4 <USB_ReadInterrupts>
 8002984:	4603      	mov	r3, r0
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b08      	cmp	r3, #8
 800298c:	d106      	bne.n	800299c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f00a fb22 	bl	800cfd8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2208      	movs	r2, #8
 800299a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f004 fd0f 	bl	80073c4 <USB_ReadInterrupts>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80029b0:	d139      	bne.n	8002a26 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f005 faaa 	bl	8007f10 <USB_HC_ReadInterrupt>
 80029bc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	e025      	b.n	8002a10 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	fa22 f303 	lsr.w	r3, r2, r3
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d018      	beq.n	8002a0a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029ee:	d106      	bne.n	80029fe <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	4619      	mov	r1, r3
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f905 	bl	8002c06 <HCD_HC_IN_IRQHandler>
 80029fc:	e005      	b.n	8002a0a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	4619      	mov	r1, r3
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 ff67 	bl	80038d8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	795b      	ldrb	r3, [r3, #5]
 8002a14:	461a      	mov	r2, r3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d3d3      	bcc.n	80029c4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f004 fcca 	bl	80073c4 <USB_ReadInterrupts>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	2b10      	cmp	r3, #16
 8002a38:	d101      	bne.n	8002a3e <HAL_HCD_IRQHandler+0x1ea>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <HAL_HCD_IRQHandler+0x1ec>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d014      	beq.n	8002a6e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699a      	ldr	r2, [r3, #24]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0210 	bic.w	r2, r2, #16
 8002a52:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f001 fbe4 	bl	8004222 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699a      	ldr	r2, [r3, #24]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 0210 	orr.w	r2, r2, #16
 8002a68:	619a      	str	r2, [r3, #24]
 8002a6a:	e000      	b.n	8002a6e <HAL_HCD_IRQHandler+0x21a>
      return;
 8002a6c:	bf00      	nop
    }
  }
}
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_HCD_Start+0x16>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e013      	b.n	8002ab2 <HAL_HCD_Start+0x3e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2101      	movs	r1, #1
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f004 fe32 	bl	8007702 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f004 fb2a 	bl	80070fc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_HCD_Stop+0x16>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e00d      	b.n	8002aec <HAL_HCD_Stop+0x32>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f005 fb85 	bl	80081ec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f004 fdd4 	bl	80076ae <USB_ResetPort>
 8002b06:	4603      	mov	r3, r0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002b1c:	78fa      	ldrb	r2, [r7, #3]
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	1a9b      	subs	r3, r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	334c      	adds	r3, #76	@ 0x4c
 8002b2c:	781b      	ldrb	r3, [r3, #0]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	460b      	mov	r3, r1
 8002b44:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002b46:	78fa      	ldrb	r2, [r7, #3]
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	1a9b      	subs	r3, r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	3338      	adds	r3, #56	@ 0x38
 8002b56:	681b      	ldr	r3, [r3, #0]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f004 fe16 	bl	80077a2 <USB_GetCurrentFrame>
 8002b76:	4603      	mov	r3, r0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f004 fdf1 	bl	8007774 <USB_GetHostSpeed>
 8002b92:	4603      	mov	r3, r0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	331a      	adds	r3, #26
 8002bb8:	2200      	movs	r2, #0
 8002bba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	331b      	adds	r3, #27
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002bd0:	78fa      	ldrb	r2, [r7, #3]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	3325      	adds	r3, #37	@ 0x25
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	3324      	adds	r3, #36	@ 0x24
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b086      	sub	sp, #24
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	4611      	mov	r1, r2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f004 fbe0 	bl	80073ea <USB_ReadChInterrupts>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d11a      	bne.n	8002c6a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c40:	461a      	mov	r2, r3
 8002c42:	2304      	movs	r3, #4
 8002c44:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	334d      	adds	r3, #77	@ 0x4d
 8002c56:	2207      	movs	r2, #7
 8002c58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	78fa      	ldrb	r2, [r7, #3]
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f005 f965 	bl	8007f32 <USB_HC_Halt>
 8002c68:	e09e      	b.n	8002da8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	4611      	mov	r1, r2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f004 fbb9 	bl	80073ea <USB_ReadChInterrupts>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c82:	d11b      	bne.n	8002cbc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c90:	461a      	mov	r2, r3
 8002c92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c96:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	334d      	adds	r3, #77	@ 0x4d
 8002ca8:	2208      	movs	r2, #8
 8002caa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f005 f93c 	bl	8007f32 <USB_HC_Halt>
 8002cba:	e075      	b.n	8002da8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f004 fb90 	bl	80073ea <USB_ReadChInterrupts>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d11a      	bne.n	8002d0a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	2308      	movs	r3, #8
 8002ce4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	334d      	adds	r3, #77	@ 0x4d
 8002cf6:	2206      	movs	r2, #6
 8002cf8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	78fa      	ldrb	r2, [r7, #3]
 8002d00:	4611      	mov	r1, r2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f005 f915 	bl	8007f32 <USB_HC_Halt>
 8002d08:	e04e      	b.n	8002da8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	4611      	mov	r1, r2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f004 fb69 	bl	80073ea <USB_ReadChInterrupts>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d22:	d11b      	bne.n	8002d5c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d30:	461a      	mov	r2, r3
 8002d32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d36:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002d38:	78fa      	ldrb	r2, [r7, #3]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	334d      	adds	r3, #77	@ 0x4d
 8002d48:	2209      	movs	r2, #9
 8002d4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f005 f8ec 	bl	8007f32 <USB_HC_Halt>
 8002d5a:	e025      	b.n	8002da8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	4611      	mov	r1, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f004 fb40 	bl	80073ea <USB_ReadChInterrupts>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d70:	2b80      	cmp	r3, #128	@ 0x80
 8002d72:	d119      	bne.n	8002da8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d80:	461a      	mov	r2, r3
 8002d82:	2380      	movs	r3, #128	@ 0x80
 8002d84:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d86:	78fa      	ldrb	r2, [r7, #3]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	334d      	adds	r3, #77	@ 0x4d
 8002d96:	2207      	movs	r2, #7
 8002d98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	78fa      	ldrb	r2, [r7, #3]
 8002da0:	4611      	mov	r1, r2
 8002da2:	4618      	mov	r0, r3
 8002da4:	f005 f8c5 	bl	8007f32 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	78fa      	ldrb	r2, [r7, #3]
 8002dae:	4611      	mov	r1, r2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f004 fb1a 	bl	80073ea <USB_ReadChInterrupts>
 8002db6:	4603      	mov	r3, r0
 8002db8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dc0:	d112      	bne.n	8002de8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	78fa      	ldrb	r2, [r7, #3]
 8002dc8:	4611      	mov	r1, r2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f005 f8b1 	bl	8007f32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ddc:	461a      	mov	r2, r3
 8002dde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002de2:	6093      	str	r3, [r2, #8]
 8002de4:	f000 bd75 	b.w	80038d2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	4611      	mov	r1, r2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f004 fafa 	bl	80073ea <USB_ReadChInterrupts>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	f040 8128 	bne.w	8003052 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2320      	movs	r3, #32
 8002e12:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	331b      	adds	r3, #27
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d119      	bne.n	8002e5e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002e2a:	78fa      	ldrb	r2, [r7, #3]
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	1a9b      	subs	r3, r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	331b      	adds	r3, #27
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e3e:	78fb      	ldrb	r3, [r7, #3]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	78fa      	ldrb	r2, [r7, #3]
 8002e4e:	0151      	lsls	r1, r2, #5
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	440a      	add	r2, r1
 8002e54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e5c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	799b      	ldrb	r3, [r3, #6]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d01b      	beq.n	8002e9e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	3330      	adds	r3, #48	@ 0x30
 8002e76:	6819      	ldr	r1, [r3, #0]
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	1ac9      	subs	r1, r1, r3
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4403      	add	r3, r0
 8002e9a:	3338      	adds	r3, #56	@ 0x38
 8002e9c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	334d      	adds	r3, #77	@ 0x4d
 8002eae:	2201      	movs	r2, #1
 8002eb0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3344      	adds	r3, #68	@ 0x44
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002ec6:	78fb      	ldrb	r3, [r7, #3]
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	1a9b      	subs	r3, r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	3326      	adds	r3, #38	@ 0x26
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00a      	beq.n	8002f04 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	1a9b      	subs	r3, r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	3326      	adds	r3, #38	@ 0x26
 8002efe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d110      	bne.n	8002f26 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	78fa      	ldrb	r2, [r7, #3]
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f005 f810 	bl	8007f32 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2310      	movs	r3, #16
 8002f22:	6093      	str	r3, [r2, #8]
 8002f24:	e03d      	b.n	8002fa2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	3326      	adds	r3, #38	@ 0x26
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b03      	cmp	r3, #3
 8002f3a:	d00a      	beq.n	8002f52 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	3326      	adds	r3, #38	@ 0x26
 8002f4c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d127      	bne.n	8002fa2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	015a      	lsls	r2, r3, #5
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4413      	add	r3, r2
 8002f5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	0151      	lsls	r1, r2, #5
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	440a      	add	r2, r1
 8002f68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f6c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002f70:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	334c      	adds	r3, #76	@ 0x4c
 8002f82:	2201      	movs	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f86:	78fa      	ldrb	r2, [r7, #3]
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	1a9b      	subs	r3, r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	334c      	adds	r3, #76	@ 0x4c
 8002f96:	781a      	ldrb	r2, [r3, #0]
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f00a f845 	bl	800d02c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	799b      	ldrb	r3, [r3, #6]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d13b      	bne.n	8003022 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002faa:	78fa      	ldrb	r2, [r7, #3]
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	3338      	adds	r3, #56	@ 0x38
 8002fba:	6819      	ldr	r1, [r3, #0]
 8002fbc:	78fa      	ldrb	r2, [r7, #3]
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4403      	add	r3, r0
 8002fca:	3328      	adds	r3, #40	@ 0x28
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	440b      	add	r3, r1
 8002fd0:	1e59      	subs	r1, r3, #1
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4403      	add	r3, r0
 8002fe0:	3328      	adds	r3, #40	@ 0x28
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 8470 	beq.w	80038d2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	333c      	adds	r3, #60	@ 0x3c
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	78fa      	ldrb	r2, [r7, #3]
 8003006:	f083 0301 	eor.w	r3, r3, #1
 800300a:	b2d8      	uxtb	r0, r3
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	333c      	adds	r3, #60	@ 0x3c
 800301a:	4602      	mov	r2, r0
 800301c:	701a      	strb	r2, [r3, #0]
 800301e:	f000 bc58 	b.w	80038d2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	333c      	adds	r3, #60	@ 0x3c
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	78fa      	ldrb	r2, [r7, #3]
 8003036:	f083 0301 	eor.w	r3, r3, #1
 800303a:	b2d8      	uxtb	r0, r3
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	333c      	adds	r3, #60	@ 0x3c
 800304a:	4602      	mov	r2, r0
 800304c:	701a      	strb	r2, [r3, #0]
 800304e:	f000 bc40 	b.w	80038d2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	78fa      	ldrb	r2, [r7, #3]
 8003058:	4611      	mov	r1, r2
 800305a:	4618      	mov	r0, r3
 800305c:	f004 f9c5 	bl	80073ea <USB_ReadChInterrupts>
 8003060:	4603      	mov	r3, r0
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	2b20      	cmp	r3, #32
 8003068:	d131      	bne.n	80030ce <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4413      	add	r3, r2
 8003072:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003076:	461a      	mov	r2, r3
 8003078:	2320      	movs	r3, #32
 800307a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	331a      	adds	r3, #26
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b01      	cmp	r3, #1
 8003090:	f040 841f 	bne.w	80038d2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003094:	78fa      	ldrb	r2, [r7, #3]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	1a9b      	subs	r3, r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	331b      	adds	r3, #27
 80030a4:	2201      	movs	r2, #1
 80030a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80030a8:	78fa      	ldrb	r2, [r7, #3]
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	1a9b      	subs	r3, r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	334d      	adds	r3, #77	@ 0x4d
 80030b8:	2203      	movs	r2, #3
 80030ba:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f004 ff34 	bl	8007f32 <USB_HC_Halt>
 80030ca:	f000 bc02 	b.w	80038d2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	4611      	mov	r1, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f004 f987 	bl	80073ea <USB_ReadChInterrupts>
 80030dc:	4603      	mov	r3, r0
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	f040 8305 	bne.w	80036f2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030f4:	461a      	mov	r2, r3
 80030f6:	2302      	movs	r3, #2
 80030f8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80030fa:	78fa      	ldrb	r2, [r7, #3]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	334d      	adds	r3, #77	@ 0x4d
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d114      	bne.n	800313a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003110:	78fa      	ldrb	r2, [r7, #3]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	334d      	adds	r3, #77	@ 0x4d
 8003120:	2202      	movs	r2, #2
 8003122:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	334c      	adds	r3, #76	@ 0x4c
 8003134:	2201      	movs	r2, #1
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	e2cc      	b.n	80036d4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800313a:	78fa      	ldrb	r2, [r7, #3]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	334d      	adds	r3, #77	@ 0x4d
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b06      	cmp	r3, #6
 800314e:	d114      	bne.n	800317a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	334d      	adds	r3, #77	@ 0x4d
 8003160:	2202      	movs	r2, #2
 8003162:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	334c      	adds	r3, #76	@ 0x4c
 8003174:	2205      	movs	r2, #5
 8003176:	701a      	strb	r2, [r3, #0]
 8003178:	e2ac      	b.n	80036d4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800317a:	78fa      	ldrb	r2, [r7, #3]
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	1a9b      	subs	r3, r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	334d      	adds	r3, #77	@ 0x4d
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b07      	cmp	r3, #7
 800318e:	d00b      	beq.n	80031a8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	1a9b      	subs	r3, r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	334d      	adds	r3, #77	@ 0x4d
 80031a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80031a2:	2b09      	cmp	r3, #9
 80031a4:	f040 80a6 	bne.w	80032f4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	334d      	adds	r3, #77	@ 0x4d
 80031b8:	2202      	movs	r2, #2
 80031ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80031bc:	78fa      	ldrb	r2, [r7, #3]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	3344      	adds	r3, #68	@ 0x44
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	1c59      	adds	r1, r3, #1
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4403      	add	r3, r0
 80031dc:	3344      	adds	r3, #68	@ 0x44
 80031de:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031e0:	78fa      	ldrb	r2, [r7, #3]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	3344      	adds	r3, #68	@ 0x44
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d943      	bls.n	800327e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80031f6:	78fa      	ldrb	r2, [r7, #3]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	3344      	adds	r3, #68	@ 0x44
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800320a:	78fa      	ldrb	r2, [r7, #3]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	331a      	adds	r3, #26
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d123      	bne.n	8003268 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	331b      	adds	r3, #27
 8003230:	2200      	movs	r2, #0
 8003232:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	1a9b      	subs	r3, r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	331c      	adds	r3, #28
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4413      	add	r3, r2
 8003250:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	0151      	lsls	r1, r2, #5
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	440a      	add	r2, r1
 800325e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003262:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003266:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003268:	78fa      	ldrb	r2, [r7, #3]
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	334c      	adds	r3, #76	@ 0x4c
 8003278:	2204      	movs	r2, #4
 800327a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800327c:	e229      	b.n	80036d2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	334c      	adds	r3, #76	@ 0x4c
 800328e:	2202      	movs	r2, #2
 8003290:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	3326      	adds	r3, #38	@ 0x26
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00b      	beq.n	80032c0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032a8:	78fa      	ldrb	r2, [r7, #3]
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	1a9b      	subs	r3, r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	3326      	adds	r3, #38	@ 0x26
 80032b8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	f040 8209 	bne.w	80036d2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80032d6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032de:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032ec:	461a      	mov	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032f2:	e1ee      	b.n	80036d2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80032f4:	78fa      	ldrb	r2, [r7, #3]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	334d      	adds	r3, #77	@ 0x4d
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b05      	cmp	r3, #5
 8003308:	f040 80c8 	bne.w	800349c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800330c:	78fa      	ldrb	r2, [r7, #3]
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	1a9b      	subs	r3, r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	334d      	adds	r3, #77	@ 0x4d
 800331c:	2202      	movs	r2, #2
 800331e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003320:	78fa      	ldrb	r2, [r7, #3]
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	331b      	adds	r3, #27
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b01      	cmp	r3, #1
 8003334:	f040 81ce 	bne.w	80036d4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	3326      	adds	r3, #38	@ 0x26
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b03      	cmp	r3, #3
 800334c:	d16b      	bne.n	8003426 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	3348      	adds	r3, #72	@ 0x48
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	1c59      	adds	r1, r3, #1
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4403      	add	r3, r0
 800336e:	3348      	adds	r3, #72	@ 0x48
 8003370:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	3348      	adds	r3, #72	@ 0x48
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d943      	bls.n	8003410 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	3348      	adds	r3, #72	@ 0x48
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	331b      	adds	r3, #27
 80033ac:	2200      	movs	r2, #0
 80033ae:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80033b0:	78fa      	ldrb	r2, [r7, #3]
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	3344      	adds	r3, #68	@ 0x44
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d809      	bhi.n	80033da <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	1a9b      	subs	r3, r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	331c      	adds	r3, #28
 80033d6:	2201      	movs	r2, #1
 80033d8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80033da:	78fb      	ldrb	r3, [r7, #3]
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	0151      	lsls	r1, r2, #5
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	440a      	add	r2, r1
 80033f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033f8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	1a9b      	subs	r3, r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	334c      	adds	r3, #76	@ 0x4c
 800340a:	2204      	movs	r2, #4
 800340c:	701a      	strb	r2, [r3, #0]
 800340e:	e014      	b.n	800343a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	334c      	adds	r3, #76	@ 0x4c
 8003420:	2202      	movs	r2, #2
 8003422:	701a      	strb	r2, [r3, #0]
 8003424:	e009      	b.n	800343a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	334c      	adds	r3, #76	@ 0x4c
 8003436:	2202      	movs	r2, #2
 8003438:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	3326      	adds	r3, #38	@ 0x26
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00b      	beq.n	8003468 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003450:	78fa      	ldrb	r2, [r7, #3]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	3326      	adds	r3, #38	@ 0x26
 8003460:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003462:	2b02      	cmp	r3, #2
 8003464:	f040 8136 	bne.w	80036d4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4413      	add	r3, r2
 8003470:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800347e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003486:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4413      	add	r3, r2
 8003490:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003494:	461a      	mov	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	e11b      	b.n	80036d4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800349c:	78fa      	ldrb	r2, [r7, #3]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	334d      	adds	r3, #77	@ 0x4d
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	f040 8081 	bne.w	80035b6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034b4:	78fa      	ldrb	r2, [r7, #3]
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	334d      	adds	r3, #77	@ 0x4d
 80034c4:	2202      	movs	r2, #2
 80034c6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	331b      	adds	r3, #27
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	f040 80fa 	bne.w	80036d4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034e0:	78fa      	ldrb	r2, [r7, #3]
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	1a9b      	subs	r3, r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	334c      	adds	r3, #76	@ 0x4c
 80034f0:	2202      	movs	r2, #2
 80034f2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	0151      	lsls	r1, r2, #5
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	440a      	add	r2, r1
 800350a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800350e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003512:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	4413      	add	r3, r2
 800351c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	78fa      	ldrb	r2, [r7, #3]
 8003524:	0151      	lsls	r1, r2, #5
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	440a      	add	r2, r1
 800352a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800352e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003532:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4413      	add	r3, r2
 800353c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	78fa      	ldrb	r2, [r7, #3]
 8003544:	0151      	lsls	r1, r2, #5
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	440a      	add	r2, r1
 800354a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800354e:	f023 0320 	bic.w	r3, r3, #32
 8003552:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003554:	78fa      	ldrb	r2, [r7, #3]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	3326      	adds	r3, #38	@ 0x26
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00b      	beq.n	8003582 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800356a:	78fa      	ldrb	r2, [r7, #3]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	3326      	adds	r3, #38	@ 0x26
 800357a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800357c:	2b02      	cmp	r3, #2
 800357e:	f040 80a9 	bne.w	80036d4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4413      	add	r3, r2
 800358a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003598:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035a0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80035a2:	78fb      	ldrb	r3, [r7, #3]
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ae:	461a      	mov	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	e08e      	b.n	80036d4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80035b6:	78fa      	ldrb	r2, [r7, #3]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	334d      	adds	r3, #77	@ 0x4d
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d143      	bne.n	8003654 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035cc:	78fa      	ldrb	r2, [r7, #3]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	334d      	adds	r3, #77	@ 0x4d
 80035dc:	2202      	movs	r2, #2
 80035de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035e0:	78fa      	ldrb	r2, [r7, #3]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	334c      	adds	r3, #76	@ 0x4c
 80035f0:	2202      	movs	r2, #2
 80035f2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035f4:	78fa      	ldrb	r2, [r7, #3]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	3326      	adds	r3, #38	@ 0x26
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	3326      	adds	r3, #38	@ 0x26
 800361a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800361c:	2b02      	cmp	r3, #2
 800361e:	d159      	bne.n	80036d4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003620:	78fb      	ldrb	r3, [r7, #3]
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4413      	add	r3, r2
 8003628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003636:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800363e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	4413      	add	r3, r2
 8003648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800364c:	461a      	mov	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	e03f      	b.n	80036d4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	334d      	adds	r3, #77	@ 0x4d
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b08      	cmp	r3, #8
 8003668:	d126      	bne.n	80036b8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	334d      	adds	r3, #77	@ 0x4d
 800367a:	2202      	movs	r2, #2
 800367c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	3344      	adds	r3, #68	@ 0x44
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	1c59      	adds	r1, r3, #1
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4403      	add	r3, r0
 800369e:	3344      	adds	r3, #68	@ 0x44
 80036a0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80036a2:	78fa      	ldrb	r2, [r7, #3]
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	334c      	adds	r3, #76	@ 0x4c
 80036b2:	2204      	movs	r2, #4
 80036b4:	701a      	strb	r2, [r3, #0]
 80036b6:	e00d      	b.n	80036d4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	334d      	adds	r3, #77	@ 0x4d
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	f000 8100 	beq.w	80038d0 <HCD_HC_IN_IRQHandler+0xcca>
 80036d0:	e000      	b.n	80036d4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036d2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80036d4:	78fa      	ldrb	r2, [r7, #3]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	334c      	adds	r3, #76	@ 0x4c
 80036e4:	781a      	ldrb	r2, [r3, #0]
 80036e6:	78fb      	ldrb	r3, [r7, #3]
 80036e8:	4619      	mov	r1, r3
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f009 fc9e 	bl	800d02c <HAL_HCD_HC_NotifyURBChange_Callback>
 80036f0:	e0ef      	b.n	80038d2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	4611      	mov	r1, r2
 80036fa:	4618      	mov	r0, r3
 80036fc:	f003 fe75 	bl	80073ea <USB_ReadChInterrupts>
 8003700:	4603      	mov	r3, r0
 8003702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003706:	2b40      	cmp	r3, #64	@ 0x40
 8003708:	d12f      	bne.n	800376a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	4413      	add	r3, r2
 8003712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003716:	461a      	mov	r2, r3
 8003718:	2340      	movs	r3, #64	@ 0x40
 800371a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800371c:	78fa      	ldrb	r2, [r7, #3]
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	334d      	adds	r3, #77	@ 0x4d
 800372c:	2205      	movs	r2, #5
 800372e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	331a      	adds	r3, #26
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003746:	78fa      	ldrb	r2, [r7, #3]
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	1a9b      	subs	r3, r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	440b      	add	r3, r1
 8003754:	3344      	adds	r3, #68	@ 0x44
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	78fa      	ldrb	r2, [r7, #3]
 8003760:	4611      	mov	r1, r2
 8003762:	4618      	mov	r0, r3
 8003764:	f004 fbe5 	bl	8007f32 <USB_HC_Halt>
 8003768:	e0b3      	b.n	80038d2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	78fa      	ldrb	r2, [r7, #3]
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f003 fe39 	bl	80073ea <USB_ReadChInterrupts>
 8003778:	4603      	mov	r3, r0
 800377a:	f003 0310 	and.w	r3, r3, #16
 800377e:	2b10      	cmp	r3, #16
 8003780:	f040 80a7 	bne.w	80038d2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003784:	78fa      	ldrb	r2, [r7, #3]
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	4613      	mov	r3, r2
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	3326      	adds	r3, #38	@ 0x26
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b03      	cmp	r3, #3
 8003798:	d11b      	bne.n	80037d2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800379a:	78fa      	ldrb	r2, [r7, #3]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	3344      	adds	r3, #68	@ 0x44
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80037ae:	78fa      	ldrb	r2, [r7, #3]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	334d      	adds	r3, #77	@ 0x4d
 80037be:	2204      	movs	r2, #4
 80037c0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	78fa      	ldrb	r2, [r7, #3]
 80037c8:	4611      	mov	r1, r2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f004 fbb1 	bl	8007f32 <USB_HC_Halt>
 80037d0:	e03f      	b.n	8003852 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037d2:	78fa      	ldrb	r2, [r7, #3]
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	3326      	adds	r3, #38	@ 0x26
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00a      	beq.n	80037fe <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80037e8:	78fa      	ldrb	r2, [r7, #3]
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	3326      	adds	r3, #38	@ 0x26
 80037f8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d129      	bne.n	8003852 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80037fe:	78fa      	ldrb	r2, [r7, #3]
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	1a9b      	subs	r3, r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	3344      	adds	r3, #68	@ 0x44
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	799b      	ldrb	r3, [r3, #6]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <HCD_HC_IN_IRQHandler+0xc2a>
 800381a:	78fa      	ldrb	r2, [r7, #3]
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	1a9b      	subs	r3, r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	331b      	adds	r3, #27
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d110      	bne.n	8003852 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003830:	78fa      	ldrb	r2, [r7, #3]
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	334d      	adds	r3, #77	@ 0x4d
 8003840:	2204      	movs	r2, #4
 8003842:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	78fa      	ldrb	r2, [r7, #3]
 800384a:	4611      	mov	r1, r2
 800384c:	4618      	mov	r0, r3
 800384e:	f004 fb70 	bl	8007f32 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003852:	78fa      	ldrb	r2, [r7, #3]
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	1a9b      	subs	r3, r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	331b      	adds	r3, #27
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d129      	bne.n	80038bc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003868:	78fa      	ldrb	r2, [r7, #3]
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	4613      	mov	r3, r2
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	1a9b      	subs	r3, r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	331b      	adds	r3, #27
 8003878:	2200      	movs	r2, #0
 800387a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800387c:	78fb      	ldrb	r3, [r7, #3]
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	4413      	add	r3, r2
 8003884:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	78fa      	ldrb	r2, [r7, #3]
 800388c:	0151      	lsls	r1, r2, #5
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	440a      	add	r2, r1
 8003892:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003896:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800389a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800389c:	78fb      	ldrb	r3, [r7, #3]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	78fa      	ldrb	r2, [r7, #3]
 80038ac:	0151      	lsls	r1, r2, #5
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	440a      	add	r2, r1
 80038b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038b6:	f043 0320 	orr.w	r3, r3, #32
 80038ba:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038c8:	461a      	mov	r2, r3
 80038ca:	2310      	movs	r3, #16
 80038cc:	6093      	str	r3, [r2, #8]
 80038ce:	e000      	b.n	80038d2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80038d0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	78fa      	ldrb	r2, [r7, #3]
 80038f4:	4611      	mov	r1, r2
 80038f6:	4618      	mov	r0, r3
 80038f8:	f003 fd77 	bl	80073ea <USB_ReadChInterrupts>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b04      	cmp	r3, #4
 8003904:	d11b      	bne.n	800393e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003906:	78fb      	ldrb	r3, [r7, #3]
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4413      	add	r3, r2
 800390e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003912:	461a      	mov	r2, r3
 8003914:	2304      	movs	r3, #4
 8003916:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003918:	78fa      	ldrb	r2, [r7, #3]
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	1a9b      	subs	r3, r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	334d      	adds	r3, #77	@ 0x4d
 8003928:	2207      	movs	r2, #7
 800392a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	78fa      	ldrb	r2, [r7, #3]
 8003932:	4611      	mov	r1, r2
 8003934:	4618      	mov	r0, r3
 8003936:	f004 fafc 	bl	8007f32 <USB_HC_Halt>
 800393a:	f000 bc6f 	b.w	800421c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	78fa      	ldrb	r2, [r7, #3]
 8003944:	4611      	mov	r1, r2
 8003946:	4618      	mov	r0, r3
 8003948:	f003 fd4f 	bl	80073ea <USB_ReadChInterrupts>
 800394c:	4603      	mov	r3, r0
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b20      	cmp	r3, #32
 8003954:	f040 8082 	bne.w	8003a5c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003958:	78fb      	ldrb	r3, [r7, #3]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	4413      	add	r3, r2
 8003960:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003964:	461a      	mov	r2, r3
 8003966:	2320      	movs	r3, #32
 8003968:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	3319      	adds	r3, #25
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d124      	bne.n	80039ca <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003980:	78fa      	ldrb	r2, [r7, #3]
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	3319      	adds	r3, #25
 8003990:	2200      	movs	r2, #0
 8003992:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003994:	78fa      	ldrb	r2, [r7, #3]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	1a9b      	subs	r3, r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	334c      	adds	r3, #76	@ 0x4c
 80039a4:	2202      	movs	r2, #2
 80039a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	1a9b      	subs	r3, r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	334d      	adds	r3, #77	@ 0x4d
 80039b8:	2203      	movs	r2, #3
 80039ba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	78fa      	ldrb	r2, [r7, #3]
 80039c2:	4611      	mov	r1, r2
 80039c4:	4618      	mov	r0, r3
 80039c6:	f004 fab4 	bl	8007f32 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80039ca:	78fa      	ldrb	r2, [r7, #3]
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	4613      	mov	r3, r2
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	331a      	adds	r3, #26
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	f040 841d 	bne.w	800421c <HCD_HC_OUT_IRQHandler+0x944>
 80039e2:	78fa      	ldrb	r2, [r7, #3]
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	331b      	adds	r3, #27
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f040 8411 	bne.w	800421c <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80039fa:	78fa      	ldrb	r2, [r7, #3]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4613      	mov	r3, r2
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	1a9b      	subs	r3, r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	3326      	adds	r3, #38	@ 0x26
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d009      	beq.n	8003a24 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003a10:	78fa      	ldrb	r2, [r7, #3]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	331b      	adds	r3, #27
 8003a20:	2201      	movs	r2, #1
 8003a22:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003a24:	78fa      	ldrb	r2, [r7, #3]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	1a9b      	subs	r3, r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	334d      	adds	r3, #77	@ 0x4d
 8003a34:	2203      	movs	r2, #3
 8003a36:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	4611      	mov	r1, r2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f004 fa76 	bl	8007f32 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	3344      	adds	r3, #68	@ 0x44
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	e3df      	b.n	800421c <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	78fa      	ldrb	r2, [r7, #3]
 8003a62:	4611      	mov	r1, r2
 8003a64:	4618      	mov	r0, r3
 8003a66:	f003 fcc0 	bl	80073ea <USB_ReadChInterrupts>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a74:	d111      	bne.n	8003a9a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a82:	461a      	mov	r2, r3
 8003a84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a88:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f004 fa4d 	bl	8007f32 <USB_HC_Halt>
 8003a98:	e3c0      	b.n	800421c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f003 fca1 	bl	80073ea <USB_ReadChInterrupts>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d168      	bne.n	8003b84 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003ab2:	78fa      	ldrb	r2, [r7, #3]
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	3344      	adds	r3, #68	@ 0x44
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	78fa      	ldrb	r2, [r7, #3]
 8003acc:	4611      	mov	r1, r2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f003 fc8b 	bl	80073ea <USB_ReadChInterrupts>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ada:	2b40      	cmp	r3, #64	@ 0x40
 8003adc:	d112      	bne.n	8003b04 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	3319      	adds	r3, #25
 8003aee:	2201      	movs	r2, #1
 8003af0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003af2:	78fb      	ldrb	r3, [r7, #3]
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003afe:	461a      	mov	r2, r3
 8003b00:	2340      	movs	r3, #64	@ 0x40
 8003b02:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	331b      	adds	r3, #27
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d019      	beq.n	8003b4e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003b1a:	78fa      	ldrb	r2, [r7, #3]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	331b      	adds	r3, #27
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b2e:	78fb      	ldrb	r3, [r7, #3]
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	78fa      	ldrb	r2, [r7, #3]
 8003b3e:	0151      	lsls	r1, r2, #5
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	440a      	add	r2, r1
 8003b44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b4c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003b4e:	78fb      	ldrb	r3, [r7, #3]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003b60:	78fa      	ldrb	r2, [r7, #3]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	334d      	adds	r3, #77	@ 0x4d
 8003b70:	2201      	movs	r2, #1
 8003b72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	78fa      	ldrb	r2, [r7, #3]
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f004 f9d8 	bl	8007f32 <USB_HC_Halt>
 8003b82:	e34b      	b.n	800421c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f003 fc2c 	bl	80073ea <USB_ReadChInterrupts>
 8003b92:	4603      	mov	r3, r0
 8003b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b98:	2b40      	cmp	r3, #64	@ 0x40
 8003b9a:	d139      	bne.n	8003c10 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003b9c:	78fa      	ldrb	r2, [r7, #3]
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	1a9b      	subs	r3, r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	334d      	adds	r3, #77	@ 0x4d
 8003bac:	2205      	movs	r2, #5
 8003bae:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003bb0:	78fa      	ldrb	r2, [r7, #3]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	1a9b      	subs	r3, r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	331a      	adds	r3, #26
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d109      	bne.n	8003bda <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003bc6:	78fa      	ldrb	r2, [r7, #3]
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	1a9b      	subs	r3, r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	3319      	adds	r3, #25
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003bda:	78fa      	ldrb	r2, [r7, #3]
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	1a9b      	subs	r3, r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	3344      	adds	r3, #68	@ 0x44
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	78fa      	ldrb	r2, [r7, #3]
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f004 f99b 	bl	8007f32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2340      	movs	r3, #64	@ 0x40
 8003c0c:	6093      	str	r3, [r2, #8]
 8003c0e:	e305      	b.n	800421c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	78fa      	ldrb	r2, [r7, #3]
 8003c16:	4611      	mov	r1, r2
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f003 fbe6 	bl	80073ea <USB_ReadChInterrupts>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d11a      	bne.n	8003c5e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003c28:	78fb      	ldrb	r3, [r7, #3]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c34:	461a      	mov	r2, r3
 8003c36:	2308      	movs	r3, #8
 8003c38:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003c3a:	78fa      	ldrb	r2, [r7, #3]
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	1a9b      	subs	r3, r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	334d      	adds	r3, #77	@ 0x4d
 8003c4a:	2206      	movs	r2, #6
 8003c4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	78fa      	ldrb	r2, [r7, #3]
 8003c54:	4611      	mov	r1, r2
 8003c56:	4618      	mov	r0, r3
 8003c58:	f004 f96b 	bl	8007f32 <USB_HC_Halt>
 8003c5c:	e2de      	b.n	800421c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	4611      	mov	r1, r2
 8003c66:	4618      	mov	r0, r3
 8003c68:	f003 fbbf 	bl	80073ea <USB_ReadChInterrupts>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f003 0310 	and.w	r3, r3, #16
 8003c72:	2b10      	cmp	r3, #16
 8003c74:	d144      	bne.n	8003d00 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003c76:	78fa      	ldrb	r2, [r7, #3]
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	440b      	add	r3, r1
 8003c84:	3344      	adds	r3, #68	@ 0x44
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	1a9b      	subs	r3, r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	334d      	adds	r3, #77	@ 0x4d
 8003c9a:	2204      	movs	r2, #4
 8003c9c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003c9e:	78fa      	ldrb	r2, [r7, #3]
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	1a9b      	subs	r3, r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	3319      	adds	r3, #25
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d114      	bne.n	8003cde <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	3318      	adds	r3, #24
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d109      	bne.n	8003cde <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003cca:	78fa      	ldrb	r2, [r7, #3]
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	1a9b      	subs	r3, r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	3319      	adds	r3, #25
 8003cda:	2201      	movs	r2, #1
 8003cdc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	78fa      	ldrb	r2, [r7, #3]
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f004 f923 	bl	8007f32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003cec:	78fb      	ldrb	r3, [r7, #3]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	2310      	movs	r3, #16
 8003cfc:	6093      	str	r3, [r2, #8]
 8003cfe:	e28d      	b.n	800421c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	78fa      	ldrb	r2, [r7, #3]
 8003d06:	4611      	mov	r1, r2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f003 fb6e 	bl	80073ea <USB_ReadChInterrupts>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d14:	2b80      	cmp	r3, #128	@ 0x80
 8003d16:	d169      	bne.n	8003dec <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	799b      	ldrb	r3, [r3, #6]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d111      	bne.n	8003d44 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003d20:	78fa      	ldrb	r2, [r7, #3]
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	4613      	mov	r3, r2
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	1a9b      	subs	r3, r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	334d      	adds	r3, #77	@ 0x4d
 8003d30:	2207      	movs	r2, #7
 8003d32:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	78fa      	ldrb	r2, [r7, #3]
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f004 f8f8 	bl	8007f32 <USB_HC_Halt>
 8003d42:	e049      	b.n	8003dd8 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003d44:	78fa      	ldrb	r2, [r7, #3]
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	1a9b      	subs	r3, r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	3344      	adds	r3, #68	@ 0x44
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	1c59      	adds	r1, r3, #1
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	1a9b      	subs	r3, r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4403      	add	r3, r0
 8003d64:	3344      	adds	r3, #68	@ 0x44
 8003d66:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d68:	78fa      	ldrb	r2, [r7, #3]
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	3344      	adds	r3, #68	@ 0x44
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d922      	bls.n	8003dc4 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003d7e:	78fa      	ldrb	r2, [r7, #3]
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	3344      	adds	r3, #68	@ 0x44
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	334c      	adds	r3, #76	@ 0x4c
 8003da2:	2204      	movs	r2, #4
 8003da4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003da6:	78fa      	ldrb	r2, [r7, #3]
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	4613      	mov	r3, r2
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	1a9b      	subs	r3, r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	440b      	add	r3, r1
 8003db4:	334c      	adds	r3, #76	@ 0x4c
 8003db6:	781a      	ldrb	r2, [r3, #0]
 8003db8:	78fb      	ldrb	r3, [r7, #3]
 8003dba:	4619      	mov	r1, r3
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f009 f935 	bl	800d02c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003dc2:	e009      	b.n	8003dd8 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003dc4:	78fa      	ldrb	r2, [r7, #3]
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	1a9b      	subs	r3, r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	334c      	adds	r3, #76	@ 0x4c
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003de4:	461a      	mov	r2, r3
 8003de6:	2380      	movs	r3, #128	@ 0x80
 8003de8:	6093      	str	r3, [r2, #8]
 8003dea:	e217      	b.n	800421c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	78fa      	ldrb	r2, [r7, #3]
 8003df2:	4611      	mov	r1, r2
 8003df4:	4618      	mov	r0, r3
 8003df6:	f003 faf8 	bl	80073ea <USB_ReadChInterrupts>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e04:	d11b      	bne.n	8003e3e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003e06:	78fa      	ldrb	r2, [r7, #3]
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	1a9b      	subs	r3, r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	440b      	add	r3, r1
 8003e14:	334d      	adds	r3, #77	@ 0x4d
 8003e16:	2209      	movs	r2, #9
 8003e18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	78fa      	ldrb	r2, [r7, #3]
 8003e20:	4611      	mov	r1, r2
 8003e22:	4618      	mov	r0, r3
 8003e24:	f004 f885 	bl	8007f32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e34:	461a      	mov	r2, r3
 8003e36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e3a:	6093      	str	r3, [r2, #8]
 8003e3c:	e1ee      	b.n	800421c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	78fa      	ldrb	r2, [r7, #3]
 8003e44:	4611      	mov	r1, r2
 8003e46:	4618      	mov	r0, r3
 8003e48:	f003 facf 	bl	80073ea <USB_ReadChInterrupts>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	f040 81df 	bne.w	8004216 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003e58:	78fb      	ldrb	r3, [r7, #3]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e64:	461a      	mov	r2, r3
 8003e66:	2302      	movs	r3, #2
 8003e68:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003e6a:	78fa      	ldrb	r2, [r7, #3]
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	1a9b      	subs	r3, r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	440b      	add	r3, r1
 8003e78:	334d      	adds	r3, #77	@ 0x4d
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	f040 8093 	bne.w	8003fa8 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e82:	78fa      	ldrb	r2, [r7, #3]
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	4613      	mov	r3, r2
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	334d      	adds	r3, #77	@ 0x4d
 8003e92:	2202      	movs	r2, #2
 8003e94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003e96:	78fa      	ldrb	r2, [r7, #3]
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	334c      	adds	r3, #76	@ 0x4c
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003eaa:	78fa      	ldrb	r2, [r7, #3]
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	3326      	adds	r3, #38	@ 0x26
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d00b      	beq.n	8003ed8 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003ec0:	78fa      	ldrb	r2, [r7, #3]
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	1a9b      	subs	r3, r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	3326      	adds	r3, #38	@ 0x26
 8003ed0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	f040 8190 	bne.w	80041f8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	799b      	ldrb	r3, [r3, #6]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d115      	bne.n	8003f0c <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003ee0:	78fa      	ldrb	r2, [r7, #3]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	333d      	adds	r3, #61	@ 0x3d
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	78fa      	ldrb	r2, [r7, #3]
 8003ef4:	f083 0301 	eor.w	r3, r3, #1
 8003ef8:	b2d8      	uxtb	r0, r3
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	333d      	adds	r3, #61	@ 0x3d
 8003f08:	4602      	mov	r2, r0
 8003f0a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	799b      	ldrb	r3, [r3, #6]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	f040 8171 	bne.w	80041f8 <HCD_HC_OUT_IRQHandler+0x920>
 8003f16:	78fa      	ldrb	r2, [r7, #3]
 8003f18:	6879      	ldr	r1, [r7, #4]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	1a9b      	subs	r3, r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	440b      	add	r3, r1
 8003f24:	3334      	adds	r3, #52	@ 0x34
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 8165 	beq.w	80041f8 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003f2e:	78fa      	ldrb	r2, [r7, #3]
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	1a9b      	subs	r3, r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	3334      	adds	r3, #52	@ 0x34
 8003f3e:	6819      	ldr	r1, [r3, #0]
 8003f40:	78fa      	ldrb	r2, [r7, #3]
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	4613      	mov	r3, r2
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	1a9b      	subs	r3, r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4403      	add	r3, r0
 8003f4e:	3328      	adds	r3, #40	@ 0x28
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	440b      	add	r3, r1
 8003f54:	1e59      	subs	r1, r3, #1
 8003f56:	78fa      	ldrb	r2, [r7, #3]
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	1a9b      	subs	r3, r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4403      	add	r3, r0
 8003f64:	3328      	adds	r3, #40	@ 0x28
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f6c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 813f 	beq.w	80041f8 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003f7a:	78fa      	ldrb	r2, [r7, #3]
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	333d      	adds	r3, #61	@ 0x3d
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	78fa      	ldrb	r2, [r7, #3]
 8003f8e:	f083 0301 	eor.w	r3, r3, #1
 8003f92:	b2d8      	uxtb	r0, r3
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	4613      	mov	r3, r2
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	1a9b      	subs	r3, r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	440b      	add	r3, r1
 8003fa0:	333d      	adds	r3, #61	@ 0x3d
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	701a      	strb	r2, [r3, #0]
 8003fa6:	e127      	b.n	80041f8 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003fa8:	78fa      	ldrb	r2, [r7, #3]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	1a9b      	subs	r3, r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	334d      	adds	r3, #77	@ 0x4d
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d120      	bne.n	8004000 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003fbe:	78fa      	ldrb	r2, [r7, #3]
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	1a9b      	subs	r3, r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	334d      	adds	r3, #77	@ 0x4d
 8003fce:	2202      	movs	r2, #2
 8003fd0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003fd2:	78fa      	ldrb	r2, [r7, #3]
 8003fd4:	6879      	ldr	r1, [r7, #4]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	1a9b      	subs	r3, r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	440b      	add	r3, r1
 8003fe0:	331b      	adds	r3, #27
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	f040 8107 	bne.w	80041f8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003fea:	78fa      	ldrb	r2, [r7, #3]
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	1a9b      	subs	r3, r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	334c      	adds	r3, #76	@ 0x4c
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	701a      	strb	r2, [r3, #0]
 8003ffe:	e0fb      	b.n	80041f8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004000:	78fa      	ldrb	r2, [r7, #3]
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	1a9b      	subs	r3, r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	334d      	adds	r3, #77	@ 0x4d
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b04      	cmp	r3, #4
 8004014:	d13a      	bne.n	800408c <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004016:	78fa      	ldrb	r2, [r7, #3]
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	1a9b      	subs	r3, r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	440b      	add	r3, r1
 8004024:	334d      	adds	r3, #77	@ 0x4d
 8004026:	2202      	movs	r2, #2
 8004028:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800402a:	78fa      	ldrb	r2, [r7, #3]
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	4613      	mov	r3, r2
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	1a9b      	subs	r3, r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	334c      	adds	r3, #76	@ 0x4c
 800403a:	2202      	movs	r2, #2
 800403c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800403e:	78fa      	ldrb	r2, [r7, #3]
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	4613      	mov	r3, r2
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	1a9b      	subs	r3, r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	440b      	add	r3, r1
 800404c:	331b      	adds	r3, #27
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b01      	cmp	r3, #1
 8004052:	f040 80d1 	bne.w	80041f8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004056:	78fa      	ldrb	r2, [r7, #3]
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	4613      	mov	r3, r2
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	1a9b      	subs	r3, r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	440b      	add	r3, r1
 8004064:	331b      	adds	r3, #27
 8004066:	2200      	movs	r2, #0
 8004068:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800406a:	78fb      	ldrb	r3, [r7, #3]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4413      	add	r3, r2
 8004072:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	78fa      	ldrb	r2, [r7, #3]
 800407a:	0151      	lsls	r1, r2, #5
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	440a      	add	r2, r1
 8004080:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004084:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004088:	6053      	str	r3, [r2, #4]
 800408a:	e0b5      	b.n	80041f8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800408c:	78fa      	ldrb	r2, [r7, #3]
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	4613      	mov	r3, r2
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	334d      	adds	r3, #77	@ 0x4d
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b05      	cmp	r3, #5
 80040a0:	d114      	bne.n	80040cc <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040a2:	78fa      	ldrb	r2, [r7, #3]
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	4613      	mov	r3, r2
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	1a9b      	subs	r3, r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	440b      	add	r3, r1
 80040b0:	334d      	adds	r3, #77	@ 0x4d
 80040b2:	2202      	movs	r2, #2
 80040b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	4613      	mov	r3, r2
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	334c      	adds	r3, #76	@ 0x4c
 80040c6:	2202      	movs	r2, #2
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	e095      	b.n	80041f8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80040cc:	78fa      	ldrb	r2, [r7, #3]
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	334d      	adds	r3, #77	@ 0x4d
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b06      	cmp	r3, #6
 80040e0:	d114      	bne.n	800410c <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040e2:	78fa      	ldrb	r2, [r7, #3]
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	4613      	mov	r3, r2
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	334d      	adds	r3, #77	@ 0x4d
 80040f2:	2202      	movs	r2, #2
 80040f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80040f6:	78fa      	ldrb	r2, [r7, #3]
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	4613      	mov	r3, r2
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	334c      	adds	r3, #76	@ 0x4c
 8004106:	2205      	movs	r2, #5
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	e075      	b.n	80041f8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800410c:	78fa      	ldrb	r2, [r7, #3]
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	4613      	mov	r3, r2
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	334d      	adds	r3, #77	@ 0x4d
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b07      	cmp	r3, #7
 8004120:	d00a      	beq.n	8004138 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004122:	78fa      	ldrb	r2, [r7, #3]
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	4613      	mov	r3, r2
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	1a9b      	subs	r3, r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	334d      	adds	r3, #77	@ 0x4d
 8004132:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004134:	2b09      	cmp	r3, #9
 8004136:	d170      	bne.n	800421a <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004138:	78fa      	ldrb	r2, [r7, #3]
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	4613      	mov	r3, r2
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	1a9b      	subs	r3, r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	334d      	adds	r3, #77	@ 0x4d
 8004148:	2202      	movs	r2, #2
 800414a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800414c:	78fa      	ldrb	r2, [r7, #3]
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	4613      	mov	r3, r2
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	1a9b      	subs	r3, r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	3344      	adds	r3, #68	@ 0x44
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	1c59      	adds	r1, r3, #1
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	4613      	mov	r3, r2
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	1a9b      	subs	r3, r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4403      	add	r3, r0
 800416c:	3344      	adds	r3, #68	@ 0x44
 800416e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004170:	78fa      	ldrb	r2, [r7, #3]
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	4613      	mov	r3, r2
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	1a9b      	subs	r3, r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	3344      	adds	r3, #68	@ 0x44
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d914      	bls.n	80041b0 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004186:	78fa      	ldrb	r2, [r7, #3]
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	4613      	mov	r3, r2
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	440b      	add	r3, r1
 8004194:	3344      	adds	r3, #68	@ 0x44
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800419a:	78fa      	ldrb	r2, [r7, #3]
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	4613      	mov	r3, r2
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	1a9b      	subs	r3, r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	440b      	add	r3, r1
 80041a8:	334c      	adds	r3, #76	@ 0x4c
 80041aa:	2204      	movs	r2, #4
 80041ac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80041ae:	e022      	b.n	80041f6 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041b0:	78fa      	ldrb	r2, [r7, #3]
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	4613      	mov	r3, r2
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	1a9b      	subs	r3, r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	334c      	adds	r3, #76	@ 0x4c
 80041c0:	2202      	movs	r2, #2
 80041c2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80041da:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80041e2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041f0:	461a      	mov	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80041f6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80041f8:	78fa      	ldrb	r2, [r7, #3]
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	1a9b      	subs	r3, r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	334c      	adds	r3, #76	@ 0x4c
 8004208:	781a      	ldrb	r2, [r3, #0]
 800420a:	78fb      	ldrb	r3, [r7, #3]
 800420c:	4619      	mov	r1, r3
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f008 ff0c 	bl	800d02c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004214:	e002      	b.n	800421c <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004216:	bf00      	nop
 8004218:	e000      	b.n	800421c <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800421a:	bf00      	nop
  }
}
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b08a      	sub	sp, #40	@ 0x28
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004232:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	0c5b      	lsrs	r3, r3, #17
 8004248:	f003 030f 	and.w	r3, r3, #15
 800424c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004256:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	2b02      	cmp	r3, #2
 800425c:	d004      	beq.n	8004268 <HCD_RXQLVL_IRQHandler+0x46>
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b05      	cmp	r3, #5
 8004262:	f000 80b6 	beq.w	80043d2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004266:	e0b7      	b.n	80043d8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 80b3 	beq.w	80043d6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	4613      	mov	r3, r2
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	332c      	adds	r3, #44	@ 0x2c
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80a7 	beq.w	80043d6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4613      	mov	r3, r2
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	3338      	adds	r3, #56	@ 0x38
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	18d1      	adds	r1, r2, r3
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4613      	mov	r3, r2
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4403      	add	r3, r0
 80042ac:	3334      	adds	r3, #52	@ 0x34
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4299      	cmp	r1, r3
 80042b2:	f200 8083 	bhi.w	80043bc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6818      	ldr	r0, [r3, #0]
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	4613      	mov	r3, r2
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	1a9b      	subs	r3, r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	440b      	add	r3, r1
 80042c8:	332c      	adds	r3, #44	@ 0x2c
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	b292      	uxth	r2, r2
 80042d0:	4619      	mov	r1, r3
 80042d2:	f003 f81f 	bl	8007314 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	4613      	mov	r3, r2
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	440b      	add	r3, r1
 80042e4:	332c      	adds	r3, #44	@ 0x2c
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	18d1      	adds	r1, r2, r3
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4613      	mov	r3, r2
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4403      	add	r3, r0
 80042fa:	332c      	adds	r3, #44	@ 0x2c
 80042fc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	4613      	mov	r3, r2
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	1a9b      	subs	r3, r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	3338      	adds	r3, #56	@ 0x38
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	18d1      	adds	r1, r2, r3
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	4613      	mov	r3, r2
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	1a9b      	subs	r3, r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4403      	add	r3, r0
 8004322:	3338      	adds	r3, #56	@ 0x38
 8004324:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	4413      	add	r3, r2
 800432e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	0cdb      	lsrs	r3, r3, #19
 8004336:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800433a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	4613      	mov	r3, r2
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	1a9b      	subs	r3, r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	3328      	adds	r3, #40	@ 0x28
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	4293      	cmp	r3, r2
 8004354:	d13f      	bne.n	80043d6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d03c      	beq.n	80043d6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	4413      	add	r3, r2
 8004364:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004372:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800437a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	4413      	add	r3, r2
 8004384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004388:	461a      	mov	r2, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	4613      	mov	r3, r2
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	1a9b      	subs	r3, r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	333c      	adds	r3, #60	@ 0x3c
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	f083 0301 	eor.w	r3, r3, #1
 80043a4:	b2d8      	uxtb	r0, r3
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	4613      	mov	r3, r2
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	1a9b      	subs	r3, r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	333c      	adds	r3, #60	@ 0x3c
 80043b6:	4602      	mov	r2, r0
 80043b8:	701a      	strb	r2, [r3, #0]
      break;
 80043ba:	e00c      	b.n	80043d6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4613      	mov	r3, r2
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	1a9b      	subs	r3, r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	334c      	adds	r3, #76	@ 0x4c
 80043cc:	2204      	movs	r2, #4
 80043ce:	701a      	strb	r2, [r3, #0]
      break;
 80043d0:	e001      	b.n	80043d6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80043d2:	bf00      	nop
 80043d4:	e000      	b.n	80043d8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80043d6:	bf00      	nop
  }
}
 80043d8:	bf00      	nop
 80043da:	3728      	adds	r7, #40	@ 0x28
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800440c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b02      	cmp	r3, #2
 8004416:	d10b      	bne.n	8004430 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b01      	cmp	r3, #1
 8004420:	d102      	bne.n	8004428 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f008 fde6 	bl	800cff4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f043 0302 	orr.w	r3, r3, #2
 800442e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b08      	cmp	r3, #8
 8004438:	d132      	bne.n	80044a0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f043 0308 	orr.w	r3, r3, #8
 8004440:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b04      	cmp	r3, #4
 800444a:	d126      	bne.n	800449a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	7a5b      	ldrb	r3, [r3, #9]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d113      	bne.n	800447c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800445a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800445e:	d106      	bne.n	800446e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2102      	movs	r1, #2
 8004466:	4618      	mov	r0, r3
 8004468:	f003 f8e4 	bl	8007634 <USB_InitFSLSPClkSel>
 800446c:	e011      	b.n	8004492 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2101      	movs	r1, #1
 8004474:	4618      	mov	r0, r3
 8004476:	f003 f8dd 	bl	8007634 <USB_InitFSLSPClkSel>
 800447a:	e00a      	b.n	8004492 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	79db      	ldrb	r3, [r3, #7]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d106      	bne.n	8004492 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800448a:	461a      	mov	r2, r3
 800448c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004490:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f008 fddc 	bl	800d050 <HAL_HCD_PortEnabled_Callback>
 8004498:	e002      	b.n	80044a0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f008 fde6 	bl	800d06c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f003 0320 	and.w	r3, r3, #32
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	d103      	bne.n	80044b2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f043 0320 	orr.w	r3, r3, #32
 80044b0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80044b8:	461a      	mov	r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	6013      	str	r3, [r2, #0]
}
 80044be:	bf00      	nop
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e12b      	b.n	8004732 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d106      	bne.n	80044f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fc fd2e 	bl	8000f50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2224      	movs	r2, #36	@ 0x24
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0201 	bic.w	r2, r2, #1
 800450a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800451a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800452a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800452c:	f001 f964 	bl	80057f8 <HAL_RCC_GetPCLK1Freq>
 8004530:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	4a81      	ldr	r2, [pc, #516]	@ (800473c <HAL_I2C_Init+0x274>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d807      	bhi.n	800454c <HAL_I2C_Init+0x84>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4a80      	ldr	r2, [pc, #512]	@ (8004740 <HAL_I2C_Init+0x278>)
 8004540:	4293      	cmp	r3, r2
 8004542:	bf94      	ite	ls
 8004544:	2301      	movls	r3, #1
 8004546:	2300      	movhi	r3, #0
 8004548:	b2db      	uxtb	r3, r3
 800454a:	e006      	b.n	800455a <HAL_I2C_Init+0x92>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4a7d      	ldr	r2, [pc, #500]	@ (8004744 <HAL_I2C_Init+0x27c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	bf94      	ite	ls
 8004554:	2301      	movls	r3, #1
 8004556:	2300      	movhi	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e0e7      	b.n	8004732 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4a78      	ldr	r2, [pc, #480]	@ (8004748 <HAL_I2C_Init+0x280>)
 8004566:	fba2 2303 	umull	r2, r3, r2, r3
 800456a:	0c9b      	lsrs	r3, r3, #18
 800456c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	430a      	orrs	r2, r1
 8004580:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	4a6a      	ldr	r2, [pc, #424]	@ (800473c <HAL_I2C_Init+0x274>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d802      	bhi.n	800459c <HAL_I2C_Init+0xd4>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	3301      	adds	r3, #1
 800459a:	e009      	b.n	80045b0 <HAL_I2C_Init+0xe8>
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80045a2:	fb02 f303 	mul.w	r3, r2, r3
 80045a6:	4a69      	ldr	r2, [pc, #420]	@ (800474c <HAL_I2C_Init+0x284>)
 80045a8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ac:	099b      	lsrs	r3, r3, #6
 80045ae:	3301      	adds	r3, #1
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6812      	ldr	r2, [r2, #0]
 80045b4:	430b      	orrs	r3, r1
 80045b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80045c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	495c      	ldr	r1, [pc, #368]	@ (800473c <HAL_I2C_Init+0x274>)
 80045cc:	428b      	cmp	r3, r1
 80045ce:	d819      	bhi.n	8004604 <HAL_I2C_Init+0x13c>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	1e59      	subs	r1, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	fbb1 f3f3 	udiv	r3, r1, r3
 80045de:	1c59      	adds	r1, r3, #1
 80045e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80045e4:	400b      	ands	r3, r1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <HAL_I2C_Init+0x138>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	1e59      	subs	r1, r3, #1
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80045f8:	3301      	adds	r3, #1
 80045fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045fe:	e051      	b.n	80046a4 <HAL_I2C_Init+0x1dc>
 8004600:	2304      	movs	r3, #4
 8004602:	e04f      	b.n	80046a4 <HAL_I2C_Init+0x1dc>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d111      	bne.n	8004630 <HAL_I2C_Init+0x168>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	1e58      	subs	r0, r3, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6859      	ldr	r1, [r3, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	440b      	add	r3, r1
 800461a:	fbb0 f3f3 	udiv	r3, r0, r3
 800461e:	3301      	adds	r3, #1
 8004620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004624:	2b00      	cmp	r3, #0
 8004626:	bf0c      	ite	eq
 8004628:	2301      	moveq	r3, #1
 800462a:	2300      	movne	r3, #0
 800462c:	b2db      	uxtb	r3, r3
 800462e:	e012      	b.n	8004656 <HAL_I2C_Init+0x18e>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	1e58      	subs	r0, r3, #1
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6859      	ldr	r1, [r3, #4]
 8004638:	460b      	mov	r3, r1
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	0099      	lsls	r1, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	fbb0 f3f3 	udiv	r3, r0, r3
 8004646:	3301      	adds	r3, #1
 8004648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800464c:	2b00      	cmp	r3, #0
 800464e:	bf0c      	ite	eq
 8004650:	2301      	moveq	r3, #1
 8004652:	2300      	movne	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <HAL_I2C_Init+0x196>
 800465a:	2301      	movs	r3, #1
 800465c:	e022      	b.n	80046a4 <HAL_I2C_Init+0x1dc>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10e      	bne.n	8004684 <HAL_I2C_Init+0x1bc>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1e58      	subs	r0, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6859      	ldr	r1, [r3, #4]
 800466e:	460b      	mov	r3, r1
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	440b      	add	r3, r1
 8004674:	fbb0 f3f3 	udiv	r3, r0, r3
 8004678:	3301      	adds	r3, #1
 800467a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800467e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004682:	e00f      	b.n	80046a4 <HAL_I2C_Init+0x1dc>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	1e58      	subs	r0, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6859      	ldr	r1, [r3, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	0099      	lsls	r1, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	fbb0 f3f3 	udiv	r3, r0, r3
 800469a:	3301      	adds	r3, #1
 800469c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	6809      	ldr	r1, [r1, #0]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69da      	ldr	r2, [r3, #28]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80046d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6911      	ldr	r1, [r2, #16]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	68d2      	ldr	r2, [r2, #12]
 80046de:	4311      	orrs	r1, r2
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6812      	ldr	r2, [r2, #0]
 80046e4:	430b      	orrs	r3, r1
 80046e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695a      	ldr	r2, [r3, #20]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0201 	orr.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2220      	movs	r2, #32
 800471e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	000186a0 	.word	0x000186a0
 8004740:	001e847f 	.word	0x001e847f
 8004744:	003d08ff 	.word	0x003d08ff
 8004748:	431bde83 	.word	0x431bde83
 800474c:	10624dd3 	.word	0x10624dd3

08004750 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b20      	cmp	r3, #32
 8004764:	d129      	bne.n	80047ba <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2224      	movs	r2, #36	@ 0x24
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0201 	bic.w	r2, r2, #1
 800477c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0210 	bic.w	r2, r2, #16
 800478c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f042 0201 	orr.w	r2, r2, #1
 80047ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	e000      	b.n	80047bc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80047ba:	2302      	movs	r3, #2
  }
}
 80047bc:	4618      	mov	r0, r3
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80047d2:	2300      	movs	r3, #0
 80047d4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d12a      	bne.n	8004838 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2224      	movs	r2, #36	@ 0x24
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0201 	bic.w	r2, r2, #1
 80047f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004800:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004802:	89fb      	ldrh	r3, [r7, #14]
 8004804:	f023 030f 	bic.w	r3, r3, #15
 8004808:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	b29a      	uxth	r2, r3
 800480e:	89fb      	ldrh	r3, [r7, #14]
 8004810:	4313      	orrs	r3, r2
 8004812:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	89fa      	ldrh	r2, [r7, #14]
 800481a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	e000      	b.n	800483a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004838:	2302      	movs	r3, #2
  }
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
	...

08004848 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e0bf      	b.n	80049da <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d106      	bne.n	8004874 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fc fbd8 	bl	8001024 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699a      	ldr	r2, [r3, #24]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800488a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6999      	ldr	r1, [r3, #24]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80048a0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6899      	ldr	r1, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	4b4a      	ldr	r3, [pc, #296]	@ (80049e4 <HAL_LTDC_Init+0x19c>)
 80048bc:	400b      	ands	r3, r1
 80048be:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	041b      	lsls	r3, r3, #16
 80048c6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6899      	ldr	r1, [r3, #8]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699a      	ldr	r2, [r3, #24]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	431a      	orrs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68d9      	ldr	r1, [r3, #12]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	4b3e      	ldr	r3, [pc, #248]	@ (80049e4 <HAL_LTDC_Init+0x19c>)
 80048ea:	400b      	ands	r3, r1
 80048ec:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	041b      	lsls	r3, r3, #16
 80048f4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68d9      	ldr	r1, [r3, #12]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1a      	ldr	r2, [r3, #32]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6919      	ldr	r1, [r3, #16]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4b33      	ldr	r3, [pc, #204]	@ (80049e4 <HAL_LTDC_Init+0x19c>)
 8004918:	400b      	ands	r3, r1
 800491a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004920:	041b      	lsls	r3, r3, #16
 8004922:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6919      	ldr	r1, [r3, #16]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6959      	ldr	r1, [r3, #20]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	4b27      	ldr	r3, [pc, #156]	@ (80049e4 <HAL_LTDC_Init+0x19c>)
 8004946:	400b      	ands	r3, r1
 8004948:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494e:	041b      	lsls	r3, r3, #16
 8004950:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6959      	ldr	r1, [r3, #20]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800496e:	021b      	lsls	r3, r3, #8
 8004970:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004978:	041b      	lsls	r3, r3, #16
 800497a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800498a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4313      	orrs	r3, r2
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0206 	orr.w	r2, r2, #6
 80049b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699a      	ldr	r2, [r3, #24]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0201 	orr.w	r2, r2, #1
 80049c6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	f000f800 	.word	0xf000f800

080049e8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049fe:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f003 0304 	and.w	r3, r3, #4
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d023      	beq.n	8004a52 <HAL_LTDC_IRQHandler+0x6a>
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01e      	beq.n	8004a52 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0204 	bic.w	r2, r2, #4
 8004a22:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2204      	movs	r2, #4
 8004a2a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a32:	f043 0201 	orr.w	r2, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2204      	movs	r2, #4
 8004a40:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f86f 	bl	8004b30 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d023      	beq.n	8004aa4 <HAL_LTDC_IRQHandler+0xbc>
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d01e      	beq.n	8004aa4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0202 	bic.w	r2, r2, #2
 8004a74:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a84:	f043 0202 	orr.w	r2, r3, #2
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2204      	movs	r2, #4
 8004a92:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f846 	bl	8004b30 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d01b      	beq.n	8004ae6 <HAL_LTDC_IRQHandler+0xfe>
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d016      	beq.n	8004ae6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0201 	bic.w	r2, r2, #1
 8004ac6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2201      	movs	r2, #1
 8004ace:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f82f 	bl	8004b44 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d01b      	beq.n	8004b28 <HAL_LTDC_IRQHandler+0x140>
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d016      	beq.n	8004b28 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0208 	bic.w	r2, r2, #8
 8004b08:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2208      	movs	r2, #8
 8004b10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f818 	bl	8004b58 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004b28:	bf00      	nop
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004b6c:	b5b0      	push	{r4, r5, r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d101      	bne.n	8004b86 <HAL_LTDC_ConfigLayer+0x1a>
 8004b82:	2302      	movs	r3, #2
 8004b84:	e02c      	b.n	8004be0 <HAL_LTDC_ConfigLayer+0x74>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2202      	movs	r2, #2
 8004b92:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2134      	movs	r1, #52	@ 0x34
 8004b9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	4614      	mov	r4, r2
 8004baa:	461d      	mov	r5, r3
 8004bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bb8:	682b      	ldr	r3, [r5, #0]
 8004bba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	68b9      	ldr	r1, [r7, #8]
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f811 	bl	8004be8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bdb0      	pop	{r4, r5, r7, pc}

08004be8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b089      	sub	sp, #36	@ 0x24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	0c1b      	lsrs	r3, r3, #16
 8004c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c04:	4413      	add	r3, r2
 8004c06:	041b      	lsls	r3, r3, #16
 8004c08:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	01db      	lsls	r3, r3, #7
 8004c14:	4413      	add	r3, r2
 8004c16:	3384      	adds	r3, #132	@ 0x84
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	6812      	ldr	r2, [r2, #0]
 8004c1e:	4611      	mov	r1, r2
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	01d2      	lsls	r2, r2, #7
 8004c24:	440a      	add	r2, r1
 8004c26:	3284      	adds	r2, #132	@ 0x84
 8004c28:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004c2c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	0c1b      	lsrs	r3, r3, #16
 8004c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c3e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c40:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4619      	mov	r1, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	01db      	lsls	r3, r3, #7
 8004c4c:	440b      	add	r3, r1
 8004c4e:	3384      	adds	r3, #132	@ 0x84
 8004c50:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c56:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	68da      	ldr	r2, [r3, #12]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c66:	4413      	add	r3, r2
 8004c68:	041b      	lsls	r3, r3, #16
 8004c6a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	461a      	mov	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	01db      	lsls	r3, r3, #7
 8004c76:	4413      	add	r3, r2
 8004c78:	3384      	adds	r3, #132	@ 0x84
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	6812      	ldr	r2, [r2, #0]
 8004c80:	4611      	mov	r1, r2
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	01d2      	lsls	r2, r2, #7
 8004c86:	440a      	add	r2, r1
 8004c88:	3284      	adds	r2, #132	@ 0x84
 8004c8a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004c8e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c9e:	4413      	add	r3, r2
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	01db      	lsls	r3, r3, #7
 8004cac:	440b      	add	r3, r1
 8004cae:	3384      	adds	r3, #132	@ 0x84
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	01db      	lsls	r3, r3, #7
 8004cc2:	4413      	add	r3, r2
 8004cc4:	3384      	adds	r3, #132	@ 0x84
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	6812      	ldr	r2, [r2, #0]
 8004ccc:	4611      	mov	r1, r2
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	01d2      	lsls	r2, r2, #7
 8004cd2:	440a      	add	r2, r1
 8004cd4:	3284      	adds	r2, #132	@ 0x84
 8004cd6:	f023 0307 	bic.w	r3, r3, #7
 8004cda:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	01db      	lsls	r3, r3, #7
 8004ce6:	4413      	add	r3, r2
 8004ce8:	3384      	adds	r3, #132	@ 0x84
 8004cea:	461a      	mov	r2, r3
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004cf8:	021b      	lsls	r3, r3, #8
 8004cfa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004d02:	041b      	lsls	r3, r3, #16
 8004d04:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	061b      	lsls	r3, r3, #24
 8004d0c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	01db      	lsls	r3, r3, #7
 8004d18:	4413      	add	r3, r2
 8004d1a:	3384      	adds	r3, #132	@ 0x84
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	461a      	mov	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	01db      	lsls	r3, r3, #7
 8004d28:	4413      	add	r3, r2
 8004d2a:	3384      	adds	r3, #132	@ 0x84
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	2300      	movs	r3, #0
 8004d30:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004d38:	461a      	mov	r2, r3
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	431a      	orrs	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4619      	mov	r1, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	01db      	lsls	r3, r3, #7
 8004d4c:	440b      	add	r3, r1
 8004d4e:	3384      	adds	r3, #132	@ 0x84
 8004d50:	4619      	mov	r1, r3
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	01db      	lsls	r3, r3, #7
 8004d62:	4413      	add	r3, r2
 8004d64:	3384      	adds	r3, #132	@ 0x84
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	6812      	ldr	r2, [r2, #0]
 8004d6c:	4611      	mov	r1, r2
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	01d2      	lsls	r2, r2, #7
 8004d72:	440a      	add	r2, r1
 8004d74:	3284      	adds	r2, #132	@ 0x84
 8004d76:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004d7a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	461a      	mov	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	01db      	lsls	r3, r3, #7
 8004d86:	4413      	add	r3, r2
 8004d88:	3384      	adds	r3, #132	@ 0x84
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	01db      	lsls	r3, r3, #7
 8004d9c:	4413      	add	r3, r2
 8004d9e:	3384      	adds	r3, #132	@ 0x84
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	6812      	ldr	r2, [r2, #0]
 8004da6:	4611      	mov	r1, r2
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	01d2      	lsls	r2, r2, #7
 8004dac:	440a      	add	r2, r1
 8004dae:	3284      	adds	r2, #132	@ 0x84
 8004db0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004db4:	f023 0307 	bic.w	r3, r3, #7
 8004db8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	69da      	ldr	r2, [r3, #28]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	68f9      	ldr	r1, [r7, #12]
 8004dc4:	6809      	ldr	r1, [r1, #0]
 8004dc6:	4608      	mov	r0, r1
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	01c9      	lsls	r1, r1, #7
 8004dcc:	4401      	add	r1, r0
 8004dce:	3184      	adds	r1, #132	@ 0x84
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	01db      	lsls	r3, r3, #7
 8004dde:	4413      	add	r3, r2
 8004de0:	3384      	adds	r3, #132	@ 0x84
 8004de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	461a      	mov	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	01db      	lsls	r3, r3, #7
 8004dee:	4413      	add	r3, r2
 8004df0:	3384      	adds	r3, #132	@ 0x84
 8004df2:	461a      	mov	r2, r3
 8004df4:	2300      	movs	r3, #0
 8004df6:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	01db      	lsls	r3, r3, #7
 8004e02:	4413      	add	r3, r2
 8004e04:	3384      	adds	r3, #132	@ 0x84
 8004e06:	461a      	mov	r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d102      	bne.n	8004e1c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004e16:	2304      	movs	r3, #4
 8004e18:	61fb      	str	r3, [r7, #28]
 8004e1a:	e01b      	b.n	8004e54 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d102      	bne.n	8004e2a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004e24:	2303      	movs	r3, #3
 8004e26:	61fb      	str	r3, [r7, #28]
 8004e28:	e014      	b.n	8004e54 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d00b      	beq.n	8004e4a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d007      	beq.n	8004e4a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d003      	beq.n	8004e4a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004e46:	2b07      	cmp	r3, #7
 8004e48:	d102      	bne.n	8004e50 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	61fb      	str	r3, [r7, #28]
 8004e4e:	e001      	b.n	8004e54 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004e50:	2301      	movs	r3, #1
 8004e52:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	01db      	lsls	r3, r3, #7
 8004e5e:	4413      	add	r3, r2
 8004e60:	3384      	adds	r3, #132	@ 0x84
 8004e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	6812      	ldr	r2, [r2, #0]
 8004e68:	4611      	mov	r1, r2
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	01d2      	lsls	r2, r2, #7
 8004e6e:	440a      	add	r2, r1
 8004e70:	3284      	adds	r2, #132	@ 0x84
 8004e72:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004e76:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7c:	69fa      	ldr	r2, [r7, #28]
 8004e7e:	fb02 f303 	mul.w	r3, r2, r3
 8004e82:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	6859      	ldr	r1, [r3, #4]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	1acb      	subs	r3, r1, r3
 8004e8e:	69f9      	ldr	r1, [r7, #28]
 8004e90:	fb01 f303 	mul.w	r3, r1, r3
 8004e94:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004e96:	68f9      	ldr	r1, [r7, #12]
 8004e98:	6809      	ldr	r1, [r1, #0]
 8004e9a:	4608      	mov	r0, r1
 8004e9c:	6879      	ldr	r1, [r7, #4]
 8004e9e:	01c9      	lsls	r1, r1, #7
 8004ea0:	4401      	add	r1, r0
 8004ea2:	3184      	adds	r1, #132	@ 0x84
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	461a      	mov	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	01db      	lsls	r3, r3, #7
 8004eb2:	4413      	add	r3, r2
 8004eb4:	3384      	adds	r3, #132	@ 0x84
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	6812      	ldr	r2, [r2, #0]
 8004ebc:	4611      	mov	r1, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	01d2      	lsls	r2, r2, #7
 8004ec2:	440a      	add	r2, r1
 8004ec4:	3284      	adds	r2, #132	@ 0x84
 8004ec6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004eca:	f023 0307 	bic.w	r3, r3, #7
 8004ece:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	01db      	lsls	r3, r3, #7
 8004eda:	4413      	add	r3, r2
 8004edc:	3384      	adds	r3, #132	@ 0x84
 8004ede:	461a      	mov	r2, r3
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	461a      	mov	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	01db      	lsls	r3, r3, #7
 8004ef0:	4413      	add	r3, r2
 8004ef2:	3384      	adds	r3, #132	@ 0x84
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	6812      	ldr	r2, [r2, #0]
 8004efa:	4611      	mov	r1, r2
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	01d2      	lsls	r2, r2, #7
 8004f00:	440a      	add	r2, r1
 8004f02:	3284      	adds	r2, #132	@ 0x84
 8004f04:	f043 0301 	orr.w	r3, r3, #1
 8004f08:	6013      	str	r3, [r2, #0]
}
 8004f0a:	bf00      	nop
 8004f0c:	3724      	adds	r7, #36	@ 0x24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
	...

08004f18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e267      	b.n	80053fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d075      	beq.n	8005022 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f36:	4b88      	ldr	r3, [pc, #544]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 030c 	and.w	r3, r3, #12
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d00c      	beq.n	8004f5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f42:	4b85      	ldr	r3, [pc, #532]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f4a:	2b08      	cmp	r3, #8
 8004f4c:	d112      	bne.n	8004f74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f4e:	4b82      	ldr	r3, [pc, #520]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f5a:	d10b      	bne.n	8004f74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f5c:	4b7e      	ldr	r3, [pc, #504]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d05b      	beq.n	8005020 <HAL_RCC_OscConfig+0x108>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d157      	bne.n	8005020 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e242      	b.n	80053fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f7c:	d106      	bne.n	8004f8c <HAL_RCC_OscConfig+0x74>
 8004f7e:	4b76      	ldr	r3, [pc, #472]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a75      	ldr	r2, [pc, #468]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 8004f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f88:	6013      	str	r3, [r2, #0]
 8004f8a:	e01d      	b.n	8004fc8 <HAL_RCC_OscConfig+0xb0>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f94:	d10c      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x98>
 8004f96:	4b70      	ldr	r3, [pc, #448]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a6f      	ldr	r2, [pc, #444]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 8004f9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fa0:	6013      	str	r3, [r2, #0]
 8004fa2:	4b6d      	ldr	r3, [pc, #436]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a6c      	ldr	r2, [pc, #432]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 8004fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	e00b      	b.n	8004fc8 <HAL_RCC_OscConfig+0xb0>
 8004fb0:	4b69      	ldr	r3, [pc, #420]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a68      	ldr	r2, [pc, #416]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 8004fb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fba:	6013      	str	r3, [r2, #0]
 8004fbc:	4b66      	ldr	r3, [pc, #408]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a65      	ldr	r2, [pc, #404]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 8004fc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d013      	beq.n	8004ff8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd0:	f7fc fc66 	bl	80018a0 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fd8:	f7fc fc62 	bl	80018a0 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b64      	cmp	r3, #100	@ 0x64
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e207      	b.n	80053fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fea:	4b5b      	ldr	r3, [pc, #364]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0f0      	beq.n	8004fd8 <HAL_RCC_OscConfig+0xc0>
 8004ff6:	e014      	b.n	8005022 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff8:	f7fc fc52 	bl	80018a0 <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ffe:	e008      	b.n	8005012 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005000:	f7fc fc4e 	bl	80018a0 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b64      	cmp	r3, #100	@ 0x64
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e1f3      	b.n	80053fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005012:	4b51      	ldr	r3, [pc, #324]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1f0      	bne.n	8005000 <HAL_RCC_OscConfig+0xe8>
 800501e:	e000      	b.n	8005022 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d063      	beq.n	80050f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800502e:	4b4a      	ldr	r3, [pc, #296]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 030c 	and.w	r3, r3, #12
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00b      	beq.n	8005052 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800503a:	4b47      	ldr	r3, [pc, #284]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005042:	2b08      	cmp	r3, #8
 8005044:	d11c      	bne.n	8005080 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005046:	4b44      	ldr	r3, [pc, #272]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d116      	bne.n	8005080 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005052:	4b41      	ldr	r3, [pc, #260]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d005      	beq.n	800506a <HAL_RCC_OscConfig+0x152>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d001      	beq.n	800506a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e1c7      	b.n	80053fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800506a:	4b3b      	ldr	r3, [pc, #236]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	4937      	ldr	r1, [pc, #220]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 800507a:	4313      	orrs	r3, r2
 800507c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800507e:	e03a      	b.n	80050f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d020      	beq.n	80050ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005088:	4b34      	ldr	r3, [pc, #208]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 800508a:	2201      	movs	r2, #1
 800508c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508e:	f7fc fc07 	bl	80018a0 <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005094:	e008      	b.n	80050a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005096:	f7fc fc03 	bl	80018a0 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e1a8      	b.n	80053fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0f0      	beq.n	8005096 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050b4:	4b28      	ldr	r3, [pc, #160]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	4925      	ldr	r1, [pc, #148]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	600b      	str	r3, [r1, #0]
 80050c8:	e015      	b.n	80050f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050ca:	4b24      	ldr	r3, [pc, #144]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d0:	f7fc fbe6 	bl	80018a0 <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050d8:	f7fc fbe2 	bl	80018a0 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e187      	b.n	80053fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f0      	bne.n	80050d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0308 	and.w	r3, r3, #8
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d036      	beq.n	8005170 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d016      	beq.n	8005138 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800510a:	4b15      	ldr	r3, [pc, #84]	@ (8005160 <HAL_RCC_OscConfig+0x248>)
 800510c:	2201      	movs	r2, #1
 800510e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005110:	f7fc fbc6 	bl	80018a0 <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005116:	e008      	b.n	800512a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005118:	f7fc fbc2 	bl	80018a0 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e167      	b.n	80053fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800512a:	4b0b      	ldr	r3, [pc, #44]	@ (8005158 <HAL_RCC_OscConfig+0x240>)
 800512c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0f0      	beq.n	8005118 <HAL_RCC_OscConfig+0x200>
 8005136:	e01b      	b.n	8005170 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005138:	4b09      	ldr	r3, [pc, #36]	@ (8005160 <HAL_RCC_OscConfig+0x248>)
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800513e:	f7fc fbaf 	bl	80018a0 <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005144:	e00e      	b.n	8005164 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005146:	f7fc fbab 	bl	80018a0 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d907      	bls.n	8005164 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e150      	b.n	80053fa <HAL_RCC_OscConfig+0x4e2>
 8005158:	40023800 	.word	0x40023800
 800515c:	42470000 	.word	0x42470000
 8005160:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005164:	4b88      	ldr	r3, [pc, #544]	@ (8005388 <HAL_RCC_OscConfig+0x470>)
 8005166:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1ea      	bne.n	8005146 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 8097 	beq.w	80052ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800517e:	2300      	movs	r3, #0
 8005180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005182:	4b81      	ldr	r3, [pc, #516]	@ (8005388 <HAL_RCC_OscConfig+0x470>)
 8005184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10f      	bne.n	80051ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800518e:	2300      	movs	r3, #0
 8005190:	60bb      	str	r3, [r7, #8]
 8005192:	4b7d      	ldr	r3, [pc, #500]	@ (8005388 <HAL_RCC_OscConfig+0x470>)
 8005194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005196:	4a7c      	ldr	r2, [pc, #496]	@ (8005388 <HAL_RCC_OscConfig+0x470>)
 8005198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800519c:	6413      	str	r3, [r2, #64]	@ 0x40
 800519e:	4b7a      	ldr	r3, [pc, #488]	@ (8005388 <HAL_RCC_OscConfig+0x470>)
 80051a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051a6:	60bb      	str	r3, [r7, #8]
 80051a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051aa:	2301      	movs	r3, #1
 80051ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ae:	4b77      	ldr	r3, [pc, #476]	@ (800538c <HAL_RCC_OscConfig+0x474>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d118      	bne.n	80051ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ba:	4b74      	ldr	r3, [pc, #464]	@ (800538c <HAL_RCC_OscConfig+0x474>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a73      	ldr	r2, [pc, #460]	@ (800538c <HAL_RCC_OscConfig+0x474>)
 80051c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051c6:	f7fc fb6b 	bl	80018a0 <HAL_GetTick>
 80051ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051cc:	e008      	b.n	80051e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ce:	f7fc fb67 	bl	80018a0 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d901      	bls.n	80051e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e10c      	b.n	80053fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e0:	4b6a      	ldr	r3, [pc, #424]	@ (800538c <HAL_RCC_OscConfig+0x474>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0f0      	beq.n	80051ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d106      	bne.n	8005202 <HAL_RCC_OscConfig+0x2ea>
 80051f4:	4b64      	ldr	r3, [pc, #400]	@ (8005388 <HAL_RCC_OscConfig+0x470>)
 80051f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f8:	4a63      	ldr	r2, [pc, #396]	@ (8005388 <HAL_RCC_OscConfig+0x470>)
 80051fa:	f043 0301 	orr.w	r3, r3, #1
 80051fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005200:	e01c      	b.n	800523c <HAL_RCC_OscConfig+0x324>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	2b05      	cmp	r3, #5
 8005208:	d10c      	bne.n	8005224 <HAL_RCC_OscConfig+0x30c>
 800520a:	4b5f      	ldr	r3, [pc, #380]	@ (8005388 <HAL_RCC_OscConfig+0x470>)
 800520c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800520e:	4a5e      	ldr	r2, [pc, #376]	@ (8005388 <HAL_RCC_OscConfig+0x470>)
 8005210:	f043 0304 	orr.w	r3, r3, #4
 8005214:	6713      	str	r3, [r2, #112]	@ 0x70
 8005216:	4b5c      	ldr	r3, [pc, #368]	@ (8005388 <HAL_RCC_OscConfig+0x470>)
 8005218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800521a:	4a5b      	ldr	r2, [pc, #364]	@ (8005388 <HAL_RCC_OscConfig+0x470>)
 800521c:	f043 0301 	orr.w	r3, r3, #1
 8005220:	6713      	str	r3, [r2, #112]	@ 0x70
 8005222:	e00b      	b.n	800523c <HAL_RCC_OscConfig+0x324>
 8005224:	4b58      	ldr	r3, [pc, #352]	@ (8005388 <HAL_RCC_OscConfig+0x470>)
 8005226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005228:	4a57      	ldr	r2, [pc, #348]	@ (8005388 <HAL_RCC_OscConfig+0x470>)
 800522a:	f023 0301 	bic.w	r3, r3, #1
 800522e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005230:	4b55      	ldr	r3, [pc, #340]	@ (8005388 <HAL_RCC_OscConfig+0x470>)
 8005232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005234:	4a54      	ldr	r2, [pc, #336]	@ (8005388 <HAL_RCC_OscConfig+0x470>)
 8005236:	f023 0304 	bic.w	r3, r3, #4
 800523a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d015      	beq.n	8005270 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005244:	f7fc fb2c 	bl	80018a0 <HAL_GetTick>
 8005248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800524a:	e00a      	b.n	8005262 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800524c:	f7fc fb28 	bl	80018a0 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800525a:	4293      	cmp	r3, r2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e0cb      	b.n	80053fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005262:	4b49      	ldr	r3, [pc, #292]	@ (8005388 <HAL_RCC_OscConfig+0x470>)
 8005264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0ee      	beq.n	800524c <HAL_RCC_OscConfig+0x334>
 800526e:	e014      	b.n	800529a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005270:	f7fc fb16 	bl	80018a0 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005276:	e00a      	b.n	800528e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005278:	f7fc fb12 	bl	80018a0 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005286:	4293      	cmp	r3, r2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e0b5      	b.n	80053fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800528e:	4b3e      	ldr	r3, [pc, #248]	@ (8005388 <HAL_RCC_OscConfig+0x470>)
 8005290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1ee      	bne.n	8005278 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800529a:	7dfb      	ldrb	r3, [r7, #23]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d105      	bne.n	80052ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052a0:	4b39      	ldr	r3, [pc, #228]	@ (8005388 <HAL_RCC_OscConfig+0x470>)
 80052a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a4:	4a38      	ldr	r2, [pc, #224]	@ (8005388 <HAL_RCC_OscConfig+0x470>)
 80052a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 80a1 	beq.w	80053f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052b6:	4b34      	ldr	r3, [pc, #208]	@ (8005388 <HAL_RCC_OscConfig+0x470>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 030c 	and.w	r3, r3, #12
 80052be:	2b08      	cmp	r3, #8
 80052c0:	d05c      	beq.n	800537c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d141      	bne.n	800534e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ca:	4b31      	ldr	r3, [pc, #196]	@ (8005390 <HAL_RCC_OscConfig+0x478>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d0:	f7fc fae6 	bl	80018a0 <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052d8:	f7fc fae2 	bl	80018a0 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e087      	b.n	80053fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ea:	4b27      	ldr	r3, [pc, #156]	@ (8005388 <HAL_RCC_OscConfig+0x470>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1f0      	bne.n	80052d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69da      	ldr	r2, [r3, #28]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005304:	019b      	lsls	r3, r3, #6
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800530c:	085b      	lsrs	r3, r3, #1
 800530e:	3b01      	subs	r3, #1
 8005310:	041b      	lsls	r3, r3, #16
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005318:	061b      	lsls	r3, r3, #24
 800531a:	491b      	ldr	r1, [pc, #108]	@ (8005388 <HAL_RCC_OscConfig+0x470>)
 800531c:	4313      	orrs	r3, r2
 800531e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005320:	4b1b      	ldr	r3, [pc, #108]	@ (8005390 <HAL_RCC_OscConfig+0x478>)
 8005322:	2201      	movs	r2, #1
 8005324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005326:	f7fc fabb 	bl	80018a0 <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800532e:	f7fc fab7 	bl	80018a0 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e05c      	b.n	80053fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005340:	4b11      	ldr	r3, [pc, #68]	@ (8005388 <HAL_RCC_OscConfig+0x470>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0f0      	beq.n	800532e <HAL_RCC_OscConfig+0x416>
 800534c:	e054      	b.n	80053f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800534e:	4b10      	ldr	r3, [pc, #64]	@ (8005390 <HAL_RCC_OscConfig+0x478>)
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005354:	f7fc faa4 	bl	80018a0 <HAL_GetTick>
 8005358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800535c:	f7fc faa0 	bl	80018a0 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e045      	b.n	80053fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800536e:	4b06      	ldr	r3, [pc, #24]	@ (8005388 <HAL_RCC_OscConfig+0x470>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1f0      	bne.n	800535c <HAL_RCC_OscConfig+0x444>
 800537a:	e03d      	b.n	80053f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d107      	bne.n	8005394 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e038      	b.n	80053fa <HAL_RCC_OscConfig+0x4e2>
 8005388:	40023800 	.word	0x40023800
 800538c:	40007000 	.word	0x40007000
 8005390:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005394:	4b1b      	ldr	r3, [pc, #108]	@ (8005404 <HAL_RCC_OscConfig+0x4ec>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d028      	beq.n	80053f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d121      	bne.n	80053f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d11a      	bne.n	80053f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80053c4:	4013      	ands	r3, r2
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d111      	bne.n	80053f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053da:	085b      	lsrs	r3, r3, #1
 80053dc:	3b01      	subs	r3, #1
 80053de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d107      	bne.n	80053f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d001      	beq.n	80053f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e000      	b.n	80053fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	40023800 	.word	0x40023800

08005408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e0cc      	b.n	80055b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800541c:	4b68      	ldr	r3, [pc, #416]	@ (80055c0 <HAL_RCC_ClockConfig+0x1b8>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 030f 	and.w	r3, r3, #15
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d90c      	bls.n	8005444 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800542a:	4b65      	ldr	r3, [pc, #404]	@ (80055c0 <HAL_RCC_ClockConfig+0x1b8>)
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005432:	4b63      	ldr	r3, [pc, #396]	@ (80055c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d001      	beq.n	8005444 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e0b8      	b.n	80055b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d020      	beq.n	8005492 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b00      	cmp	r3, #0
 800545a:	d005      	beq.n	8005468 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800545c:	4b59      	ldr	r3, [pc, #356]	@ (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	4a58      	ldr	r2, [pc, #352]	@ (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005462:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005466:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0308 	and.w	r3, r3, #8
 8005470:	2b00      	cmp	r3, #0
 8005472:	d005      	beq.n	8005480 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005474:	4b53      	ldr	r3, [pc, #332]	@ (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	4a52      	ldr	r2, [pc, #328]	@ (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 800547a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800547e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005480:	4b50      	ldr	r3, [pc, #320]	@ (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	494d      	ldr	r1, [pc, #308]	@ (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 800548e:	4313      	orrs	r3, r2
 8005490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d044      	beq.n	8005528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d107      	bne.n	80054b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054a6:	4b47      	ldr	r3, [pc, #284]	@ (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d119      	bne.n	80054e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e07f      	b.n	80055b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d003      	beq.n	80054c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	d107      	bne.n	80054d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054c6:	4b3f      	ldr	r3, [pc, #252]	@ (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d109      	bne.n	80054e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e06f      	b.n	80055b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d6:	4b3b      	ldr	r3, [pc, #236]	@ (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e067      	b.n	80055b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054e6:	4b37      	ldr	r3, [pc, #220]	@ (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f023 0203 	bic.w	r2, r3, #3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	4934      	ldr	r1, [pc, #208]	@ (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054f8:	f7fc f9d2 	bl	80018a0 <HAL_GetTick>
 80054fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054fe:	e00a      	b.n	8005516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005500:	f7fc f9ce 	bl	80018a0 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800550e:	4293      	cmp	r3, r2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e04f      	b.n	80055b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005516:	4b2b      	ldr	r3, [pc, #172]	@ (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 020c 	and.w	r2, r3, #12
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	429a      	cmp	r2, r3
 8005526:	d1eb      	bne.n	8005500 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005528:	4b25      	ldr	r3, [pc, #148]	@ (80055c0 <HAL_RCC_ClockConfig+0x1b8>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	429a      	cmp	r2, r3
 8005534:	d20c      	bcs.n	8005550 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005536:	4b22      	ldr	r3, [pc, #136]	@ (80055c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800553e:	4b20      	ldr	r3, [pc, #128]	@ (80055c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	429a      	cmp	r2, r3
 800554a:	d001      	beq.n	8005550 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e032      	b.n	80055b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b00      	cmp	r3, #0
 800555a:	d008      	beq.n	800556e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800555c:	4b19      	ldr	r3, [pc, #100]	@ (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	4916      	ldr	r1, [pc, #88]	@ (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 800556a:	4313      	orrs	r3, r2
 800556c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b00      	cmp	r3, #0
 8005578:	d009      	beq.n	800558e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800557a:	4b12      	ldr	r3, [pc, #72]	@ (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	490e      	ldr	r1, [pc, #56]	@ (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 800558a:	4313      	orrs	r3, r2
 800558c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800558e:	f000 f821 	bl	80055d4 <HAL_RCC_GetSysClockFreq>
 8005592:	4602      	mov	r2, r0
 8005594:	4b0b      	ldr	r3, [pc, #44]	@ (80055c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	091b      	lsrs	r3, r3, #4
 800559a:	f003 030f 	and.w	r3, r3, #15
 800559e:	490a      	ldr	r1, [pc, #40]	@ (80055c8 <HAL_RCC_ClockConfig+0x1c0>)
 80055a0:	5ccb      	ldrb	r3, [r1, r3]
 80055a2:	fa22 f303 	lsr.w	r3, r2, r3
 80055a6:	4a09      	ldr	r2, [pc, #36]	@ (80055cc <HAL_RCC_ClockConfig+0x1c4>)
 80055a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055aa:	4b09      	ldr	r3, [pc, #36]	@ (80055d0 <HAL_RCC_ClockConfig+0x1c8>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7fc f80e 	bl	80015d0 <HAL_InitTick>

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	40023c00 	.word	0x40023c00
 80055c4:	40023800 	.word	0x40023800
 80055c8:	08119ab0 	.word	0x08119ab0
 80055cc:	20000008 	.word	0x20000008
 80055d0:	2000000c 	.word	0x2000000c

080055d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055d8:	b094      	sub	sp, #80	@ 0x50
 80055da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	647b      	str	r3, [r7, #68]	@ 0x44
 80055e0:	2300      	movs	r3, #0
 80055e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055e4:	2300      	movs	r3, #0
 80055e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055ec:	4b79      	ldr	r3, [pc, #484]	@ (80057d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f003 030c 	and.w	r3, r3, #12
 80055f4:	2b08      	cmp	r3, #8
 80055f6:	d00d      	beq.n	8005614 <HAL_RCC_GetSysClockFreq+0x40>
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	f200 80e1 	bhi.w	80057c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d002      	beq.n	8005608 <HAL_RCC_GetSysClockFreq+0x34>
 8005602:	2b04      	cmp	r3, #4
 8005604:	d003      	beq.n	800560e <HAL_RCC_GetSysClockFreq+0x3a>
 8005606:	e0db      	b.n	80057c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005608:	4b73      	ldr	r3, [pc, #460]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800560a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800560c:	e0db      	b.n	80057c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800560e:	4b73      	ldr	r3, [pc, #460]	@ (80057dc <HAL_RCC_GetSysClockFreq+0x208>)
 8005610:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005612:	e0d8      	b.n	80057c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005614:	4b6f      	ldr	r3, [pc, #444]	@ (80057d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800561c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800561e:	4b6d      	ldr	r3, [pc, #436]	@ (80057d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d063      	beq.n	80056f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800562a:	4b6a      	ldr	r3, [pc, #424]	@ (80057d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	099b      	lsrs	r3, r3, #6
 8005630:	2200      	movs	r2, #0
 8005632:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005634:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800563c:	633b      	str	r3, [r7, #48]	@ 0x30
 800563e:	2300      	movs	r3, #0
 8005640:	637b      	str	r3, [r7, #52]	@ 0x34
 8005642:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005646:	4622      	mov	r2, r4
 8005648:	462b      	mov	r3, r5
 800564a:	f04f 0000 	mov.w	r0, #0
 800564e:	f04f 0100 	mov.w	r1, #0
 8005652:	0159      	lsls	r1, r3, #5
 8005654:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005658:	0150      	lsls	r0, r2, #5
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	4621      	mov	r1, r4
 8005660:	1a51      	subs	r1, r2, r1
 8005662:	6139      	str	r1, [r7, #16]
 8005664:	4629      	mov	r1, r5
 8005666:	eb63 0301 	sbc.w	r3, r3, r1
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	f04f 0200 	mov.w	r2, #0
 8005670:	f04f 0300 	mov.w	r3, #0
 8005674:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005678:	4659      	mov	r1, fp
 800567a:	018b      	lsls	r3, r1, #6
 800567c:	4651      	mov	r1, sl
 800567e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005682:	4651      	mov	r1, sl
 8005684:	018a      	lsls	r2, r1, #6
 8005686:	4651      	mov	r1, sl
 8005688:	ebb2 0801 	subs.w	r8, r2, r1
 800568c:	4659      	mov	r1, fp
 800568e:	eb63 0901 	sbc.w	r9, r3, r1
 8005692:	f04f 0200 	mov.w	r2, #0
 8005696:	f04f 0300 	mov.w	r3, #0
 800569a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800569e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056a6:	4690      	mov	r8, r2
 80056a8:	4699      	mov	r9, r3
 80056aa:	4623      	mov	r3, r4
 80056ac:	eb18 0303 	adds.w	r3, r8, r3
 80056b0:	60bb      	str	r3, [r7, #8]
 80056b2:	462b      	mov	r3, r5
 80056b4:	eb49 0303 	adc.w	r3, r9, r3
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	f04f 0200 	mov.w	r2, #0
 80056be:	f04f 0300 	mov.w	r3, #0
 80056c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80056c6:	4629      	mov	r1, r5
 80056c8:	024b      	lsls	r3, r1, #9
 80056ca:	4621      	mov	r1, r4
 80056cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056d0:	4621      	mov	r1, r4
 80056d2:	024a      	lsls	r2, r1, #9
 80056d4:	4610      	mov	r0, r2
 80056d6:	4619      	mov	r1, r3
 80056d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056da:	2200      	movs	r2, #0
 80056dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056e4:	f7fa fd84 	bl	80001f0 <__aeabi_uldivmod>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4613      	mov	r3, r2
 80056ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056f0:	e058      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056f2:	4b38      	ldr	r3, [pc, #224]	@ (80057d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	099b      	lsrs	r3, r3, #6
 80056f8:	2200      	movs	r2, #0
 80056fa:	4618      	mov	r0, r3
 80056fc:	4611      	mov	r1, r2
 80056fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005702:	623b      	str	r3, [r7, #32]
 8005704:	2300      	movs	r3, #0
 8005706:	627b      	str	r3, [r7, #36]	@ 0x24
 8005708:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800570c:	4642      	mov	r2, r8
 800570e:	464b      	mov	r3, r9
 8005710:	f04f 0000 	mov.w	r0, #0
 8005714:	f04f 0100 	mov.w	r1, #0
 8005718:	0159      	lsls	r1, r3, #5
 800571a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800571e:	0150      	lsls	r0, r2, #5
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	4641      	mov	r1, r8
 8005726:	ebb2 0a01 	subs.w	sl, r2, r1
 800572a:	4649      	mov	r1, r9
 800572c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	f04f 0300 	mov.w	r3, #0
 8005738:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800573c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005740:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005744:	ebb2 040a 	subs.w	r4, r2, sl
 8005748:	eb63 050b 	sbc.w	r5, r3, fp
 800574c:	f04f 0200 	mov.w	r2, #0
 8005750:	f04f 0300 	mov.w	r3, #0
 8005754:	00eb      	lsls	r3, r5, #3
 8005756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800575a:	00e2      	lsls	r2, r4, #3
 800575c:	4614      	mov	r4, r2
 800575e:	461d      	mov	r5, r3
 8005760:	4643      	mov	r3, r8
 8005762:	18e3      	adds	r3, r4, r3
 8005764:	603b      	str	r3, [r7, #0]
 8005766:	464b      	mov	r3, r9
 8005768:	eb45 0303 	adc.w	r3, r5, r3
 800576c:	607b      	str	r3, [r7, #4]
 800576e:	f04f 0200 	mov.w	r2, #0
 8005772:	f04f 0300 	mov.w	r3, #0
 8005776:	e9d7 4500 	ldrd	r4, r5, [r7]
 800577a:	4629      	mov	r1, r5
 800577c:	028b      	lsls	r3, r1, #10
 800577e:	4621      	mov	r1, r4
 8005780:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005784:	4621      	mov	r1, r4
 8005786:	028a      	lsls	r2, r1, #10
 8005788:	4610      	mov	r0, r2
 800578a:	4619      	mov	r1, r3
 800578c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800578e:	2200      	movs	r2, #0
 8005790:	61bb      	str	r3, [r7, #24]
 8005792:	61fa      	str	r2, [r7, #28]
 8005794:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005798:	f7fa fd2a 	bl	80001f0 <__aeabi_uldivmod>
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	4613      	mov	r3, r2
 80057a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057a4:	4b0b      	ldr	r3, [pc, #44]	@ (80057d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	0c1b      	lsrs	r3, r3, #16
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	3301      	adds	r3, #1
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80057b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057be:	e002      	b.n	80057c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057c0:	4b05      	ldr	r3, [pc, #20]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80057c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3750      	adds	r7, #80	@ 0x50
 80057cc:	46bd      	mov	sp, r7
 80057ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057d2:	bf00      	nop
 80057d4:	40023800 	.word	0x40023800
 80057d8:	00f42400 	.word	0x00f42400
 80057dc:	007a1200 	.word	0x007a1200

080057e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057e4:	4b03      	ldr	r3, [pc, #12]	@ (80057f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80057e6:	681b      	ldr	r3, [r3, #0]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	20000008 	.word	0x20000008

080057f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057fc:	f7ff fff0 	bl	80057e0 <HAL_RCC_GetHCLKFreq>
 8005800:	4602      	mov	r2, r0
 8005802:	4b05      	ldr	r3, [pc, #20]	@ (8005818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	0a9b      	lsrs	r3, r3, #10
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	4903      	ldr	r1, [pc, #12]	@ (800581c <HAL_RCC_GetPCLK1Freq+0x24>)
 800580e:	5ccb      	ldrb	r3, [r1, r3]
 8005810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005814:	4618      	mov	r0, r3
 8005816:	bd80      	pop	{r7, pc}
 8005818:	40023800 	.word	0x40023800
 800581c:	08119ac0 	.word	0x08119ac0

08005820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005824:	f7ff ffdc 	bl	80057e0 <HAL_RCC_GetHCLKFreq>
 8005828:	4602      	mov	r2, r0
 800582a:	4b05      	ldr	r3, [pc, #20]	@ (8005840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	0b5b      	lsrs	r3, r3, #13
 8005830:	f003 0307 	and.w	r3, r3, #7
 8005834:	4903      	ldr	r1, [pc, #12]	@ (8005844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005836:	5ccb      	ldrb	r3, [r1, r3]
 8005838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800583c:	4618      	mov	r0, r3
 800583e:	bd80      	pop	{r7, pc}
 8005840:	40023800 	.word	0x40023800
 8005844:	08119ac0 	.word	0x08119ac0

08005848 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	220f      	movs	r2, #15
 8005856:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005858:	4b12      	ldr	r3, [pc, #72]	@ (80058a4 <HAL_RCC_GetClockConfig+0x5c>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f003 0203 	and.w	r2, r3, #3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005864:	4b0f      	ldr	r3, [pc, #60]	@ (80058a4 <HAL_RCC_GetClockConfig+0x5c>)
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005870:	4b0c      	ldr	r3, [pc, #48]	@ (80058a4 <HAL_RCC_GetClockConfig+0x5c>)
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800587c:	4b09      	ldr	r3, [pc, #36]	@ (80058a4 <HAL_RCC_GetClockConfig+0x5c>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	08db      	lsrs	r3, r3, #3
 8005882:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800588a:	4b07      	ldr	r3, [pc, #28]	@ (80058a8 <HAL_RCC_GetClockConfig+0x60>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 020f 	and.w	r2, r3, #15
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	601a      	str	r2, [r3, #0]
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	40023800 	.word	0x40023800
 80058a8:	40023c00 	.word	0x40023c00

080058ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10b      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d105      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d075      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058e0:	4b91      	ldr	r3, [pc, #580]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058e6:	f7fb ffdb 	bl	80018a0 <HAL_GetTick>
 80058ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058ec:	e008      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80058ee:	f7fb ffd7 	bl	80018a0 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d901      	bls.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e189      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005900:	4b8a      	ldr	r3, [pc, #552]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1f0      	bne.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d009      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	019a      	lsls	r2, r3, #6
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	071b      	lsls	r3, r3, #28
 8005924:	4981      	ldr	r1, [pc, #516]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005926:	4313      	orrs	r3, r2
 8005928:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d01f      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005938:	4b7c      	ldr	r3, [pc, #496]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800593a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800593e:	0f1b      	lsrs	r3, r3, #28
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	019a      	lsls	r2, r3, #6
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	061b      	lsls	r3, r3, #24
 8005952:	431a      	orrs	r2, r3
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	071b      	lsls	r3, r3, #28
 8005958:	4974      	ldr	r1, [pc, #464]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005960:	4b72      	ldr	r3, [pc, #456]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005962:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005966:	f023 021f 	bic.w	r2, r3, #31
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	3b01      	subs	r3, #1
 8005970:	496e      	ldr	r1, [pc, #440]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005972:	4313      	orrs	r3, r2
 8005974:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00d      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	019a      	lsls	r2, r3, #6
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	061b      	lsls	r3, r3, #24
 8005990:	431a      	orrs	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	071b      	lsls	r3, r3, #28
 8005998:	4964      	ldr	r1, [pc, #400]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800599a:	4313      	orrs	r3, r2
 800599c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059a0:	4b61      	ldr	r3, [pc, #388]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80059a2:	2201      	movs	r2, #1
 80059a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059a6:	f7fb ff7b 	bl	80018a0 <HAL_GetTick>
 80059aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059ac:	e008      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80059ae:	f7fb ff77 	bl	80018a0 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d901      	bls.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e129      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059c0:	4b5a      	ldr	r3, [pc, #360]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0f0      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d105      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d079      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80059e4:	4b52      	ldr	r3, [pc, #328]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059ea:	f7fb ff59 	bl	80018a0 <HAL_GetTick>
 80059ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059f0:	e008      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80059f2:	f7fb ff55 	bl	80018a0 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d901      	bls.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e107      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a04:	4b49      	ldr	r3, [pc, #292]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a10:	d0ef      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0304 	and.w	r3, r3, #4
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d020      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a1e:	4b43      	ldr	r3, [pc, #268]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a24:	0f1b      	lsrs	r3, r3, #28
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	019a      	lsls	r2, r3, #6
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	061b      	lsls	r3, r3, #24
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	071b      	lsls	r3, r3, #28
 8005a3e:	493b      	ldr	r1, [pc, #236]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a46:	4b39      	ldr	r3, [pc, #228]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a4c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	3b01      	subs	r3, #1
 8005a56:	021b      	lsls	r3, r3, #8
 8005a58:	4934      	ldr	r1, [pc, #208]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0308 	and.w	r3, r3, #8
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d01e      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a6c:	4b2f      	ldr	r3, [pc, #188]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a72:	0e1b      	lsrs	r3, r3, #24
 8005a74:	f003 030f 	and.w	r3, r3, #15
 8005a78:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	019a      	lsls	r2, r3, #6
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	061b      	lsls	r3, r3, #24
 8005a84:	431a      	orrs	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	071b      	lsls	r3, r3, #28
 8005a8c:	4927      	ldr	r1, [pc, #156]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005a94:	4b25      	ldr	r3, [pc, #148]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a9a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa2:	4922      	ldr	r1, [pc, #136]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005aaa:	4b21      	ldr	r3, [pc, #132]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005aac:	2201      	movs	r2, #1
 8005aae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ab0:	f7fb fef6 	bl	80018a0 <HAL_GetTick>
 8005ab4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ab6:	e008      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005ab8:	f7fb fef2 	bl	80018a0 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e0a4      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005aca:	4b18      	ldr	r3, [pc, #96]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ad2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ad6:	d1ef      	bne.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0320 	and.w	r3, r3, #32
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 808b 	beq.w	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60fb      	str	r3, [r7, #12]
 8005aea:	4b10      	ldr	r3, [pc, #64]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aee:	4a0f      	ldr	r2, [pc, #60]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005af6:	4b0d      	ldr	r3, [pc, #52]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005b02:	4b0c      	ldr	r3, [pc, #48]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a0b      	ldr	r2, [pc, #44]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b0e:	f7fb fec7 	bl	80018a0 <HAL_GetTick>
 8005b12:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b14:	e010      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b16:	f7fb fec3 	bl	80018a0 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d909      	bls.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e075      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005b28:	42470068 	.word	0x42470068
 8005b2c:	40023800 	.word	0x40023800
 8005b30:	42470070 	.word	0x42470070
 8005b34:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b38:	4b38      	ldr	r3, [pc, #224]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d0e8      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b44:	4b36      	ldr	r3, [pc, #216]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b4c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d02f      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d028      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b62:	4b2f      	ldr	r3, [pc, #188]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b6a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b6c:	4b2d      	ldr	r3, [pc, #180]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005b6e:	2201      	movs	r2, #1
 8005b70:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b72:	4b2c      	ldr	r3, [pc, #176]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b78:	4a29      	ldr	r2, [pc, #164]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b7e:	4b28      	ldr	r3, [pc, #160]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d114      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b8a:	f7fb fe89 	bl	80018a0 <HAL_GetTick>
 8005b8e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b90:	e00a      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b92:	f7fb fe85 	bl	80018a0 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e035      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0ee      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bc0:	d10d      	bne.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005bc2:	4b17      	ldr	r3, [pc, #92]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bce:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005bd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bd6:	4912      	ldr	r1, [pc, #72]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	608b      	str	r3, [r1, #8]
 8005bdc:	e005      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005bde:	4b10      	ldr	r3, [pc, #64]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	4a0f      	ldr	r2, [pc, #60]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005be4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005be8:	6093      	str	r3, [r2, #8]
 8005bea:	4b0d      	ldr	r3, [pc, #52]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bf6:	490a      	ldr	r1, [pc, #40]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0310 	and.w	r3, r3, #16
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d004      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005c0e:	4b06      	ldr	r3, [pc, #24]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005c10:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3718      	adds	r7, #24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	40007000 	.word	0x40007000
 8005c20:	40023800 	.word	0x40023800
 8005c24:	42470e40 	.word	0x42470e40
 8005c28:	424711e0 	.word	0x424711e0

08005c2c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e025      	b.n	8005c8c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d106      	bne.n	8005c5a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7fb fcb1 	bl	80015bc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	3304      	adds	r3, #4
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	f001 f91b 	bl	8006ea8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6818      	ldr	r0, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	6839      	ldr	r1, [r7, #0]
 8005c7e:	f001 f970 	bl	8006f62 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e07b      	b.n	8005d9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d108      	bne.n	8005cc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cb6:	d009      	beq.n	8005ccc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	61da      	str	r2, [r3, #28]
 8005cbe:	e005      	b.n	8005ccc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d106      	bne.n	8005cec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fb facc 	bl	8001284 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d14:	431a      	orrs	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	431a      	orrs	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d50:	ea42 0103 	orr.w	r1, r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d58:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	0c1b      	lsrs	r3, r3, #16
 8005d6a:	f003 0104 	and.w	r1, r3, #4
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d72:	f003 0210 	and.w	r2, r3, #16
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69da      	ldr	r2, [r3, #28]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b082      	sub	sp, #8
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e041      	b.n	8005e3c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d106      	bne.n	8005dd2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7fb faa1 	bl	8001314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	3304      	adds	r3, #4
 8005de2:	4619      	mov	r1, r3
 8005de4:	4610      	mov	r0, r2
 8005de6:	f000 fa7d 	bl	80062e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3708      	adds	r7, #8
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d001      	beq.n	8005e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e04e      	b.n	8005efa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f042 0201 	orr.w	r2, r2, #1
 8005e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a23      	ldr	r2, [pc, #140]	@ (8005f08 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d022      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e86:	d01d      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a1f      	ldr	r2, [pc, #124]	@ (8005f0c <HAL_TIM_Base_Start_IT+0xc8>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d018      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a1e      	ldr	r2, [pc, #120]	@ (8005f10 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d013      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8005f14 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d00e      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8005f18 <HAL_TIM_Base_Start_IT+0xd4>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d009      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a19      	ldr	r2, [pc, #100]	@ (8005f1c <HAL_TIM_Base_Start_IT+0xd8>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d004      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a18      	ldr	r2, [pc, #96]	@ (8005f20 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d111      	bne.n	8005ee8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 0307 	and.w	r3, r3, #7
 8005ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b06      	cmp	r3, #6
 8005ed4:	d010      	beq.n	8005ef8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f042 0201 	orr.w	r2, r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee6:	e007      	b.n	8005ef8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0201 	orr.w	r2, r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	40010000 	.word	0x40010000
 8005f0c:	40000400 	.word	0x40000400
 8005f10:	40000800 	.word	0x40000800
 8005f14:	40000c00 	.word	0x40000c00
 8005f18:	40010400 	.word	0x40010400
 8005f1c:	40014000 	.word	0x40014000
 8005f20:	40001800 	.word	0x40001800

08005f24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d020      	beq.n	8005f88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01b      	beq.n	8005f88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f06f 0202 	mvn.w	r2, #2
 8005f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f999 	bl	80062a6 <HAL_TIM_IC_CaptureCallback>
 8005f74:	e005      	b.n	8005f82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f98b 	bl	8006292 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f99c 	bl	80062ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	f003 0304 	and.w	r3, r3, #4
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d020      	beq.n	8005fd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d01b      	beq.n	8005fd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f06f 0204 	mvn.w	r2, #4
 8005fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2202      	movs	r2, #2
 8005faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f973 	bl	80062a6 <HAL_TIM_IC_CaptureCallback>
 8005fc0:	e005      	b.n	8005fce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f965 	bl	8006292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f976 	bl	80062ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	f003 0308 	and.w	r3, r3, #8
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d020      	beq.n	8006020 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f003 0308 	and.w	r3, r3, #8
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d01b      	beq.n	8006020 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f06f 0208 	mvn.w	r2, #8
 8005ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2204      	movs	r2, #4
 8005ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f003 0303 	and.w	r3, r3, #3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f94d 	bl	80062a6 <HAL_TIM_IC_CaptureCallback>
 800600c:	e005      	b.n	800601a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f93f 	bl	8006292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f950 	bl	80062ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f003 0310 	and.w	r3, r3, #16
 8006026:	2b00      	cmp	r3, #0
 8006028:	d020      	beq.n	800606c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f003 0310 	and.w	r3, r3, #16
 8006030:	2b00      	cmp	r3, #0
 8006032:	d01b      	beq.n	800606c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f06f 0210 	mvn.w	r2, #16
 800603c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2208      	movs	r2, #8
 8006042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f927 	bl	80062a6 <HAL_TIM_IC_CaptureCallback>
 8006058:	e005      	b.n	8006066 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f919 	bl	8006292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f92a 	bl	80062ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00c      	beq.n	8006090 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b00      	cmp	r3, #0
 800607e:	d007      	beq.n	8006090 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f06f 0201 	mvn.w	r2, #1
 8006088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7fa fed2 	bl	8000e34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00c      	beq.n	80060b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d007      	beq.n	80060b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80060ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fae4 	bl	800667c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00c      	beq.n	80060d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d007      	beq.n	80060d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f8fb 	bl	80062ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00c      	beq.n	80060fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f003 0320 	and.w	r3, r3, #32
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d007      	beq.n	80060fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f06f 0220 	mvn.w	r2, #32
 80060f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fab6 	bl	8006668 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060fc:	bf00      	nop
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006118:	2b01      	cmp	r3, #1
 800611a:	d101      	bne.n	8006120 <HAL_TIM_ConfigClockSource+0x1c>
 800611c:	2302      	movs	r3, #2
 800611e:	e0b4      	b.n	800628a <HAL_TIM_ConfigClockSource+0x186>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800613e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006146:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006158:	d03e      	beq.n	80061d8 <HAL_TIM_ConfigClockSource+0xd4>
 800615a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800615e:	f200 8087 	bhi.w	8006270 <HAL_TIM_ConfigClockSource+0x16c>
 8006162:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006166:	f000 8086 	beq.w	8006276 <HAL_TIM_ConfigClockSource+0x172>
 800616a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800616e:	d87f      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x16c>
 8006170:	2b70      	cmp	r3, #112	@ 0x70
 8006172:	d01a      	beq.n	80061aa <HAL_TIM_ConfigClockSource+0xa6>
 8006174:	2b70      	cmp	r3, #112	@ 0x70
 8006176:	d87b      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x16c>
 8006178:	2b60      	cmp	r3, #96	@ 0x60
 800617a:	d050      	beq.n	800621e <HAL_TIM_ConfigClockSource+0x11a>
 800617c:	2b60      	cmp	r3, #96	@ 0x60
 800617e:	d877      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x16c>
 8006180:	2b50      	cmp	r3, #80	@ 0x50
 8006182:	d03c      	beq.n	80061fe <HAL_TIM_ConfigClockSource+0xfa>
 8006184:	2b50      	cmp	r3, #80	@ 0x50
 8006186:	d873      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x16c>
 8006188:	2b40      	cmp	r3, #64	@ 0x40
 800618a:	d058      	beq.n	800623e <HAL_TIM_ConfigClockSource+0x13a>
 800618c:	2b40      	cmp	r3, #64	@ 0x40
 800618e:	d86f      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x16c>
 8006190:	2b30      	cmp	r3, #48	@ 0x30
 8006192:	d064      	beq.n	800625e <HAL_TIM_ConfigClockSource+0x15a>
 8006194:	2b30      	cmp	r3, #48	@ 0x30
 8006196:	d86b      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x16c>
 8006198:	2b20      	cmp	r3, #32
 800619a:	d060      	beq.n	800625e <HAL_TIM_ConfigClockSource+0x15a>
 800619c:	2b20      	cmp	r3, #32
 800619e:	d867      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x16c>
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d05c      	beq.n	800625e <HAL_TIM_ConfigClockSource+0x15a>
 80061a4:	2b10      	cmp	r3, #16
 80061a6:	d05a      	beq.n	800625e <HAL_TIM_ConfigClockSource+0x15a>
 80061a8:	e062      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061ba:	f000 f9b9 	bl	8006530 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80061cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	609a      	str	r2, [r3, #8]
      break;
 80061d6:	e04f      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061e8:	f000 f9a2 	bl	8006530 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689a      	ldr	r2, [r3, #8]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061fa:	609a      	str	r2, [r3, #8]
      break;
 80061fc:	e03c      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800620a:	461a      	mov	r2, r3
 800620c:	f000 f916 	bl	800643c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2150      	movs	r1, #80	@ 0x50
 8006216:	4618      	mov	r0, r3
 8006218:	f000 f96f 	bl	80064fa <TIM_ITRx_SetConfig>
      break;
 800621c:	e02c      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800622a:	461a      	mov	r2, r3
 800622c:	f000 f935 	bl	800649a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2160      	movs	r1, #96	@ 0x60
 8006236:	4618      	mov	r0, r3
 8006238:	f000 f95f 	bl	80064fa <TIM_ITRx_SetConfig>
      break;
 800623c:	e01c      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800624a:	461a      	mov	r2, r3
 800624c:	f000 f8f6 	bl	800643c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2140      	movs	r1, #64	@ 0x40
 8006256:	4618      	mov	r0, r3
 8006258:	f000 f94f 	bl	80064fa <TIM_ITRx_SetConfig>
      break;
 800625c:	e00c      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4619      	mov	r1, r3
 8006268:	4610      	mov	r0, r2
 800626a:	f000 f946 	bl	80064fa <TIM_ITRx_SetConfig>
      break;
 800626e:	e003      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	73fb      	strb	r3, [r7, #15]
      break;
 8006274:	e000      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006276:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006288:	7bfb      	ldrb	r3, [r7, #15]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006292:	b480      	push	{r7}
 8006294:	b083      	sub	sp, #12
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062ae:	bf00      	nop
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b083      	sub	sp, #12
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062c2:	bf00      	nop
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b083      	sub	sp, #12
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062d6:	bf00      	nop
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
	...

080062e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a46      	ldr	r2, [pc, #280]	@ (8006410 <TIM_Base_SetConfig+0x12c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d013      	beq.n	8006324 <TIM_Base_SetConfig+0x40>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006302:	d00f      	beq.n	8006324 <TIM_Base_SetConfig+0x40>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a43      	ldr	r2, [pc, #268]	@ (8006414 <TIM_Base_SetConfig+0x130>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d00b      	beq.n	8006324 <TIM_Base_SetConfig+0x40>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a42      	ldr	r2, [pc, #264]	@ (8006418 <TIM_Base_SetConfig+0x134>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d007      	beq.n	8006324 <TIM_Base_SetConfig+0x40>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a41      	ldr	r2, [pc, #260]	@ (800641c <TIM_Base_SetConfig+0x138>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d003      	beq.n	8006324 <TIM_Base_SetConfig+0x40>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a40      	ldr	r2, [pc, #256]	@ (8006420 <TIM_Base_SetConfig+0x13c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d108      	bne.n	8006336 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800632a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	4313      	orrs	r3, r2
 8006334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a35      	ldr	r2, [pc, #212]	@ (8006410 <TIM_Base_SetConfig+0x12c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d02b      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006344:	d027      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a32      	ldr	r2, [pc, #200]	@ (8006414 <TIM_Base_SetConfig+0x130>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d023      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a31      	ldr	r2, [pc, #196]	@ (8006418 <TIM_Base_SetConfig+0x134>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d01f      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a30      	ldr	r2, [pc, #192]	@ (800641c <TIM_Base_SetConfig+0x138>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d01b      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a2f      	ldr	r2, [pc, #188]	@ (8006420 <TIM_Base_SetConfig+0x13c>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d017      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a2e      	ldr	r2, [pc, #184]	@ (8006424 <TIM_Base_SetConfig+0x140>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d013      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a2d      	ldr	r2, [pc, #180]	@ (8006428 <TIM_Base_SetConfig+0x144>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d00f      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a2c      	ldr	r2, [pc, #176]	@ (800642c <TIM_Base_SetConfig+0x148>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00b      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a2b      	ldr	r2, [pc, #172]	@ (8006430 <TIM_Base_SetConfig+0x14c>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d007      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a2a      	ldr	r2, [pc, #168]	@ (8006434 <TIM_Base_SetConfig+0x150>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d003      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a29      	ldr	r2, [pc, #164]	@ (8006438 <TIM_Base_SetConfig+0x154>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d108      	bne.n	80063a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800639c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a10      	ldr	r2, [pc, #64]	@ (8006410 <TIM_Base_SetConfig+0x12c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d003      	beq.n	80063dc <TIM_Base_SetConfig+0xf8>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a12      	ldr	r2, [pc, #72]	@ (8006420 <TIM_Base_SetConfig+0x13c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d103      	bne.n	80063e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	691a      	ldr	r2, [r3, #16]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d105      	bne.n	8006402 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	f023 0201 	bic.w	r2, r3, #1
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	611a      	str	r2, [r3, #16]
  }
}
 8006402:	bf00      	nop
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	40010000 	.word	0x40010000
 8006414:	40000400 	.word	0x40000400
 8006418:	40000800 	.word	0x40000800
 800641c:	40000c00 	.word	0x40000c00
 8006420:	40010400 	.word	0x40010400
 8006424:	40014000 	.word	0x40014000
 8006428:	40014400 	.word	0x40014400
 800642c:	40014800 	.word	0x40014800
 8006430:	40001800 	.word	0x40001800
 8006434:	40001c00 	.word	0x40001c00
 8006438:	40002000 	.word	0x40002000

0800643c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	f023 0201 	bic.w	r2, r3, #1
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	011b      	lsls	r3, r3, #4
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	4313      	orrs	r3, r2
 8006470:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f023 030a 	bic.w	r3, r3, #10
 8006478:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	4313      	orrs	r3, r2
 8006480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	621a      	str	r2, [r3, #32]
}
 800648e:	bf00      	nop
 8006490:	371c      	adds	r7, #28
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800649a:	b480      	push	{r7}
 800649c:	b087      	sub	sp, #28
 800649e:	af00      	add	r7, sp, #0
 80064a0:	60f8      	str	r0, [r7, #12]
 80064a2:	60b9      	str	r1, [r7, #8]
 80064a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	f023 0210 	bic.w	r2, r3, #16
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	031b      	lsls	r3, r3, #12
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80064d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	011b      	lsls	r3, r3, #4
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	4313      	orrs	r3, r2
 80064e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	621a      	str	r2, [r3, #32]
}
 80064ee:	bf00      	nop
 80064f0:	371c      	adds	r7, #28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b085      	sub	sp, #20
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006510:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4313      	orrs	r3, r2
 8006518:	f043 0307 	orr.w	r3, r3, #7
 800651c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	609a      	str	r2, [r3, #8]
}
 8006524:	bf00      	nop
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006530:	b480      	push	{r7}
 8006532:	b087      	sub	sp, #28
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
 800653c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800654a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	021a      	lsls	r2, r3, #8
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	431a      	orrs	r2, r3
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4313      	orrs	r3, r2
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	4313      	orrs	r3, r2
 800655c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	609a      	str	r2, [r3, #8]
}
 8006564:	bf00      	nop
 8006566:	371c      	adds	r7, #28
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006580:	2b01      	cmp	r3, #1
 8006582:	d101      	bne.n	8006588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006584:	2302      	movs	r3, #2
 8006586:	e05a      	b.n	800663e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2202      	movs	r2, #2
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a21      	ldr	r2, [pc, #132]	@ (800664c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d022      	beq.n	8006612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065d4:	d01d      	beq.n	8006612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a1d      	ldr	r2, [pc, #116]	@ (8006650 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d018      	beq.n	8006612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006654 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d013      	beq.n	8006612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a1a      	ldr	r2, [pc, #104]	@ (8006658 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00e      	beq.n	8006612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a18      	ldr	r2, [pc, #96]	@ (800665c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d009      	beq.n	8006612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a17      	ldr	r2, [pc, #92]	@ (8006660 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d004      	beq.n	8006612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a15      	ldr	r2, [pc, #84]	@ (8006664 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d10c      	bne.n	800662c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006618:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	4313      	orrs	r3, r2
 8006622:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	40010000 	.word	0x40010000
 8006650:	40000400 	.word	0x40000400
 8006654:	40000800 	.word	0x40000800
 8006658:	40000c00 	.word	0x40000c00
 800665c:	40010400 	.word	0x40010400
 8006660:	40014000 	.word	0x40014000
 8006664:	40001800 	.word	0x40001800

08006668 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e042      	b.n	8006728 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d106      	bne.n	80066bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7fa fe4e 	bl	8001358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2224      	movs	r2, #36	@ 0x24
 80066c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f973 	bl	80069c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	691a      	ldr	r2, [r3, #16]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	695a      	ldr	r2, [r3, #20]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68da      	ldr	r2, [r3, #12]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006708:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2220      	movs	r2, #32
 8006714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2220      	movs	r2, #32
 800671c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08a      	sub	sp, #40	@ 0x28
 8006734:	af02      	add	r7, sp, #8
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	603b      	str	r3, [r7, #0]
 800673c:	4613      	mov	r3, r2
 800673e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006740:	2300      	movs	r3, #0
 8006742:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b20      	cmp	r3, #32
 800674e:	d175      	bne.n	800683c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d002      	beq.n	800675c <HAL_UART_Transmit+0x2c>
 8006756:	88fb      	ldrh	r3, [r7, #6]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e06e      	b.n	800683e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2221      	movs	r2, #33	@ 0x21
 800676a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800676e:	f7fb f897 	bl	80018a0 <HAL_GetTick>
 8006772:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	88fa      	ldrh	r2, [r7, #6]
 8006778:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	88fa      	ldrh	r2, [r7, #6]
 800677e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006788:	d108      	bne.n	800679c <HAL_UART_Transmit+0x6c>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d104      	bne.n	800679c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006792:	2300      	movs	r3, #0
 8006794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	61bb      	str	r3, [r7, #24]
 800679a:	e003      	b.n	80067a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067a0:	2300      	movs	r3, #0
 80067a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067a4:	e02e      	b.n	8006804 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2200      	movs	r2, #0
 80067ae:	2180      	movs	r1, #128	@ 0x80
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 f848 	bl	8006846 <UART_WaitOnFlagUntilTimeout>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2220      	movs	r2, #32
 80067c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e03a      	b.n	800683e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10b      	bne.n	80067e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	3302      	adds	r3, #2
 80067e2:	61bb      	str	r3, [r7, #24]
 80067e4:	e007      	b.n	80067f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	781a      	ldrb	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	3301      	adds	r3, #1
 80067f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	3b01      	subs	r3, #1
 80067fe:	b29a      	uxth	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006808:	b29b      	uxth	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1cb      	bne.n	80067a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	2200      	movs	r2, #0
 8006816:	2140      	movs	r1, #64	@ 0x40
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 f814 	bl	8006846 <UART_WaitOnFlagUntilTimeout>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d005      	beq.n	8006830 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2220      	movs	r2, #32
 8006828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e006      	b.n	800683e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2220      	movs	r2, #32
 8006834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006838:	2300      	movs	r3, #0
 800683a:	e000      	b.n	800683e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800683c:	2302      	movs	r3, #2
  }
}
 800683e:	4618      	mov	r0, r3
 8006840:	3720      	adds	r7, #32
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b086      	sub	sp, #24
 800684a:	af00      	add	r7, sp, #0
 800684c:	60f8      	str	r0, [r7, #12]
 800684e:	60b9      	str	r1, [r7, #8]
 8006850:	603b      	str	r3, [r7, #0]
 8006852:	4613      	mov	r3, r2
 8006854:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006856:	e03b      	b.n	80068d0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006858:	6a3b      	ldr	r3, [r7, #32]
 800685a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800685e:	d037      	beq.n	80068d0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006860:	f7fb f81e 	bl	80018a0 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	6a3a      	ldr	r2, [r7, #32]
 800686c:	429a      	cmp	r2, r3
 800686e:	d302      	bcc.n	8006876 <UART_WaitOnFlagUntilTimeout+0x30>
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e03a      	b.n	80068f0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f003 0304 	and.w	r3, r3, #4
 8006884:	2b00      	cmp	r3, #0
 8006886:	d023      	beq.n	80068d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2b80      	cmp	r3, #128	@ 0x80
 800688c:	d020      	beq.n	80068d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2b40      	cmp	r3, #64	@ 0x40
 8006892:	d01d      	beq.n	80068d0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0308 	and.w	r3, r3, #8
 800689e:	2b08      	cmp	r3, #8
 80068a0:	d116      	bne.n	80068d0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80068a2:	2300      	movs	r3, #0
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	617b      	str	r3, [r7, #20]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	617b      	str	r3, [r7, #20]
 80068b6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f000 f81d 	bl	80068f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2208      	movs	r2, #8
 80068c2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e00f      	b.n	80068f0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	4013      	ands	r3, r2
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	429a      	cmp	r2, r3
 80068de:	bf0c      	ite	eq
 80068e0:	2301      	moveq	r3, #1
 80068e2:	2300      	movne	r3, #0
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	461a      	mov	r2, r3
 80068e8:	79fb      	ldrb	r3, [r7, #7]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d0b4      	beq.n	8006858 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3718      	adds	r7, #24
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b095      	sub	sp, #84	@ 0x54
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	330c      	adds	r3, #12
 8006906:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800690a:	e853 3f00 	ldrex	r3, [r3]
 800690e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006912:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006916:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	330c      	adds	r3, #12
 800691e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006920:	643a      	str	r2, [r7, #64]	@ 0x40
 8006922:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006924:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006926:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006928:	e841 2300 	strex	r3, r2, [r1]
 800692c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800692e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1e5      	bne.n	8006900 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	3314      	adds	r3, #20
 800693a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693c:	6a3b      	ldr	r3, [r7, #32]
 800693e:	e853 3f00 	ldrex	r3, [r3]
 8006942:	61fb      	str	r3, [r7, #28]
   return(result);
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	f023 0301 	bic.w	r3, r3, #1
 800694a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3314      	adds	r3, #20
 8006952:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006954:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006956:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006958:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800695a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800695c:	e841 2300 	strex	r3, r2, [r1]
 8006960:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1e5      	bne.n	8006934 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800696c:	2b01      	cmp	r3, #1
 800696e:	d119      	bne.n	80069a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	330c      	adds	r3, #12
 8006976:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	e853 3f00 	ldrex	r3, [r3]
 800697e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f023 0310 	bic.w	r3, r3, #16
 8006986:	647b      	str	r3, [r7, #68]	@ 0x44
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	330c      	adds	r3, #12
 800698e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006990:	61ba      	str	r2, [r7, #24]
 8006992:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006994:	6979      	ldr	r1, [r7, #20]
 8006996:	69ba      	ldr	r2, [r7, #24]
 8006998:	e841 2300 	strex	r3, r2, [r1]
 800699c:	613b      	str	r3, [r7, #16]
   return(result);
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1e5      	bne.n	8006970 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80069b2:	bf00      	nop
 80069b4:	3754      	adds	r7, #84	@ 0x54
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
	...

080069c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069c4:	b0c0      	sub	sp, #256	@ 0x100
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80069d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069dc:	68d9      	ldr	r1, [r3, #12]
 80069de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	ea40 0301 	orr.w	r3, r0, r1
 80069e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	431a      	orrs	r2, r3
 80069f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	431a      	orrs	r2, r3
 8006a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006a18:	f021 010c 	bic.w	r1, r1, #12
 8006a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a26:	430b      	orrs	r3, r1
 8006a28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a3a:	6999      	ldr	r1, [r3, #24]
 8006a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	ea40 0301 	orr.w	r3, r0, r1
 8006a46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	4b8f      	ldr	r3, [pc, #572]	@ (8006c8c <UART_SetConfig+0x2cc>)
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d005      	beq.n	8006a60 <UART_SetConfig+0xa0>
 8006a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	4b8d      	ldr	r3, [pc, #564]	@ (8006c90 <UART_SetConfig+0x2d0>)
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d104      	bne.n	8006a6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a60:	f7fe fede 	bl	8005820 <HAL_RCC_GetPCLK2Freq>
 8006a64:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006a68:	e003      	b.n	8006a72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a6a:	f7fe fec5 	bl	80057f8 <HAL_RCC_GetPCLK1Freq>
 8006a6e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a7c:	f040 810c 	bne.w	8006c98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a84:	2200      	movs	r2, #0
 8006a86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a8a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006a8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006a92:	4622      	mov	r2, r4
 8006a94:	462b      	mov	r3, r5
 8006a96:	1891      	adds	r1, r2, r2
 8006a98:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006a9a:	415b      	adcs	r3, r3
 8006a9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006aa2:	4621      	mov	r1, r4
 8006aa4:	eb12 0801 	adds.w	r8, r2, r1
 8006aa8:	4629      	mov	r1, r5
 8006aaa:	eb43 0901 	adc.w	r9, r3, r1
 8006aae:	f04f 0200 	mov.w	r2, #0
 8006ab2:	f04f 0300 	mov.w	r3, #0
 8006ab6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006aba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006abe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ac2:	4690      	mov	r8, r2
 8006ac4:	4699      	mov	r9, r3
 8006ac6:	4623      	mov	r3, r4
 8006ac8:	eb18 0303 	adds.w	r3, r8, r3
 8006acc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ad0:	462b      	mov	r3, r5
 8006ad2:	eb49 0303 	adc.w	r3, r9, r3
 8006ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ae6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006aea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006aee:	460b      	mov	r3, r1
 8006af0:	18db      	adds	r3, r3, r3
 8006af2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006af4:	4613      	mov	r3, r2
 8006af6:	eb42 0303 	adc.w	r3, r2, r3
 8006afa:	657b      	str	r3, [r7, #84]	@ 0x54
 8006afc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006b00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006b04:	f7f9 fb74 	bl	80001f0 <__aeabi_uldivmod>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4b61      	ldr	r3, [pc, #388]	@ (8006c94 <UART_SetConfig+0x2d4>)
 8006b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b12:	095b      	lsrs	r3, r3, #5
 8006b14:	011c      	lsls	r4, r3, #4
 8006b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b20:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006b24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006b28:	4642      	mov	r2, r8
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	1891      	adds	r1, r2, r2
 8006b2e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006b30:	415b      	adcs	r3, r3
 8006b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006b38:	4641      	mov	r1, r8
 8006b3a:	eb12 0a01 	adds.w	sl, r2, r1
 8006b3e:	4649      	mov	r1, r9
 8006b40:	eb43 0b01 	adc.w	fp, r3, r1
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	f04f 0300 	mov.w	r3, #0
 8006b4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b58:	4692      	mov	sl, r2
 8006b5a:	469b      	mov	fp, r3
 8006b5c:	4643      	mov	r3, r8
 8006b5e:	eb1a 0303 	adds.w	r3, sl, r3
 8006b62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b66:	464b      	mov	r3, r9
 8006b68:	eb4b 0303 	adc.w	r3, fp, r3
 8006b6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b7c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006b80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b84:	460b      	mov	r3, r1
 8006b86:	18db      	adds	r3, r3, r3
 8006b88:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	eb42 0303 	adc.w	r3, r2, r3
 8006b90:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006b9a:	f7f9 fb29 	bl	80001f0 <__aeabi_uldivmod>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	4611      	mov	r1, r2
 8006ba4:	4b3b      	ldr	r3, [pc, #236]	@ (8006c94 <UART_SetConfig+0x2d4>)
 8006ba6:	fba3 2301 	umull	r2, r3, r3, r1
 8006baa:	095b      	lsrs	r3, r3, #5
 8006bac:	2264      	movs	r2, #100	@ 0x64
 8006bae:	fb02 f303 	mul.w	r3, r2, r3
 8006bb2:	1acb      	subs	r3, r1, r3
 8006bb4:	00db      	lsls	r3, r3, #3
 8006bb6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006bba:	4b36      	ldr	r3, [pc, #216]	@ (8006c94 <UART_SetConfig+0x2d4>)
 8006bbc:	fba3 2302 	umull	r2, r3, r3, r2
 8006bc0:	095b      	lsrs	r3, r3, #5
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006bc8:	441c      	add	r4, r3
 8006bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bd4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006bd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006bdc:	4642      	mov	r2, r8
 8006bde:	464b      	mov	r3, r9
 8006be0:	1891      	adds	r1, r2, r2
 8006be2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006be4:	415b      	adcs	r3, r3
 8006be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006be8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006bec:	4641      	mov	r1, r8
 8006bee:	1851      	adds	r1, r2, r1
 8006bf0:	6339      	str	r1, [r7, #48]	@ 0x30
 8006bf2:	4649      	mov	r1, r9
 8006bf4:	414b      	adcs	r3, r1
 8006bf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bf8:	f04f 0200 	mov.w	r2, #0
 8006bfc:	f04f 0300 	mov.w	r3, #0
 8006c00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006c04:	4659      	mov	r1, fp
 8006c06:	00cb      	lsls	r3, r1, #3
 8006c08:	4651      	mov	r1, sl
 8006c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c0e:	4651      	mov	r1, sl
 8006c10:	00ca      	lsls	r2, r1, #3
 8006c12:	4610      	mov	r0, r2
 8006c14:	4619      	mov	r1, r3
 8006c16:	4603      	mov	r3, r0
 8006c18:	4642      	mov	r2, r8
 8006c1a:	189b      	adds	r3, r3, r2
 8006c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c20:	464b      	mov	r3, r9
 8006c22:	460a      	mov	r2, r1
 8006c24:	eb42 0303 	adc.w	r3, r2, r3
 8006c28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c38:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006c3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c40:	460b      	mov	r3, r1
 8006c42:	18db      	adds	r3, r3, r3
 8006c44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c46:	4613      	mov	r3, r2
 8006c48:	eb42 0303 	adc.w	r3, r2, r3
 8006c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006c56:	f7f9 facb 	bl	80001f0 <__aeabi_uldivmod>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c94 <UART_SetConfig+0x2d4>)
 8006c60:	fba3 1302 	umull	r1, r3, r3, r2
 8006c64:	095b      	lsrs	r3, r3, #5
 8006c66:	2164      	movs	r1, #100	@ 0x64
 8006c68:	fb01 f303 	mul.w	r3, r1, r3
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	00db      	lsls	r3, r3, #3
 8006c70:	3332      	adds	r3, #50	@ 0x32
 8006c72:	4a08      	ldr	r2, [pc, #32]	@ (8006c94 <UART_SetConfig+0x2d4>)
 8006c74:	fba2 2303 	umull	r2, r3, r2, r3
 8006c78:	095b      	lsrs	r3, r3, #5
 8006c7a:	f003 0207 	and.w	r2, r3, #7
 8006c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4422      	add	r2, r4
 8006c86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c88:	e106      	b.n	8006e98 <UART_SetConfig+0x4d8>
 8006c8a:	bf00      	nop
 8006c8c:	40011000 	.word	0x40011000
 8006c90:	40011400 	.word	0x40011400
 8006c94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006ca2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006ca6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006caa:	4642      	mov	r2, r8
 8006cac:	464b      	mov	r3, r9
 8006cae:	1891      	adds	r1, r2, r2
 8006cb0:	6239      	str	r1, [r7, #32]
 8006cb2:	415b      	adcs	r3, r3
 8006cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cba:	4641      	mov	r1, r8
 8006cbc:	1854      	adds	r4, r2, r1
 8006cbe:	4649      	mov	r1, r9
 8006cc0:	eb43 0501 	adc.w	r5, r3, r1
 8006cc4:	f04f 0200 	mov.w	r2, #0
 8006cc8:	f04f 0300 	mov.w	r3, #0
 8006ccc:	00eb      	lsls	r3, r5, #3
 8006cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cd2:	00e2      	lsls	r2, r4, #3
 8006cd4:	4614      	mov	r4, r2
 8006cd6:	461d      	mov	r5, r3
 8006cd8:	4643      	mov	r3, r8
 8006cda:	18e3      	adds	r3, r4, r3
 8006cdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ce0:	464b      	mov	r3, r9
 8006ce2:	eb45 0303 	adc.w	r3, r5, r3
 8006ce6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006cf6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006cfa:	f04f 0200 	mov.w	r2, #0
 8006cfe:	f04f 0300 	mov.w	r3, #0
 8006d02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006d06:	4629      	mov	r1, r5
 8006d08:	008b      	lsls	r3, r1, #2
 8006d0a:	4621      	mov	r1, r4
 8006d0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d10:	4621      	mov	r1, r4
 8006d12:	008a      	lsls	r2, r1, #2
 8006d14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006d18:	f7f9 fa6a 	bl	80001f0 <__aeabi_uldivmod>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4b60      	ldr	r3, [pc, #384]	@ (8006ea4 <UART_SetConfig+0x4e4>)
 8006d22:	fba3 2302 	umull	r2, r3, r3, r2
 8006d26:	095b      	lsrs	r3, r3, #5
 8006d28:	011c      	lsls	r4, r3, #4
 8006d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006d38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006d3c:	4642      	mov	r2, r8
 8006d3e:	464b      	mov	r3, r9
 8006d40:	1891      	adds	r1, r2, r2
 8006d42:	61b9      	str	r1, [r7, #24]
 8006d44:	415b      	adcs	r3, r3
 8006d46:	61fb      	str	r3, [r7, #28]
 8006d48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d4c:	4641      	mov	r1, r8
 8006d4e:	1851      	adds	r1, r2, r1
 8006d50:	6139      	str	r1, [r7, #16]
 8006d52:	4649      	mov	r1, r9
 8006d54:	414b      	adcs	r3, r1
 8006d56:	617b      	str	r3, [r7, #20]
 8006d58:	f04f 0200 	mov.w	r2, #0
 8006d5c:	f04f 0300 	mov.w	r3, #0
 8006d60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d64:	4659      	mov	r1, fp
 8006d66:	00cb      	lsls	r3, r1, #3
 8006d68:	4651      	mov	r1, sl
 8006d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d6e:	4651      	mov	r1, sl
 8006d70:	00ca      	lsls	r2, r1, #3
 8006d72:	4610      	mov	r0, r2
 8006d74:	4619      	mov	r1, r3
 8006d76:	4603      	mov	r3, r0
 8006d78:	4642      	mov	r2, r8
 8006d7a:	189b      	adds	r3, r3, r2
 8006d7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d80:	464b      	mov	r3, r9
 8006d82:	460a      	mov	r2, r1
 8006d84:	eb42 0303 	adc.w	r3, r2, r3
 8006d88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006d98:	f04f 0200 	mov.w	r2, #0
 8006d9c:	f04f 0300 	mov.w	r3, #0
 8006da0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006da4:	4649      	mov	r1, r9
 8006da6:	008b      	lsls	r3, r1, #2
 8006da8:	4641      	mov	r1, r8
 8006daa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dae:	4641      	mov	r1, r8
 8006db0:	008a      	lsls	r2, r1, #2
 8006db2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006db6:	f7f9 fa1b 	bl	80001f0 <__aeabi_uldivmod>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	4611      	mov	r1, r2
 8006dc0:	4b38      	ldr	r3, [pc, #224]	@ (8006ea4 <UART_SetConfig+0x4e4>)
 8006dc2:	fba3 2301 	umull	r2, r3, r3, r1
 8006dc6:	095b      	lsrs	r3, r3, #5
 8006dc8:	2264      	movs	r2, #100	@ 0x64
 8006dca:	fb02 f303 	mul.w	r3, r2, r3
 8006dce:	1acb      	subs	r3, r1, r3
 8006dd0:	011b      	lsls	r3, r3, #4
 8006dd2:	3332      	adds	r3, #50	@ 0x32
 8006dd4:	4a33      	ldr	r2, [pc, #204]	@ (8006ea4 <UART_SetConfig+0x4e4>)
 8006dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dda:	095b      	lsrs	r3, r3, #5
 8006ddc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006de0:	441c      	add	r4, r3
 8006de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006de6:	2200      	movs	r2, #0
 8006de8:	673b      	str	r3, [r7, #112]	@ 0x70
 8006dea:	677a      	str	r2, [r7, #116]	@ 0x74
 8006dec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006df0:	4642      	mov	r2, r8
 8006df2:	464b      	mov	r3, r9
 8006df4:	1891      	adds	r1, r2, r2
 8006df6:	60b9      	str	r1, [r7, #8]
 8006df8:	415b      	adcs	r3, r3
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e00:	4641      	mov	r1, r8
 8006e02:	1851      	adds	r1, r2, r1
 8006e04:	6039      	str	r1, [r7, #0]
 8006e06:	4649      	mov	r1, r9
 8006e08:	414b      	adcs	r3, r1
 8006e0a:	607b      	str	r3, [r7, #4]
 8006e0c:	f04f 0200 	mov.w	r2, #0
 8006e10:	f04f 0300 	mov.w	r3, #0
 8006e14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e18:	4659      	mov	r1, fp
 8006e1a:	00cb      	lsls	r3, r1, #3
 8006e1c:	4651      	mov	r1, sl
 8006e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e22:	4651      	mov	r1, sl
 8006e24:	00ca      	lsls	r2, r1, #3
 8006e26:	4610      	mov	r0, r2
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	4642      	mov	r2, r8
 8006e2e:	189b      	adds	r3, r3, r2
 8006e30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e32:	464b      	mov	r3, r9
 8006e34:	460a      	mov	r2, r1
 8006e36:	eb42 0303 	adc.w	r3, r2, r3
 8006e3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e46:	667a      	str	r2, [r7, #100]	@ 0x64
 8006e48:	f04f 0200 	mov.w	r2, #0
 8006e4c:	f04f 0300 	mov.w	r3, #0
 8006e50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006e54:	4649      	mov	r1, r9
 8006e56:	008b      	lsls	r3, r1, #2
 8006e58:	4641      	mov	r1, r8
 8006e5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e5e:	4641      	mov	r1, r8
 8006e60:	008a      	lsls	r2, r1, #2
 8006e62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006e66:	f7f9 f9c3 	bl	80001f0 <__aeabi_uldivmod>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea4 <UART_SetConfig+0x4e4>)
 8006e70:	fba3 1302 	umull	r1, r3, r3, r2
 8006e74:	095b      	lsrs	r3, r3, #5
 8006e76:	2164      	movs	r1, #100	@ 0x64
 8006e78:	fb01 f303 	mul.w	r3, r1, r3
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	011b      	lsls	r3, r3, #4
 8006e80:	3332      	adds	r3, #50	@ 0x32
 8006e82:	4a08      	ldr	r2, [pc, #32]	@ (8006ea4 <UART_SetConfig+0x4e4>)
 8006e84:	fba2 2303 	umull	r2, r3, r2, r3
 8006e88:	095b      	lsrs	r3, r3, #5
 8006e8a:	f003 020f 	and.w	r2, r3, #15
 8006e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4422      	add	r2, r4
 8006e96:	609a      	str	r2, [r3, #8]
}
 8006e98:	bf00      	nop
 8006e9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ea4:	51eb851f 	.word	0x51eb851f

08006ea8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d123      	bne.n	8006f02 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006ec2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	6851      	ldr	r1, [r2, #4]
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	6892      	ldr	r2, [r2, #8]
 8006ece:	4311      	orrs	r1, r2
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	68d2      	ldr	r2, [r2, #12]
 8006ed4:	4311      	orrs	r1, r2
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	6912      	ldr	r2, [r2, #16]
 8006eda:	4311      	orrs	r1, r2
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	6952      	ldr	r2, [r2, #20]
 8006ee0:	4311      	orrs	r1, r2
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	6992      	ldr	r2, [r2, #24]
 8006ee6:	4311      	orrs	r1, r2
 8006ee8:	683a      	ldr	r2, [r7, #0]
 8006eea:	69d2      	ldr	r2, [r2, #28]
 8006eec:	4311      	orrs	r1, r2
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	6a12      	ldr	r2, [r2, #32]
 8006ef2:	4311      	orrs	r1, r2
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	431a      	orrs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	601a      	str	r2, [r3, #0]
 8006f00:	e028      	b.n	8006f54 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	69d9      	ldr	r1, [r3, #28]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	4319      	orrs	r1, r3
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f18:	430b      	orrs	r3, r1
 8006f1a:	431a      	orrs	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006f28:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	6851      	ldr	r1, [r2, #4]
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	6892      	ldr	r2, [r2, #8]
 8006f34:	4311      	orrs	r1, r2
 8006f36:	683a      	ldr	r2, [r7, #0]
 8006f38:	68d2      	ldr	r2, [r2, #12]
 8006f3a:	4311      	orrs	r1, r2
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	6912      	ldr	r2, [r2, #16]
 8006f40:	4311      	orrs	r1, r2
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	6952      	ldr	r2, [r2, #20]
 8006f46:	4311      	orrs	r1, r2
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	6992      	ldr	r2, [r2, #24]
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	431a      	orrs	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b085      	sub	sp, #20
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	60b9      	str	r1, [r7, #8]
 8006f6c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d128      	bne.n	8006fc6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	1e59      	subs	r1, r3, #1
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	011b      	lsls	r3, r3, #4
 8006f8a:	4319      	orrs	r1, r3
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	3b01      	subs	r3, #1
 8006f92:	021b      	lsls	r3, r3, #8
 8006f94:	4319      	orrs	r1, r3
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	031b      	lsls	r3, r3, #12
 8006f9e:	4319      	orrs	r1, r3
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	041b      	lsls	r3, r3, #16
 8006fa8:	4319      	orrs	r1, r3
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	051b      	lsls	r3, r3, #20
 8006fb2:	4319      	orrs	r1, r3
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	061b      	lsls	r3, r3, #24
 8006fbc:	430b      	orrs	r3, r1
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	609a      	str	r2, [r3, #8]
 8006fc4:	e02f      	b.n	8007026 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006fce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	68d2      	ldr	r2, [r2, #12]
 8006fd6:	3a01      	subs	r2, #1
 8006fd8:	0311      	lsls	r1, r2, #12
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	6952      	ldr	r2, [r2, #20]
 8006fde:	3a01      	subs	r2, #1
 8006fe0:	0512      	lsls	r2, r2, #20
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	1e59      	subs	r1, r3, #1
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	011b      	lsls	r3, r3, #4
 8007000:	4319      	orrs	r1, r3
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	3b01      	subs	r3, #1
 8007008:	021b      	lsls	r3, r3, #8
 800700a:	4319      	orrs	r1, r3
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	3b01      	subs	r3, #1
 8007012:	041b      	lsls	r3, r3, #16
 8007014:	4319      	orrs	r1, r3
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	3b01      	subs	r3, #1
 800701c:	061b      	lsls	r3, r3, #24
 800701e:	430b      	orrs	r3, r1
 8007020:	431a      	orrs	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007034:	b084      	sub	sp, #16
 8007036:	b580      	push	{r7, lr}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	f107 001c 	add.w	r0, r7, #28
 8007042:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007046:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800704a:	2b01      	cmp	r3, #1
 800704c:	d123      	bne.n	8007096 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007052:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007062:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007076:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800707a:	2b01      	cmp	r3, #1
 800707c:	d105      	bne.n	800708a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f9dc 	bl	8007448 <USB_CoreReset>
 8007090:	4603      	mov	r3, r0
 8007092:	73fb      	strb	r3, [r7, #15]
 8007094:	e01b      	b.n	80070ce <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f9d0 	bl	8007448 <USB_CoreReset>
 80070a8:	4603      	mov	r3, r0
 80070aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80070ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d106      	bne.n	80070c2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	639a      	str	r2, [r3, #56]	@ 0x38
 80070c0:	e005      	b.n	80070ce <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80070ce:	7fbb      	ldrb	r3, [r7, #30]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d10b      	bne.n	80070ec <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f043 0206 	orr.w	r2, r3, #6
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f043 0220 	orr.w	r2, r3, #32
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070f8:	b004      	add	sp, #16
 80070fa:	4770      	bx	lr

080070fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f043 0201 	orr.w	r2, r3, #1
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800711e:	b480      	push	{r7}
 8007120:	b083      	sub	sp, #12
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f023 0201 	bic.w	r2, r3, #1
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	460b      	mov	r3, r1
 800714a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800715c:	78fb      	ldrb	r3, [r7, #3]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d115      	bne.n	800718e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800716e:	200a      	movs	r0, #10
 8007170:	f7fa fba2 	bl	80018b8 <HAL_Delay>
      ms += 10U;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	330a      	adds	r3, #10
 8007178:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f956 	bl	800742c <USB_GetMode>
 8007180:	4603      	mov	r3, r0
 8007182:	2b01      	cmp	r3, #1
 8007184:	d01e      	beq.n	80071c4 <USB_SetCurrentMode+0x84>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2bc7      	cmp	r3, #199	@ 0xc7
 800718a:	d9f0      	bls.n	800716e <USB_SetCurrentMode+0x2e>
 800718c:	e01a      	b.n	80071c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800718e:	78fb      	ldrb	r3, [r7, #3]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d115      	bne.n	80071c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80071a0:	200a      	movs	r0, #10
 80071a2:	f7fa fb89 	bl	80018b8 <HAL_Delay>
      ms += 10U;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	330a      	adds	r3, #10
 80071aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f93d 	bl	800742c <USB_GetMode>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d005      	beq.n	80071c4 <USB_SetCurrentMode+0x84>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2bc7      	cmp	r3, #199	@ 0xc7
 80071bc:	d9f0      	bls.n	80071a0 <USB_SetCurrentMode+0x60>
 80071be:	e001      	b.n	80071c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e005      	b.n	80071d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2bc8      	cmp	r3, #200	@ 0xc8
 80071c8:	d101      	bne.n	80071ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e000      	b.n	80071d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071e2:	2300      	movs	r3, #0
 80071e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	3301      	adds	r3, #1
 80071ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071f2:	d901      	bls.n	80071f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e01b      	b.n	8007230 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	daf2      	bge.n	80071e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	019b      	lsls	r3, r3, #6
 8007208:	f043 0220 	orr.w	r2, r3, #32
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	3301      	adds	r3, #1
 8007214:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800721c:	d901      	bls.n	8007222 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e006      	b.n	8007230 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	f003 0320 	and.w	r3, r3, #32
 800722a:	2b20      	cmp	r3, #32
 800722c:	d0f0      	beq.n	8007210 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007244:	2300      	movs	r3, #0
 8007246:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	3301      	adds	r3, #1
 800724c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007254:	d901      	bls.n	800725a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e018      	b.n	800728c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	daf2      	bge.n	8007248 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2210      	movs	r2, #16
 800726a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	3301      	adds	r3, #1
 8007270:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007278:	d901      	bls.n	800727e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e006      	b.n	800728c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	f003 0310 	and.w	r3, r3, #16
 8007286:	2b10      	cmp	r3, #16
 8007288:	d0f0      	beq.n	800726c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007298:	b480      	push	{r7}
 800729a:	b089      	sub	sp, #36	@ 0x24
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	4611      	mov	r1, r2
 80072a4:	461a      	mov	r2, r3
 80072a6:	460b      	mov	r3, r1
 80072a8:	71fb      	strb	r3, [r7, #7]
 80072aa:	4613      	mov	r3, r2
 80072ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80072b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d123      	bne.n	8007306 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80072be:	88bb      	ldrh	r3, [r7, #4]
 80072c0:	3303      	adds	r3, #3
 80072c2:	089b      	lsrs	r3, r3, #2
 80072c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80072c6:	2300      	movs	r3, #0
 80072c8:	61bb      	str	r3, [r7, #24]
 80072ca:	e018      	b.n	80072fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80072cc:	79fb      	ldrb	r3, [r7, #7]
 80072ce:	031a      	lsls	r2, r3, #12
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	4413      	add	r3, r2
 80072d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072d8:	461a      	mov	r2, r3
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	3301      	adds	r3, #1
 80072e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	3301      	adds	r3, #1
 80072ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	3301      	adds	r3, #1
 80072f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	3301      	adds	r3, #1
 80072f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	3301      	adds	r3, #1
 80072fc:	61bb      	str	r3, [r7, #24]
 80072fe:	69ba      	ldr	r2, [r7, #24]
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	429a      	cmp	r2, r3
 8007304:	d3e2      	bcc.n	80072cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3724      	adds	r7, #36	@ 0x24
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007314:	b480      	push	{r7}
 8007316:	b08b      	sub	sp, #44	@ 0x2c
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	4613      	mov	r3, r2
 8007320:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800732a:	88fb      	ldrh	r3, [r7, #6]
 800732c:	089b      	lsrs	r3, r3, #2
 800732e:	b29b      	uxth	r3, r3
 8007330:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007332:	88fb      	ldrh	r3, [r7, #6]
 8007334:	f003 0303 	and.w	r3, r3, #3
 8007338:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800733a:	2300      	movs	r3, #0
 800733c:	623b      	str	r3, [r7, #32]
 800733e:	e014      	b.n	800736a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734a:	601a      	str	r2, [r3, #0]
    pDest++;
 800734c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734e:	3301      	adds	r3, #1
 8007350:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	3301      	adds	r3, #1
 8007356:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735a:	3301      	adds	r3, #1
 800735c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800735e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007360:	3301      	adds	r3, #1
 8007362:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	3301      	adds	r3, #1
 8007368:	623b      	str	r3, [r7, #32]
 800736a:	6a3a      	ldr	r2, [r7, #32]
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	429a      	cmp	r2, r3
 8007370:	d3e6      	bcc.n	8007340 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007372:	8bfb      	ldrh	r3, [r7, #30]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d01e      	beq.n	80073b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007382:	461a      	mov	r2, r3
 8007384:	f107 0310 	add.w	r3, r7, #16
 8007388:	6812      	ldr	r2, [r2, #0]
 800738a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	b2db      	uxtb	r3, r3
 8007392:	00db      	lsls	r3, r3, #3
 8007394:	fa22 f303 	lsr.w	r3, r2, r3
 8007398:	b2da      	uxtb	r2, r3
 800739a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739c:	701a      	strb	r2, [r3, #0]
      i++;
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	3301      	adds	r3, #1
 80073a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80073a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a6:	3301      	adds	r3, #1
 80073a8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80073aa:	8bfb      	ldrh	r3, [r7, #30]
 80073ac:	3b01      	subs	r3, #1
 80073ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80073b0:	8bfb      	ldrh	r3, [r7, #30]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1ea      	bne.n	800738c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80073b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	372c      	adds	r7, #44	@ 0x2c
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	4013      	ands	r3, r2
 80073da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80073dc:	68fb      	ldr	r3, [r7, #12]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3714      	adds	r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr

080073ea <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b085      	sub	sp, #20
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
 80073f2:	460b      	mov	r3, r1
 80073f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80073fa:	78fb      	ldrb	r3, [r7, #3]
 80073fc:	015a      	lsls	r2, r3, #5
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	4413      	add	r3, r2
 8007402:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800740a:	78fb      	ldrb	r3, [r7, #3]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	4413      	add	r3, r2
 8007412:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	4013      	ands	r3, r2
 800741c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800741e:	68bb      	ldr	r3, [r7, #8]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	f003 0301 	and.w	r3, r3, #1
}
 800743c:	4618      	mov	r0, r3
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007450:	2300      	movs	r3, #0
 8007452:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	3301      	adds	r3, #1
 8007458:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007460:	d901      	bls.n	8007466 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e01b      	b.n	800749e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	2b00      	cmp	r3, #0
 800746c:	daf2      	bge.n	8007454 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	f043 0201 	orr.w	r2, r3, #1
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	3301      	adds	r3, #1
 8007482:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800748a:	d901      	bls.n	8007490 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e006      	b.n	800749e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	2b01      	cmp	r3, #1
 800749a:	d0f0      	beq.n	800747e <USB_CoreReset+0x36>

  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3714      	adds	r7, #20
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
	...

080074ac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074ac:	b084      	sub	sp, #16
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b086      	sub	sp, #24
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80074ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80074cc:	461a      	mov	r2, r3
 80074ce:	2300      	movs	r3, #0
 80074d0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ee:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d119      	bne.n	8007536 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007502:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007506:	2b01      	cmp	r3, #1
 8007508:	d10a      	bne.n	8007520 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007518:	f043 0304 	orr.w	r3, r3, #4
 800751c:	6013      	str	r3, [r2, #0]
 800751e:	e014      	b.n	800754a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800752e:	f023 0304 	bic.w	r3, r3, #4
 8007532:	6013      	str	r3, [r2, #0]
 8007534:	e009      	b.n	800754a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007544:	f023 0304 	bic.w	r3, r3, #4
 8007548:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800754a:	2110      	movs	r1, #16
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7ff fe43 	bl	80071d8 <USB_FlushTxFifo>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7ff fe6d 	bl	800723c <USB_FlushRxFifo>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800756c:	2300      	movs	r3, #0
 800756e:	613b      	str	r3, [r7, #16]
 8007570:	e015      	b.n	800759e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	015a      	lsls	r2, r3, #5
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	4413      	add	r3, r2
 800757a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800757e:	461a      	mov	r2, r3
 8007580:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007584:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	4413      	add	r3, r2
 800758e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007592:	461a      	mov	r2, r3
 8007594:	2300      	movs	r3, #0
 8007596:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	3301      	adds	r3, #1
 800759c:	613b      	str	r3, [r7, #16]
 800759e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80075a2:	461a      	mov	r2, r3
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d3e3      	bcc.n	8007572 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80075b6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a18      	ldr	r2, [pc, #96]	@ (800761c <USB_HostInit+0x170>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d10b      	bne.n	80075d8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075c6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a15      	ldr	r2, [pc, #84]	@ (8007620 <USB_HostInit+0x174>)
 80075cc:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a14      	ldr	r2, [pc, #80]	@ (8007624 <USB_HostInit+0x178>)
 80075d2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80075d6:	e009      	b.n	80075ec <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2280      	movs	r2, #128	@ 0x80
 80075dc:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a11      	ldr	r2, [pc, #68]	@ (8007628 <USB_HostInit+0x17c>)
 80075e2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a11      	ldr	r2, [pc, #68]	@ (800762c <USB_HostInit+0x180>)
 80075e8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80075ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d105      	bne.n	8007600 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	f043 0210 	orr.w	r2, r3, #16
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	699a      	ldr	r2, [r3, #24]
 8007604:	4b0a      	ldr	r3, [pc, #40]	@ (8007630 <USB_HostInit+0x184>)
 8007606:	4313      	orrs	r3, r2
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800760c:	7dfb      	ldrb	r3, [r7, #23]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3718      	adds	r7, #24
 8007612:	46bd      	mov	sp, r7
 8007614:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007618:	b004      	add	sp, #16
 800761a:	4770      	bx	lr
 800761c:	40040000 	.word	0x40040000
 8007620:	01000200 	.word	0x01000200
 8007624:	00e00300 	.word	0x00e00300
 8007628:	00600080 	.word	0x00600080
 800762c:	004000e0 	.word	0x004000e0
 8007630:	a3200008 	.word	0xa3200008

08007634 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	460b      	mov	r3, r1
 800763e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007652:	f023 0303 	bic.w	r3, r3, #3
 8007656:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	78fb      	ldrb	r3, [r7, #3]
 8007662:	f003 0303 	and.w	r3, r3, #3
 8007666:	68f9      	ldr	r1, [r7, #12]
 8007668:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800766c:	4313      	orrs	r3, r2
 800766e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007670:	78fb      	ldrb	r3, [r7, #3]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d107      	bne.n	8007686 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800767c:	461a      	mov	r2, r3
 800767e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007682:	6053      	str	r3, [r2, #4]
 8007684:	e00c      	b.n	80076a0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007686:	78fb      	ldrb	r3, [r7, #3]
 8007688:	2b02      	cmp	r3, #2
 800768a:	d107      	bne.n	800769c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007692:	461a      	mov	r2, r3
 8007694:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007698:	6053      	str	r3, [r2, #4]
 800769a:	e001      	b.n	80076a0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e000      	b.n	80076a2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3714      	adds	r7, #20
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b084      	sub	sp, #16
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80076ba:	2300      	movs	r3, #0
 80076bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80076ce:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80076d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076dc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80076de:	2064      	movs	r0, #100	@ 0x64
 80076e0:	f7fa f8ea 	bl	80018b8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80076ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076f0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80076f2:	200a      	movs	r0, #10
 80076f4:	f7fa f8e0 	bl	80018b8 <HAL_Delay>

  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007702:	b480      	push	{r7}
 8007704:	b085      	sub	sp, #20
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	460b      	mov	r3, r1
 800770c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007712:	2300      	movs	r3, #0
 8007714:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007726:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d109      	bne.n	8007746 <USB_DriveVbus+0x44>
 8007732:	78fb      	ldrb	r3, [r7, #3]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d106      	bne.n	8007746 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007740:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007744:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800774c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007750:	d109      	bne.n	8007766 <USB_DriveVbus+0x64>
 8007752:	78fb      	ldrb	r3, [r7, #3]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d106      	bne.n	8007766 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007760:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007764:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007780:	2300      	movs	r3, #0
 8007782:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	0c5b      	lsrs	r3, r3, #17
 8007792:	f003 0303 	and.w	r3, r3, #3
}
 8007796:	4618      	mov	r0, r3
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b085      	sub	sp, #20
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	b29b      	uxth	r3, r3
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b088      	sub	sp, #32
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	4608      	mov	r0, r1
 80077ce:	4611      	mov	r1, r2
 80077d0:	461a      	mov	r2, r3
 80077d2:	4603      	mov	r3, r0
 80077d4:	70fb      	strb	r3, [r7, #3]
 80077d6:	460b      	mov	r3, r1
 80077d8:	70bb      	strb	r3, [r7, #2]
 80077da:	4613      	mov	r3, r2
 80077dc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80077de:	2300      	movs	r3, #0
 80077e0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80077e6:	78fb      	ldrb	r3, [r7, #3]
 80077e8:	015a      	lsls	r2, r3, #5
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	4413      	add	r3, r2
 80077ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077f2:	461a      	mov	r2, r3
 80077f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80077f8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80077fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80077fe:	2b03      	cmp	r3, #3
 8007800:	d87c      	bhi.n	80078fc <USB_HC_Init+0x138>
 8007802:	a201      	add	r2, pc, #4	@ (adr r2, 8007808 <USB_HC_Init+0x44>)
 8007804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007808:	08007819 	.word	0x08007819
 800780c:	080078bf 	.word	0x080078bf
 8007810:	08007819 	.word	0x08007819
 8007814:	08007881 	.word	0x08007881
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007818:	78fb      	ldrb	r3, [r7, #3]
 800781a:	015a      	lsls	r2, r3, #5
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	4413      	add	r3, r2
 8007820:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007824:	461a      	mov	r2, r3
 8007826:	f240 439d 	movw	r3, #1181	@ 0x49d
 800782a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800782c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007830:	2b00      	cmp	r3, #0
 8007832:	da10      	bge.n	8007856 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007834:	78fb      	ldrb	r3, [r7, #3]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	4413      	add	r3, r2
 800783c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	78fa      	ldrb	r2, [r7, #3]
 8007844:	0151      	lsls	r1, r2, #5
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	440a      	add	r2, r1
 800784a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800784e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007852:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007854:	e055      	b.n	8007902 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a6f      	ldr	r2, [pc, #444]	@ (8007a18 <USB_HC_Init+0x254>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d151      	bne.n	8007902 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800785e:	78fb      	ldrb	r3, [r7, #3]
 8007860:	015a      	lsls	r2, r3, #5
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	4413      	add	r3, r2
 8007866:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	78fa      	ldrb	r2, [r7, #3]
 800786e:	0151      	lsls	r1, r2, #5
 8007870:	693a      	ldr	r2, [r7, #16]
 8007872:	440a      	add	r2, r1
 8007874:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007878:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800787c:	60d3      	str	r3, [r2, #12]
      break;
 800787e:	e040      	b.n	8007902 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007880:	78fb      	ldrb	r3, [r7, #3]
 8007882:	015a      	lsls	r2, r3, #5
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	4413      	add	r3, r2
 8007888:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800788c:	461a      	mov	r2, r3
 800788e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007892:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007894:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007898:	2b00      	cmp	r3, #0
 800789a:	da34      	bge.n	8007906 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800789c:	78fb      	ldrb	r3, [r7, #3]
 800789e:	015a      	lsls	r2, r3, #5
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	4413      	add	r3, r2
 80078a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	78fa      	ldrb	r2, [r7, #3]
 80078ac:	0151      	lsls	r1, r2, #5
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	440a      	add	r2, r1
 80078b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078ba:	60d3      	str	r3, [r2, #12]
      }

      break;
 80078bc:	e023      	b.n	8007906 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80078be:	78fb      	ldrb	r3, [r7, #3]
 80078c0:	015a      	lsls	r2, r3, #5
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	4413      	add	r3, r2
 80078c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078ca:	461a      	mov	r2, r3
 80078cc:	f240 2325 	movw	r3, #549	@ 0x225
 80078d0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80078d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	da17      	bge.n	800790a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80078da:	78fb      	ldrb	r3, [r7, #3]
 80078dc:	015a      	lsls	r2, r3, #5
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	4413      	add	r3, r2
 80078e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	78fa      	ldrb	r2, [r7, #3]
 80078ea:	0151      	lsls	r1, r2, #5
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	440a      	add	r2, r1
 80078f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078f4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80078f8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80078fa:	e006      	b.n	800790a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	77fb      	strb	r3, [r7, #31]
      break;
 8007900:	e004      	b.n	800790c <USB_HC_Init+0x148>
      break;
 8007902:	bf00      	nop
 8007904:	e002      	b.n	800790c <USB_HC_Init+0x148>
      break;
 8007906:	bf00      	nop
 8007908:	e000      	b.n	800790c <USB_HC_Init+0x148>
      break;
 800790a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800790c:	78fb      	ldrb	r3, [r7, #3]
 800790e:	015a      	lsls	r2, r3, #5
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	4413      	add	r3, r2
 8007914:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007918:	461a      	mov	r2, r3
 800791a:	2300      	movs	r3, #0
 800791c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800791e:	78fb      	ldrb	r3, [r7, #3]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	4413      	add	r3, r2
 8007926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	78fa      	ldrb	r2, [r7, #3]
 800792e:	0151      	lsls	r1, r2, #5
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	440a      	add	r2, r1
 8007934:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007938:	f043 0302 	orr.w	r3, r3, #2
 800793c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007944:	699a      	ldr	r2, [r3, #24]
 8007946:	78fb      	ldrb	r3, [r7, #3]
 8007948:	f003 030f 	and.w	r3, r3, #15
 800794c:	2101      	movs	r1, #1
 800794e:	fa01 f303 	lsl.w	r3, r1, r3
 8007952:	6939      	ldr	r1, [r7, #16]
 8007954:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007958:	4313      	orrs	r3, r2
 800795a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007968:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800796c:	2b00      	cmp	r3, #0
 800796e:	da03      	bge.n	8007978 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007970:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007974:	61bb      	str	r3, [r7, #24]
 8007976:	e001      	b.n	800797c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007978:	2300      	movs	r3, #0
 800797a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7ff fef9 	bl	8007774 <USB_GetHostSpeed>
 8007982:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007984:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007988:	2b02      	cmp	r3, #2
 800798a:	d106      	bne.n	800799a <USB_HC_Init+0x1d6>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2b02      	cmp	r3, #2
 8007990:	d003      	beq.n	800799a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007992:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007996:	617b      	str	r3, [r7, #20]
 8007998:	e001      	b.n	800799e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800799a:	2300      	movs	r3, #0
 800799c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800799e:	787b      	ldrb	r3, [r7, #1]
 80079a0:	059b      	lsls	r3, r3, #22
 80079a2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80079a6:	78bb      	ldrb	r3, [r7, #2]
 80079a8:	02db      	lsls	r3, r3, #11
 80079aa:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80079ae:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80079b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80079b4:	049b      	lsls	r3, r3, #18
 80079b6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80079ba:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80079bc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80079be:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80079c2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	431a      	orrs	r2, r3
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80079cc:	78fa      	ldrb	r2, [r7, #3]
 80079ce:	0151      	lsls	r1, r2, #5
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	440a      	add	r2, r1
 80079d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80079d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80079dc:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80079de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d003      	beq.n	80079ee <USB_HC_Init+0x22a>
 80079e6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d10f      	bne.n	8007a0e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80079ee:	78fb      	ldrb	r3, [r7, #3]
 80079f0:	015a      	lsls	r2, r3, #5
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	4413      	add	r3, r2
 80079f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	78fa      	ldrb	r2, [r7, #3]
 80079fe:	0151      	lsls	r1, r2, #5
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	440a      	add	r2, r1
 8007a04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007a0c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007a0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3720      	adds	r7, #32
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	40040000 	.word	0x40040000

08007a1c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b08c      	sub	sp, #48	@ 0x30
 8007a20:	af02      	add	r7, sp, #8
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	4613      	mov	r3, r2
 8007a28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	785b      	ldrb	r3, [r3, #1]
 8007a32:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007a34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a38:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	4a5d      	ldr	r2, [pc, #372]	@ (8007bb4 <USB_HC_StartXfer+0x198>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d12f      	bne.n	8007aa2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007a42:	79fb      	ldrb	r3, [r7, #7]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d11c      	bne.n	8007a82 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	7c9b      	ldrb	r3, [r3, #18]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d003      	beq.n	8007a58 <USB_HC_StartXfer+0x3c>
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	7c9b      	ldrb	r3, [r3, #18]
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d124      	bne.n	8007aa2 <USB_HC_StartXfer+0x86>
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	799b      	ldrb	r3, [r3, #6]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d120      	bne.n	8007aa2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	015a      	lsls	r2, r3, #5
 8007a64:	6a3b      	ldr	r3, [r7, #32]
 8007a66:	4413      	add	r3, r2
 8007a68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	69fa      	ldr	r2, [r7, #28]
 8007a70:	0151      	lsls	r1, r2, #5
 8007a72:	6a3a      	ldr	r2, [r7, #32]
 8007a74:	440a      	add	r2, r1
 8007a76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a7e:	60d3      	str	r3, [r2, #12]
 8007a80:	e00f      	b.n	8007aa2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	791b      	ldrb	r3, [r3, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10b      	bne.n	8007aa2 <USB_HC_StartXfer+0x86>
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	795b      	ldrb	r3, [r3, #5]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d107      	bne.n	8007aa2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	785b      	ldrb	r3, [r3, #1]
 8007a96:	4619      	mov	r1, r3
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f000 fb6b 	bl	8008174 <USB_DoPing>
        return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	e232      	b.n	8007f08 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	799b      	ldrb	r3, [r3, #6]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d158      	bne.n	8007b5c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	78db      	ldrb	r3, [r3, #3]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d007      	beq.n	8007ac6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007ab6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	8a92      	ldrh	r2, [r2, #20]
 8007abc:	fb03 f202 	mul.w	r2, r3, r2
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	61da      	str	r2, [r3, #28]
 8007ac4:	e07c      	b.n	8007bc0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	7c9b      	ldrb	r3, [r3, #18]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d130      	bne.n	8007b30 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	2bbc      	cmp	r3, #188	@ 0xbc
 8007ad4:	d918      	bls.n	8007b08 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	8a9b      	ldrh	r3, [r3, #20]
 8007ada:	461a      	mov	r2, r3
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	69da      	ldr	r2, [r3, #28]
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d003      	beq.n	8007af8 <USB_HC_StartXfer+0xdc>
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d103      	bne.n	8007b00 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	2202      	movs	r2, #2
 8007afc:	60da      	str	r2, [r3, #12]
 8007afe:	e05f      	b.n	8007bc0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	2201      	movs	r2, #1
 8007b04:	60da      	str	r2, [r3, #12]
 8007b06:	e05b      	b.n	8007bc0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	6a1a      	ldr	r2, [r3, #32]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d007      	beq.n	8007b28 <USB_HC_StartXfer+0x10c>
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d003      	beq.n	8007b28 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	2204      	movs	r2, #4
 8007b24:	60da      	str	r2, [r3, #12]
 8007b26:	e04b      	b.n	8007bc0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	2203      	movs	r2, #3
 8007b2c:	60da      	str	r2, [r3, #12]
 8007b2e:	e047      	b.n	8007bc0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007b30:	79fb      	ldrb	r3, [r7, #7]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d10d      	bne.n	8007b52 <USB_HC_StartXfer+0x136>
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	8a92      	ldrh	r2, [r2, #20]
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d907      	bls.n	8007b52 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	8a92      	ldrh	r2, [r2, #20]
 8007b48:	fb03 f202 	mul.w	r2, r3, r2
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	61da      	str	r2, [r3, #28]
 8007b50:	e036      	b.n	8007bc0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	6a1a      	ldr	r2, [r3, #32]
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	61da      	str	r2, [r3, #28]
 8007b5a:	e031      	b.n	8007bc0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	6a1b      	ldr	r3, [r3, #32]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d018      	beq.n	8007b96 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	8a92      	ldrh	r2, [r2, #20]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	8a92      	ldrh	r2, [r2, #20]
 8007b74:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b78:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007b7a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007b7c:	8b7b      	ldrh	r3, [r7, #26]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d90b      	bls.n	8007b9a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007b82:	8b7b      	ldrh	r3, [r7, #26]
 8007b84:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	8a92      	ldrh	r2, [r2, #20]
 8007b8c:	fb03 f202 	mul.w	r2, r3, r2
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	61da      	str	r2, [r3, #28]
 8007b94:	e001      	b.n	8007b9a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007b96:	2301      	movs	r3, #1
 8007b98:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	78db      	ldrb	r3, [r3, #3]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00a      	beq.n	8007bb8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007ba2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	8a92      	ldrh	r2, [r2, #20]
 8007ba8:	fb03 f202 	mul.w	r2, r3, r2
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	61da      	str	r2, [r3, #28]
 8007bb0:	e006      	b.n	8007bc0 <USB_HC_StartXfer+0x1a4>
 8007bb2:	bf00      	nop
 8007bb4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	6a1a      	ldr	r2, [r3, #32]
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007bc8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007bca:	04d9      	lsls	r1, r3, #19
 8007bcc:	4ba3      	ldr	r3, [pc, #652]	@ (8007e5c <USB_HC_StartXfer+0x440>)
 8007bce:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bd0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	7d9b      	ldrb	r3, [r3, #22]
 8007bd6:	075b      	lsls	r3, r3, #29
 8007bd8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bdc:	69f9      	ldr	r1, [r7, #28]
 8007bde:	0148      	lsls	r0, r1, #5
 8007be0:	6a39      	ldr	r1, [r7, #32]
 8007be2:	4401      	add	r1, r0
 8007be4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007be8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bea:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007bec:	79fb      	ldrb	r3, [r7, #7]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d009      	beq.n	8007c06 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	6999      	ldr	r1, [r3, #24]
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c02:	460a      	mov	r2, r1
 8007c04:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007c06:	6a3b      	ldr	r3, [r7, #32]
 8007c08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	bf0c      	ite	eq
 8007c16:	2301      	moveq	r3, #1
 8007c18:	2300      	movne	r3, #0
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	69fa      	ldr	r2, [r7, #28]
 8007c2e:	0151      	lsls	r1, r2, #5
 8007c30:	6a3a      	ldr	r2, [r7, #32]
 8007c32:	440a      	add	r2, r1
 8007c34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c38:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007c3c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	6a3b      	ldr	r3, [r7, #32]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	7e7b      	ldrb	r3, [r7, #25]
 8007c4e:	075b      	lsls	r3, r3, #29
 8007c50:	69f9      	ldr	r1, [r7, #28]
 8007c52:	0148      	lsls	r0, r1, #5
 8007c54:	6a39      	ldr	r1, [r7, #32]
 8007c56:	4401      	add	r1, r0
 8007c58:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	799b      	ldrb	r3, [r3, #6]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	f040 80c3 	bne.w	8007df0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	7c5b      	ldrb	r3, [r3, #17]
 8007c6e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007c74:	4313      	orrs	r3, r2
 8007c76:	69fa      	ldr	r2, [r7, #28]
 8007c78:	0151      	lsls	r1, r2, #5
 8007c7a:	6a3a      	ldr	r2, [r7, #32]
 8007c7c:	440a      	add	r2, r1
 8007c7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007c86:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	015a      	lsls	r2, r3, #5
 8007c8c:	6a3b      	ldr	r3, [r7, #32]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	69fa      	ldr	r2, [r7, #28]
 8007c98:	0151      	lsls	r1, r2, #5
 8007c9a:	6a3a      	ldr	r2, [r7, #32]
 8007c9c:	440a      	add	r2, r1
 8007c9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ca2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007ca6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	79db      	ldrb	r3, [r3, #7]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d123      	bne.n	8007cf8 <USB_HC_StartXfer+0x2dc>
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	78db      	ldrb	r3, [r3, #3]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d11f      	bne.n	8007cf8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	015a      	lsls	r2, r3, #5
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	69fa      	ldr	r2, [r7, #28]
 8007cc8:	0151      	lsls	r1, r2, #5
 8007cca:	6a3a      	ldr	r2, [r7, #32]
 8007ccc:	440a      	add	r2, r1
 8007cce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cd6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	015a      	lsls	r2, r3, #5
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	4413      	add	r3, r2
 8007ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	69fa      	ldr	r2, [r7, #28]
 8007ce8:	0151      	lsls	r1, r2, #5
 8007cea:	6a3a      	ldr	r2, [r7, #32]
 8007cec:	440a      	add	r2, r1
 8007cee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cf6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	7c9b      	ldrb	r3, [r3, #18]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d003      	beq.n	8007d08 <USB_HC_StartXfer+0x2ec>
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	7c9b      	ldrb	r3, [r3, #18]
 8007d04:	2b03      	cmp	r3, #3
 8007d06:	d117      	bne.n	8007d38 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d113      	bne.n	8007d38 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	78db      	ldrb	r3, [r3, #3]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d10f      	bne.n	8007d38 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	6a3b      	ldr	r3, [r7, #32]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	69fa      	ldr	r2, [r7, #28]
 8007d28:	0151      	lsls	r1, r2, #5
 8007d2a:	6a3a      	ldr	r2, [r7, #32]
 8007d2c:	440a      	add	r2, r1
 8007d2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d36:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	7c9b      	ldrb	r3, [r3, #18]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d162      	bne.n	8007e06 <USB_HC_StartXfer+0x3ea>
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	78db      	ldrb	r3, [r3, #3]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d15e      	bne.n	8007e06 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d858      	bhi.n	8007e04 <USB_HC_StartXfer+0x3e8>
 8007d52:	a201      	add	r2, pc, #4	@ (adr r2, 8007d58 <USB_HC_StartXfer+0x33c>)
 8007d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d58:	08007d69 	.word	0x08007d69
 8007d5c:	08007d8b 	.word	0x08007d8b
 8007d60:	08007dad 	.word	0x08007dad
 8007d64:	08007dcf 	.word	0x08007dcf
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	69fa      	ldr	r2, [r7, #28]
 8007d78:	0151      	lsls	r1, r2, #5
 8007d7a:	6a3a      	ldr	r2, [r7, #32]
 8007d7c:	440a      	add	r2, r1
 8007d7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d86:	6053      	str	r3, [r2, #4]
          break;
 8007d88:	e03d      	b.n	8007e06 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	6a3b      	ldr	r3, [r7, #32]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	69fa      	ldr	r2, [r7, #28]
 8007d9a:	0151      	lsls	r1, r2, #5
 8007d9c:	6a3a      	ldr	r2, [r7, #32]
 8007d9e:	440a      	add	r2, r1
 8007da0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007da4:	f043 030e 	orr.w	r3, r3, #14
 8007da8:	6053      	str	r3, [r2, #4]
          break;
 8007daa:	e02c      	b.n	8007e06 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	015a      	lsls	r2, r3, #5
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	4413      	add	r3, r2
 8007db4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	69fa      	ldr	r2, [r7, #28]
 8007dbc:	0151      	lsls	r1, r2, #5
 8007dbe:	6a3a      	ldr	r2, [r7, #32]
 8007dc0:	440a      	add	r2, r1
 8007dc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007dc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007dca:	6053      	str	r3, [r2, #4]
          break;
 8007dcc:	e01b      	b.n	8007e06 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	015a      	lsls	r2, r3, #5
 8007dd2:	6a3b      	ldr	r3, [r7, #32]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	69fa      	ldr	r2, [r7, #28]
 8007dde:	0151      	lsls	r1, r2, #5
 8007de0:	6a3a      	ldr	r2, [r7, #32]
 8007de2:	440a      	add	r2, r1
 8007de4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007de8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007dec:	6053      	str	r3, [r2, #4]
          break;
 8007dee:	e00a      	b.n	8007e06 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	015a      	lsls	r2, r3, #5
 8007df4:	6a3b      	ldr	r3, [r7, #32]
 8007df6:	4413      	add	r3, r2
 8007df8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	2300      	movs	r3, #0
 8007e00:	6053      	str	r3, [r2, #4]
 8007e02:	e000      	b.n	8007e06 <USB_HC_StartXfer+0x3ea>
          break;
 8007e04:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	015a      	lsls	r2, r3, #5
 8007e0a:	6a3b      	ldr	r3, [r7, #32]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007e1c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	78db      	ldrb	r3, [r3, #3]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d004      	beq.n	8007e30 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e2c:	613b      	str	r3, [r7, #16]
 8007e2e:	e003      	b.n	8007e38 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007e36:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e3e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	6a3b      	ldr	r3, [r7, #32]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007e52:	79fb      	ldrb	r3, [r7, #7]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d003      	beq.n	8007e60 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	e055      	b.n	8007f08 <USB_HC_StartXfer+0x4ec>
 8007e5c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	78db      	ldrb	r3, [r3, #3]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d14e      	bne.n	8007f06 <USB_HC_StartXfer+0x4ea>
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d04a      	beq.n	8007f06 <USB_HC_StartXfer+0x4ea>
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	79db      	ldrb	r3, [r3, #7]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d146      	bne.n	8007f06 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	7c9b      	ldrb	r3, [r3, #18]
 8007e7c:	2b03      	cmp	r3, #3
 8007e7e:	d831      	bhi.n	8007ee4 <USB_HC_StartXfer+0x4c8>
 8007e80:	a201      	add	r2, pc, #4	@ (adr r2, 8007e88 <USB_HC_StartXfer+0x46c>)
 8007e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e86:	bf00      	nop
 8007e88:	08007e99 	.word	0x08007e99
 8007e8c:	08007ebd 	.word	0x08007ebd
 8007e90:	08007e99 	.word	0x08007e99
 8007e94:	08007ebd 	.word	0x08007ebd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	6a1b      	ldr	r3, [r3, #32]
 8007e9c:	3303      	adds	r3, #3
 8007e9e:	089b      	lsrs	r3, r3, #2
 8007ea0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007ea2:	8afa      	ldrh	r2, [r7, #22]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d91c      	bls.n	8007ee8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	f043 0220 	orr.w	r2, r3, #32
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	619a      	str	r2, [r3, #24]
        }
        break;
 8007eba:	e015      	b.n	8007ee8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	6a1b      	ldr	r3, [r3, #32]
 8007ec0:	3303      	adds	r3, #3
 8007ec2:	089b      	lsrs	r3, r3, #2
 8007ec4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007ec6:	8afa      	ldrh	r2, [r7, #22]
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d90a      	bls.n	8007eec <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	619a      	str	r2, [r3, #24]
        }
        break;
 8007ee2:	e003      	b.n	8007eec <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007ee4:	bf00      	nop
 8007ee6:	e002      	b.n	8007eee <USB_HC_StartXfer+0x4d2>
        break;
 8007ee8:	bf00      	nop
 8007eea:	e000      	b.n	8007eee <USB_HC_StartXfer+0x4d2>
        break;
 8007eec:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	6999      	ldr	r1, [r3, #24]
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	785a      	ldrb	r2, [r3, #1]
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	6a1b      	ldr	r3, [r3, #32]
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	2000      	movs	r0, #0
 8007efe:	9000      	str	r0, [sp, #0]
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f7ff f9c9 	bl	8007298 <USB_WritePacket>
  }

  return HAL_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3728      	adds	r7, #40	@ 0x28
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f22:	695b      	ldr	r3, [r3, #20]
 8007f24:	b29b      	uxth	r3, r3
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b089      	sub	sp, #36	@ 0x24
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007f42:	78fb      	ldrb	r3, [r7, #3]
 8007f44:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007f46:	2300      	movs	r3, #0
 8007f48:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	015a      	lsls	r2, r3, #5
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	4413      	add	r3, r2
 8007f52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	0c9b      	lsrs	r3, r3, #18
 8007f5a:	f003 0303 	and.w	r3, r3, #3
 8007f5e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	0fdb      	lsrs	r3, r3, #31
 8007f70:	f003 0301 	and.w	r3, r3, #1
 8007f74:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	015a      	lsls	r2, r3, #5
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	0fdb      	lsrs	r3, r3, #31
 8007f86:	f003 0301 	and.w	r3, r3, #1
 8007f8a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	f003 0320 	and.w	r3, r3, #32
 8007f94:	2b20      	cmp	r3, #32
 8007f96:	d10d      	bne.n	8007fb4 <USB_HC_Halt+0x82>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10a      	bne.n	8007fb4 <USB_HC_Halt+0x82>
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d005      	beq.n	8007fb0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d002      	beq.n	8007fb0 <USB_HC_Halt+0x7e>
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	2b03      	cmp	r3, #3
 8007fae:	d101      	bne.n	8007fb4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	e0d8      	b.n	8008166 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d002      	beq.n	8007fc0 <USB_HC_Halt+0x8e>
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d173      	bne.n	80080a8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	015a      	lsls	r2, r3, #5
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	69ba      	ldr	r2, [r7, #24]
 8007fd0:	0151      	lsls	r1, r2, #5
 8007fd2:	69fa      	ldr	r2, [r7, #28]
 8007fd4:	440a      	add	r2, r1
 8007fd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fda:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fde:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	f003 0320 	and.w	r3, r3, #32
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d14a      	bne.n	8008082 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d133      	bne.n	8008060 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	69ba      	ldr	r2, [r7, #24]
 8008008:	0151      	lsls	r1, r2, #5
 800800a:	69fa      	ldr	r2, [r7, #28]
 800800c:	440a      	add	r2, r1
 800800e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008012:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008016:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	4413      	add	r3, r2
 8008020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	69ba      	ldr	r2, [r7, #24]
 8008028:	0151      	lsls	r1, r2, #5
 800802a:	69fa      	ldr	r2, [r7, #28]
 800802c:	440a      	add	r2, r1
 800802e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008032:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008036:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	3301      	adds	r3, #1
 800803c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008044:	d82e      	bhi.n	80080a4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	015a      	lsls	r2, r3, #5
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	4413      	add	r3, r2
 800804e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008058:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800805c:	d0ec      	beq.n	8008038 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800805e:	e081      	b.n	8008164 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	015a      	lsls	r2, r3, #5
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	4413      	add	r3, r2
 8008068:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	69ba      	ldr	r2, [r7, #24]
 8008070:	0151      	lsls	r1, r2, #5
 8008072:	69fa      	ldr	r2, [r7, #28]
 8008074:	440a      	add	r2, r1
 8008076:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800807a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800807e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008080:	e070      	b.n	8008164 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	015a      	lsls	r2, r3, #5
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	4413      	add	r3, r2
 800808a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	69ba      	ldr	r2, [r7, #24]
 8008092:	0151      	lsls	r1, r2, #5
 8008094:	69fa      	ldr	r2, [r7, #28]
 8008096:	440a      	add	r2, r1
 8008098:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800809c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80080a0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80080a2:	e05f      	b.n	8008164 <USB_HC_Halt+0x232>
            break;
 80080a4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80080a6:	e05d      	b.n	8008164 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	015a      	lsls	r2, r3, #5
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	4413      	add	r3, r2
 80080b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	69ba      	ldr	r2, [r7, #24]
 80080b8:	0151      	lsls	r1, r2, #5
 80080ba:	69fa      	ldr	r2, [r7, #28]
 80080bc:	440a      	add	r2, r1
 80080be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080c6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d133      	bne.n	8008140 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	015a      	lsls	r2, r3, #5
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	4413      	add	r3, r2
 80080e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	69ba      	ldr	r2, [r7, #24]
 80080e8:	0151      	lsls	r1, r2, #5
 80080ea:	69fa      	ldr	r2, [r7, #28]
 80080ec:	440a      	add	r2, r1
 80080ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080f6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	69ba      	ldr	r2, [r7, #24]
 8008108:	0151      	lsls	r1, r2, #5
 800810a:	69fa      	ldr	r2, [r7, #28]
 800810c:	440a      	add	r2, r1
 800810e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008112:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008116:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	3301      	adds	r3, #1
 800811c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008124:	d81d      	bhi.n	8008162 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	015a      	lsls	r2, r3, #5
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	4413      	add	r3, r2
 800812e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008138:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800813c:	d0ec      	beq.n	8008118 <USB_HC_Halt+0x1e6>
 800813e:	e011      	b.n	8008164 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	015a      	lsls	r2, r3, #5
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	4413      	add	r3, r2
 8008148:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	69ba      	ldr	r2, [r7, #24]
 8008150:	0151      	lsls	r1, r2, #5
 8008152:	69fa      	ldr	r2, [r7, #28]
 8008154:	440a      	add	r2, r1
 8008156:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800815a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800815e:	6013      	str	r3, [r2, #0]
 8008160:	e000      	b.n	8008164 <USB_HC_Halt+0x232>
          break;
 8008162:	bf00      	nop
    }
  }

  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3724      	adds	r7, #36	@ 0x24
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
	...

08008174 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008174:	b480      	push	{r7}
 8008176:	b087      	sub	sp, #28
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	460b      	mov	r3, r1
 800817e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008184:	78fb      	ldrb	r3, [r7, #3]
 8008186:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008188:	2301      	movs	r3, #1
 800818a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	04da      	lsls	r2, r3, #19
 8008190:	4b15      	ldr	r3, [pc, #84]	@ (80081e8 <USB_DoPing+0x74>)
 8008192:	4013      	ands	r3, r2
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	0151      	lsls	r1, r2, #5
 8008198:	697a      	ldr	r2, [r7, #20]
 800819a:	440a      	add	r2, r1
 800819c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80081a4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80081bc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80081c4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081d2:	461a      	mov	r2, r3
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	371c      	adds	r7, #28
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	1ff80000 	.word	0x1ff80000

080081ec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b088      	sub	sp, #32
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80081fc:	2300      	movs	r3, #0
 80081fe:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7fe ff8c 	bl	800711e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008206:	2110      	movs	r1, #16
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7fe ffe5 	bl	80071d8 <USB_FlushTxFifo>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7ff f80f 	bl	800723c <USB_FlushRxFifo>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008228:	2300      	movs	r3, #0
 800822a:	61bb      	str	r3, [r7, #24]
 800822c:	e01f      	b.n	800826e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	015a      	lsls	r2, r3, #5
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	4413      	add	r3, r2
 8008236:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008244:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800824c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008254:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	015a      	lsls	r2, r3, #5
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	4413      	add	r3, r2
 800825e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008262:	461a      	mov	r2, r3
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	3301      	adds	r3, #1
 800826c:	61bb      	str	r3, [r7, #24]
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	2b0f      	cmp	r3, #15
 8008272:	d9dc      	bls.n	800822e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008274:	2300      	movs	r3, #0
 8008276:	61bb      	str	r3, [r7, #24]
 8008278:	e034      	b.n	80082e4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	015a      	lsls	r2, r3, #5
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	4413      	add	r3, r2
 8008282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008290:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008298:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80082a0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082ae:	461a      	mov	r2, r3
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	3301      	adds	r3, #1
 80082b8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80082c0:	d80c      	bhi.n	80082dc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	015a      	lsls	r2, r3, #5
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	4413      	add	r3, r2
 80082ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082d8:	d0ec      	beq.n	80082b4 <USB_StopHost+0xc8>
 80082da:	e000      	b.n	80082de <USB_StopHost+0xf2>
        break;
 80082dc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	3301      	adds	r3, #1
 80082e2:	61bb      	str	r3, [r7, #24]
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	2b0f      	cmp	r3, #15
 80082e8:	d9c7      	bls.n	800827a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082f0:	461a      	mov	r2, r3
 80082f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80082f6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80082fe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f7fe fefb 	bl	80070fc <USB_EnableGlobalInt>

  return ret;
 8008306:	7ffb      	ldrb	r3, [r7, #31]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3720      	adds	r7, #32
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008310:	b590      	push	{r4, r7, lr}
 8008312:	b089      	sub	sp, #36	@ 0x24
 8008314:	af04      	add	r7, sp, #16
 8008316:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008318:	2301      	movs	r3, #1
 800831a:	2202      	movs	r2, #2
 800831c:	2102      	movs	r1, #2
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fcd7 	bl	8008cd2 <USBH_FindInterface>
 8008324:	4603      	mov	r3, r0
 8008326:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008328:	7bfb      	ldrb	r3, [r7, #15]
 800832a:	2bff      	cmp	r3, #255	@ 0xff
 800832c:	d002      	beq.n	8008334 <USBH_CDC_InterfaceInit+0x24>
 800832e:	7bfb      	ldrb	r3, [r7, #15]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d901      	bls.n	8008338 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008334:	2302      	movs	r3, #2
 8008336:	e13d      	b.n	80085b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008338:	7bfb      	ldrb	r3, [r7, #15]
 800833a:	4619      	mov	r1, r3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 fcac 	bl	8008c9a <USBH_SelectInterface>
 8008342:	4603      	mov	r3, r0
 8008344:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008346:	7bbb      	ldrb	r3, [r7, #14]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800834c:	2302      	movs	r3, #2
 800834e:	e131      	b.n	80085b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008356:	2050      	movs	r0, #80	@ 0x50
 8008358:	f005 f896 	bl	800d488 <malloc>
 800835c:	4603      	mov	r3, r0
 800835e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d101      	bne.n	8008374 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008370:	2302      	movs	r3, #2
 8008372:	e11f      	b.n	80085b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008374:	2250      	movs	r2, #80	@ 0x50
 8008376:	2100      	movs	r1, #0
 8008378:	68b8      	ldr	r0, [r7, #8]
 800837a:	f005 f943 	bl	800d604 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800837e:	7bfb      	ldrb	r3, [r7, #15]
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	211a      	movs	r1, #26
 8008384:	fb01 f303 	mul.w	r3, r1, r3
 8008388:	4413      	add	r3, r2
 800838a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	b25b      	sxtb	r3, r3
 8008392:	2b00      	cmp	r3, #0
 8008394:	da15      	bge.n	80083c2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008396:	7bfb      	ldrb	r3, [r7, #15]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	211a      	movs	r1, #26
 800839c:	fb01 f303 	mul.w	r3, r1, r3
 80083a0:	4413      	add	r3, r2
 80083a2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80083a6:	781a      	ldrb	r2, [r3, #0]
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	211a      	movs	r1, #26
 80083b2:	fb01 f303 	mul.w	r3, r1, r3
 80083b6:	4413      	add	r3, r2
 80083b8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80083bc:	881a      	ldrh	r2, [r3, #0]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	785b      	ldrb	r3, [r3, #1]
 80083c6:	4619      	mov	r1, r3
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f002 fa1c 	bl	800a806 <USBH_AllocPipe>
 80083ce:	4603      	mov	r3, r0
 80083d0:	461a      	mov	r2, r3
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	7819      	ldrb	r1, [r3, #0]
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	7858      	ldrb	r0, [r3, #1]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	8952      	ldrh	r2, [r2, #10]
 80083ee:	9202      	str	r2, [sp, #8]
 80083f0:	2203      	movs	r2, #3
 80083f2:	9201      	str	r2, [sp, #4]
 80083f4:	9300      	str	r3, [sp, #0]
 80083f6:	4623      	mov	r3, r4
 80083f8:	4602      	mov	r2, r0
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f002 f9d4 	bl	800a7a8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	2200      	movs	r2, #0
 8008406:	4619      	mov	r1, r3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f004 ffb7 	bl	800d37c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800840e:	2300      	movs	r3, #0
 8008410:	2200      	movs	r2, #0
 8008412:	210a      	movs	r1, #10
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fc5c 	bl	8008cd2 <USBH_FindInterface>
 800841a:	4603      	mov	r3, r0
 800841c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800841e:	7bfb      	ldrb	r3, [r7, #15]
 8008420:	2bff      	cmp	r3, #255	@ 0xff
 8008422:	d002      	beq.n	800842a <USBH_CDC_InterfaceInit+0x11a>
 8008424:	7bfb      	ldrb	r3, [r7, #15]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d901      	bls.n	800842e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800842a:	2302      	movs	r3, #2
 800842c:	e0c2      	b.n	80085b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800842e:	7bfb      	ldrb	r3, [r7, #15]
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	211a      	movs	r1, #26
 8008434:	fb01 f303 	mul.w	r3, r1, r3
 8008438:	4413      	add	r3, r2
 800843a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	b25b      	sxtb	r3, r3
 8008442:	2b00      	cmp	r3, #0
 8008444:	da16      	bge.n	8008474 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008446:	7bfb      	ldrb	r3, [r7, #15]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	211a      	movs	r1, #26
 800844c:	fb01 f303 	mul.w	r3, r1, r3
 8008450:	4413      	add	r3, r2
 8008452:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008456:	781a      	ldrb	r2, [r3, #0]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800845c:	7bfb      	ldrb	r3, [r7, #15]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	211a      	movs	r1, #26
 8008462:	fb01 f303 	mul.w	r3, r1, r3
 8008466:	4413      	add	r3, r2
 8008468:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800846c:	881a      	ldrh	r2, [r3, #0]
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	835a      	strh	r2, [r3, #26]
 8008472:	e015      	b.n	80084a0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008474:	7bfb      	ldrb	r3, [r7, #15]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	211a      	movs	r1, #26
 800847a:	fb01 f303 	mul.w	r3, r1, r3
 800847e:	4413      	add	r3, r2
 8008480:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008484:	781a      	ldrb	r2, [r3, #0]
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800848a:	7bfb      	ldrb	r3, [r7, #15]
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	211a      	movs	r1, #26
 8008490:	fb01 f303 	mul.w	r3, r1, r3
 8008494:	4413      	add	r3, r2
 8008496:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800849a:	881a      	ldrh	r2, [r3, #0]
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	211a      	movs	r1, #26
 80084a6:	fb01 f303 	mul.w	r3, r1, r3
 80084aa:	4413      	add	r3, r2
 80084ac:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	b25b      	sxtb	r3, r3
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	da16      	bge.n	80084e6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80084b8:	7bfb      	ldrb	r3, [r7, #15]
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	211a      	movs	r1, #26
 80084be:	fb01 f303 	mul.w	r3, r1, r3
 80084c2:	4413      	add	r3, r2
 80084c4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80084c8:	781a      	ldrb	r2, [r3, #0]
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	211a      	movs	r1, #26
 80084d4:	fb01 f303 	mul.w	r3, r1, r3
 80084d8:	4413      	add	r3, r2
 80084da:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80084de:	881a      	ldrh	r2, [r3, #0]
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	835a      	strh	r2, [r3, #26]
 80084e4:	e015      	b.n	8008512 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	211a      	movs	r1, #26
 80084ec:	fb01 f303 	mul.w	r3, r1, r3
 80084f0:	4413      	add	r3, r2
 80084f2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80084f6:	781a      	ldrb	r2, [r3, #0]
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	211a      	movs	r1, #26
 8008502:	fb01 f303 	mul.w	r3, r1, r3
 8008506:	4413      	add	r3, r2
 8008508:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800850c:	881a      	ldrh	r2, [r3, #0]
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	7b9b      	ldrb	r3, [r3, #14]
 8008516:	4619      	mov	r1, r3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f002 f974 	bl	800a806 <USBH_AllocPipe>
 800851e:	4603      	mov	r3, r0
 8008520:	461a      	mov	r2, r3
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	7bdb      	ldrb	r3, [r3, #15]
 800852a:	4619      	mov	r1, r3
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f002 f96a 	bl	800a806 <USBH_AllocPipe>
 8008532:	4603      	mov	r3, r0
 8008534:	461a      	mov	r2, r3
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	7b59      	ldrb	r1, [r3, #13]
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	7b98      	ldrb	r0, [r3, #14]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	8b12      	ldrh	r2, [r2, #24]
 8008552:	9202      	str	r2, [sp, #8]
 8008554:	2202      	movs	r2, #2
 8008556:	9201      	str	r2, [sp, #4]
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	4623      	mov	r3, r4
 800855c:	4602      	mov	r2, r0
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f002 f922 	bl	800a7a8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	7b19      	ldrb	r1, [r3, #12]
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	7bd8      	ldrb	r0, [r3, #15]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	8b52      	ldrh	r2, [r2, #26]
 800857c:	9202      	str	r2, [sp, #8]
 800857e:	2202      	movs	r2, #2
 8008580:	9201      	str	r2, [sp, #4]
 8008582:	9300      	str	r3, [sp, #0]
 8008584:	4623      	mov	r3, r4
 8008586:	4602      	mov	r2, r0
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f002 f90d 	bl	800a7a8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	7b5b      	ldrb	r3, [r3, #13]
 800859a:	2200      	movs	r2, #0
 800859c:	4619      	mov	r1, r3
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f004 feec 	bl	800d37c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	7b1b      	ldrb	r3, [r3, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	4619      	mov	r1, r3
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f004 fee5 	bl	800d37c <USBH_LL_SetToggle>

  return USBH_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3714      	adds	r7, #20
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd90      	pop	{r4, r7, pc}

080085bc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085ca:	69db      	ldr	r3, [r3, #28]
 80085cc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00e      	beq.n	80085f4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	4619      	mov	r1, r3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f002 f902 	bl	800a7e6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	4619      	mov	r1, r3
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f002 f92d 	bl	800a848 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2200      	movs	r2, #0
 80085f2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	7b1b      	ldrb	r3, [r3, #12]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00e      	beq.n	800861a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	7b1b      	ldrb	r3, [r3, #12]
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f002 f8ef 	bl	800a7e6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	7b1b      	ldrb	r3, [r3, #12]
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f002 f91a 	bl	800a848 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	7b5b      	ldrb	r3, [r3, #13]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00e      	beq.n	8008640 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	7b5b      	ldrb	r3, [r3, #13]
 8008626:	4619      	mov	r1, r3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f002 f8dc 	bl	800a7e6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	7b5b      	ldrb	r3, [r3, #13]
 8008632:	4619      	mov	r1, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f002 f907 	bl	800a848 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008646:	69db      	ldr	r3, [r3, #28]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00b      	beq.n	8008664 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	4618      	mov	r0, r3
 8008656:	f004 ff1f 	bl	800d498 <free>
    phost->pActiveClass->pData = 0U;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008660:	2200      	movs	r2, #0
 8008662:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800867c:	69db      	ldr	r3, [r3, #28]
 800867e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	3340      	adds	r3, #64	@ 0x40
 8008684:	4619      	mov	r1, r3
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f8b1 	bl	80087ee <GetLineCoding>
 800868c:	4603      	mov	r3, r0
 800868e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008690:	7afb      	ldrb	r3, [r7, #11]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d105      	bne.n	80086a2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800869c:	2102      	movs	r1, #2
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80086a2:	7afb      	ldrb	r3, [r7, #11]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80086b4:	2301      	movs	r3, #1
 80086b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086c2:	69db      	ldr	r3, [r3, #28]
 80086c4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80086cc:	2b04      	cmp	r3, #4
 80086ce:	d877      	bhi.n	80087c0 <USBH_CDC_Process+0x114>
 80086d0:	a201      	add	r2, pc, #4	@ (adr r2, 80086d8 <USBH_CDC_Process+0x2c>)
 80086d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d6:	bf00      	nop
 80086d8:	080086ed 	.word	0x080086ed
 80086dc:	080086f3 	.word	0x080086f3
 80086e0:	08008723 	.word	0x08008723
 80086e4:	08008797 	.word	0x08008797
 80086e8:	080087a5 	.word	0x080087a5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	73fb      	strb	r3, [r7, #15]
      break;
 80086f0:	e06d      	b.n	80087ce <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086f6:	4619      	mov	r1, r3
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f897 	bl	800882c <SetLineCoding>
 80086fe:	4603      	mov	r3, r0
 8008700:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008702:	7bbb      	ldrb	r3, [r7, #14]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d104      	bne.n	8008712 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2202      	movs	r2, #2
 800870c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008710:	e058      	b.n	80087c4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008712:	7bbb      	ldrb	r3, [r7, #14]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d055      	beq.n	80087c4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	2204      	movs	r2, #4
 800871c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008720:	e050      	b.n	80087c4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	3340      	adds	r3, #64	@ 0x40
 8008726:	4619      	mov	r1, r3
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f860 	bl	80087ee <GetLineCoding>
 800872e:	4603      	mov	r3, r0
 8008730:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008732:	7bbb      	ldrb	r3, [r7, #14]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d126      	bne.n	8008786 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	2200      	movs	r2, #0
 800873c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800874a:	791b      	ldrb	r3, [r3, #4]
 800874c:	429a      	cmp	r2, r3
 800874e:	d13b      	bne.n	80087c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800875a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800875c:	429a      	cmp	r2, r3
 800875e:	d133      	bne.n	80087c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800876a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800876c:	429a      	cmp	r2, r3
 800876e:	d12b      	bne.n	80087c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008778:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800877a:	429a      	cmp	r2, r3
 800877c:	d124      	bne.n	80087c8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f982 	bl	8008a88 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008784:	e020      	b.n	80087c8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008786:	7bbb      	ldrb	r3, [r7, #14]
 8008788:	2b01      	cmp	r3, #1
 800878a:	d01d      	beq.n	80087c8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	2204      	movs	r2, #4
 8008790:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008794:	e018      	b.n	80087c8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f867 	bl	800886a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f8f6 	bl	800898e <CDC_ProcessReception>
      break;
 80087a2:	e014      	b.n	80087ce <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80087a4:	2100      	movs	r1, #0
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f001 f988 	bl	8009abc <USBH_ClrFeature>
 80087ac:	4603      	mov	r3, r0
 80087ae:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80087b0:	7bbb      	ldrb	r3, [r7, #14]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10a      	bne.n	80087cc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80087be:	e005      	b.n	80087cc <USBH_CDC_Process+0x120>

    default:
      break;
 80087c0:	bf00      	nop
 80087c2:	e004      	b.n	80087ce <USBH_CDC_Process+0x122>
      break;
 80087c4:	bf00      	nop
 80087c6:	e002      	b.n	80087ce <USBH_CDC_Process+0x122>
      break;
 80087c8:	bf00      	nop
 80087ca:	e000      	b.n	80087ce <USBH_CDC_Process+0x122>
      break;
 80087cc:	bf00      	nop

  }

  return status;
 80087ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b082      	sub	sp, #8
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
 80087f6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	22a1      	movs	r2, #161	@ 0xa1
 80087fc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2221      	movs	r2, #33	@ 0x21
 8008802:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2207      	movs	r2, #7
 8008814:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	2207      	movs	r2, #7
 800881a:	4619      	mov	r1, r3
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f001 fc82 	bl	800a126 <USBH_CtlReq>
 8008822:	4603      	mov	r3, r0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3708      	adds	r7, #8
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2221      	movs	r2, #33	@ 0x21
 800883a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2220      	movs	r2, #32
 8008840:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2207      	movs	r2, #7
 8008852:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	2207      	movs	r2, #7
 8008858:	4619      	mov	r1, r3
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f001 fc63 	bl	800a126 <USBH_CtlReq>
 8008860:	4603      	mov	r3, r0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b086      	sub	sp, #24
 800886e:	af02      	add	r7, sp, #8
 8008870:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800887c:	2300      	movs	r3, #0
 800887e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008886:	2b01      	cmp	r3, #1
 8008888:	d002      	beq.n	8008890 <CDC_ProcessTransmission+0x26>
 800888a:	2b02      	cmp	r3, #2
 800888c:	d023      	beq.n	80088d6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800888e:	e07a      	b.n	8008986 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	8b12      	ldrh	r2, [r2, #24]
 8008898:	4293      	cmp	r3, r2
 800889a:	d90b      	bls.n	80088b4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	69d9      	ldr	r1, [r3, #28]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	8b1a      	ldrh	r2, [r3, #24]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	7b5b      	ldrb	r3, [r3, #13]
 80088a8:	2001      	movs	r0, #1
 80088aa:	9000      	str	r0, [sp, #0]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f001 ff38 	bl	800a722 <USBH_BulkSendData>
 80088b2:	e00b      	b.n	80088cc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80088bc:	b29a      	uxth	r2, r3
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	7b5b      	ldrb	r3, [r3, #13]
 80088c2:	2001      	movs	r0, #1
 80088c4:	9000      	str	r0, [sp, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f001 ff2b 	bl	800a722 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2202      	movs	r2, #2
 80088d0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80088d4:	e057      	b.n	8008986 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	7b5b      	ldrb	r3, [r3, #13]
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f004 fd23 	bl	800d328 <USBH_LL_GetURBState>
 80088e2:	4603      	mov	r3, r0
 80088e4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80088e6:	7afb      	ldrb	r3, [r7, #11]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d136      	bne.n	800895a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	8b12      	ldrh	r2, [r2, #24]
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d90e      	bls.n	8008916 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	8b12      	ldrh	r2, [r2, #24]
 8008900:	1a9a      	subs	r2, r3, r2
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	69db      	ldr	r3, [r3, #28]
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	8b12      	ldrh	r2, [r2, #24]
 800890e:	441a      	add	r2, r3
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	61da      	str	r2, [r3, #28]
 8008914:	e002      	b.n	800891c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008920:	2b00      	cmp	r3, #0
 8008922:	d004      	beq.n	800892e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800892c:	e006      	b.n	800893c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f892 	bl	8008a60 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2204      	movs	r2, #4
 8008940:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008950:	2200      	movs	r2, #0
 8008952:	4619      	mov	r1, r3
 8008954:	f002 f874 	bl	800aa40 <osMessagePut>
      break;
 8008958:	e014      	b.n	8008984 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800895a:	7afb      	ldrb	r3, [r7, #11]
 800895c:	2b02      	cmp	r3, #2
 800895e:	d111      	bne.n	8008984 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2204      	movs	r2, #4
 800896c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800897c:	2200      	movs	r2, #0
 800897e:	4619      	mov	r1, r3
 8008980:	f002 f85e 	bl	800aa40 <osMessagePut>
      break;
 8008984:	bf00      	nop
  }
}
 8008986:	bf00      	nop
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b086      	sub	sp, #24
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800899c:	69db      	ldr	r3, [r3, #28]
 800899e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80089a0:	2300      	movs	r3, #0
 80089a2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80089aa:	2b03      	cmp	r3, #3
 80089ac:	d002      	beq.n	80089b4 <CDC_ProcessReception+0x26>
 80089ae:	2b04      	cmp	r3, #4
 80089b0:	d00e      	beq.n	80089d0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80089b2:	e051      	b.n	8008a58 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	6a19      	ldr	r1, [r3, #32]
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	8b5a      	ldrh	r2, [r3, #26]
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	7b1b      	ldrb	r3, [r3, #12]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f001 fed3 	bl	800a76c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	2204      	movs	r2, #4
 80089ca:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80089ce:	e043      	b.n	8008a58 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	7b1b      	ldrb	r3, [r3, #12]
 80089d4:	4619      	mov	r1, r3
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f004 fca6 	bl	800d328 <USBH_LL_GetURBState>
 80089dc:	4603      	mov	r3, r0
 80089de:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80089e0:	7cfb      	ldrb	r3, [r7, #19]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d137      	bne.n	8008a56 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	7b1b      	ldrb	r3, [r3, #12]
 80089ea:	4619      	mov	r1, r3
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f004 fc09 	bl	800d204 <USBH_LL_GetLastXferSize>
 80089f2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d016      	beq.n	8008a2c <CDC_ProcessReception+0x9e>
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	8b5b      	ldrh	r3, [r3, #26]
 8008a02:	461a      	mov	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d910      	bls.n	8008a2c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	1ad2      	subs	r2, r2, r3
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	6a1a      	ldr	r2, [r3, #32]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	441a      	add	r2, r3
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	2203      	movs	r2, #3
 8008a26:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8008a2a:	e006      	b.n	8008a3a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 f81d 	bl	8008a74 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2204      	movs	r2, #4
 8008a3e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008a4e:	2200      	movs	r2, #0
 8008a50:	4619      	mov	r1, r3
 8008a52:	f001 fff5 	bl	800aa40 <osMessagePut>
      break;
 8008a56:	bf00      	nop
  }
}
 8008a58:	bf00      	nop
 8008a5a:	3718      	adds	r7, #24
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008a68:	bf00      	nop
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008a90:	bf00      	nop
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008a9c:	b5b0      	push	{r4, r5, r7, lr}
 8008a9e:	b090      	sub	sp, #64	@ 0x40
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d101      	bne.n	8008ab4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	e04d      	b.n	8008b50 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	79fa      	ldrb	r2, [r7, #7]
 8008ab8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f000 f847 	bl	8008b60 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d003      	beq.n	8008b00 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8008b00:	4b15      	ldr	r3, [pc, #84]	@ (8008b58 <USBH_Init+0xbc>)
 8008b02:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8008b06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8008b0c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008b10:	2100      	movs	r1, #0
 8008b12:	4618      	mov	r0, r3
 8008b14:	f001 ff6b 	bl	800a9ee <osMessageCreate>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8008b20:	4b0e      	ldr	r3, [pc, #56]	@ (8008b5c <USBH_Init+0xc0>)
 8008b22:	f107 0414 	add.w	r4, r7, #20
 8008b26:	461d      	mov	r5, r3
 8008b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008b30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8008b34:	f107 0314 	add.w	r3, r7, #20
 8008b38:	68f9      	ldr	r1, [r7, #12]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f001 fef7 	bl	800a92e <osThreadCreate>
 8008b40:	4602      	mov	r2, r0
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f004 fa9d 	bl	800d088 <USBH_LL_Init>

  return USBH_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3740      	adds	r7, #64	@ 0x40
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bdb0      	pop	{r4, r5, r7, pc}
 8008b58:	0800d780 	.word	0x0800d780
 8008b5c:	0800d79c 	.word	0x0800d79c

08008b60 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	60fb      	str	r3, [r7, #12]
 8008b70:	e009      	b.n	8008b86 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	33e0      	adds	r3, #224	@ 0xe0
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	3301      	adds	r3, #1
 8008b84:	60fb      	str	r3, [r7, #12]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2b0f      	cmp	r3, #15
 8008b8a:	d9f2      	bls.n	8008b72 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	60fb      	str	r3, [r7, #12]
 8008b90:	e009      	b.n	8008ba6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	4413      	add	r3, r2
 8008b98:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	60fb      	str	r3, [r7, #12]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bac:	d3f1      	bcc.n	8008b92 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2240      	movs	r2, #64	@ 0x40
 8008bd2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	331c      	adds	r3, #28
 8008bfe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008c02:	2100      	movs	r1, #0
 8008c04:	4618      	mov	r0, r3
 8008c06:	f004 fcfd 	bl	800d604 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008c10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c14:	2100      	movs	r1, #0
 8008c16:	4618      	mov	r0, r3
 8008c18:	f004 fcf4 	bl	800d604 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008c22:	2212      	movs	r2, #18
 8008c24:	2100      	movs	r1, #0
 8008c26:	4618      	mov	r0, r3
 8008c28:	f004 fcec 	bl	800d604 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008c32:	223e      	movs	r2, #62	@ 0x3e
 8008c34:	2100      	movs	r1, #0
 8008c36:	4618      	mov	r0, r3
 8008c38:	f004 fce4 	bl	800d604 <memset>

  return USBH_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b085      	sub	sp, #20
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
 8008c4e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d016      	beq.n	8008c88 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10e      	bne.n	8008c82 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008c6a:	1c59      	adds	r1, r3, #1
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	33de      	adds	r3, #222	@ 0xde
 8008c76:	6839      	ldr	r1, [r7, #0]
 8008c78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	73fb      	strb	r3, [r7, #15]
 8008c80:	e004      	b.n	8008c8c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008c82:	2302      	movs	r3, #2
 8008c84:	73fb      	strb	r3, [r7, #15]
 8008c86:	e001      	b.n	8008c8c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008c88:	2302      	movs	r3, #2
 8008c8a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3714      	adds	r7, #20
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008c9a:	b480      	push	{r7}
 8008c9c:	b085      	sub	sp, #20
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008cb0:	78fa      	ldrb	r2, [r7, #3]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d204      	bcs.n	8008cc0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	78fa      	ldrb	r2, [r7, #3]
 8008cba:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008cbe:	e001      	b.n	8008cc4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr

08008cd2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b087      	sub	sp, #28
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	4608      	mov	r0, r1
 8008cdc:	4611      	mov	r1, r2
 8008cde:	461a      	mov	r2, r3
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	70fb      	strb	r3, [r7, #3]
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	70bb      	strb	r3, [r7, #2]
 8008ce8:	4613      	mov	r3, r2
 8008cea:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008cec:	2300      	movs	r3, #0
 8008cee:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008cfa:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008cfc:	e025      	b.n	8008d4a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008cfe:	7dfb      	ldrb	r3, [r7, #23]
 8008d00:	221a      	movs	r2, #26
 8008d02:	fb02 f303 	mul.w	r3, r2, r3
 8008d06:	3308      	adds	r3, #8
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	3302      	adds	r3, #2
 8008d0e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	795b      	ldrb	r3, [r3, #5]
 8008d14:	78fa      	ldrb	r2, [r7, #3]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d002      	beq.n	8008d20 <USBH_FindInterface+0x4e>
 8008d1a:	78fb      	ldrb	r3, [r7, #3]
 8008d1c:	2bff      	cmp	r3, #255	@ 0xff
 8008d1e:	d111      	bne.n	8008d44 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008d24:	78ba      	ldrb	r2, [r7, #2]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d002      	beq.n	8008d30 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d2a:	78bb      	ldrb	r3, [r7, #2]
 8008d2c:	2bff      	cmp	r3, #255	@ 0xff
 8008d2e:	d109      	bne.n	8008d44 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d34:	787a      	ldrb	r2, [r7, #1]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d002      	beq.n	8008d40 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008d3a:	787b      	ldrb	r3, [r7, #1]
 8008d3c:	2bff      	cmp	r3, #255	@ 0xff
 8008d3e:	d101      	bne.n	8008d44 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008d40:	7dfb      	ldrb	r3, [r7, #23]
 8008d42:	e006      	b.n	8008d52 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008d44:	7dfb      	ldrb	r3, [r7, #23]
 8008d46:	3301      	adds	r3, #1
 8008d48:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d9d6      	bls.n	8008cfe <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008d50:	23ff      	movs	r3, #255	@ 0xff
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	371c      	adds	r7, #28
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b082      	sub	sp, #8
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f004 f9d4 	bl	800d114 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008d6c:	2101      	movs	r1, #1
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f004 faed 	bl	800d34e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
	...

08008d80 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b088      	sub	sp, #32
 8008d84:	af04      	add	r7, sp, #16
 8008d86:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008d88:	2302      	movs	r3, #2
 8008d8a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d102      	bne.n	8008da2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2203      	movs	r2, #3
 8008da0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	2b0b      	cmp	r3, #11
 8008daa:	f200 8244 	bhi.w	8009236 <USBH_Process+0x4b6>
 8008dae:	a201      	add	r2, pc, #4	@ (adr r2, 8008db4 <USBH_Process+0x34>)
 8008db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db4:	08008de5 	.word	0x08008de5
 8008db8:	08008e33 	.word	0x08008e33
 8008dbc:	08008eb7 	.word	0x08008eb7
 8008dc0:	080091b5 	.word	0x080091b5
 8008dc4:	08009237 	.word	0x08009237
 8008dc8:	08008f73 	.word	0x08008f73
 8008dcc:	0800913f 	.word	0x0800913f
 8008dd0:	08008fc5 	.word	0x08008fc5
 8008dd4:	08009001 	.word	0x08009001
 8008dd8:	08009039 	.word	0x08009039
 8008ddc:	08009097 	.word	0x08009097
 8008de0:	0800919d 	.word	0x0800919d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 8224 	beq.w	800923a <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2201      	movs	r2, #1
 8008df6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008df8:	20c8      	movs	r0, #200	@ 0xc8
 8008dfa:	f004 faf2 	bl	800d3e2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f004 f9e5 	bl	800d1ce <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008e28:	2200      	movs	r2, #0
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	f001 fe08 	bl	800aa40 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008e30:	e203      	b.n	800923a <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d107      	bne.n	8008e4c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2202      	movs	r2, #2
 8008e48:	701a      	strb	r2, [r3, #0]
 8008e4a:	e025      	b.n	8008e98 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008e52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e56:	d914      	bls.n	8008e82 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008e5e:	3301      	adds	r3, #1
 8008e60:	b2da      	uxtb	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008e6e:	2b03      	cmp	r3, #3
 8008e70:	d903      	bls.n	8008e7a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	220d      	movs	r2, #13
 8008e76:	701a      	strb	r2, [r3, #0]
 8008e78:	e00e      	b.n	8008e98 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	701a      	strb	r2, [r3, #0]
 8008e80:	e00a      	b.n	8008e98 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008e88:	f103 020a 	add.w	r2, r3, #10
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008e92:	200a      	movs	r0, #10
 8008e94:	f004 faa5 	bl	800d3e2 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008eac:	2200      	movs	r2, #0
 8008eae:	4619      	mov	r1, r3
 8008eb0:	f001 fdc6 	bl	800aa40 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008eb4:	e1c8      	b.n	8009248 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d005      	beq.n	8008ecc <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ec6:	2104      	movs	r1, #4
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008ecc:	2064      	movs	r0, #100	@ 0x64
 8008ece:	f004 fa88 	bl	800d3e2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f004 f954 	bl	800d180 <USBH_LL_GetSpeed>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	461a      	mov	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2205      	movs	r2, #5
 8008ee6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008ee8:	2100      	movs	r1, #0
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f001 fc8b 	bl	800a806 <USBH_AllocPipe>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008ef8:	2180      	movs	r1, #128	@ 0x80
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f001 fc83 	bl	800a806 <USBH_AllocPipe>
 8008f00:	4603      	mov	r3, r0
 8008f02:	461a      	mov	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	7919      	ldrb	r1, [r3, #4]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008f1c:	9202      	str	r2, [sp, #8]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	9201      	str	r2, [sp, #4]
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	4603      	mov	r3, r0
 8008f26:	2280      	movs	r2, #128	@ 0x80
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f001 fc3d 	bl	800a7a8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	7959      	ldrb	r1, [r3, #5]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008f42:	9202      	str	r2, [sp, #8]
 8008f44:	2200      	movs	r2, #0
 8008f46:	9201      	str	r2, [sp, #4]
 8008f48:	9300      	str	r3, [sp, #0]
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f001 fc2a 	bl	800a7a8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008f68:	2200      	movs	r2, #0
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	f001 fd68 	bl	800aa40 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f70:	e16a      	b.n	8009248 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f96e 	bl	8009254 <USBH_HandleEnum>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008f7c:	7bbb      	ldrb	r3, [r7, #14]
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f040 815c 	bne.w	800923e <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d103      	bne.n	8008fa0 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2208      	movs	r2, #8
 8008f9c:	701a      	strb	r2, [r3, #0]
 8008f9e:	e002      	b.n	8008fa6 <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2207      	movs	r2, #7
 8008fa4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2205      	movs	r2, #5
 8008faa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008fba:	2200      	movs	r2, #0
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	f001 fd3f 	bl	800aa40 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008fc2:	e13c      	b.n	800923e <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f000 8139 	beq.w	8009242 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008fd6:	2101      	movs	r1, #1
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2208      	movs	r2, #8
 8008fe0:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2205      	movs	r2, #5
 8008fe6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	f001 fd21 	bl	800aa40 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008ffe:	e120      	b.n	8009242 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fd10 	bl	8009a2e <USBH_SetCfg>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d102      	bne.n	800901a <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2209      	movs	r2, #9
 8009018:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2201      	movs	r2, #1
 800901e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800902e:	2200      	movs	r2, #0
 8009030:	4619      	mov	r1, r3
 8009032:	f001 fd05 	bl	800aa40 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009036:	e107      	b.n	8009248 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800903e:	f003 0320 	and.w	r3, r3, #32
 8009042:	2b00      	cmp	r3, #0
 8009044:	d015      	beq.n	8009072 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009046:	2101      	movs	r1, #1
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 fd13 	bl	8009a74 <USBH_SetFeature>
 800904e:	4603      	mov	r3, r0
 8009050:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009052:	7bbb      	ldrb	r3, [r7, #14]
 8009054:	b2db      	uxtb	r3, r3
 8009056:	2b00      	cmp	r3, #0
 8009058:	d103      	bne.n	8009062 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	220a      	movs	r2, #10
 800905e:	701a      	strb	r2, [r3, #0]
 8009060:	e00a      	b.n	8009078 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8009062:	7bbb      	ldrb	r3, [r7, #14]
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b03      	cmp	r3, #3
 8009068:	d106      	bne.n	8009078 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	220a      	movs	r2, #10
 800906e:	701a      	strb	r2, [r3, #0]
 8009070:	e002      	b.n	8009078 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	220a      	movs	r2, #10
 8009076:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800908c:	2200      	movs	r2, #0
 800908e:	4619      	mov	r1, r3
 8009090:	f001 fcd6 	bl	800aa40 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009094:	e0d8      	b.n	8009248 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800909c:	2b00      	cmp	r3, #0
 800909e:	d03f      	beq.n	8009120 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80090a8:	2300      	movs	r3, #0
 80090aa:	73fb      	strb	r3, [r7, #15]
 80090ac:	e016      	b.n	80090dc <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80090ae:	7bfa      	ldrb	r2, [r7, #15]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	32de      	adds	r2, #222	@ 0xde
 80090b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090b8:	791a      	ldrb	r2, [r3, #4]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d108      	bne.n	80090d6 <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 80090c4:	7bfa      	ldrb	r2, [r7, #15]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	32de      	adds	r2, #222	@ 0xde
 80090ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80090d4:	e005      	b.n	80090e2 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
 80090d8:	3301      	adds	r3, #1
 80090da:	73fb      	strb	r3, [r7, #15]
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d0e5      	beq.n	80090ae <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d016      	beq.n	800911a <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	4798      	blx	r3
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d109      	bne.n	8009112 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2206      	movs	r2, #6
 8009102:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800910a:	2103      	movs	r1, #3
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	4798      	blx	r3
 8009110:	e006      	b.n	8009120 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	220d      	movs	r2, #13
 8009116:	701a      	strb	r2, [r3, #0]
 8009118:	e002      	b.n	8009120 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	220d      	movs	r2, #13
 800911e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2205      	movs	r2, #5
 8009124:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009134:	2200      	movs	r2, #0
 8009136:	4619      	mov	r1, r3
 8009138:	f001 fc82 	bl	800aa40 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800913c:	e084      	b.n	8009248 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009144:	2b00      	cmp	r3, #0
 8009146:	d017      	beq.n	8009178 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800914e:	691b      	ldr	r3, [r3, #16]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	4798      	blx	r3
 8009154:	4603      	mov	r3, r0
 8009156:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009158:	7bbb      	ldrb	r3, [r7, #14]
 800915a:	b2db      	uxtb	r3, r3
 800915c:	2b00      	cmp	r3, #0
 800915e:	d103      	bne.n	8009168 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	220b      	movs	r2, #11
 8009164:	701a      	strb	r2, [r3, #0]
 8009166:	e00a      	b.n	800917e <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 8009168:	7bbb      	ldrb	r3, [r7, #14]
 800916a:	b2db      	uxtb	r3, r3
 800916c:	2b02      	cmp	r3, #2
 800916e:	d106      	bne.n	800917e <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	220d      	movs	r2, #13
 8009174:	701a      	strb	r2, [r3, #0]
 8009176:	e002      	b.n	800917e <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	220d      	movs	r2, #13
 800917c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2205      	movs	r2, #5
 8009182:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009192:	2200      	movs	r2, #0
 8009194:	4619      	mov	r1, r3
 8009196:	f001 fc53 	bl	800aa40 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800919a:	e055      	b.n	8009248 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d04f      	beq.n	8009246 <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	4798      	blx	r3
      }
      break;
 80091b2:	e048      	b.n	8009246 <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f7ff fccf 	bl	8008b60 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d009      	beq.n	80091e0 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d005      	beq.n	80091f6 <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80091f0:	2105      	movs	r1, #5
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d107      	bne.n	8009212 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7ff fda7 	bl	8008d5e <USBH_Start>
 8009210:	e002      	b.n	8009218 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f003 ff7e 	bl	800d114 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800922c:	2200      	movs	r2, #0
 800922e:	4619      	mov	r1, r3
 8009230:	f001 fc06 	bl	800aa40 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009234:	e008      	b.n	8009248 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8009236:	bf00      	nop
 8009238:	e006      	b.n	8009248 <USBH_Process+0x4c8>
      break;
 800923a:	bf00      	nop
 800923c:	e004      	b.n	8009248 <USBH_Process+0x4c8>
      break;
 800923e:	bf00      	nop
 8009240:	e002      	b.n	8009248 <USBH_Process+0x4c8>
    break;
 8009242:	bf00      	nop
 8009244:	e000      	b.n	8009248 <USBH_Process+0x4c8>
      break;
 8009246:	bf00      	nop
  }
  return USBH_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop

08009254 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b088      	sub	sp, #32
 8009258:	af04      	add	r7, sp, #16
 800925a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800925c:	2301      	movs	r3, #1
 800925e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009260:	2301      	movs	r3, #1
 8009262:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	785b      	ldrb	r3, [r3, #1]
 8009268:	2b07      	cmp	r3, #7
 800926a:	f200 8204 	bhi.w	8009676 <USBH_HandleEnum+0x422>
 800926e:	a201      	add	r2, pc, #4	@ (adr r2, 8009274 <USBH_HandleEnum+0x20>)
 8009270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009274:	08009295 	.word	0x08009295
 8009278:	0800934f 	.word	0x0800934f
 800927c:	080093b9 	.word	0x080093b9
 8009280:	08009443 	.word	0x08009443
 8009284:	080094ad 	.word	0x080094ad
 8009288:	0800951d 	.word	0x0800951d
 800928c:	080095b9 	.word	0x080095b9
 8009290:	08009637 	.word	0x08009637
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009294:	2108      	movs	r1, #8
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fae6 	bl	8009868 <USBH_Get_DevDesc>
 800929c:	4603      	mov	r3, r0
 800929e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80092a0:	7bbb      	ldrb	r3, [r7, #14]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d12e      	bne.n	8009304 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	7919      	ldrb	r1, [r3, #4]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80092ca:	9202      	str	r2, [sp, #8]
 80092cc:	2200      	movs	r2, #0
 80092ce:	9201      	str	r2, [sp, #4]
 80092d0:	9300      	str	r3, [sp, #0]
 80092d2:	4603      	mov	r3, r0
 80092d4:	2280      	movs	r2, #128	@ 0x80
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f001 fa66 	bl	800a7a8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	7959      	ldrb	r1, [r3, #5]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80092f0:	9202      	str	r2, [sp, #8]
 80092f2:	2200      	movs	r2, #0
 80092f4:	9201      	str	r2, [sp, #4]
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	4603      	mov	r3, r0
 80092fa:	2200      	movs	r2, #0
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f001 fa53 	bl	800a7a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009302:	e1ba      	b.n	800967a <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009304:	7bbb      	ldrb	r3, [r7, #14]
 8009306:	2b03      	cmp	r3, #3
 8009308:	f040 81b7 	bne.w	800967a <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009312:	3301      	adds	r3, #1
 8009314:	b2da      	uxtb	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009322:	2b03      	cmp	r3, #3
 8009324:	d903      	bls.n	800932e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	220d      	movs	r2, #13
 800932a:	701a      	strb	r2, [r3, #0]
      break;
 800932c:	e1a5      	b.n	800967a <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	795b      	ldrb	r3, [r3, #5]
 8009332:	4619      	mov	r1, r3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f001 fa87 	bl	800a848 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	791b      	ldrb	r3, [r3, #4]
 800933e:	4619      	mov	r1, r3
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f001 fa81 	bl	800a848 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	701a      	strb	r2, [r3, #0]
      break;
 800934c:	e195      	b.n	800967a <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800934e:	2112      	movs	r1, #18
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 fa89 	bl	8009868 <USBH_Get_DevDesc>
 8009356:	4603      	mov	r3, r0
 8009358:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800935a:	7bbb      	ldrb	r3, [r7, #14]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d103      	bne.n	8009368 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2202      	movs	r2, #2
 8009364:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009366:	e18a      	b.n	800967e <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009368:	7bbb      	ldrb	r3, [r7, #14]
 800936a:	2b03      	cmp	r3, #3
 800936c:	f040 8187 	bne.w	800967e <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009376:	3301      	adds	r3, #1
 8009378:	b2da      	uxtb	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009386:	2b03      	cmp	r3, #3
 8009388:	d903      	bls.n	8009392 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	220d      	movs	r2, #13
 800938e:	701a      	strb	r2, [r3, #0]
      break;
 8009390:	e175      	b.n	800967e <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	795b      	ldrb	r3, [r3, #5]
 8009396:	4619      	mov	r1, r3
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f001 fa55 	bl	800a848 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	791b      	ldrb	r3, [r3, #4]
 80093a2:	4619      	mov	r1, r3
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f001 fa4f 	bl	800a848 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	701a      	strb	r2, [r3, #0]
      break;
 80093b6:	e162      	b.n	800967e <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80093b8:	2101      	movs	r1, #1
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 fb13 	bl	80099e6 <USBH_SetAddress>
 80093c0:	4603      	mov	r3, r0
 80093c2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80093c4:	7bbb      	ldrb	r3, [r7, #14]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d130      	bne.n	800942c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80093ca:	2002      	movs	r0, #2
 80093cc:	f004 f809 	bl	800d3e2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2203      	movs	r2, #3
 80093dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	7919      	ldrb	r1, [r3, #4]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80093f2:	9202      	str	r2, [sp, #8]
 80093f4:	2200      	movs	r2, #0
 80093f6:	9201      	str	r2, [sp, #4]
 80093f8:	9300      	str	r3, [sp, #0]
 80093fa:	4603      	mov	r3, r0
 80093fc:	2280      	movs	r2, #128	@ 0x80
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f001 f9d2 	bl	800a7a8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	7959      	ldrb	r1, [r3, #5]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009418:	9202      	str	r2, [sp, #8]
 800941a:	2200      	movs	r2, #0
 800941c:	9201      	str	r2, [sp, #4]
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	4603      	mov	r3, r0
 8009422:	2200      	movs	r2, #0
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f001 f9bf 	bl	800a7a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800942a:	e12a      	b.n	8009682 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800942c:	7bbb      	ldrb	r3, [r7, #14]
 800942e:	2b03      	cmp	r3, #3
 8009430:	f040 8127 	bne.w	8009682 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	220d      	movs	r2, #13
 8009438:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	705a      	strb	r2, [r3, #1]
      break;
 8009440:	e11f      	b.n	8009682 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009442:	2109      	movs	r1, #9
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 fa3b 	bl	80098c0 <USBH_Get_CfgDesc>
 800944a:	4603      	mov	r3, r0
 800944c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800944e:	7bbb      	ldrb	r3, [r7, #14]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d103      	bne.n	800945c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2204      	movs	r2, #4
 8009458:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800945a:	e114      	b.n	8009686 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800945c:	7bbb      	ldrb	r3, [r7, #14]
 800945e:	2b03      	cmp	r3, #3
 8009460:	f040 8111 	bne.w	8009686 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800946a:	3301      	adds	r3, #1
 800946c:	b2da      	uxtb	r2, r3
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800947a:	2b03      	cmp	r3, #3
 800947c:	d903      	bls.n	8009486 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	220d      	movs	r2, #13
 8009482:	701a      	strb	r2, [r3, #0]
      break;
 8009484:	e0ff      	b.n	8009686 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	795b      	ldrb	r3, [r3, #5]
 800948a:	4619      	mov	r1, r3
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f001 f9db 	bl	800a848 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	791b      	ldrb	r3, [r3, #4]
 8009496:	4619      	mov	r1, r3
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f001 f9d5 	bl	800a848 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	701a      	strb	r2, [r3, #0]
      break;
 80094aa:	e0ec      	b.n	8009686 <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80094b2:	4619      	mov	r1, r3
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 fa03 	bl	80098c0 <USBH_Get_CfgDesc>
 80094ba:	4603      	mov	r3, r0
 80094bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80094be:	7bbb      	ldrb	r3, [r7, #14]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d103      	bne.n	80094cc <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2205      	movs	r2, #5
 80094c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80094ca:	e0de      	b.n	800968a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094cc:	7bbb      	ldrb	r3, [r7, #14]
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	f040 80db 	bne.w	800968a <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80094da:	3301      	adds	r3, #1
 80094dc:	b2da      	uxtb	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80094ea:	2b03      	cmp	r3, #3
 80094ec:	d903      	bls.n	80094f6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	220d      	movs	r2, #13
 80094f2:	701a      	strb	r2, [r3, #0]
      break;
 80094f4:	e0c9      	b.n	800968a <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	795b      	ldrb	r3, [r3, #5]
 80094fa:	4619      	mov	r1, r3
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f001 f9a3 	bl	800a848 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	791b      	ldrb	r3, [r3, #4]
 8009506:	4619      	mov	r1, r3
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f001 f99d 	bl	800a848 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	701a      	strb	r2, [r3, #0]
      break;
 800951a:	e0b6      	b.n	800968a <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009522:	2b00      	cmp	r3, #0
 8009524:	d036      	beq.n	8009594 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009532:	23ff      	movs	r3, #255	@ 0xff
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 f9ed 	bl	8009914 <USBH_Get_StringDesc>
 800953a:	4603      	mov	r3, r0
 800953c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800953e:	7bbb      	ldrb	r3, [r7, #14]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d111      	bne.n	8009568 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2206      	movs	r2, #6
 8009548:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2205      	movs	r2, #5
 800954e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800955e:	2200      	movs	r2, #0
 8009560:	4619      	mov	r1, r3
 8009562:	f001 fa6d 	bl	800aa40 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009566:	e092      	b.n	800968e <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009568:	7bbb      	ldrb	r3, [r7, #14]
 800956a:	2b03      	cmp	r3, #3
 800956c:	f040 808f 	bne.w	800968e <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2206      	movs	r2, #6
 8009574:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2205      	movs	r2, #5
 800957a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800958a:	2200      	movs	r2, #0
 800958c:	4619      	mov	r1, r3
 800958e:	f001 fa57 	bl	800aa40 <osMessagePut>
      break;
 8009592:	e07c      	b.n	800968e <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2206      	movs	r2, #6
 8009598:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2205      	movs	r2, #5
 800959e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80095ae:	2200      	movs	r2, #0
 80095b0:	4619      	mov	r1, r3
 80095b2:	f001 fa45 	bl	800aa40 <osMessagePut>
      break;
 80095b6:	e06a      	b.n	800968e <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d027      	beq.n	8009612 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80095ce:	23ff      	movs	r3, #255	@ 0xff
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 f99f 	bl	8009914 <USBH_Get_StringDesc>
 80095d6:	4603      	mov	r3, r0
 80095d8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80095da:	7bbb      	ldrb	r3, [r7, #14]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d103      	bne.n	80095e8 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2207      	movs	r2, #7
 80095e4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80095e6:	e054      	b.n	8009692 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095e8:	7bbb      	ldrb	r3, [r7, #14]
 80095ea:	2b03      	cmp	r3, #3
 80095ec:	d151      	bne.n	8009692 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2207      	movs	r2, #7
 80095f2:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2205      	movs	r2, #5
 80095f8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009608:	2200      	movs	r2, #0
 800960a:	4619      	mov	r1, r3
 800960c:	f001 fa18 	bl	800aa40 <osMessagePut>
      break;
 8009610:	e03f      	b.n	8009692 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2207      	movs	r2, #7
 8009616:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2205      	movs	r2, #5
 800961c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800962c:	2200      	movs	r2, #0
 800962e:	4619      	mov	r1, r3
 8009630:	f001 fa06 	bl	800aa40 <osMessagePut>
      break;
 8009634:	e02d      	b.n	8009692 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800963c:	2b00      	cmp	r3, #0
 800963e:	d017      	beq.n	8009670 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800964c:	23ff      	movs	r3, #255	@ 0xff
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f960 	bl	8009914 <USBH_Get_StringDesc>
 8009654:	4603      	mov	r3, r0
 8009656:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009658:	7bbb      	ldrb	r3, [r7, #14]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d102      	bne.n	8009664 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800965e:	2300      	movs	r3, #0
 8009660:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009662:	e018      	b.n	8009696 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009664:	7bbb      	ldrb	r3, [r7, #14]
 8009666:	2b03      	cmp	r3, #3
 8009668:	d115      	bne.n	8009696 <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800966a:	2300      	movs	r3, #0
 800966c:	73fb      	strb	r3, [r7, #15]
      break;
 800966e:	e012      	b.n	8009696 <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	73fb      	strb	r3, [r7, #15]
      break;
 8009674:	e00f      	b.n	8009696 <USBH_HandleEnum+0x442>

    default:
      break;
 8009676:	bf00      	nop
 8009678:	e00e      	b.n	8009698 <USBH_HandleEnum+0x444>
      break;
 800967a:	bf00      	nop
 800967c:	e00c      	b.n	8009698 <USBH_HandleEnum+0x444>
      break;
 800967e:	bf00      	nop
 8009680:	e00a      	b.n	8009698 <USBH_HandleEnum+0x444>
      break;
 8009682:	bf00      	nop
 8009684:	e008      	b.n	8009698 <USBH_HandleEnum+0x444>
      break;
 8009686:	bf00      	nop
 8009688:	e006      	b.n	8009698 <USBH_HandleEnum+0x444>
      break;
 800968a:	bf00      	nop
 800968c:	e004      	b.n	8009698 <USBH_HandleEnum+0x444>
      break;
 800968e:	bf00      	nop
 8009690:	e002      	b.n	8009698 <USBH_HandleEnum+0x444>
      break;
 8009692:	bf00      	nop
 8009694:	e000      	b.n	8009698 <USBH_HandleEnum+0x444>
      break;
 8009696:	bf00      	nop
  }
  return Status;
 8009698:	7bfb      	ldrb	r3, [r7, #15]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop

080096a4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	683a      	ldr	r2, [r7, #0]
 80096b2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80096b6:	bf00      	nop
 80096b8:	370c      	adds	r7, #12
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr

080096c2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b082      	sub	sp, #8
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80096d0:	1c5a      	adds	r2, r3, #1
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 f804 	bl	80096e6 <USBH_HandleSof>
}
 80096de:	bf00      	nop
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b082      	sub	sp, #8
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	2b0b      	cmp	r3, #11
 80096f6:	d10a      	bne.n	800970e <USBH_HandleSof+0x28>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d005      	beq.n	800970e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	4798      	blx	r3
  }
}
 800970e:	bf00      	nop
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b082      	sub	sp, #8
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2201      	movs	r2, #1
 800972a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800973a:	2200      	movs	r2, #0
 800973c:	4619      	mov	r1, r3
 800973e:	f001 f97f 	bl	800aa40 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009742:	bf00      	nop
}
 8009744:	3708      	adds	r7, #8
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800974a:	b480      	push	{r7}
 800974c:	b083      	sub	sp, #12
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800975a:	bf00      	nop
}
 800975c:	370c      	adds	r7, #12
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr

08009766 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b082      	sub	sp, #8
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2201      	movs	r2, #1
 8009772:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2201      	movs	r2, #1
 800978a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800979a:	2200      	movs	r2, #0
 800979c:	4619      	mov	r1, r3
 800979e:	f001 f94f 	bl	800aa40 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f003 fcbc 	bl	800d14a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	791b      	ldrb	r3, [r3, #4]
 80097d6:	4619      	mov	r1, r3
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f001 f835 	bl	800a848 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	795b      	ldrb	r3, [r3, #5]
 80097e2:	4619      	mov	r1, r3
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f001 f82f 	bl	800a848 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2201      	movs	r2, #1
 80097ee:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80097fe:	2200      	movs	r2, #0
 8009800:	4619      	mov	r1, r3
 8009802:	f001 f91d 	bl	800aa40 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b086      	sub	sp, #24
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 800981e:	f107 030c 	add.w	r3, r7, #12
 8009822:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009826:	4618      	mov	r0, r3
 8009828:	f001 f94a 	bl	800aac0 <osMessageGet>
    if (event.status == osEventMessage)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2b10      	cmp	r3, #16
 8009830:	d1f2      	bne.n	8009818 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f7ff faa4 	bl	8008d80 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8009838:	e7ee      	b.n	8009818 <USBH_Process_OS+0x8>

0800983a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800983a:	b580      	push	{r7, lr}
 800983c:	b082      	sub	sp, #8
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2201      	movs	r2, #1
 8009846:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009856:	2200      	movs	r2, #0
 8009858:	4619      	mov	r1, r3
 800985a:	f001 f8f1 	bl	800aa40 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af02      	add	r7, sp, #8
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	460b      	mov	r3, r1
 8009872:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009874:	887b      	ldrh	r3, [r7, #2]
 8009876:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800987a:	d901      	bls.n	8009880 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800987c:	2303      	movs	r3, #3
 800987e:	e01b      	b.n	80098b8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009886:	887b      	ldrh	r3, [r7, #2]
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	4613      	mov	r3, r2
 800988c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009890:	2100      	movs	r1, #0
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f872 	bl	800997c <USBH_GetDescriptor>
 8009898:	4603      	mov	r3, r0
 800989a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800989c:	7bfb      	ldrb	r3, [r7, #15]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d109      	bne.n	80098b6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80098a8:	887a      	ldrh	r2, [r7, #2]
 80098aa:	4619      	mov	r1, r3
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 f929 	bl	8009b04 <USBH_ParseDevDesc>
 80098b2:	4603      	mov	r3, r0
 80098b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80098b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3710      	adds	r7, #16
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b086      	sub	sp, #24
 80098c4:	af02      	add	r7, sp, #8
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	460b      	mov	r3, r1
 80098ca:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	331c      	adds	r3, #28
 80098d0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80098d2:	887b      	ldrh	r3, [r7, #2]
 80098d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098d8:	d901      	bls.n	80098de <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80098da:	2303      	movs	r3, #3
 80098dc:	e016      	b.n	800990c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80098de:	887b      	ldrh	r3, [r7, #2]
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098e8:	2100      	movs	r1, #0
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 f846 	bl	800997c <USBH_GetDescriptor>
 80098f0:	4603      	mov	r3, r0
 80098f2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80098f4:	7bfb      	ldrb	r3, [r7, #15]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d107      	bne.n	800990a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80098fa:	887b      	ldrh	r3, [r7, #2]
 80098fc:	461a      	mov	r2, r3
 80098fe:	68b9      	ldr	r1, [r7, #8]
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 f9af 	bl	8009c64 <USBH_ParseCfgDesc>
 8009906:	4603      	mov	r3, r0
 8009908:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800990a:	7bfb      	ldrb	r3, [r7, #15]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3710      	adds	r7, #16
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b088      	sub	sp, #32
 8009918:	af02      	add	r7, sp, #8
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	607a      	str	r2, [r7, #4]
 800991e:	461a      	mov	r2, r3
 8009920:	460b      	mov	r3, r1
 8009922:	72fb      	strb	r3, [r7, #11]
 8009924:	4613      	mov	r3, r2
 8009926:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009928:	893b      	ldrh	r3, [r7, #8]
 800992a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800992e:	d802      	bhi.n	8009936 <USBH_Get_StringDesc+0x22>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d101      	bne.n	800993a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009936:	2303      	movs	r3, #3
 8009938:	e01c      	b.n	8009974 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800993a:	7afb      	ldrb	r3, [r7, #11]
 800993c:	b29b      	uxth	r3, r3
 800993e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009942:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800994a:	893b      	ldrh	r3, [r7, #8]
 800994c:	9300      	str	r3, [sp, #0]
 800994e:	460b      	mov	r3, r1
 8009950:	2100      	movs	r1, #0
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f000 f812 	bl	800997c <USBH_GetDescriptor>
 8009958:	4603      	mov	r3, r0
 800995a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800995c:	7dfb      	ldrb	r3, [r7, #23]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d107      	bne.n	8009972 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009968:	893a      	ldrh	r2, [r7, #8]
 800996a:	6879      	ldr	r1, [r7, #4]
 800996c:	4618      	mov	r0, r3
 800996e:	f000 fb8d 	bl	800a08c <USBH_ParseStringDesc>
  }

  return status;
 8009972:	7dfb      	ldrb	r3, [r7, #23]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3718      	adds	r7, #24
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	607b      	str	r3, [r7, #4]
 8009986:	460b      	mov	r3, r1
 8009988:	72fb      	strb	r3, [r7, #11]
 800998a:	4613      	mov	r3, r2
 800998c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	789b      	ldrb	r3, [r3, #2]
 8009992:	2b01      	cmp	r3, #1
 8009994:	d11c      	bne.n	80099d0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009996:	7afb      	ldrb	r3, [r7, #11]
 8009998:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800999c:	b2da      	uxtb	r2, r3
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2206      	movs	r2, #6
 80099a6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	893a      	ldrh	r2, [r7, #8]
 80099ac:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80099ae:	893b      	ldrh	r3, [r7, #8]
 80099b0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80099b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80099b8:	d104      	bne.n	80099c4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f240 4209 	movw	r2, #1033	@ 0x409
 80099c0:	829a      	strh	r2, [r3, #20]
 80099c2:	e002      	b.n	80099ca <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2200      	movs	r2, #0
 80099c8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	8b3a      	ldrh	r2, [r7, #24]
 80099ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80099d0:	8b3b      	ldrh	r3, [r7, #24]
 80099d2:	461a      	mov	r2, r3
 80099d4:	6879      	ldr	r1, [r7, #4]
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f000 fba5 	bl	800a126 <USBH_CtlReq>
 80099dc:	4603      	mov	r3, r0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b082      	sub	sp, #8
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	460b      	mov	r3, r1
 80099f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	789b      	ldrb	r3, [r3, #2]
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d10f      	bne.n	8009a1a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2205      	movs	r2, #5
 8009a04:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009a06:	78fb      	ldrb	r3, [r7, #3]
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2200      	movs	r2, #0
 8009a12:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fb81 	bl	800a126 <USBH_CtlReq>
 8009a24:	4603      	mov	r3, r0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3708      	adds	r7, #8
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b082      	sub	sp, #8
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
 8009a36:	460b      	mov	r3, r1
 8009a38:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	789b      	ldrb	r3, [r3, #2]
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d10e      	bne.n	8009a60 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2209      	movs	r2, #9
 8009a4c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	887a      	ldrh	r2, [r7, #2]
 8009a52:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009a60:	2200      	movs	r2, #0
 8009a62:	2100      	movs	r1, #0
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 fb5e 	bl	800a126 <USBH_CtlReq>
 8009a6a:	4603      	mov	r3, r0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	789b      	ldrb	r3, [r3, #2]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d10f      	bne.n	8009aa8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2203      	movs	r2, #3
 8009a92:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009a94:	78fb      	ldrb	r3, [r7, #3]
 8009a96:	b29a      	uxth	r2, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	2100      	movs	r1, #0
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 fb3a 	bl	800a126 <USBH_CtlReq>
 8009ab2:	4603      	mov	r3, r0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	789b      	ldrb	r3, [r3, #2]
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d10f      	bne.n	8009af0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2202      	movs	r2, #2
 8009ad4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009ae2:	78fb      	ldrb	r3, [r7, #3]
 8009ae4:	b29a      	uxth	r2, r3
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009af0:	2200      	movs	r2, #0
 8009af2:	2100      	movs	r1, #0
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 fb16 	bl	800a126 <USBH_CtlReq>
 8009afa:	4603      	mov	r3, r0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b087      	sub	sp, #28
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	4613      	mov	r3, r2
 8009b10:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009b18:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d101      	bne.n	8009b28 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009b24:	2302      	movs	r3, #2
 8009b26:	e094      	b.n	8009c52 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	781a      	ldrb	r2, [r3, #0]
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	785a      	ldrb	r2, [r3, #1]
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	3302      	adds	r3, #2
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	3303      	adds	r3, #3
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	021b      	lsls	r3, r3, #8
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	791a      	ldrb	r2, [r3, #4]
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	795a      	ldrb	r2, [r3, #5]
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	799a      	ldrb	r2, [r3, #6]
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	79da      	ldrb	r2, [r3, #7]
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d004      	beq.n	8009b86 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d11b      	bne.n	8009bbe <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	79db      	ldrb	r3, [r3, #7]
 8009b8a:	2b20      	cmp	r3, #32
 8009b8c:	dc0f      	bgt.n	8009bae <USBH_ParseDevDesc+0xaa>
 8009b8e:	2b08      	cmp	r3, #8
 8009b90:	db0f      	blt.n	8009bb2 <USBH_ParseDevDesc+0xae>
 8009b92:	3b08      	subs	r3, #8
 8009b94:	4a32      	ldr	r2, [pc, #200]	@ (8009c60 <USBH_ParseDevDesc+0x15c>)
 8009b96:	fa22 f303 	lsr.w	r3, r2, r3
 8009b9a:	f003 0301 	and.w	r3, r3, #1
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	bf14      	ite	ne
 8009ba2:	2301      	movne	r3, #1
 8009ba4:	2300      	moveq	r3, #0
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d106      	bne.n	8009bba <USBH_ParseDevDesc+0xb6>
 8009bac:	e001      	b.n	8009bb2 <USBH_ParseDevDesc+0xae>
 8009bae:	2b40      	cmp	r3, #64	@ 0x40
 8009bb0:	d003      	beq.n	8009bba <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	2208      	movs	r2, #8
 8009bb6:	71da      	strb	r2, [r3, #7]
        break;
 8009bb8:	e000      	b.n	8009bbc <USBH_ParseDevDesc+0xb8>
        break;
 8009bba:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009bbc:	e00e      	b.n	8009bdc <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	d107      	bne.n	8009bd8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	79db      	ldrb	r3, [r3, #7]
 8009bcc:	2b08      	cmp	r3, #8
 8009bce:	d005      	beq.n	8009bdc <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	2208      	movs	r2, #8
 8009bd4:	71da      	strb	r2, [r3, #7]
 8009bd6:	e001      	b.n	8009bdc <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009bd8:	2303      	movs	r3, #3
 8009bda:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009bdc:	88fb      	ldrh	r3, [r7, #6]
 8009bde:	2b08      	cmp	r3, #8
 8009be0:	d936      	bls.n	8009c50 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	3308      	adds	r3, #8
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	461a      	mov	r2, r3
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	3309      	adds	r3, #9
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	021b      	lsls	r3, r3, #8
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	b29a      	uxth	r2, r3
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	330a      	adds	r3, #10
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	461a      	mov	r2, r3
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	330b      	adds	r3, #11
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	021b      	lsls	r3, r3, #8
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	330c      	adds	r3, #12
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	330d      	adds	r3, #13
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	021b      	lsls	r3, r3, #8
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	b29a      	uxth	r2, r3
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	7b9a      	ldrb	r2, [r3, #14]
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	7bda      	ldrb	r2, [r3, #15]
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	7c1a      	ldrb	r2, [r3, #16]
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	7c5a      	ldrb	r2, [r3, #17]
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	371c      	adds	r7, #28
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	01000101 	.word	0x01000101

08009c64 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b08c      	sub	sp, #48	@ 0x30
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	4613      	mov	r3, r2
 8009c70:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009c78:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009c80:	2300      	movs	r3, #0
 8009c82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009c86:	2300      	movs	r3, #0
 8009c88:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d101      	bne.n	8009c96 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009c92:	2302      	movs	r3, #2
 8009c94:	e0da      	b.n	8009e4c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	781a      	ldrb	r2, [r3, #0]
 8009c9e:	6a3b      	ldr	r3, [r7, #32]
 8009ca0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	785a      	ldrb	r2, [r3, #1]
 8009ca6:	6a3b      	ldr	r3, [r7, #32]
 8009ca8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	3302      	adds	r3, #2
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	3303      	adds	r3, #3
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	021b      	lsls	r3, r3, #8
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cc4:	bf28      	it	cs
 8009cc6:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	6a3b      	ldr	r3, [r7, #32]
 8009cce:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	791a      	ldrb	r2, [r3, #4]
 8009cd4:	6a3b      	ldr	r3, [r7, #32]
 8009cd6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	795a      	ldrb	r2, [r3, #5]
 8009cdc:	6a3b      	ldr	r3, [r7, #32]
 8009cde:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	799a      	ldrb	r2, [r3, #6]
 8009ce4:	6a3b      	ldr	r3, [r7, #32]
 8009ce6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	79da      	ldrb	r2, [r3, #7]
 8009cec:	6a3b      	ldr	r3, [r7, #32]
 8009cee:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	7a1a      	ldrb	r2, [r3, #8]
 8009cf4:	6a3b      	ldr	r3, [r7, #32]
 8009cf6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	2b09      	cmp	r3, #9
 8009cfe:	d002      	beq.n	8009d06 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009d00:	6a3b      	ldr	r3, [r7, #32]
 8009d02:	2209      	movs	r2, #9
 8009d04:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009d06:	88fb      	ldrh	r3, [r7, #6]
 8009d08:	2b09      	cmp	r3, #9
 8009d0a:	f240 809d 	bls.w	8009e48 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009d0e:	2309      	movs	r3, #9
 8009d10:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009d12:	2300      	movs	r3, #0
 8009d14:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009d16:	e081      	b.n	8009e1c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009d18:	f107 0316 	add.w	r3, r7, #22
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d20:	f000 f9e7 	bl	800a0f2 <USBH_GetNextDesc>
 8009d24:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d28:	785b      	ldrb	r3, [r3, #1]
 8009d2a:	2b04      	cmp	r3, #4
 8009d2c:	d176      	bne.n	8009e1c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	2b09      	cmp	r3, #9
 8009d34:	d002      	beq.n	8009d3c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d38:	2209      	movs	r2, #9
 8009d3a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d40:	221a      	movs	r2, #26
 8009d42:	fb02 f303 	mul.w	r3, r2, r3
 8009d46:	3308      	adds	r3, #8
 8009d48:	6a3a      	ldr	r2, [r7, #32]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	3302      	adds	r3, #2
 8009d4e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009d50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d52:	69f8      	ldr	r0, [r7, #28]
 8009d54:	f000 f87e 	bl	8009e54 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009d62:	e043      	b.n	8009dec <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009d64:	f107 0316 	add.w	r3, r7, #22
 8009d68:	4619      	mov	r1, r3
 8009d6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d6c:	f000 f9c1 	bl	800a0f2 <USBH_GetNextDesc>
 8009d70:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d74:	785b      	ldrb	r3, [r3, #1]
 8009d76:	2b05      	cmp	r3, #5
 8009d78:	d138      	bne.n	8009dec <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	795b      	ldrb	r3, [r3, #5]
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d113      	bne.n	8009daa <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d003      	beq.n	8009d92 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	799b      	ldrb	r3, [r3, #6]
 8009d8e:	2b03      	cmp	r3, #3
 8009d90:	d10b      	bne.n	8009daa <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	79db      	ldrb	r3, [r3, #7]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10b      	bne.n	8009db2 <USBH_ParseCfgDesc+0x14e>
 8009d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	2b09      	cmp	r3, #9
 8009da0:	d007      	beq.n	8009db2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009da4:	2209      	movs	r2, #9
 8009da6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009da8:	e003      	b.n	8009db2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dac:	2207      	movs	r2, #7
 8009dae:	701a      	strb	r2, [r3, #0]
 8009db0:	e000      	b.n	8009db4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009db2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009db4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009db8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009dbc:	3201      	adds	r2, #1
 8009dbe:	00d2      	lsls	r2, r2, #3
 8009dc0:	211a      	movs	r1, #26
 8009dc2:	fb01 f303 	mul.w	r3, r1, r3
 8009dc6:	4413      	add	r3, r2
 8009dc8:	3308      	adds	r3, #8
 8009dca:	6a3a      	ldr	r2, [r7, #32]
 8009dcc:	4413      	add	r3, r2
 8009dce:	3304      	adds	r3, #4
 8009dd0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009dd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009dd4:	69b9      	ldr	r1, [r7, #24]
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	f000 f870 	bl	8009ebc <USBH_ParseEPDesc>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009de2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009de6:	3301      	adds	r3, #1
 8009de8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	791b      	ldrb	r3, [r3, #4]
 8009df0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d204      	bcs.n	8009e02 <USBH_ParseCfgDesc+0x19e>
 8009df8:	6a3b      	ldr	r3, [r7, #32]
 8009dfa:	885a      	ldrh	r2, [r3, #2]
 8009dfc:	8afb      	ldrh	r3, [r7, #22]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d8b0      	bhi.n	8009d64 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	791b      	ldrb	r3, [r3, #4]
 8009e06:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d201      	bcs.n	8009e12 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009e0e:	2303      	movs	r3, #3
 8009e10:	e01c      	b.n	8009e4c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009e12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e16:	3301      	adds	r3, #1
 8009e18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d805      	bhi.n	8009e30 <USBH_ParseCfgDesc+0x1cc>
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	885a      	ldrh	r2, [r3, #2]
 8009e28:	8afb      	ldrh	r3, [r7, #22]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	f63f af74 	bhi.w	8009d18 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009e30:	6a3b      	ldr	r3, [r7, #32]
 8009e32:	791b      	ldrb	r3, [r3, #4]
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	bf28      	it	cs
 8009e38:	2302      	movcs	r3, #2
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d201      	bcs.n	8009e48 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009e44:	2303      	movs	r3, #3
 8009e46:	e001      	b.n	8009e4c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009e48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3730      	adds	r7, #48	@ 0x30
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	781a      	ldrb	r2, [r3, #0]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	785a      	ldrb	r2, [r3, #1]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	789a      	ldrb	r2, [r3, #2]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	78da      	ldrb	r2, [r3, #3]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	3304      	adds	r3, #4
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	2b02      	cmp	r3, #2
 8009e86:	bf28      	it	cs
 8009e88:	2302      	movcs	r3, #2
 8009e8a:	b2da      	uxtb	r2, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	795a      	ldrb	r2, [r3, #5]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	799a      	ldrb	r2, [r3, #6]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	79da      	ldrb	r2, [r3, #7]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	7a1a      	ldrb	r2, [r3, #8]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	721a      	strb	r2, [r3, #8]
}
 8009eb0:	bf00      	nop
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b087      	sub	sp, #28
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	781a      	ldrb	r2, [r3, #0]
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	785a      	ldrb	r2, [r3, #1]
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	789a      	ldrb	r2, [r3, #2]
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	78da      	ldrb	r2, [r3, #3]
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	3304      	adds	r3, #4
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	3305      	adds	r3, #5
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	021b      	lsls	r3, r3, #8
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	4313      	orrs	r3, r2
 8009f00:	b29a      	uxth	r2, r3
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	799a      	ldrb	r2, [r3, #6]
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	889b      	ldrh	r3, [r3, #4]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d009      	beq.n	8009f2a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f1e:	d804      	bhi.n	8009f2a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f28:	d901      	bls.n	8009f2e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d136      	bne.n	8009fa6 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	78db      	ldrb	r3, [r3, #3]
 8009f3c:	f003 0303 	and.w	r3, r3, #3
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d108      	bne.n	8009f56 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	889b      	ldrh	r3, [r3, #4]
 8009f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f4c:	f240 8097 	bls.w	800a07e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f50:	2303      	movs	r3, #3
 8009f52:	75fb      	strb	r3, [r7, #23]
 8009f54:	e093      	b.n	800a07e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	78db      	ldrb	r3, [r3, #3]
 8009f5a:	f003 0303 	and.w	r3, r3, #3
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d107      	bne.n	8009f72 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	889b      	ldrh	r3, [r3, #4]
 8009f66:	2b40      	cmp	r3, #64	@ 0x40
 8009f68:	f240 8089 	bls.w	800a07e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f6c:	2303      	movs	r3, #3
 8009f6e:	75fb      	strb	r3, [r7, #23]
 8009f70:	e085      	b.n	800a07e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	78db      	ldrb	r3, [r3, #3]
 8009f76:	f003 0303 	and.w	r3, r3, #3
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d005      	beq.n	8009f8a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	78db      	ldrb	r3, [r3, #3]
 8009f82:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009f86:	2b03      	cmp	r3, #3
 8009f88:	d10a      	bne.n	8009fa0 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	799b      	ldrb	r3, [r3, #6]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d003      	beq.n	8009f9a <USBH_ParseEPDesc+0xde>
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	799b      	ldrb	r3, [r3, #6]
 8009f96:	2b10      	cmp	r3, #16
 8009f98:	d970      	bls.n	800a07c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009f9e:	e06d      	b.n	800a07c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009fa0:	2303      	movs	r3, #3
 8009fa2:	75fb      	strb	r3, [r7, #23]
 8009fa4:	e06b      	b.n	800a07e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d13c      	bne.n	800a02a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	78db      	ldrb	r3, [r3, #3]
 8009fb4:	f003 0303 	and.w	r3, r3, #3
 8009fb8:	2b02      	cmp	r3, #2
 8009fba:	d005      	beq.n	8009fc8 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	78db      	ldrb	r3, [r3, #3]
 8009fc0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d106      	bne.n	8009fd6 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	889b      	ldrh	r3, [r3, #4]
 8009fcc:	2b40      	cmp	r3, #64	@ 0x40
 8009fce:	d956      	bls.n	800a07e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009fd4:	e053      	b.n	800a07e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	78db      	ldrb	r3, [r3, #3]
 8009fda:	f003 0303 	and.w	r3, r3, #3
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d10e      	bne.n	800a000 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	799b      	ldrb	r3, [r3, #6]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d007      	beq.n	8009ffa <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009fee:	2b10      	cmp	r3, #16
 8009ff0:	d803      	bhi.n	8009ffa <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009ff6:	2b40      	cmp	r3, #64	@ 0x40
 8009ff8:	d941      	bls.n	800a07e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	75fb      	strb	r3, [r7, #23]
 8009ffe:	e03e      	b.n	800a07e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	78db      	ldrb	r3, [r3, #3]
 800a004:	f003 0303 	and.w	r3, r3, #3
 800a008:	2b03      	cmp	r3, #3
 800a00a:	d10b      	bne.n	800a024 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	799b      	ldrb	r3, [r3, #6]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d004      	beq.n	800a01e <USBH_ParseEPDesc+0x162>
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	889b      	ldrh	r3, [r3, #4]
 800a018:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a01c:	d32f      	bcc.n	800a07e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a01e:	2303      	movs	r3, #3
 800a020:	75fb      	strb	r3, [r7, #23]
 800a022:	e02c      	b.n	800a07e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a024:	2303      	movs	r3, #3
 800a026:	75fb      	strb	r3, [r7, #23]
 800a028:	e029      	b.n	800a07e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a030:	2b02      	cmp	r3, #2
 800a032:	d120      	bne.n	800a076 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	78db      	ldrb	r3, [r3, #3]
 800a038:	f003 0303 	and.w	r3, r3, #3
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d106      	bne.n	800a04e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	889b      	ldrh	r3, [r3, #4]
 800a044:	2b08      	cmp	r3, #8
 800a046:	d01a      	beq.n	800a07e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a048:	2303      	movs	r3, #3
 800a04a:	75fb      	strb	r3, [r7, #23]
 800a04c:	e017      	b.n	800a07e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	78db      	ldrb	r3, [r3, #3]
 800a052:	f003 0303 	and.w	r3, r3, #3
 800a056:	2b03      	cmp	r3, #3
 800a058:	d10a      	bne.n	800a070 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	799b      	ldrb	r3, [r3, #6]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d003      	beq.n	800a06a <USBH_ParseEPDesc+0x1ae>
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	889b      	ldrh	r3, [r3, #4]
 800a066:	2b08      	cmp	r3, #8
 800a068:	d909      	bls.n	800a07e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a06a:	2303      	movs	r3, #3
 800a06c:	75fb      	strb	r3, [r7, #23]
 800a06e:	e006      	b.n	800a07e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a070:	2303      	movs	r3, #3
 800a072:	75fb      	strb	r3, [r7, #23]
 800a074:	e003      	b.n	800a07e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a076:	2303      	movs	r3, #3
 800a078:	75fb      	strb	r3, [r7, #23]
 800a07a:	e000      	b.n	800a07e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a07c:	bf00      	nop
  }

  return status;
 800a07e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a080:	4618      	mov	r0, r3
 800a082:	371c      	adds	r7, #28
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b087      	sub	sp, #28
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	4613      	mov	r3, r2
 800a098:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	3301      	adds	r3, #1
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	2b03      	cmp	r3, #3
 800a0a2:	d120      	bne.n	800a0e6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	1e9a      	subs	r2, r3, #2
 800a0aa:	88fb      	ldrh	r3, [r7, #6]
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	bf28      	it	cs
 800a0b0:	4613      	movcs	r3, r2
 800a0b2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	3302      	adds	r3, #2
 800a0b8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	82fb      	strh	r3, [r7, #22]
 800a0be:	e00b      	b.n	800a0d8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a0c0:	8afb      	ldrh	r3, [r7, #22]
 800a0c2:	68fa      	ldr	r2, [r7, #12]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	781a      	ldrb	r2, [r3, #0]
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a0d2:	8afb      	ldrh	r3, [r7, #22]
 800a0d4:	3302      	adds	r3, #2
 800a0d6:	82fb      	strh	r3, [r7, #22]
 800a0d8:	8afa      	ldrh	r2, [r7, #22]
 800a0da:	8abb      	ldrh	r3, [r7, #20]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d3ef      	bcc.n	800a0c0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	701a      	strb	r2, [r3, #0]
  }
}
 800a0e6:	bf00      	nop
 800a0e8:	371c      	adds	r7, #28
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr

0800a0f2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a0f2:	b480      	push	{r7}
 800a0f4:	b085      	sub	sp, #20
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
 800a0fa:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	881b      	ldrh	r3, [r3, #0]
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	7812      	ldrb	r2, [r2, #0]
 800a104:	4413      	add	r3, r2
 800a106:	b29a      	uxth	r2, r3
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4413      	add	r3, r2
 800a116:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a118:	68fb      	ldr	r3, [r7, #12]
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3714      	adds	r7, #20
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr

0800a126 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a126:	b580      	push	{r7, lr}
 800a128:	b086      	sub	sp, #24
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	60f8      	str	r0, [r7, #12]
 800a12e:	60b9      	str	r1, [r7, #8]
 800a130:	4613      	mov	r3, r2
 800a132:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a134:	2301      	movs	r3, #1
 800a136:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	789b      	ldrb	r3, [r3, #2]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d002      	beq.n	800a146 <USBH_CtlReq+0x20>
 800a140:	2b02      	cmp	r3, #2
 800a142:	d01d      	beq.n	800a180 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800a144:	e043      	b.n	800a1ce <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	68ba      	ldr	r2, [r7, #8]
 800a14a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	88fa      	ldrh	r2, [r7, #6]
 800a150:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2201      	movs	r2, #1
 800a156:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2202      	movs	r2, #2
 800a15c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a15e:	2301      	movs	r3, #1
 800a160:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2203      	movs	r2, #3
 800a166:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a176:	2200      	movs	r2, #0
 800a178:	4619      	mov	r1, r3
 800a17a:	f000 fc61 	bl	800aa40 <osMessagePut>
      break;
 800a17e:	e026      	b.n	800a1ce <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f000 f829 	bl	800a1d8 <USBH_HandleControl>
 800a186:	4603      	mov	r3, r0
 800a188:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a18a:	7dfb      	ldrb	r3, [r7, #23]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d002      	beq.n	800a196 <USBH_CtlReq+0x70>
 800a190:	7dfb      	ldrb	r3, [r7, #23]
 800a192:	2b03      	cmp	r3, #3
 800a194:	d106      	bne.n	800a1a4 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2201      	movs	r2, #1
 800a19a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	761a      	strb	r2, [r3, #24]
 800a1a2:	e005      	b.n	800a1b0 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800a1a4:	7dfb      	ldrb	r3, [r7, #23]
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	d102      	bne.n	800a1b0 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2203      	movs	r2, #3
 800a1b4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	f000 fc3a 	bl	800aa40 <osMessagePut>
      break;
 800a1cc:	bf00      	nop
  }
  return status;
 800a1ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3718      	adds	r7, #24
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af02      	add	r7, sp, #8
 800a1de:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	7e1b      	ldrb	r3, [r3, #24]
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	2b0a      	cmp	r3, #10
 800a1f0:	f200 8229 	bhi.w	800a646 <USBH_HandleControl+0x46e>
 800a1f4:	a201      	add	r2, pc, #4	@ (adr r2, 800a1fc <USBH_HandleControl+0x24>)
 800a1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fa:	bf00      	nop
 800a1fc:	0800a229 	.word	0x0800a229
 800a200:	0800a243 	.word	0x0800a243
 800a204:	0800a2e5 	.word	0x0800a2e5
 800a208:	0800a30b 	.word	0x0800a30b
 800a20c:	0800a397 	.word	0x0800a397
 800a210:	0800a3c1 	.word	0x0800a3c1
 800a214:	0800a483 	.word	0x0800a483
 800a218:	0800a4a5 	.word	0x0800a4a5
 800a21c:	0800a537 	.word	0x0800a537
 800a220:	0800a55d 	.word	0x0800a55d
 800a224:	0800a5ef 	.word	0x0800a5ef
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f103 0110 	add.w	r1, r3, #16
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	795b      	ldrb	r3, [r3, #5]
 800a232:	461a      	mov	r2, r3
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 fa17 	bl	800a668 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2202      	movs	r2, #2
 800a23e:	761a      	strb	r2, [r3, #24]
      break;
 800a240:	e20c      	b.n	800a65c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	795b      	ldrb	r3, [r3, #5]
 800a246:	4619      	mov	r1, r3
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f003 f86d 	bl	800d328 <USBH_LL_GetURBState>
 800a24e:	4603      	mov	r3, r0
 800a250:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a252:	7bbb      	ldrb	r3, [r7, #14]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d12c      	bne.n	800a2b2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	7c1b      	ldrb	r3, [r3, #16]
 800a25c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a260:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	8adb      	ldrh	r3, [r3, #22]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00a      	beq.n	800a280 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a26a:	7b7b      	ldrb	r3, [r7, #13]
 800a26c:	2b80      	cmp	r3, #128	@ 0x80
 800a26e:	d103      	bne.n	800a278 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2203      	movs	r2, #3
 800a274:	761a      	strb	r2, [r3, #24]
 800a276:	e00d      	b.n	800a294 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2205      	movs	r2, #5
 800a27c:	761a      	strb	r2, [r3, #24]
 800a27e:	e009      	b.n	800a294 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800a280:	7b7b      	ldrb	r3, [r7, #13]
 800a282:	2b80      	cmp	r3, #128	@ 0x80
 800a284:	d103      	bne.n	800a28e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2209      	movs	r2, #9
 800a28a:	761a      	strb	r2, [r3, #24]
 800a28c:	e002      	b.n	800a294 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2207      	movs	r2, #7
 800a292:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2203      	movs	r2, #3
 800a298:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	f000 fbc8 	bl	800aa40 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a2b0:	e1cb      	b.n	800a64a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a2b2:	7bbb      	ldrb	r3, [r7, #14]
 800a2b4:	2b04      	cmp	r3, #4
 800a2b6:	d003      	beq.n	800a2c0 <USBH_HandleControl+0xe8>
 800a2b8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ba:	2b02      	cmp	r3, #2
 800a2bc:	f040 81c5 	bne.w	800a64a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	220b      	movs	r2, #11
 800a2c4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2203      	movs	r2, #3
 800a2ca:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a2da:	2200      	movs	r2, #0
 800a2dc:	4619      	mov	r1, r3
 800a2de:	f000 fbaf 	bl	800aa40 <osMessagePut>
      break;
 800a2e2:	e1b2      	b.n	800a64a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a2ea:	b29a      	uxth	r2, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6899      	ldr	r1, [r3, #8]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	899a      	ldrh	r2, [r3, #12]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	791b      	ldrb	r3, [r3, #4]
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 f9f2 	bl	800a6e6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2204      	movs	r2, #4
 800a306:	761a      	strb	r2, [r3, #24]
      break;
 800a308:	e1a8      	b.n	800a65c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	791b      	ldrb	r3, [r3, #4]
 800a30e:	4619      	mov	r1, r3
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f003 f809 	bl	800d328 <USBH_LL_GetURBState>
 800a316:	4603      	mov	r3, r0
 800a318:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a31a:	7bbb      	ldrb	r3, [r7, #14]
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d110      	bne.n	800a342 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2209      	movs	r2, #9
 800a324:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2203      	movs	r2, #3
 800a32a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a33a:	2200      	movs	r2, #0
 800a33c:	4619      	mov	r1, r3
 800a33e:	f000 fb7f 	bl	800aa40 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a342:	7bbb      	ldrb	r3, [r7, #14]
 800a344:	2b05      	cmp	r3, #5
 800a346:	d110      	bne.n	800a36a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a348:	2303      	movs	r3, #3
 800a34a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2203      	movs	r2, #3
 800a350:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a360:	2200      	movs	r2, #0
 800a362:	4619      	mov	r1, r3
 800a364:	f000 fb6c 	bl	800aa40 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a368:	e171      	b.n	800a64e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800a36a:	7bbb      	ldrb	r3, [r7, #14]
 800a36c:	2b04      	cmp	r3, #4
 800a36e:	f040 816e 	bne.w	800a64e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	220b      	movs	r2, #11
 800a376:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2203      	movs	r2, #3
 800a37c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a38c:	2200      	movs	r2, #0
 800a38e:	4619      	mov	r1, r3
 800a390:	f000 fb56 	bl	800aa40 <osMessagePut>
      break;
 800a394:	e15b      	b.n	800a64e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6899      	ldr	r1, [r3, #8]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	899a      	ldrh	r2, [r3, #12]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	795b      	ldrb	r3, [r3, #5]
 800a3a2:	2001      	movs	r0, #1
 800a3a4:	9000      	str	r0, [sp, #0]
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 f978 	bl	800a69c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a3b2:	b29a      	uxth	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2206      	movs	r2, #6
 800a3bc:	761a      	strb	r2, [r3, #24]
      break;
 800a3be:	e14d      	b.n	800a65c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	795b      	ldrb	r3, [r3, #5]
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f002 ffae 	bl	800d328 <USBH_LL_GetURBState>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a3d0:	7bbb      	ldrb	r3, [r7, #14]
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d111      	bne.n	800a3fa <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2207      	movs	r2, #7
 800a3da:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2203      	movs	r2, #3
 800a3e0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	f000 fb24 	bl	800aa40 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a3f8:	e12b      	b.n	800a652 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800a3fa:	7bbb      	ldrb	r3, [r7, #14]
 800a3fc:	2b05      	cmp	r3, #5
 800a3fe:	d113      	bne.n	800a428 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	220c      	movs	r2, #12
 800a404:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a406:	2303      	movs	r3, #3
 800a408:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2203      	movs	r2, #3
 800a40e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a41e:	2200      	movs	r2, #0
 800a420:	4619      	mov	r1, r3
 800a422:	f000 fb0d 	bl	800aa40 <osMessagePut>
      break;
 800a426:	e114      	b.n	800a652 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a428:	7bbb      	ldrb	r3, [r7, #14]
 800a42a:	2b02      	cmp	r3, #2
 800a42c:	d111      	bne.n	800a452 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2205      	movs	r2, #5
 800a432:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2203      	movs	r2, #3
 800a438:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a448:	2200      	movs	r2, #0
 800a44a:	4619      	mov	r1, r3
 800a44c:	f000 faf8 	bl	800aa40 <osMessagePut>
      break;
 800a450:	e0ff      	b.n	800a652 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800a452:	7bbb      	ldrb	r3, [r7, #14]
 800a454:	2b04      	cmp	r3, #4
 800a456:	f040 80fc 	bne.w	800a652 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	220b      	movs	r2, #11
 800a45e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a460:	2302      	movs	r3, #2
 800a462:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2203      	movs	r2, #3
 800a468:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a478:	2200      	movs	r2, #0
 800a47a:	4619      	mov	r1, r3
 800a47c:	f000 fae0 	bl	800aa40 <osMessagePut>
      break;
 800a480:	e0e7      	b.n	800a652 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	791b      	ldrb	r3, [r3, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	2100      	movs	r1, #0
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 f92b 	bl	800a6e6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a496:	b29a      	uxth	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2208      	movs	r2, #8
 800a4a0:	761a      	strb	r2, [r3, #24]

      break;
 800a4a2:	e0db      	b.n	800a65c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	791b      	ldrb	r3, [r3, #4]
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f002 ff3c 	bl	800d328 <USBH_LL_GetURBState>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a4b4:	7bbb      	ldrb	r3, [r7, #14]
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d113      	bne.n	800a4e2 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	220d      	movs	r2, #13
 800a4be:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2203      	movs	r2, #3
 800a4c8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a4d8:	2200      	movs	r2, #0
 800a4da:	4619      	mov	r1, r3
 800a4dc:	f000 fab0 	bl	800aa40 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a4e0:	e0b9      	b.n	800a656 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800a4e2:	7bbb      	ldrb	r3, [r7, #14]
 800a4e4:	2b04      	cmp	r3, #4
 800a4e6:	d111      	bne.n	800a50c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	220b      	movs	r2, #11
 800a4ec:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2203      	movs	r2, #3
 800a4f2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a502:	2200      	movs	r2, #0
 800a504:	4619      	mov	r1, r3
 800a506:	f000 fa9b 	bl	800aa40 <osMessagePut>
      break;
 800a50a:	e0a4      	b.n	800a656 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800a50c:	7bbb      	ldrb	r3, [r7, #14]
 800a50e:	2b05      	cmp	r3, #5
 800a510:	f040 80a1 	bne.w	800a656 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800a514:	2303      	movs	r3, #3
 800a516:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2203      	movs	r2, #3
 800a51c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a52c:	2200      	movs	r2, #0
 800a52e:	4619      	mov	r1, r3
 800a530:	f000 fa86 	bl	800aa40 <osMessagePut>
      break;
 800a534:	e08f      	b.n	800a656 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	795b      	ldrb	r3, [r3, #5]
 800a53a:	2201      	movs	r2, #1
 800a53c:	9200      	str	r2, [sp, #0]
 800a53e:	2200      	movs	r2, #0
 800a540:	2100      	movs	r1, #0
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 f8aa 	bl	800a69c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a54e:	b29a      	uxth	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	220a      	movs	r2, #10
 800a558:	761a      	strb	r2, [r3, #24]
      break;
 800a55a:	e07f      	b.n	800a65c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	795b      	ldrb	r3, [r3, #5]
 800a560:	4619      	mov	r1, r3
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f002 fee0 	bl	800d328 <USBH_LL_GetURBState>
 800a568:	4603      	mov	r3, r0
 800a56a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a56c:	7bbb      	ldrb	r3, [r7, #14]
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d113      	bne.n	800a59a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800a572:	2300      	movs	r3, #0
 800a574:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	220d      	movs	r2, #13
 800a57a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2203      	movs	r2, #3
 800a580:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a590:	2200      	movs	r2, #0
 800a592:	4619      	mov	r1, r3
 800a594:	f000 fa54 	bl	800aa40 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a598:	e05f      	b.n	800a65a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a59a:	7bbb      	ldrb	r3, [r7, #14]
 800a59c:	2b02      	cmp	r3, #2
 800a59e:	d111      	bne.n	800a5c4 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2209      	movs	r2, #9
 800a5a4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2203      	movs	r2, #3
 800a5aa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	4619      	mov	r1, r3
 800a5be:	f000 fa3f 	bl	800aa40 <osMessagePut>
      break;
 800a5c2:	e04a      	b.n	800a65a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800a5c4:	7bbb      	ldrb	r3, [r7, #14]
 800a5c6:	2b04      	cmp	r3, #4
 800a5c8:	d147      	bne.n	800a65a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	220b      	movs	r2, #11
 800a5ce:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2203      	movs	r2, #3
 800a5d4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	f000 fa2a 	bl	800aa40 <osMessagePut>
      break;
 800a5ec:	e035      	b.n	800a65a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	7e5b      	ldrb	r3, [r3, #25]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	b2da      	uxtb	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	765a      	strb	r2, [r3, #25]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	7e5b      	ldrb	r3, [r3, #25]
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d806      	bhi.n	800a610 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2201      	movs	r2, #1
 800a606:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a60e:	e025      	b.n	800a65c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a616:	2106      	movs	r1, #6
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	795b      	ldrb	r3, [r3, #5]
 800a626:	4619      	mov	r1, r3
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 f90d 	bl	800a848 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	791b      	ldrb	r3, [r3, #4]
 800a632:	4619      	mov	r1, r3
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 f907 	bl	800a848 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a640:	2302      	movs	r3, #2
 800a642:	73fb      	strb	r3, [r7, #15]
      break;
 800a644:	e00a      	b.n	800a65c <USBH_HandleControl+0x484>

    default:
      break;
 800a646:	bf00      	nop
 800a648:	e008      	b.n	800a65c <USBH_HandleControl+0x484>
      break;
 800a64a:	bf00      	nop
 800a64c:	e006      	b.n	800a65c <USBH_HandleControl+0x484>
      break;
 800a64e:	bf00      	nop
 800a650:	e004      	b.n	800a65c <USBH_HandleControl+0x484>
      break;
 800a652:	bf00      	nop
 800a654:	e002      	b.n	800a65c <USBH_HandleControl+0x484>
      break;
 800a656:	bf00      	nop
 800a658:	e000      	b.n	800a65c <USBH_HandleControl+0x484>
      break;
 800a65a:	bf00      	nop
  }

  return status;
 800a65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop

0800a668 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b088      	sub	sp, #32
 800a66c:	af04      	add	r7, sp, #16
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	4613      	mov	r3, r2
 800a674:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a676:	79f9      	ldrb	r1, [r7, #7]
 800a678:	2300      	movs	r3, #0
 800a67a:	9303      	str	r3, [sp, #12]
 800a67c:	2308      	movs	r3, #8
 800a67e:	9302      	str	r3, [sp, #8]
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	9301      	str	r3, [sp, #4]
 800a684:	2300      	movs	r3, #0
 800a686:	9300      	str	r3, [sp, #0]
 800a688:	2300      	movs	r3, #0
 800a68a:	2200      	movs	r2, #0
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	f002 fe1a 	bl	800d2c6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	3710      	adds	r7, #16
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b088      	sub	sp, #32
 800a6a0:	af04      	add	r7, sp, #16
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	4611      	mov	r1, r2
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	80fb      	strh	r3, [r7, #6]
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d001      	beq.n	800a6c0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a6c0:	7979      	ldrb	r1, [r7, #5]
 800a6c2:	7e3b      	ldrb	r3, [r7, #24]
 800a6c4:	9303      	str	r3, [sp, #12]
 800a6c6:	88fb      	ldrh	r3, [r7, #6]
 800a6c8:	9302      	str	r3, [sp, #8]
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	9301      	str	r3, [sp, #4]
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f002 fdf5 	bl	800d2c6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a6dc:	2300      	movs	r3, #0
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a6e6:	b580      	push	{r7, lr}
 800a6e8:	b088      	sub	sp, #32
 800a6ea:	af04      	add	r7, sp, #16
 800a6ec:	60f8      	str	r0, [r7, #12]
 800a6ee:	60b9      	str	r1, [r7, #8]
 800a6f0:	4611      	mov	r1, r2
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	80fb      	strh	r3, [r7, #6]
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a6fc:	7979      	ldrb	r1, [r7, #5]
 800a6fe:	2300      	movs	r3, #0
 800a700:	9303      	str	r3, [sp, #12]
 800a702:	88fb      	ldrh	r3, [r7, #6]
 800a704:	9302      	str	r3, [sp, #8]
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	9301      	str	r3, [sp, #4]
 800a70a:	2301      	movs	r3, #1
 800a70c:	9300      	str	r3, [sp, #0]
 800a70e:	2300      	movs	r3, #0
 800a710:	2201      	movs	r2, #1
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f002 fdd7 	bl	800d2c6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a718:	2300      	movs	r3, #0

}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3710      	adds	r7, #16
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a722:	b580      	push	{r7, lr}
 800a724:	b088      	sub	sp, #32
 800a726:	af04      	add	r7, sp, #16
 800a728:	60f8      	str	r0, [r7, #12]
 800a72a:	60b9      	str	r1, [r7, #8]
 800a72c:	4611      	mov	r1, r2
 800a72e:	461a      	mov	r2, r3
 800a730:	460b      	mov	r3, r1
 800a732:	80fb      	strh	r3, [r7, #6]
 800a734:	4613      	mov	r3, r2
 800a736:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d001      	beq.n	800a746 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a742:	2300      	movs	r3, #0
 800a744:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a746:	7979      	ldrb	r1, [r7, #5]
 800a748:	7e3b      	ldrb	r3, [r7, #24]
 800a74a:	9303      	str	r3, [sp, #12]
 800a74c:	88fb      	ldrh	r3, [r7, #6]
 800a74e:	9302      	str	r3, [sp, #8]
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	9301      	str	r3, [sp, #4]
 800a754:	2301      	movs	r3, #1
 800a756:	9300      	str	r3, [sp, #0]
 800a758:	2302      	movs	r3, #2
 800a75a:	2200      	movs	r2, #0
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f002 fdb2 	bl	800d2c6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a762:	2300      	movs	r3, #0
}
 800a764:	4618      	mov	r0, r3
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b088      	sub	sp, #32
 800a770:	af04      	add	r7, sp, #16
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	4611      	mov	r1, r2
 800a778:	461a      	mov	r2, r3
 800a77a:	460b      	mov	r3, r1
 800a77c:	80fb      	strh	r3, [r7, #6]
 800a77e:	4613      	mov	r3, r2
 800a780:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a782:	7979      	ldrb	r1, [r7, #5]
 800a784:	2300      	movs	r3, #0
 800a786:	9303      	str	r3, [sp, #12]
 800a788:	88fb      	ldrh	r3, [r7, #6]
 800a78a:	9302      	str	r3, [sp, #8]
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	9301      	str	r3, [sp, #4]
 800a790:	2301      	movs	r3, #1
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	2302      	movs	r3, #2
 800a796:	2201      	movs	r2, #1
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f002 fd94 	bl	800d2c6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a79e:	2300      	movs	r3, #0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b086      	sub	sp, #24
 800a7ac:	af04      	add	r7, sp, #16
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	4608      	mov	r0, r1
 800a7b2:	4611      	mov	r1, r2
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	70fb      	strb	r3, [r7, #3]
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	70bb      	strb	r3, [r7, #2]
 800a7be:	4613      	mov	r3, r2
 800a7c0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a7c2:	7878      	ldrb	r0, [r7, #1]
 800a7c4:	78ba      	ldrb	r2, [r7, #2]
 800a7c6:	78f9      	ldrb	r1, [r7, #3]
 800a7c8:	8b3b      	ldrh	r3, [r7, #24]
 800a7ca:	9302      	str	r3, [sp, #8]
 800a7cc:	7d3b      	ldrb	r3, [r7, #20]
 800a7ce:	9301      	str	r3, [sp, #4]
 800a7d0:	7c3b      	ldrb	r3, [r7, #16]
 800a7d2:	9300      	str	r3, [sp, #0]
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f002 fd27 	bl	800d22a <USBH_LL_OpenPipe>

  return USBH_OK;
 800a7dc:	2300      	movs	r3, #0
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3708      	adds	r7, #8
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a7e6:	b580      	push	{r7, lr}
 800a7e8:	b082      	sub	sp, #8
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a7f2:	78fb      	ldrb	r3, [r7, #3]
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f002 fd46 	bl	800d288 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a7fc:	2300      	movs	r3, #0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3708      	adds	r7, #8
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b084      	sub	sp, #16
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
 800a80e:	460b      	mov	r3, r1
 800a810:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 f836 	bl	800a884 <USBH_GetFreePipe>
 800a818:	4603      	mov	r3, r0
 800a81a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a81c:	89fb      	ldrh	r3, [r7, #14]
 800a81e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a822:	4293      	cmp	r3, r2
 800a824:	d00a      	beq.n	800a83c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a826:	78fa      	ldrb	r2, [r7, #3]
 800a828:	89fb      	ldrh	r3, [r7, #14]
 800a82a:	f003 030f 	and.w	r3, r3, #15
 800a82e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a832:	6879      	ldr	r1, [r7, #4]
 800a834:	33e0      	adds	r3, #224	@ 0xe0
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	440b      	add	r3, r1
 800a83a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a83c:	89fb      	ldrh	r3, [r7, #14]
 800a83e:	b2db      	uxtb	r3, r3
}
 800a840:	4618      	mov	r0, r3
 800a842:	3710      	adds	r7, #16
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	460b      	mov	r3, r1
 800a852:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a854:	78fb      	ldrb	r3, [r7, #3]
 800a856:	2b0f      	cmp	r3, #15
 800a858:	d80d      	bhi.n	800a876 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a85a:	78fb      	ldrb	r3, [r7, #3]
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	33e0      	adds	r3, #224	@ 0xe0
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	4413      	add	r3, r2
 800a864:	685a      	ldr	r2, [r3, #4]
 800a866:	78fb      	ldrb	r3, [r7, #3]
 800a868:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a86c:	6879      	ldr	r1, [r7, #4]
 800a86e:	33e0      	adds	r3, #224	@ 0xe0
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	440b      	add	r3, r1
 800a874:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a876:	2300      	movs	r3, #0
}
 800a878:	4618      	mov	r0, r3
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a88c:	2300      	movs	r3, #0
 800a88e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a890:	2300      	movs	r3, #0
 800a892:	73fb      	strb	r3, [r7, #15]
 800a894:	e00f      	b.n	800a8b6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a896:	7bfb      	ldrb	r3, [r7, #15]
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	33e0      	adds	r3, #224	@ 0xe0
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	4413      	add	r3, r2
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d102      	bne.n	800a8b0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a8aa:	7bfb      	ldrb	r3, [r7, #15]
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	e007      	b.n	800a8c0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a8b0:	7bfb      	ldrb	r3, [r7, #15]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	73fb      	strb	r3, [r7, #15]
 800a8b6:	7bfb      	ldrb	r3, [r7, #15]
 800a8b8:	2b0f      	cmp	r3, #15
 800a8ba:	d9ec      	bls.n	800a896 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a8bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3714      	adds	r7, #20
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a8da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a8de:	2b84      	cmp	r3, #132	@ 0x84
 800a8e0:	d005      	beq.n	800a8ee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a8e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	3303      	adds	r3, #3
 800a8ec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3714      	adds	r7, #20
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a902:	f3ef 8305 	mrs	r3, IPSR
 800a906:	607b      	str	r3, [r7, #4]
  return(result);
 800a908:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	bf14      	ite	ne
 800a90e:	2301      	movne	r3, #1
 800a910:	2300      	moveq	r3, #0
 800a912:	b2db      	uxtb	r3, r3
}
 800a914:	4618      	mov	r0, r3
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a924:	f001 f922 	bl	800bb6c <vTaskStartScheduler>
  
  return osOK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a92e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a930:	b089      	sub	sp, #36	@ 0x24
 800a932:	af04      	add	r7, sp, #16
 800a934:	6078      	str	r0, [r7, #4]
 800a936:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	695b      	ldr	r3, [r3, #20]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d020      	beq.n	800a982 <osThreadCreate+0x54>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	699b      	ldr	r3, [r3, #24]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d01c      	beq.n	800a982 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	685c      	ldr	r4, [r3, #4]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	691e      	ldr	r6, [r3, #16]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7ff ffb6 	bl	800a8cc <makeFreeRtosPriority>
 800a960:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	695b      	ldr	r3, [r3, #20]
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a96a:	9202      	str	r2, [sp, #8]
 800a96c:	9301      	str	r3, [sp, #4]
 800a96e:	9100      	str	r1, [sp, #0]
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	4632      	mov	r2, r6
 800a974:	4629      	mov	r1, r5
 800a976:	4620      	mov	r0, r4
 800a978:	f000 ff20 	bl	800b7bc <xTaskCreateStatic>
 800a97c:	4603      	mov	r3, r0
 800a97e:	60fb      	str	r3, [r7, #12]
 800a980:	e01c      	b.n	800a9bc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	685c      	ldr	r4, [r3, #4]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a98e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a996:	4618      	mov	r0, r3
 800a998:	f7ff ff98 	bl	800a8cc <makeFreeRtosPriority>
 800a99c:	4602      	mov	r2, r0
 800a99e:	f107 030c 	add.w	r3, r7, #12
 800a9a2:	9301      	str	r3, [sp, #4]
 800a9a4:	9200      	str	r2, [sp, #0]
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	4632      	mov	r2, r6
 800a9aa:	4629      	mov	r1, r5
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	f000 ff65 	bl	800b87c <xTaskCreate>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d001      	beq.n	800a9bc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	e000      	b.n	800a9be <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3714      	adds	r7, #20
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a9c6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a9c6:	b580      	push	{r7, lr}
 800a9c8:	b084      	sub	sp, #16
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d001      	beq.n	800a9dc <osDelay+0x16>
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	e000      	b.n	800a9de <osDelay+0x18>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f001 f88e 	bl	800bb00 <vTaskDelay>
  
  return osOK;
 800a9e4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a9ee:	b590      	push	{r4, r7, lr}
 800a9f0:	b085      	sub	sp, #20
 800a9f2:	af02      	add	r7, sp, #8
 800a9f4:	6078      	str	r0, [r7, #4]
 800a9f6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d011      	beq.n	800aa24 <osMessageCreate+0x36>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00d      	beq.n	800aa24 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6818      	ldr	r0, [r3, #0]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6859      	ldr	r1, [r3, #4]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	689a      	ldr	r2, [r3, #8]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	2400      	movs	r4, #0
 800aa1a:	9400      	str	r4, [sp, #0]
 800aa1c:	f000 f9e2 	bl	800ade4 <xQueueGenericCreateStatic>
 800aa20:	4603      	mov	r3, r0
 800aa22:	e008      	b.n	800aa36 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6818      	ldr	r0, [r3, #0]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	4619      	mov	r1, r3
 800aa30:	f000 fa55 	bl	800aede <xQueueGenericCreate>
 800aa34:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	370c      	adds	r7, #12
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd90      	pop	{r4, r7, pc}
	...

0800aa40 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b086      	sub	sp, #24
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d101      	bne.n	800aa5e <osMessagePut+0x1e>
    ticks = 1;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800aa5e:	f7ff ff4d 	bl	800a8fc <inHandlerMode>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d018      	beq.n	800aa9a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800aa68:	f107 0210 	add.w	r2, r7, #16
 800aa6c:	f107 0108 	add.w	r1, r7, #8
 800aa70:	2300      	movs	r3, #0
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	f000 fb90 	bl	800b198 <xQueueGenericSendFromISR>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d001      	beq.n	800aa82 <osMessagePut+0x42>
      return osErrorOS;
 800aa7e:	23ff      	movs	r3, #255	@ 0xff
 800aa80:	e018      	b.n	800aab4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d014      	beq.n	800aab2 <osMessagePut+0x72>
 800aa88:	4b0c      	ldr	r3, [pc, #48]	@ (800aabc <osMessagePut+0x7c>)
 800aa8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa8e:	601a      	str	r2, [r3, #0]
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	e00b      	b.n	800aab2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800aa9a:	f107 0108 	add.w	r1, r7, #8
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	697a      	ldr	r2, [r7, #20]
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f000 fa76 	bl	800af94 <xQueueGenericSend>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d001      	beq.n	800aab2 <osMessagePut+0x72>
      return osErrorOS;
 800aaae:	23ff      	movs	r3, #255	@ 0xff
 800aab0:	e000      	b.n	800aab4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800aab2:	2300      	movs	r3, #0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3718      	adds	r7, #24
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}
 800aabc:	e000ed04 	.word	0xe000ed04

0800aac0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800aac0:	b590      	push	{r4, r7, lr}
 800aac2:	b08b      	sub	sp, #44	@ 0x2c
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800aad0:	2300      	movs	r3, #0
 800aad2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d10a      	bne.n	800aaf0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800aada:	2380      	movs	r3, #128	@ 0x80
 800aadc:	617b      	str	r3, [r7, #20]
    return event;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	461c      	mov	r4, r3
 800aae2:	f107 0314 	add.w	r3, r7, #20
 800aae6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aaea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aaee:	e054      	b.n	800ab9a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aafe:	d103      	bne.n	800ab08 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ab00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab04:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab06:	e009      	b.n	800ab1c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d006      	beq.n	800ab1c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800ab12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d101      	bne.n	800ab1c <osMessageGet+0x5c>
      ticks = 1;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800ab1c:	f7ff feee 	bl	800a8fc <inHandlerMode>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d01c      	beq.n	800ab60 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800ab26:	f107 0220 	add.w	r2, r7, #32
 800ab2a:	f107 0314 	add.w	r3, r7, #20
 800ab2e:	3304      	adds	r3, #4
 800ab30:	4619      	mov	r1, r3
 800ab32:	68b8      	ldr	r0, [r7, #8]
 800ab34:	f000 fcb0 	bl	800b498 <xQueueReceiveFromISR>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d102      	bne.n	800ab44 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800ab3e:	2310      	movs	r3, #16
 800ab40:	617b      	str	r3, [r7, #20]
 800ab42:	e001      	b.n	800ab48 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800ab44:	2300      	movs	r3, #0
 800ab46:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ab48:	6a3b      	ldr	r3, [r7, #32]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d01d      	beq.n	800ab8a <osMessageGet+0xca>
 800ab4e:	4b15      	ldr	r3, [pc, #84]	@ (800aba4 <osMessageGet+0xe4>)
 800ab50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab54:	601a      	str	r2, [r3, #0]
 800ab56:	f3bf 8f4f 	dsb	sy
 800ab5a:	f3bf 8f6f 	isb	sy
 800ab5e:	e014      	b.n	800ab8a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800ab60:	f107 0314 	add.w	r3, r7, #20
 800ab64:	3304      	adds	r3, #4
 800ab66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab68:	4619      	mov	r1, r3
 800ab6a:	68b8      	ldr	r0, [r7, #8]
 800ab6c:	f000 fbb2 	bl	800b2d4 <xQueueReceive>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d102      	bne.n	800ab7c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800ab76:	2310      	movs	r3, #16
 800ab78:	617b      	str	r3, [r7, #20]
 800ab7a:	e006      	b.n	800ab8a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800ab7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d101      	bne.n	800ab86 <osMessageGet+0xc6>
 800ab82:	2300      	movs	r3, #0
 800ab84:	e000      	b.n	800ab88 <osMessageGet+0xc8>
 800ab86:	2340      	movs	r3, #64	@ 0x40
 800ab88:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	461c      	mov	r4, r3
 800ab8e:	f107 0314 	add.w	r3, r7, #20
 800ab92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ab96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ab9a:	68f8      	ldr	r0, [r7, #12]
 800ab9c:	372c      	adds	r7, #44	@ 0x2c
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd90      	pop	{r4, r7, pc}
 800aba2:	bf00      	nop
 800aba4:	e000ed04 	.word	0xe000ed04

0800aba8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f103 0208 	add.w	r2, r3, #8
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800abc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f103 0208 	add.w	r2, r3, #8
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f103 0208 	add.w	r2, r3, #8
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800abdc:	bf00      	nop
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800abf6:	bf00      	nop
 800abf8:	370c      	adds	r7, #12
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr

0800ac02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac02:	b480      	push	{r7}
 800ac04:	b085      	sub	sp, #20
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
 800ac0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	689a      	ldr	r2, [r3, #8]
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	683a      	ldr	r2, [r7, #0]
 800ac26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	683a      	ldr	r2, [r7, #0]
 800ac2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	1c5a      	adds	r2, r3, #1
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	601a      	str	r2, [r3, #0]
}
 800ac3e:	bf00      	nop
 800ac40:	3714      	adds	r7, #20
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac4a:	b480      	push	{r7}
 800ac4c:	b085      	sub	sp, #20
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
 800ac52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac60:	d103      	bne.n	800ac6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	60fb      	str	r3, [r7, #12]
 800ac68:	e00c      	b.n	800ac84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	3308      	adds	r3, #8
 800ac6e:	60fb      	str	r3, [r7, #12]
 800ac70:	e002      	b.n	800ac78 <vListInsert+0x2e>
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	60fb      	str	r3, [r7, #12]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	68ba      	ldr	r2, [r7, #8]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d2f6      	bcs.n	800ac72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	685a      	ldr	r2, [r3, #4]
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	683a      	ldr	r2, [r7, #0]
 800ac92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	68fa      	ldr	r2, [r7, #12]
 800ac98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	683a      	ldr	r2, [r7, #0]
 800ac9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	1c5a      	adds	r2, r3, #1
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	601a      	str	r2, [r3, #0]
}
 800acb0:	bf00      	nop
 800acb2:	3714      	adds	r7, #20
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	691b      	ldr	r3, [r3, #16]
 800acc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	6892      	ldr	r2, [r2, #8]
 800acd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	6852      	ldr	r2, [r2, #4]
 800acdc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d103      	bne.n	800acf0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	689a      	ldr	r2, [r3, #8]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	1e5a      	subs	r2, r3, #1
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3714      	adds	r7, #20
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d10b      	bne.n	800ad3c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ad24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad28:	f383 8811 	msr	BASEPRI, r3
 800ad2c:	f3bf 8f6f 	isb	sy
 800ad30:	f3bf 8f4f 	dsb	sy
 800ad34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ad36:	bf00      	nop
 800ad38:	bf00      	nop
 800ad3a:	e7fd      	b.n	800ad38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ad3c:	f001 fd84 	bl	800c848 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad48:	68f9      	ldr	r1, [r7, #12]
 800ad4a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ad4c:	fb01 f303 	mul.w	r3, r1, r3
 800ad50:	441a      	add	r2, r3
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad6c:	3b01      	subs	r3, #1
 800ad6e:	68f9      	ldr	r1, [r7, #12]
 800ad70:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ad72:	fb01 f303 	mul.w	r3, r1, r3
 800ad76:	441a      	add	r2, r3
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	22ff      	movs	r2, #255	@ 0xff
 800ad80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	22ff      	movs	r2, #255	@ 0xff
 800ad88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d114      	bne.n	800adbc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	691b      	ldr	r3, [r3, #16]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d01a      	beq.n	800add0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	3310      	adds	r3, #16
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f001 f954 	bl	800c04c <xTaskRemoveFromEventList>
 800ada4:	4603      	mov	r3, r0
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d012      	beq.n	800add0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800adaa:	4b0d      	ldr	r3, [pc, #52]	@ (800ade0 <xQueueGenericReset+0xd0>)
 800adac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adb0:	601a      	str	r2, [r3, #0]
 800adb2:	f3bf 8f4f 	dsb	sy
 800adb6:	f3bf 8f6f 	isb	sy
 800adba:	e009      	b.n	800add0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	3310      	adds	r3, #16
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7ff fef1 	bl	800aba8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	3324      	adds	r3, #36	@ 0x24
 800adca:	4618      	mov	r0, r3
 800adcc:	f7ff feec 	bl	800aba8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800add0:	f001 fd6c 	bl	800c8ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800add4:	2301      	movs	r3, #1
}
 800add6:	4618      	mov	r0, r3
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	e000ed04 	.word	0xe000ed04

0800ade4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b08e      	sub	sp, #56	@ 0x38
 800ade8:	af02      	add	r7, sp, #8
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	607a      	str	r2, [r7, #4]
 800adf0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d10b      	bne.n	800ae10 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800adf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adfc:	f383 8811 	msr	BASEPRI, r3
 800ae00:	f3bf 8f6f 	isb	sy
 800ae04:	f3bf 8f4f 	dsb	sy
 800ae08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ae0a:	bf00      	nop
 800ae0c:	bf00      	nop
 800ae0e:	e7fd      	b.n	800ae0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d10b      	bne.n	800ae2e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ae16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae1a:	f383 8811 	msr	BASEPRI, r3
 800ae1e:	f3bf 8f6f 	isb	sy
 800ae22:	f3bf 8f4f 	dsb	sy
 800ae26:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ae28:	bf00      	nop
 800ae2a:	bf00      	nop
 800ae2c:	e7fd      	b.n	800ae2a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d002      	beq.n	800ae3a <xQueueGenericCreateStatic+0x56>
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d001      	beq.n	800ae3e <xQueueGenericCreateStatic+0x5a>
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e000      	b.n	800ae40 <xQueueGenericCreateStatic+0x5c>
 800ae3e:	2300      	movs	r3, #0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d10b      	bne.n	800ae5c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ae44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae48:	f383 8811 	msr	BASEPRI, r3
 800ae4c:	f3bf 8f6f 	isb	sy
 800ae50:	f3bf 8f4f 	dsb	sy
 800ae54:	623b      	str	r3, [r7, #32]
}
 800ae56:	bf00      	nop
 800ae58:	bf00      	nop
 800ae5a:	e7fd      	b.n	800ae58 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d102      	bne.n	800ae68 <xQueueGenericCreateStatic+0x84>
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d101      	bne.n	800ae6c <xQueueGenericCreateStatic+0x88>
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e000      	b.n	800ae6e <xQueueGenericCreateStatic+0x8a>
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d10b      	bne.n	800ae8a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ae72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae76:	f383 8811 	msr	BASEPRI, r3
 800ae7a:	f3bf 8f6f 	isb	sy
 800ae7e:	f3bf 8f4f 	dsb	sy
 800ae82:	61fb      	str	r3, [r7, #28]
}
 800ae84:	bf00      	nop
 800ae86:	bf00      	nop
 800ae88:	e7fd      	b.n	800ae86 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ae8a:	2348      	movs	r3, #72	@ 0x48
 800ae8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	2b48      	cmp	r3, #72	@ 0x48
 800ae92:	d00b      	beq.n	800aeac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ae94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae98:	f383 8811 	msr	BASEPRI, r3
 800ae9c:	f3bf 8f6f 	isb	sy
 800aea0:	f3bf 8f4f 	dsb	sy
 800aea4:	61bb      	str	r3, [r7, #24]
}
 800aea6:	bf00      	nop
 800aea8:	bf00      	nop
 800aeaa:	e7fd      	b.n	800aea8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aeac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800aeb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d00d      	beq.n	800aed4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aeb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeba:	2201      	movs	r2, #1
 800aebc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aec0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800aec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aec6:	9300      	str	r3, [sp, #0]
 800aec8:	4613      	mov	r3, r2
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	68b9      	ldr	r1, [r7, #8]
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f000 f840 	bl	800af54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3730      	adds	r7, #48	@ 0x30
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b08a      	sub	sp, #40	@ 0x28
 800aee2:	af02      	add	r7, sp, #8
 800aee4:	60f8      	str	r0, [r7, #12]
 800aee6:	60b9      	str	r1, [r7, #8]
 800aee8:	4613      	mov	r3, r2
 800aeea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d10b      	bne.n	800af0a <xQueueGenericCreate+0x2c>
	__asm volatile
 800aef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef6:	f383 8811 	msr	BASEPRI, r3
 800aefa:	f3bf 8f6f 	isb	sy
 800aefe:	f3bf 8f4f 	dsb	sy
 800af02:	613b      	str	r3, [r7, #16]
}
 800af04:	bf00      	nop
 800af06:	bf00      	nop
 800af08:	e7fd      	b.n	800af06 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	68ba      	ldr	r2, [r7, #8]
 800af0e:	fb02 f303 	mul.w	r3, r2, r3
 800af12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800af14:	69fb      	ldr	r3, [r7, #28]
 800af16:	3348      	adds	r3, #72	@ 0x48
 800af18:	4618      	mov	r0, r3
 800af1a:	f001 fdb7 	bl	800ca8c <pvPortMalloc>
 800af1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800af20:	69bb      	ldr	r3, [r7, #24]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d011      	beq.n	800af4a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	3348      	adds	r3, #72	@ 0x48
 800af2e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	2200      	movs	r2, #0
 800af34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800af38:	79fa      	ldrb	r2, [r7, #7]
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	9300      	str	r3, [sp, #0]
 800af3e:	4613      	mov	r3, r2
 800af40:	697a      	ldr	r2, [r7, #20]
 800af42:	68b9      	ldr	r1, [r7, #8]
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	f000 f805 	bl	800af54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800af4a:	69bb      	ldr	r3, [r7, #24]
	}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3720      	adds	r7, #32
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]
 800af60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d103      	bne.n	800af70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	69ba      	ldr	r2, [r7, #24]
 800af6c:	601a      	str	r2, [r3, #0]
 800af6e:	e002      	b.n	800af76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	68fa      	ldr	r2, [r7, #12]
 800af7a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800af7c:	69bb      	ldr	r3, [r7, #24]
 800af7e:	68ba      	ldr	r2, [r7, #8]
 800af80:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800af82:	2101      	movs	r1, #1
 800af84:	69b8      	ldr	r0, [r7, #24]
 800af86:	f7ff fec3 	bl	800ad10 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800af8a:	bf00      	nop
 800af8c:	3710      	adds	r7, #16
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
	...

0800af94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b08e      	sub	sp, #56	@ 0x38
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	60b9      	str	r1, [r7, #8]
 800af9e:	607a      	str	r2, [r7, #4]
 800afa0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800afa2:	2300      	movs	r3, #0
 800afa4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800afaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afac:	2b00      	cmp	r3, #0
 800afae:	d10b      	bne.n	800afc8 <xQueueGenericSend+0x34>
	__asm volatile
 800afb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afb4:	f383 8811 	msr	BASEPRI, r3
 800afb8:	f3bf 8f6f 	isb	sy
 800afbc:	f3bf 8f4f 	dsb	sy
 800afc0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800afc2:	bf00      	nop
 800afc4:	bf00      	nop
 800afc6:	e7fd      	b.n	800afc4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d103      	bne.n	800afd6 <xQueueGenericSend+0x42>
 800afce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d101      	bne.n	800afda <xQueueGenericSend+0x46>
 800afd6:	2301      	movs	r3, #1
 800afd8:	e000      	b.n	800afdc <xQueueGenericSend+0x48>
 800afda:	2300      	movs	r3, #0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d10b      	bne.n	800aff8 <xQueueGenericSend+0x64>
	__asm volatile
 800afe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afe4:	f383 8811 	msr	BASEPRI, r3
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aff2:	bf00      	nop
 800aff4:	bf00      	nop
 800aff6:	e7fd      	b.n	800aff4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	2b02      	cmp	r3, #2
 800affc:	d103      	bne.n	800b006 <xQueueGenericSend+0x72>
 800affe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b002:	2b01      	cmp	r3, #1
 800b004:	d101      	bne.n	800b00a <xQueueGenericSend+0x76>
 800b006:	2301      	movs	r3, #1
 800b008:	e000      	b.n	800b00c <xQueueGenericSend+0x78>
 800b00a:	2300      	movs	r3, #0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d10b      	bne.n	800b028 <xQueueGenericSend+0x94>
	__asm volatile
 800b010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b014:	f383 8811 	msr	BASEPRI, r3
 800b018:	f3bf 8f6f 	isb	sy
 800b01c:	f3bf 8f4f 	dsb	sy
 800b020:	623b      	str	r3, [r7, #32]
}
 800b022:	bf00      	nop
 800b024:	bf00      	nop
 800b026:	e7fd      	b.n	800b024 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b028:	f001 f9d2 	bl	800c3d0 <xTaskGetSchedulerState>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d102      	bne.n	800b038 <xQueueGenericSend+0xa4>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d101      	bne.n	800b03c <xQueueGenericSend+0xa8>
 800b038:	2301      	movs	r3, #1
 800b03a:	e000      	b.n	800b03e <xQueueGenericSend+0xaa>
 800b03c:	2300      	movs	r3, #0
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d10b      	bne.n	800b05a <xQueueGenericSend+0xc6>
	__asm volatile
 800b042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b046:	f383 8811 	msr	BASEPRI, r3
 800b04a:	f3bf 8f6f 	isb	sy
 800b04e:	f3bf 8f4f 	dsb	sy
 800b052:	61fb      	str	r3, [r7, #28]
}
 800b054:	bf00      	nop
 800b056:	bf00      	nop
 800b058:	e7fd      	b.n	800b056 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b05a:	f001 fbf5 	bl	800c848 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b060:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b066:	429a      	cmp	r2, r3
 800b068:	d302      	bcc.n	800b070 <xQueueGenericSend+0xdc>
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	2b02      	cmp	r3, #2
 800b06e:	d129      	bne.n	800b0c4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b070:	683a      	ldr	r2, [r7, #0]
 800b072:	68b9      	ldr	r1, [r7, #8]
 800b074:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b076:	f000 fa91 	bl	800b59c <prvCopyDataToQueue>
 800b07a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b07e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b080:	2b00      	cmp	r3, #0
 800b082:	d010      	beq.n	800b0a6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b086:	3324      	adds	r3, #36	@ 0x24
 800b088:	4618      	mov	r0, r3
 800b08a:	f000 ffdf 	bl	800c04c <xTaskRemoveFromEventList>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d013      	beq.n	800b0bc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b094:	4b3f      	ldr	r3, [pc, #252]	@ (800b194 <xQueueGenericSend+0x200>)
 800b096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b09a:	601a      	str	r2, [r3, #0]
 800b09c:	f3bf 8f4f 	dsb	sy
 800b0a0:	f3bf 8f6f 	isb	sy
 800b0a4:	e00a      	b.n	800b0bc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b0a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d007      	beq.n	800b0bc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b0ac:	4b39      	ldr	r3, [pc, #228]	@ (800b194 <xQueueGenericSend+0x200>)
 800b0ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0b2:	601a      	str	r2, [r3, #0]
 800b0b4:	f3bf 8f4f 	dsb	sy
 800b0b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b0bc:	f001 fbf6 	bl	800c8ac <vPortExitCritical>
				return pdPASS;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e063      	b.n	800b18c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d103      	bne.n	800b0d2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b0ca:	f001 fbef 	bl	800c8ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	e05c      	b.n	800b18c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b0d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d106      	bne.n	800b0e6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b0d8:	f107 0314 	add.w	r3, r7, #20
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f001 f819 	bl	800c114 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b0e6:	f001 fbe1 	bl	800c8ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b0ea:	f000 fda1 	bl	800bc30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b0ee:	f001 fbab 	bl	800c848 <vPortEnterCritical>
 800b0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0f8:	b25b      	sxtb	r3, r3
 800b0fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0fe:	d103      	bne.n	800b108 <xQueueGenericSend+0x174>
 800b100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b102:	2200      	movs	r2, #0
 800b104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b10a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b10e:	b25b      	sxtb	r3, r3
 800b110:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b114:	d103      	bne.n	800b11e <xQueueGenericSend+0x18a>
 800b116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b118:	2200      	movs	r2, #0
 800b11a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b11e:	f001 fbc5 	bl	800c8ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b122:	1d3a      	adds	r2, r7, #4
 800b124:	f107 0314 	add.w	r3, r7, #20
 800b128:	4611      	mov	r1, r2
 800b12a:	4618      	mov	r0, r3
 800b12c:	f001 f808 	bl	800c140 <xTaskCheckForTimeOut>
 800b130:	4603      	mov	r3, r0
 800b132:	2b00      	cmp	r3, #0
 800b134:	d124      	bne.n	800b180 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b136:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b138:	f000 fb28 	bl	800b78c <prvIsQueueFull>
 800b13c:	4603      	mov	r3, r0
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d018      	beq.n	800b174 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b144:	3310      	adds	r3, #16
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	4611      	mov	r1, r2
 800b14a:	4618      	mov	r0, r3
 800b14c:	f000 ff58 	bl	800c000 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b150:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b152:	f000 fab3 	bl	800b6bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b156:	f000 fd79 	bl	800bc4c <xTaskResumeAll>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f47f af7c 	bne.w	800b05a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b162:	4b0c      	ldr	r3, [pc, #48]	@ (800b194 <xQueueGenericSend+0x200>)
 800b164:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b168:	601a      	str	r2, [r3, #0]
 800b16a:	f3bf 8f4f 	dsb	sy
 800b16e:	f3bf 8f6f 	isb	sy
 800b172:	e772      	b.n	800b05a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b174:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b176:	f000 faa1 	bl	800b6bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b17a:	f000 fd67 	bl	800bc4c <xTaskResumeAll>
 800b17e:	e76c      	b.n	800b05a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b180:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b182:	f000 fa9b 	bl	800b6bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b186:	f000 fd61 	bl	800bc4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b18a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3738      	adds	r7, #56	@ 0x38
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}
 800b194:	e000ed04 	.word	0xe000ed04

0800b198 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b090      	sub	sp, #64	@ 0x40
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	607a      	str	r2, [r7, #4]
 800b1a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b1aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d10b      	bne.n	800b1c8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b1b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1b4:	f383 8811 	msr	BASEPRI, r3
 800b1b8:	f3bf 8f6f 	isb	sy
 800b1bc:	f3bf 8f4f 	dsb	sy
 800b1c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b1c2:	bf00      	nop
 800b1c4:	bf00      	nop
 800b1c6:	e7fd      	b.n	800b1c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d103      	bne.n	800b1d6 <xQueueGenericSendFromISR+0x3e>
 800b1ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d101      	bne.n	800b1da <xQueueGenericSendFromISR+0x42>
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	e000      	b.n	800b1dc <xQueueGenericSendFromISR+0x44>
 800b1da:	2300      	movs	r3, #0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d10b      	bne.n	800b1f8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b1e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e4:	f383 8811 	msr	BASEPRI, r3
 800b1e8:	f3bf 8f6f 	isb	sy
 800b1ec:	f3bf 8f4f 	dsb	sy
 800b1f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b1f2:	bf00      	nop
 800b1f4:	bf00      	nop
 800b1f6:	e7fd      	b.n	800b1f4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	2b02      	cmp	r3, #2
 800b1fc:	d103      	bne.n	800b206 <xQueueGenericSendFromISR+0x6e>
 800b1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b202:	2b01      	cmp	r3, #1
 800b204:	d101      	bne.n	800b20a <xQueueGenericSendFromISR+0x72>
 800b206:	2301      	movs	r3, #1
 800b208:	e000      	b.n	800b20c <xQueueGenericSendFromISR+0x74>
 800b20a:	2300      	movs	r3, #0
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d10b      	bne.n	800b228 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b214:	f383 8811 	msr	BASEPRI, r3
 800b218:	f3bf 8f6f 	isb	sy
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	623b      	str	r3, [r7, #32]
}
 800b222:	bf00      	nop
 800b224:	bf00      	nop
 800b226:	e7fd      	b.n	800b224 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b228:	f001 fbee 	bl	800ca08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b22c:	f3ef 8211 	mrs	r2, BASEPRI
 800b230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b234:	f383 8811 	msr	BASEPRI, r3
 800b238:	f3bf 8f6f 	isb	sy
 800b23c:	f3bf 8f4f 	dsb	sy
 800b240:	61fa      	str	r2, [r7, #28]
 800b242:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b244:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b246:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b24a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b24e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b250:	429a      	cmp	r2, r3
 800b252:	d302      	bcc.n	800b25a <xQueueGenericSendFromISR+0xc2>
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	2b02      	cmp	r3, #2
 800b258:	d12f      	bne.n	800b2ba <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b25c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b260:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b268:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b26a:	683a      	ldr	r2, [r7, #0]
 800b26c:	68b9      	ldr	r1, [r7, #8]
 800b26e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b270:	f000 f994 	bl	800b59c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b274:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b278:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b27c:	d112      	bne.n	800b2a4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b27e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b282:	2b00      	cmp	r3, #0
 800b284:	d016      	beq.n	800b2b4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b288:	3324      	adds	r3, #36	@ 0x24
 800b28a:	4618      	mov	r0, r3
 800b28c:	f000 fede 	bl	800c04c <xTaskRemoveFromEventList>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00e      	beq.n	800b2b4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d00b      	beq.n	800b2b4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	601a      	str	r2, [r3, #0]
 800b2a2:	e007      	b.n	800b2b4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b2a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	b25a      	sxtb	r2, r3
 800b2ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b2b8:	e001      	b.n	800b2be <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2c0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b2c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b2ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3740      	adds	r7, #64	@ 0x40
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b08c      	sub	sp, #48	@ 0x30
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b2e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d10b      	bne.n	800b306 <xQueueReceive+0x32>
	__asm volatile
 800b2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f2:	f383 8811 	msr	BASEPRI, r3
 800b2f6:	f3bf 8f6f 	isb	sy
 800b2fa:	f3bf 8f4f 	dsb	sy
 800b2fe:	623b      	str	r3, [r7, #32]
}
 800b300:	bf00      	nop
 800b302:	bf00      	nop
 800b304:	e7fd      	b.n	800b302 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d103      	bne.n	800b314 <xQueueReceive+0x40>
 800b30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b30e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b310:	2b00      	cmp	r3, #0
 800b312:	d101      	bne.n	800b318 <xQueueReceive+0x44>
 800b314:	2301      	movs	r3, #1
 800b316:	e000      	b.n	800b31a <xQueueReceive+0x46>
 800b318:	2300      	movs	r3, #0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d10b      	bne.n	800b336 <xQueueReceive+0x62>
	__asm volatile
 800b31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b322:	f383 8811 	msr	BASEPRI, r3
 800b326:	f3bf 8f6f 	isb	sy
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	61fb      	str	r3, [r7, #28]
}
 800b330:	bf00      	nop
 800b332:	bf00      	nop
 800b334:	e7fd      	b.n	800b332 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b336:	f001 f84b 	bl	800c3d0 <xTaskGetSchedulerState>
 800b33a:	4603      	mov	r3, r0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d102      	bne.n	800b346 <xQueueReceive+0x72>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d101      	bne.n	800b34a <xQueueReceive+0x76>
 800b346:	2301      	movs	r3, #1
 800b348:	e000      	b.n	800b34c <xQueueReceive+0x78>
 800b34a:	2300      	movs	r3, #0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d10b      	bne.n	800b368 <xQueueReceive+0x94>
	__asm volatile
 800b350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b354:	f383 8811 	msr	BASEPRI, r3
 800b358:	f3bf 8f6f 	isb	sy
 800b35c:	f3bf 8f4f 	dsb	sy
 800b360:	61bb      	str	r3, [r7, #24]
}
 800b362:	bf00      	nop
 800b364:	bf00      	nop
 800b366:	e7fd      	b.n	800b364 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b368:	f001 fa6e 	bl	800c848 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b36e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b370:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b374:	2b00      	cmp	r3, #0
 800b376:	d01f      	beq.n	800b3b8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b378:	68b9      	ldr	r1, [r7, #8]
 800b37a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b37c:	f000 f978 	bl	800b670 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b382:	1e5a      	subs	r2, r3, #1
 800b384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b386:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b38a:	691b      	ldr	r3, [r3, #16]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00f      	beq.n	800b3b0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b392:	3310      	adds	r3, #16
 800b394:	4618      	mov	r0, r3
 800b396:	f000 fe59 	bl	800c04c <xTaskRemoveFromEventList>
 800b39a:	4603      	mov	r3, r0
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d007      	beq.n	800b3b0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b3a0:	4b3c      	ldr	r3, [pc, #240]	@ (800b494 <xQueueReceive+0x1c0>)
 800b3a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3a6:	601a      	str	r2, [r3, #0]
 800b3a8:	f3bf 8f4f 	dsb	sy
 800b3ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b3b0:	f001 fa7c 	bl	800c8ac <vPortExitCritical>
				return pdPASS;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	e069      	b.n	800b48c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d103      	bne.n	800b3c6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b3be:	f001 fa75 	bl	800c8ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	e062      	b.n	800b48c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b3c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d106      	bne.n	800b3da <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b3cc:	f107 0310 	add.w	r3, r7, #16
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f000 fe9f 	bl	800c114 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b3da:	f001 fa67 	bl	800c8ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b3de:	f000 fc27 	bl	800bc30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3e2:	f001 fa31 	bl	800c848 <vPortEnterCritical>
 800b3e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b3ec:	b25b      	sxtb	r3, r3
 800b3ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3f2:	d103      	bne.n	800b3fc <xQueueReceive+0x128>
 800b3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b402:	b25b      	sxtb	r3, r3
 800b404:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b408:	d103      	bne.n	800b412 <xQueueReceive+0x13e>
 800b40a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b40c:	2200      	movs	r2, #0
 800b40e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b412:	f001 fa4b 	bl	800c8ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b416:	1d3a      	adds	r2, r7, #4
 800b418:	f107 0310 	add.w	r3, r7, #16
 800b41c:	4611      	mov	r1, r2
 800b41e:	4618      	mov	r0, r3
 800b420:	f000 fe8e 	bl	800c140 <xTaskCheckForTimeOut>
 800b424:	4603      	mov	r3, r0
 800b426:	2b00      	cmp	r3, #0
 800b428:	d123      	bne.n	800b472 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b42a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b42c:	f000 f998 	bl	800b760 <prvIsQueueEmpty>
 800b430:	4603      	mov	r3, r0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d017      	beq.n	800b466 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b438:	3324      	adds	r3, #36	@ 0x24
 800b43a:	687a      	ldr	r2, [r7, #4]
 800b43c:	4611      	mov	r1, r2
 800b43e:	4618      	mov	r0, r3
 800b440:	f000 fdde 	bl	800c000 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b444:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b446:	f000 f939 	bl	800b6bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b44a:	f000 fbff 	bl	800bc4c <xTaskResumeAll>
 800b44e:	4603      	mov	r3, r0
 800b450:	2b00      	cmp	r3, #0
 800b452:	d189      	bne.n	800b368 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b454:	4b0f      	ldr	r3, [pc, #60]	@ (800b494 <xQueueReceive+0x1c0>)
 800b456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b45a:	601a      	str	r2, [r3, #0]
 800b45c:	f3bf 8f4f 	dsb	sy
 800b460:	f3bf 8f6f 	isb	sy
 800b464:	e780      	b.n	800b368 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b466:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b468:	f000 f928 	bl	800b6bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b46c:	f000 fbee 	bl	800bc4c <xTaskResumeAll>
 800b470:	e77a      	b.n	800b368 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b472:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b474:	f000 f922 	bl	800b6bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b478:	f000 fbe8 	bl	800bc4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b47c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b47e:	f000 f96f 	bl	800b760 <prvIsQueueEmpty>
 800b482:	4603      	mov	r3, r0
 800b484:	2b00      	cmp	r3, #0
 800b486:	f43f af6f 	beq.w	800b368 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b48a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3730      	adds	r7, #48	@ 0x30
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}
 800b494:	e000ed04 	.word	0xe000ed04

0800b498 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b08e      	sub	sp, #56	@ 0x38
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d10b      	bne.n	800b4c6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b2:	f383 8811 	msr	BASEPRI, r3
 800b4b6:	f3bf 8f6f 	isb	sy
 800b4ba:	f3bf 8f4f 	dsb	sy
 800b4be:	623b      	str	r3, [r7, #32]
}
 800b4c0:	bf00      	nop
 800b4c2:	bf00      	nop
 800b4c4:	e7fd      	b.n	800b4c2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d103      	bne.n	800b4d4 <xQueueReceiveFromISR+0x3c>
 800b4cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d101      	bne.n	800b4d8 <xQueueReceiveFromISR+0x40>
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e000      	b.n	800b4da <xQueueReceiveFromISR+0x42>
 800b4d8:	2300      	movs	r3, #0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d10b      	bne.n	800b4f6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4e2:	f383 8811 	msr	BASEPRI, r3
 800b4e6:	f3bf 8f6f 	isb	sy
 800b4ea:	f3bf 8f4f 	dsb	sy
 800b4ee:	61fb      	str	r3, [r7, #28]
}
 800b4f0:	bf00      	nop
 800b4f2:	bf00      	nop
 800b4f4:	e7fd      	b.n	800b4f2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b4f6:	f001 fa87 	bl	800ca08 <vPortValidateInterruptPriority>
	__asm volatile
 800b4fa:	f3ef 8211 	mrs	r2, BASEPRI
 800b4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	61ba      	str	r2, [r7, #24]
 800b510:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b512:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b514:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b51a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d02f      	beq.n	800b582 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b524:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b528:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b52c:	68b9      	ldr	r1, [r7, #8]
 800b52e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b530:	f000 f89e 	bl	800b670 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b536:	1e5a      	subs	r2, r3, #1
 800b538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b53a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b53c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b540:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b544:	d112      	bne.n	800b56c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b548:	691b      	ldr	r3, [r3, #16]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d016      	beq.n	800b57c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b550:	3310      	adds	r3, #16
 800b552:	4618      	mov	r0, r3
 800b554:	f000 fd7a 	bl	800c04c <xTaskRemoveFromEventList>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00e      	beq.n	800b57c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d00b      	beq.n	800b57c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2201      	movs	r2, #1
 800b568:	601a      	str	r2, [r3, #0]
 800b56a:	e007      	b.n	800b57c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b56c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b570:	3301      	adds	r3, #1
 800b572:	b2db      	uxtb	r3, r3
 800b574:	b25a      	sxtb	r2, r3
 800b576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b57c:	2301      	movs	r3, #1
 800b57e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b580:	e001      	b.n	800b586 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b582:	2300      	movs	r3, #0
 800b584:	637b      	str	r3, [r7, #52]	@ 0x34
 800b586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b588:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	f383 8811 	msr	BASEPRI, r3
}
 800b590:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b594:	4618      	mov	r0, r3
 800b596:	3738      	adds	r7, #56	@ 0x38
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b086      	sub	sp, #24
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d10d      	bne.n	800b5d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d14d      	bne.n	800b65e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	689b      	ldr	r3, [r3, #8]
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f000 ff20 	bl	800c40c <xTaskPriorityDisinherit>
 800b5cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	609a      	str	r2, [r3, #8]
 800b5d4:	e043      	b.n	800b65e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d119      	bne.n	800b610 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	6858      	ldr	r0, [r3, #4]
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	68b9      	ldr	r1, [r7, #8]
 800b5e8:	f002 f850 	bl	800d68c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	685a      	ldr	r2, [r3, #4]
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5f4:	441a      	add	r2, r3
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	685a      	ldr	r2, [r3, #4]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	429a      	cmp	r2, r3
 800b604:	d32b      	bcc.n	800b65e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	605a      	str	r2, [r3, #4]
 800b60e:	e026      	b.n	800b65e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	68d8      	ldr	r0, [r3, #12]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b618:	461a      	mov	r2, r3
 800b61a:	68b9      	ldr	r1, [r7, #8]
 800b61c:	f002 f836 	bl	800d68c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	68da      	ldr	r2, [r3, #12]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b628:	425b      	negs	r3, r3
 800b62a:	441a      	add	r2, r3
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	68da      	ldr	r2, [r3, #12]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	429a      	cmp	r2, r3
 800b63a:	d207      	bcs.n	800b64c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	689a      	ldr	r2, [r3, #8]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b644:	425b      	negs	r3, r3
 800b646:	441a      	add	r2, r3
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2b02      	cmp	r3, #2
 800b650:	d105      	bne.n	800b65e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d002      	beq.n	800b65e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	3b01      	subs	r3, #1
 800b65c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	1c5a      	adds	r2, r3, #1
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b666:	697b      	ldr	r3, [r7, #20]
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3718      	adds	r7, #24
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d018      	beq.n	800b6b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	68da      	ldr	r2, [r3, #12]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b68a:	441a      	add	r2, r3
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	68da      	ldr	r2, [r3, #12]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	429a      	cmp	r2, r3
 800b69a:	d303      	bcc.n	800b6a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	68d9      	ldr	r1, [r3, #12]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	6838      	ldr	r0, [r7, #0]
 800b6b0:	f001 ffec 	bl	800d68c <memcpy>
	}
}
 800b6b4:	bf00      	nop
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b6c4:	f001 f8c0 	bl	800c848 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b6ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b6d0:	e011      	b.n	800b6f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d012      	beq.n	800b700 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	3324      	adds	r3, #36	@ 0x24
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f000 fcb4 	bl	800c04c <xTaskRemoveFromEventList>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d001      	beq.n	800b6ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b6ea:	f000 fd8d 	bl	800c208 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b6ee:	7bfb      	ldrb	r3, [r7, #15]
 800b6f0:	3b01      	subs	r3, #1
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b6f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	dce9      	bgt.n	800b6d2 <prvUnlockQueue+0x16>
 800b6fe:	e000      	b.n	800b702 <prvUnlockQueue+0x46>
					break;
 800b700:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	22ff      	movs	r2, #255	@ 0xff
 800b706:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b70a:	f001 f8cf 	bl	800c8ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b70e:	f001 f89b 	bl	800c848 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b718:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b71a:	e011      	b.n	800b740 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	691b      	ldr	r3, [r3, #16]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d012      	beq.n	800b74a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	3310      	adds	r3, #16
 800b728:	4618      	mov	r0, r3
 800b72a:	f000 fc8f 	bl	800c04c <xTaskRemoveFromEventList>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d001      	beq.n	800b738 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b734:	f000 fd68 	bl	800c208 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b738:	7bbb      	ldrb	r3, [r7, #14]
 800b73a:	3b01      	subs	r3, #1
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b740:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b744:	2b00      	cmp	r3, #0
 800b746:	dce9      	bgt.n	800b71c <prvUnlockQueue+0x60>
 800b748:	e000      	b.n	800b74c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b74a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	22ff      	movs	r2, #255	@ 0xff
 800b750:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b754:	f001 f8aa 	bl	800c8ac <vPortExitCritical>
}
 800b758:	bf00      	nop
 800b75a:	3710      	adds	r7, #16
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b768:	f001 f86e 	bl	800c848 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b770:	2b00      	cmp	r3, #0
 800b772:	d102      	bne.n	800b77a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b774:	2301      	movs	r3, #1
 800b776:	60fb      	str	r3, [r7, #12]
 800b778:	e001      	b.n	800b77e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b77a:	2300      	movs	r3, #0
 800b77c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b77e:	f001 f895 	bl	800c8ac <vPortExitCritical>

	return xReturn;
 800b782:	68fb      	ldr	r3, [r7, #12]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b794:	f001 f858 	bl	800c848 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d102      	bne.n	800b7aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	60fb      	str	r3, [r7, #12]
 800b7a8:	e001      	b.n	800b7ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b7ae:	f001 f87d 	bl	800c8ac <vPortExitCritical>

	return xReturn;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3710      	adds	r7, #16
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b08e      	sub	sp, #56	@ 0x38
 800b7c0:	af04      	add	r7, sp, #16
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	607a      	str	r2, [r7, #4]
 800b7c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b7ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d10b      	bne.n	800b7e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7d4:	f383 8811 	msr	BASEPRI, r3
 800b7d8:	f3bf 8f6f 	isb	sy
 800b7dc:	f3bf 8f4f 	dsb	sy
 800b7e0:	623b      	str	r3, [r7, #32]
}
 800b7e2:	bf00      	nop
 800b7e4:	bf00      	nop
 800b7e6:	e7fd      	b.n	800b7e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b7e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d10b      	bne.n	800b806 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7f2:	f383 8811 	msr	BASEPRI, r3
 800b7f6:	f3bf 8f6f 	isb	sy
 800b7fa:	f3bf 8f4f 	dsb	sy
 800b7fe:	61fb      	str	r3, [r7, #28]
}
 800b800:	bf00      	nop
 800b802:	bf00      	nop
 800b804:	e7fd      	b.n	800b802 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b806:	2358      	movs	r3, #88	@ 0x58
 800b808:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	2b58      	cmp	r3, #88	@ 0x58
 800b80e:	d00b      	beq.n	800b828 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b814:	f383 8811 	msr	BASEPRI, r3
 800b818:	f3bf 8f6f 	isb	sy
 800b81c:	f3bf 8f4f 	dsb	sy
 800b820:	61bb      	str	r3, [r7, #24]
}
 800b822:	bf00      	nop
 800b824:	bf00      	nop
 800b826:	e7fd      	b.n	800b824 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b828:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b82a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d01e      	beq.n	800b86e <xTaskCreateStatic+0xb2>
 800b830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b832:	2b00      	cmp	r3, #0
 800b834:	d01b      	beq.n	800b86e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b838:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b83c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b83e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b842:	2202      	movs	r2, #2
 800b844:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b848:	2300      	movs	r3, #0
 800b84a:	9303      	str	r3, [sp, #12]
 800b84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b84e:	9302      	str	r3, [sp, #8]
 800b850:	f107 0314 	add.w	r3, r7, #20
 800b854:	9301      	str	r3, [sp, #4]
 800b856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b858:	9300      	str	r3, [sp, #0]
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	68b9      	ldr	r1, [r7, #8]
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f000 f850 	bl	800b906 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b866:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b868:	f000 f8e0 	bl	800ba2c <prvAddNewTaskToReadyList>
 800b86c:	e001      	b.n	800b872 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b86e:	2300      	movs	r3, #0
 800b870:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b872:	697b      	ldr	r3, [r7, #20]
	}
 800b874:	4618      	mov	r0, r3
 800b876:	3728      	adds	r7, #40	@ 0x28
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b08c      	sub	sp, #48	@ 0x30
 800b880:	af04      	add	r7, sp, #16
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	603b      	str	r3, [r7, #0]
 800b888:	4613      	mov	r3, r2
 800b88a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b88c:	88fb      	ldrh	r3, [r7, #6]
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	4618      	mov	r0, r3
 800b892:	f001 f8fb 	bl	800ca8c <pvPortMalloc>
 800b896:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d00e      	beq.n	800b8bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b89e:	2058      	movs	r0, #88	@ 0x58
 800b8a0:	f001 f8f4 	bl	800ca8c <pvPortMalloc>
 800b8a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b8a6:	69fb      	ldr	r3, [r7, #28]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d003      	beq.n	800b8b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	697a      	ldr	r2, [r7, #20]
 800b8b0:	631a      	str	r2, [r3, #48]	@ 0x30
 800b8b2:	e005      	b.n	800b8c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b8b4:	6978      	ldr	r0, [r7, #20]
 800b8b6:	f001 f9bd 	bl	800cc34 <vPortFree>
 800b8ba:	e001      	b.n	800b8c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d017      	beq.n	800b8f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b8c6:	69fb      	ldr	r3, [r7, #28]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b8ce:	88fa      	ldrh	r2, [r7, #6]
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	9303      	str	r3, [sp, #12]
 800b8d4:	69fb      	ldr	r3, [r7, #28]
 800b8d6:	9302      	str	r3, [sp, #8]
 800b8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8da:	9301      	str	r3, [sp, #4]
 800b8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8de:	9300      	str	r3, [sp, #0]
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	68b9      	ldr	r1, [r7, #8]
 800b8e4:	68f8      	ldr	r0, [r7, #12]
 800b8e6:	f000 f80e 	bl	800b906 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b8ea:	69f8      	ldr	r0, [r7, #28]
 800b8ec:	f000 f89e 	bl	800ba2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	61bb      	str	r3, [r7, #24]
 800b8f4:	e002      	b.n	800b8fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b8f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b8fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b8fc:	69bb      	ldr	r3, [r7, #24]
	}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3720      	adds	r7, #32
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}

0800b906 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b906:	b580      	push	{r7, lr}
 800b908:	b088      	sub	sp, #32
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	60f8      	str	r0, [r7, #12]
 800b90e:	60b9      	str	r1, [r7, #8]
 800b910:	607a      	str	r2, [r7, #4]
 800b912:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b916:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	009b      	lsls	r3, r3, #2
 800b91c:	461a      	mov	r2, r3
 800b91e:	21a5      	movs	r1, #165	@ 0xa5
 800b920:	f001 fe70 	bl	800d604 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b926:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b92e:	3b01      	subs	r3, #1
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	4413      	add	r3, r2
 800b934:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	f023 0307 	bic.w	r3, r3, #7
 800b93c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	f003 0307 	and.w	r3, r3, #7
 800b944:	2b00      	cmp	r3, #0
 800b946:	d00b      	beq.n	800b960 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b94c:	f383 8811 	msr	BASEPRI, r3
 800b950:	f3bf 8f6f 	isb	sy
 800b954:	f3bf 8f4f 	dsb	sy
 800b958:	617b      	str	r3, [r7, #20]
}
 800b95a:	bf00      	nop
 800b95c:	bf00      	nop
 800b95e:	e7fd      	b.n	800b95c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d01f      	beq.n	800b9a6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b966:	2300      	movs	r3, #0
 800b968:	61fb      	str	r3, [r7, #28]
 800b96a:	e012      	b.n	800b992 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b96c:	68ba      	ldr	r2, [r7, #8]
 800b96e:	69fb      	ldr	r3, [r7, #28]
 800b970:	4413      	add	r3, r2
 800b972:	7819      	ldrb	r1, [r3, #0]
 800b974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b976:	69fb      	ldr	r3, [r7, #28]
 800b978:	4413      	add	r3, r2
 800b97a:	3334      	adds	r3, #52	@ 0x34
 800b97c:	460a      	mov	r2, r1
 800b97e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b980:	68ba      	ldr	r2, [r7, #8]
 800b982:	69fb      	ldr	r3, [r7, #28]
 800b984:	4413      	add	r3, r2
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d006      	beq.n	800b99a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b98c:	69fb      	ldr	r3, [r7, #28]
 800b98e:	3301      	adds	r3, #1
 800b990:	61fb      	str	r3, [r7, #28]
 800b992:	69fb      	ldr	r3, [r7, #28]
 800b994:	2b0f      	cmp	r3, #15
 800b996:	d9e9      	bls.n	800b96c <prvInitialiseNewTask+0x66>
 800b998:	e000      	b.n	800b99c <prvInitialiseNewTask+0x96>
			{
				break;
 800b99a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b99c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b9a4:	e003      	b.n	800b9ae <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b9a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b0:	2b06      	cmp	r3, #6
 800b9b2:	d901      	bls.n	800b9b8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b9b4:	2306      	movs	r3, #6
 800b9b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b9b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9bc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9c2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b9c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9cc:	3304      	adds	r3, #4
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7ff f90a 	bl	800abe8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b9d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9d6:	3318      	adds	r3, #24
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7ff f905 	bl	800abe8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9e6:	f1c3 0207 	rsb	r2, r3, #7
 800b9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9f2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800b9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ba00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba02:	2200      	movs	r2, #0
 800ba04:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ba08:	683a      	ldr	r2, [r7, #0]
 800ba0a:	68f9      	ldr	r1, [r7, #12]
 800ba0c:	69b8      	ldr	r0, [r7, #24]
 800ba0e:	f000 fdeb 	bl	800c5e8 <pxPortInitialiseStack>
 800ba12:	4602      	mov	r2, r0
 800ba14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba16:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ba18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d002      	beq.n	800ba24 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ba1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba24:	bf00      	nop
 800ba26:	3720      	adds	r7, #32
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b082      	sub	sp, #8
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ba34:	f000 ff08 	bl	800c848 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ba38:	4b2a      	ldr	r3, [pc, #168]	@ (800bae4 <prvAddNewTaskToReadyList+0xb8>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	4a29      	ldr	r2, [pc, #164]	@ (800bae4 <prvAddNewTaskToReadyList+0xb8>)
 800ba40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ba42:	4b29      	ldr	r3, [pc, #164]	@ (800bae8 <prvAddNewTaskToReadyList+0xbc>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d109      	bne.n	800ba5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ba4a:	4a27      	ldr	r2, [pc, #156]	@ (800bae8 <prvAddNewTaskToReadyList+0xbc>)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ba50:	4b24      	ldr	r3, [pc, #144]	@ (800bae4 <prvAddNewTaskToReadyList+0xb8>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2b01      	cmp	r3, #1
 800ba56:	d110      	bne.n	800ba7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ba58:	f000 fbfc 	bl	800c254 <prvInitialiseTaskLists>
 800ba5c:	e00d      	b.n	800ba7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ba5e:	4b23      	ldr	r3, [pc, #140]	@ (800baec <prvAddNewTaskToReadyList+0xc0>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d109      	bne.n	800ba7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ba66:	4b20      	ldr	r3, [pc, #128]	@ (800bae8 <prvAddNewTaskToReadyList+0xbc>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d802      	bhi.n	800ba7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ba74:	4a1c      	ldr	r2, [pc, #112]	@ (800bae8 <prvAddNewTaskToReadyList+0xbc>)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ba7a:	4b1d      	ldr	r3, [pc, #116]	@ (800baf0 <prvAddNewTaskToReadyList+0xc4>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	3301      	adds	r3, #1
 800ba80:	4a1b      	ldr	r2, [pc, #108]	@ (800baf0 <prvAddNewTaskToReadyList+0xc4>)
 800ba82:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba88:	2201      	movs	r2, #1
 800ba8a:	409a      	lsls	r2, r3
 800ba8c:	4b19      	ldr	r3, [pc, #100]	@ (800baf4 <prvAddNewTaskToReadyList+0xc8>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4313      	orrs	r3, r2
 800ba92:	4a18      	ldr	r2, [pc, #96]	@ (800baf4 <prvAddNewTaskToReadyList+0xc8>)
 800ba94:	6013      	str	r3, [r2, #0]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba9a:	4613      	mov	r3, r2
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	4413      	add	r3, r2
 800baa0:	009b      	lsls	r3, r3, #2
 800baa2:	4a15      	ldr	r2, [pc, #84]	@ (800baf8 <prvAddNewTaskToReadyList+0xcc>)
 800baa4:	441a      	add	r2, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	3304      	adds	r3, #4
 800baaa:	4619      	mov	r1, r3
 800baac:	4610      	mov	r0, r2
 800baae:	f7ff f8a8 	bl	800ac02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bab2:	f000 fefb 	bl	800c8ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bab6:	4b0d      	ldr	r3, [pc, #52]	@ (800baec <prvAddNewTaskToReadyList+0xc0>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d00e      	beq.n	800badc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800babe:	4b0a      	ldr	r3, [pc, #40]	@ (800bae8 <prvAddNewTaskToReadyList+0xbc>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bac8:	429a      	cmp	r2, r3
 800baca:	d207      	bcs.n	800badc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bacc:	4b0b      	ldr	r3, [pc, #44]	@ (800bafc <prvAddNewTaskToReadyList+0xd0>)
 800bace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bad2:	601a      	str	r2, [r3, #0]
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800badc:	bf00      	nop
 800bade:	3708      	adds	r7, #8
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	20000708 	.word	0x20000708
 800bae8:	20000608 	.word	0x20000608
 800baec:	20000714 	.word	0x20000714
 800baf0:	20000724 	.word	0x20000724
 800baf4:	20000710 	.word	0x20000710
 800baf8:	2000060c 	.word	0x2000060c
 800bafc:	e000ed04 	.word	0xe000ed04

0800bb00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d018      	beq.n	800bb44 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bb12:	4b14      	ldr	r3, [pc, #80]	@ (800bb64 <vTaskDelay+0x64>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d00b      	beq.n	800bb32 <vTaskDelay+0x32>
	__asm volatile
 800bb1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb1e:	f383 8811 	msr	BASEPRI, r3
 800bb22:	f3bf 8f6f 	isb	sy
 800bb26:	f3bf 8f4f 	dsb	sy
 800bb2a:	60bb      	str	r3, [r7, #8]
}
 800bb2c:	bf00      	nop
 800bb2e:	bf00      	nop
 800bb30:	e7fd      	b.n	800bb2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bb32:	f000 f87d 	bl	800bc30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bb36:	2100      	movs	r1, #0
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 fcef 	bl	800c51c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bb3e:	f000 f885 	bl	800bc4c <xTaskResumeAll>
 800bb42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d107      	bne.n	800bb5a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bb4a:	4b07      	ldr	r3, [pc, #28]	@ (800bb68 <vTaskDelay+0x68>)
 800bb4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb50:	601a      	str	r2, [r3, #0]
 800bb52:	f3bf 8f4f 	dsb	sy
 800bb56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb5a:	bf00      	nop
 800bb5c:	3710      	adds	r7, #16
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	20000730 	.word	0x20000730
 800bb68:	e000ed04 	.word	0xe000ed04

0800bb6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b08a      	sub	sp, #40	@ 0x28
 800bb70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bb72:	2300      	movs	r3, #0
 800bb74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bb76:	2300      	movs	r3, #0
 800bb78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bb7a:	463a      	mov	r2, r7
 800bb7c:	1d39      	adds	r1, r7, #4
 800bb7e:	f107 0308 	add.w	r3, r7, #8
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7f4 fcc6 	bl	8000514 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bb88:	6839      	ldr	r1, [r7, #0]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	68ba      	ldr	r2, [r7, #8]
 800bb8e:	9202      	str	r2, [sp, #8]
 800bb90:	9301      	str	r3, [sp, #4]
 800bb92:	2300      	movs	r3, #0
 800bb94:	9300      	str	r3, [sp, #0]
 800bb96:	2300      	movs	r3, #0
 800bb98:	460a      	mov	r2, r1
 800bb9a:	491f      	ldr	r1, [pc, #124]	@ (800bc18 <vTaskStartScheduler+0xac>)
 800bb9c:	481f      	ldr	r0, [pc, #124]	@ (800bc1c <vTaskStartScheduler+0xb0>)
 800bb9e:	f7ff fe0d 	bl	800b7bc <xTaskCreateStatic>
 800bba2:	4603      	mov	r3, r0
 800bba4:	4a1e      	ldr	r2, [pc, #120]	@ (800bc20 <vTaskStartScheduler+0xb4>)
 800bba6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bba8:	4b1d      	ldr	r3, [pc, #116]	@ (800bc20 <vTaskStartScheduler+0xb4>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d002      	beq.n	800bbb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	617b      	str	r3, [r7, #20]
 800bbb4:	e001      	b.n	800bbba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d116      	bne.n	800bbee <vTaskStartScheduler+0x82>
	__asm volatile
 800bbc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc4:	f383 8811 	msr	BASEPRI, r3
 800bbc8:	f3bf 8f6f 	isb	sy
 800bbcc:	f3bf 8f4f 	dsb	sy
 800bbd0:	613b      	str	r3, [r7, #16]
}
 800bbd2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bbd4:	4b13      	ldr	r3, [pc, #76]	@ (800bc24 <vTaskStartScheduler+0xb8>)
 800bbd6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bbda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bbdc:	4b12      	ldr	r3, [pc, #72]	@ (800bc28 <vTaskStartScheduler+0xbc>)
 800bbde:	2201      	movs	r2, #1
 800bbe0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bbe2:	4b12      	ldr	r3, [pc, #72]	@ (800bc2c <vTaskStartScheduler+0xc0>)
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bbe8:	f000 fd8a 	bl	800c700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bbec:	e00f      	b.n	800bc0e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bbf4:	d10b      	bne.n	800bc0e <vTaskStartScheduler+0xa2>
	__asm volatile
 800bbf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbfa:	f383 8811 	msr	BASEPRI, r3
 800bbfe:	f3bf 8f6f 	isb	sy
 800bc02:	f3bf 8f4f 	dsb	sy
 800bc06:	60fb      	str	r3, [r7, #12]
}
 800bc08:	bf00      	nop
 800bc0a:	bf00      	nop
 800bc0c:	e7fd      	b.n	800bc0a <vTaskStartScheduler+0x9e>
}
 800bc0e:	bf00      	nop
 800bc10:	3718      	adds	r7, #24
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	0800d7b8 	.word	0x0800d7b8
 800bc1c:	0800c221 	.word	0x0800c221
 800bc20:	2000072c 	.word	0x2000072c
 800bc24:	20000728 	.word	0x20000728
 800bc28:	20000714 	.word	0x20000714
 800bc2c:	2000070c 	.word	0x2000070c

0800bc30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bc30:	b480      	push	{r7}
 800bc32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bc34:	4b04      	ldr	r3, [pc, #16]	@ (800bc48 <vTaskSuspendAll+0x18>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	3301      	adds	r3, #1
 800bc3a:	4a03      	ldr	r2, [pc, #12]	@ (800bc48 <vTaskSuspendAll+0x18>)
 800bc3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bc3e:	bf00      	nop
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr
 800bc48:	20000730 	.word	0x20000730

0800bc4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bc52:	2300      	movs	r3, #0
 800bc54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bc56:	2300      	movs	r3, #0
 800bc58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bc5a:	4b42      	ldr	r3, [pc, #264]	@ (800bd64 <xTaskResumeAll+0x118>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d10b      	bne.n	800bc7a <xTaskResumeAll+0x2e>
	__asm volatile
 800bc62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc66:	f383 8811 	msr	BASEPRI, r3
 800bc6a:	f3bf 8f6f 	isb	sy
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	603b      	str	r3, [r7, #0]
}
 800bc74:	bf00      	nop
 800bc76:	bf00      	nop
 800bc78:	e7fd      	b.n	800bc76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bc7a:	f000 fde5 	bl	800c848 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bc7e:	4b39      	ldr	r3, [pc, #228]	@ (800bd64 <xTaskResumeAll+0x118>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	3b01      	subs	r3, #1
 800bc84:	4a37      	ldr	r2, [pc, #220]	@ (800bd64 <xTaskResumeAll+0x118>)
 800bc86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc88:	4b36      	ldr	r3, [pc, #216]	@ (800bd64 <xTaskResumeAll+0x118>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d161      	bne.n	800bd54 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bc90:	4b35      	ldr	r3, [pc, #212]	@ (800bd68 <xTaskResumeAll+0x11c>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d05d      	beq.n	800bd54 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc98:	e02e      	b.n	800bcf8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc9a:	4b34      	ldr	r3, [pc, #208]	@ (800bd6c <xTaskResumeAll+0x120>)
 800bc9c:	68db      	ldr	r3, [r3, #12]
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	3318      	adds	r3, #24
 800bca6:	4618      	mov	r0, r3
 800bca8:	f7ff f808 	bl	800acbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	3304      	adds	r3, #4
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f7ff f803 	bl	800acbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcba:	2201      	movs	r2, #1
 800bcbc:	409a      	lsls	r2, r3
 800bcbe:	4b2c      	ldr	r3, [pc, #176]	@ (800bd70 <xTaskResumeAll+0x124>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	4a2a      	ldr	r2, [pc, #168]	@ (800bd70 <xTaskResumeAll+0x124>)
 800bcc6:	6013      	str	r3, [r2, #0]
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bccc:	4613      	mov	r3, r2
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	4413      	add	r3, r2
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	4a27      	ldr	r2, [pc, #156]	@ (800bd74 <xTaskResumeAll+0x128>)
 800bcd6:	441a      	add	r2, r3
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	3304      	adds	r3, #4
 800bcdc:	4619      	mov	r1, r3
 800bcde:	4610      	mov	r0, r2
 800bce0:	f7fe ff8f 	bl	800ac02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bce8:	4b23      	ldr	r3, [pc, #140]	@ (800bd78 <xTaskResumeAll+0x12c>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d302      	bcc.n	800bcf8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bcf2:	4b22      	ldr	r3, [pc, #136]	@ (800bd7c <xTaskResumeAll+0x130>)
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bcf8:	4b1c      	ldr	r3, [pc, #112]	@ (800bd6c <xTaskResumeAll+0x120>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d1cc      	bne.n	800bc9a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d001      	beq.n	800bd0a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd06:	f000 fb43 	bl	800c390 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bd0a:	4b1d      	ldr	r3, [pc, #116]	@ (800bd80 <xTaskResumeAll+0x134>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d010      	beq.n	800bd38 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bd16:	f000 f837 	bl	800bd88 <xTaskIncrementTick>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d002      	beq.n	800bd26 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bd20:	4b16      	ldr	r3, [pc, #88]	@ (800bd7c <xTaskResumeAll+0x130>)
 800bd22:	2201      	movs	r2, #1
 800bd24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	3b01      	subs	r3, #1
 800bd2a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d1f1      	bne.n	800bd16 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bd32:	4b13      	ldr	r3, [pc, #76]	@ (800bd80 <xTaskResumeAll+0x134>)
 800bd34:	2200      	movs	r2, #0
 800bd36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bd38:	4b10      	ldr	r3, [pc, #64]	@ (800bd7c <xTaskResumeAll+0x130>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d009      	beq.n	800bd54 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bd40:	2301      	movs	r3, #1
 800bd42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bd44:	4b0f      	ldr	r3, [pc, #60]	@ (800bd84 <xTaskResumeAll+0x138>)
 800bd46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd4a:	601a      	str	r2, [r3, #0]
 800bd4c:	f3bf 8f4f 	dsb	sy
 800bd50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd54:	f000 fdaa 	bl	800c8ac <vPortExitCritical>

	return xAlreadyYielded;
 800bd58:	68bb      	ldr	r3, [r7, #8]
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3710      	adds	r7, #16
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	20000730 	.word	0x20000730
 800bd68:	20000708 	.word	0x20000708
 800bd6c:	200006c8 	.word	0x200006c8
 800bd70:	20000710 	.word	0x20000710
 800bd74:	2000060c 	.word	0x2000060c
 800bd78:	20000608 	.word	0x20000608
 800bd7c:	2000071c 	.word	0x2000071c
 800bd80:	20000718 	.word	0x20000718
 800bd84:	e000ed04 	.word	0xe000ed04

0800bd88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b086      	sub	sp, #24
 800bd8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd92:	4b4f      	ldr	r3, [pc, #316]	@ (800bed0 <xTaskIncrementTick+0x148>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	f040 808f 	bne.w	800beba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bd9c:	4b4d      	ldr	r3, [pc, #308]	@ (800bed4 <xTaskIncrementTick+0x14c>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	3301      	adds	r3, #1
 800bda2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bda4:	4a4b      	ldr	r2, [pc, #300]	@ (800bed4 <xTaskIncrementTick+0x14c>)
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d121      	bne.n	800bdf4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bdb0:	4b49      	ldr	r3, [pc, #292]	@ (800bed8 <xTaskIncrementTick+0x150>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d00b      	beq.n	800bdd2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800bdba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdbe:	f383 8811 	msr	BASEPRI, r3
 800bdc2:	f3bf 8f6f 	isb	sy
 800bdc6:	f3bf 8f4f 	dsb	sy
 800bdca:	603b      	str	r3, [r7, #0]
}
 800bdcc:	bf00      	nop
 800bdce:	bf00      	nop
 800bdd0:	e7fd      	b.n	800bdce <xTaskIncrementTick+0x46>
 800bdd2:	4b41      	ldr	r3, [pc, #260]	@ (800bed8 <xTaskIncrementTick+0x150>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	60fb      	str	r3, [r7, #12]
 800bdd8:	4b40      	ldr	r3, [pc, #256]	@ (800bedc <xTaskIncrementTick+0x154>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a3e      	ldr	r2, [pc, #248]	@ (800bed8 <xTaskIncrementTick+0x150>)
 800bdde:	6013      	str	r3, [r2, #0]
 800bde0:	4a3e      	ldr	r2, [pc, #248]	@ (800bedc <xTaskIncrementTick+0x154>)
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	6013      	str	r3, [r2, #0]
 800bde6:	4b3e      	ldr	r3, [pc, #248]	@ (800bee0 <xTaskIncrementTick+0x158>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	3301      	adds	r3, #1
 800bdec:	4a3c      	ldr	r2, [pc, #240]	@ (800bee0 <xTaskIncrementTick+0x158>)
 800bdee:	6013      	str	r3, [r2, #0]
 800bdf0:	f000 face 	bl	800c390 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bdf4:	4b3b      	ldr	r3, [pc, #236]	@ (800bee4 <xTaskIncrementTick+0x15c>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	693a      	ldr	r2, [r7, #16]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d348      	bcc.n	800be90 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bdfe:	4b36      	ldr	r3, [pc, #216]	@ (800bed8 <xTaskIncrementTick+0x150>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d104      	bne.n	800be12 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be08:	4b36      	ldr	r3, [pc, #216]	@ (800bee4 <xTaskIncrementTick+0x15c>)
 800be0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be0e:	601a      	str	r2, [r3, #0]
					break;
 800be10:	e03e      	b.n	800be90 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be12:	4b31      	ldr	r3, [pc, #196]	@ (800bed8 <xTaskIncrementTick+0x150>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	68db      	ldr	r3, [r3, #12]
 800be18:	68db      	ldr	r3, [r3, #12]
 800be1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800be22:	693a      	ldr	r2, [r7, #16]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	429a      	cmp	r2, r3
 800be28:	d203      	bcs.n	800be32 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800be2a:	4a2e      	ldr	r2, [pc, #184]	@ (800bee4 <xTaskIncrementTick+0x15c>)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800be30:	e02e      	b.n	800be90 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	3304      	adds	r3, #4
 800be36:	4618      	mov	r0, r3
 800be38:	f7fe ff40 	bl	800acbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be40:	2b00      	cmp	r3, #0
 800be42:	d004      	beq.n	800be4e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	3318      	adds	r3, #24
 800be48:	4618      	mov	r0, r3
 800be4a:	f7fe ff37 	bl	800acbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be52:	2201      	movs	r2, #1
 800be54:	409a      	lsls	r2, r3
 800be56:	4b24      	ldr	r3, [pc, #144]	@ (800bee8 <xTaskIncrementTick+0x160>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4313      	orrs	r3, r2
 800be5c:	4a22      	ldr	r2, [pc, #136]	@ (800bee8 <xTaskIncrementTick+0x160>)
 800be5e:	6013      	str	r3, [r2, #0]
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be64:	4613      	mov	r3, r2
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	4413      	add	r3, r2
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	4a1f      	ldr	r2, [pc, #124]	@ (800beec <xTaskIncrementTick+0x164>)
 800be6e:	441a      	add	r2, r3
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	3304      	adds	r3, #4
 800be74:	4619      	mov	r1, r3
 800be76:	4610      	mov	r0, r2
 800be78:	f7fe fec3 	bl	800ac02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be80:	4b1b      	ldr	r3, [pc, #108]	@ (800bef0 <xTaskIncrementTick+0x168>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be86:	429a      	cmp	r2, r3
 800be88:	d3b9      	bcc.n	800bdfe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800be8a:	2301      	movs	r3, #1
 800be8c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be8e:	e7b6      	b.n	800bdfe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800be90:	4b17      	ldr	r3, [pc, #92]	@ (800bef0 <xTaskIncrementTick+0x168>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be96:	4915      	ldr	r1, [pc, #84]	@ (800beec <xTaskIncrementTick+0x164>)
 800be98:	4613      	mov	r3, r2
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	4413      	add	r3, r2
 800be9e:	009b      	lsls	r3, r3, #2
 800bea0:	440b      	add	r3, r1
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d901      	bls.n	800beac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bea8:	2301      	movs	r3, #1
 800beaa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800beac:	4b11      	ldr	r3, [pc, #68]	@ (800bef4 <xTaskIncrementTick+0x16c>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d007      	beq.n	800bec4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800beb4:	2301      	movs	r3, #1
 800beb6:	617b      	str	r3, [r7, #20]
 800beb8:	e004      	b.n	800bec4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800beba:	4b0f      	ldr	r3, [pc, #60]	@ (800bef8 <xTaskIncrementTick+0x170>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	3301      	adds	r3, #1
 800bec0:	4a0d      	ldr	r2, [pc, #52]	@ (800bef8 <xTaskIncrementTick+0x170>)
 800bec2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bec4:	697b      	ldr	r3, [r7, #20]
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3718      	adds	r7, #24
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop
 800bed0:	20000730 	.word	0x20000730
 800bed4:	2000070c 	.word	0x2000070c
 800bed8:	200006c0 	.word	0x200006c0
 800bedc:	200006c4 	.word	0x200006c4
 800bee0:	20000720 	.word	0x20000720
 800bee4:	20000728 	.word	0x20000728
 800bee8:	20000710 	.word	0x20000710
 800beec:	2000060c 	.word	0x2000060c
 800bef0:	20000608 	.word	0x20000608
 800bef4:	2000071c 	.word	0x2000071c
 800bef8:	20000718 	.word	0x20000718

0800befc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b088      	sub	sp, #32
 800bf00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bf02:	4b3a      	ldr	r3, [pc, #232]	@ (800bfec <vTaskSwitchContext+0xf0>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d003      	beq.n	800bf12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bf0a:	4b39      	ldr	r3, [pc, #228]	@ (800bff0 <vTaskSwitchContext+0xf4>)
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bf10:	e067      	b.n	800bfe2 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800bf12:	4b37      	ldr	r3, [pc, #220]	@ (800bff0 <vTaskSwitchContext+0xf4>)
 800bf14:	2200      	movs	r2, #0
 800bf16:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800bf18:	4b36      	ldr	r3, [pc, #216]	@ (800bff4 <vTaskSwitchContext+0xf8>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf1e:	61fb      	str	r3, [r7, #28]
 800bf20:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800bf24:	61bb      	str	r3, [r7, #24]
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	69ba      	ldr	r2, [r7, #24]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d111      	bne.n	800bf54 <vTaskSwitchContext+0x58>
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	3304      	adds	r3, #4
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	69ba      	ldr	r2, [r7, #24]
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d10b      	bne.n	800bf54 <vTaskSwitchContext+0x58>
 800bf3c:	69fb      	ldr	r3, [r7, #28]
 800bf3e:	3308      	adds	r3, #8
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	69ba      	ldr	r2, [r7, #24]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d105      	bne.n	800bf54 <vTaskSwitchContext+0x58>
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	330c      	adds	r3, #12
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	69ba      	ldr	r2, [r7, #24]
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d008      	beq.n	800bf66 <vTaskSwitchContext+0x6a>
 800bf54:	4b27      	ldr	r3, [pc, #156]	@ (800bff4 <vTaskSwitchContext+0xf8>)
 800bf56:	681a      	ldr	r2, [r3, #0]
 800bf58:	4b26      	ldr	r3, [pc, #152]	@ (800bff4 <vTaskSwitchContext+0xf8>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	3334      	adds	r3, #52	@ 0x34
 800bf5e:	4619      	mov	r1, r3
 800bf60:	4610      	mov	r0, r2
 800bf62:	f7f4 fac4 	bl	80004ee <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf66:	4b24      	ldr	r3, [pc, #144]	@ (800bff8 <vTaskSwitchContext+0xfc>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	fab3 f383 	clz	r3, r3
 800bf72:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bf74:	7afb      	ldrb	r3, [r7, #11]
 800bf76:	f1c3 031f 	rsb	r3, r3, #31
 800bf7a:	617b      	str	r3, [r7, #20]
 800bf7c:	491f      	ldr	r1, [pc, #124]	@ (800bffc <vTaskSwitchContext+0x100>)
 800bf7e:	697a      	ldr	r2, [r7, #20]
 800bf80:	4613      	mov	r3, r2
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	4413      	add	r3, r2
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	440b      	add	r3, r1
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d10b      	bne.n	800bfa8 <vTaskSwitchContext+0xac>
	__asm volatile
 800bf90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf94:	f383 8811 	msr	BASEPRI, r3
 800bf98:	f3bf 8f6f 	isb	sy
 800bf9c:	f3bf 8f4f 	dsb	sy
 800bfa0:	607b      	str	r3, [r7, #4]
}
 800bfa2:	bf00      	nop
 800bfa4:	bf00      	nop
 800bfa6:	e7fd      	b.n	800bfa4 <vTaskSwitchContext+0xa8>
 800bfa8:	697a      	ldr	r2, [r7, #20]
 800bfaa:	4613      	mov	r3, r2
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	4413      	add	r3, r2
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	4a12      	ldr	r2, [pc, #72]	@ (800bffc <vTaskSwitchContext+0x100>)
 800bfb4:	4413      	add	r3, r2
 800bfb6:	613b      	str	r3, [r7, #16]
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	685a      	ldr	r2, [r3, #4]
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	605a      	str	r2, [r3, #4]
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	685a      	ldr	r2, [r3, #4]
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	3308      	adds	r3, #8
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d104      	bne.n	800bfd8 <vTaskSwitchContext+0xdc>
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	685a      	ldr	r2, [r3, #4]
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	605a      	str	r2, [r3, #4]
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	68db      	ldr	r3, [r3, #12]
 800bfde:	4a05      	ldr	r2, [pc, #20]	@ (800bff4 <vTaskSwitchContext+0xf8>)
 800bfe0:	6013      	str	r3, [r2, #0]
}
 800bfe2:	bf00      	nop
 800bfe4:	3720      	adds	r7, #32
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	20000730 	.word	0x20000730
 800bff0:	2000071c 	.word	0x2000071c
 800bff4:	20000608 	.word	0x20000608
 800bff8:	20000710 	.word	0x20000710
 800bffc:	2000060c 	.word	0x2000060c

0800c000 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d10b      	bne.n	800c028 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c014:	f383 8811 	msr	BASEPRI, r3
 800c018:	f3bf 8f6f 	isb	sy
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	60fb      	str	r3, [r7, #12]
}
 800c022:	bf00      	nop
 800c024:	bf00      	nop
 800c026:	e7fd      	b.n	800c024 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c028:	4b07      	ldr	r3, [pc, #28]	@ (800c048 <vTaskPlaceOnEventList+0x48>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	3318      	adds	r3, #24
 800c02e:	4619      	mov	r1, r3
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f7fe fe0a 	bl	800ac4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c036:	2101      	movs	r1, #1
 800c038:	6838      	ldr	r0, [r7, #0]
 800c03a:	f000 fa6f 	bl	800c51c <prvAddCurrentTaskToDelayedList>
}
 800c03e:	bf00      	nop
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
 800c046:	bf00      	nop
 800c048:	20000608 	.word	0x20000608

0800c04c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b086      	sub	sp, #24
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	68db      	ldr	r3, [r3, #12]
 800c05a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d10b      	bne.n	800c07a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c066:	f383 8811 	msr	BASEPRI, r3
 800c06a:	f3bf 8f6f 	isb	sy
 800c06e:	f3bf 8f4f 	dsb	sy
 800c072:	60fb      	str	r3, [r7, #12]
}
 800c074:	bf00      	nop
 800c076:	bf00      	nop
 800c078:	e7fd      	b.n	800c076 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	3318      	adds	r3, #24
 800c07e:	4618      	mov	r0, r3
 800c080:	f7fe fe1c 	bl	800acbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c084:	4b1d      	ldr	r3, [pc, #116]	@ (800c0fc <xTaskRemoveFromEventList+0xb0>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d11c      	bne.n	800c0c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	3304      	adds	r3, #4
 800c090:	4618      	mov	r0, r3
 800c092:	f7fe fe13 	bl	800acbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c09a:	2201      	movs	r2, #1
 800c09c:	409a      	lsls	r2, r3
 800c09e:	4b18      	ldr	r3, [pc, #96]	@ (800c100 <xTaskRemoveFromEventList+0xb4>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	4a16      	ldr	r2, [pc, #88]	@ (800c100 <xTaskRemoveFromEventList+0xb4>)
 800c0a6:	6013      	str	r3, [r2, #0]
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	4413      	add	r3, r2
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	4a13      	ldr	r2, [pc, #76]	@ (800c104 <xTaskRemoveFromEventList+0xb8>)
 800c0b6:	441a      	add	r2, r3
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	3304      	adds	r3, #4
 800c0bc:	4619      	mov	r1, r3
 800c0be:	4610      	mov	r0, r2
 800c0c0:	f7fe fd9f 	bl	800ac02 <vListInsertEnd>
 800c0c4:	e005      	b.n	800c0d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	3318      	adds	r3, #24
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	480e      	ldr	r0, [pc, #56]	@ (800c108 <xTaskRemoveFromEventList+0xbc>)
 800c0ce:	f7fe fd98 	bl	800ac02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0d6:	4b0d      	ldr	r3, [pc, #52]	@ (800c10c <xTaskRemoveFromEventList+0xc0>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d905      	bls.n	800c0ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c0e4:	4b0a      	ldr	r3, [pc, #40]	@ (800c110 <xTaskRemoveFromEventList+0xc4>)
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	601a      	str	r2, [r3, #0]
 800c0ea:	e001      	b.n	800c0f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c0f0:	697b      	ldr	r3, [r7, #20]
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3718      	adds	r7, #24
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	bf00      	nop
 800c0fc:	20000730 	.word	0x20000730
 800c100:	20000710 	.word	0x20000710
 800c104:	2000060c 	.word	0x2000060c
 800c108:	200006c8 	.word	0x200006c8
 800c10c:	20000608 	.word	0x20000608
 800c110:	2000071c 	.word	0x2000071c

0800c114 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c11c:	4b06      	ldr	r3, [pc, #24]	@ (800c138 <vTaskInternalSetTimeOutState+0x24>)
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c124:	4b05      	ldr	r3, [pc, #20]	@ (800c13c <vTaskInternalSetTimeOutState+0x28>)
 800c126:	681a      	ldr	r2, [r3, #0]
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	605a      	str	r2, [r3, #4]
}
 800c12c:	bf00      	nop
 800c12e:	370c      	adds	r7, #12
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr
 800c138:	20000720 	.word	0x20000720
 800c13c:	2000070c 	.word	0x2000070c

0800c140 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b088      	sub	sp, #32
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d10b      	bne.n	800c168 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c154:	f383 8811 	msr	BASEPRI, r3
 800c158:	f3bf 8f6f 	isb	sy
 800c15c:	f3bf 8f4f 	dsb	sy
 800c160:	613b      	str	r3, [r7, #16]
}
 800c162:	bf00      	nop
 800c164:	bf00      	nop
 800c166:	e7fd      	b.n	800c164 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d10b      	bne.n	800c186 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c172:	f383 8811 	msr	BASEPRI, r3
 800c176:	f3bf 8f6f 	isb	sy
 800c17a:	f3bf 8f4f 	dsb	sy
 800c17e:	60fb      	str	r3, [r7, #12]
}
 800c180:	bf00      	nop
 800c182:	bf00      	nop
 800c184:	e7fd      	b.n	800c182 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c186:	f000 fb5f 	bl	800c848 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c18a:	4b1d      	ldr	r3, [pc, #116]	@ (800c200 <xTaskCheckForTimeOut+0xc0>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	69ba      	ldr	r2, [r7, #24]
 800c196:	1ad3      	subs	r3, r2, r3
 800c198:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c1a2:	d102      	bne.n	800c1aa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	61fb      	str	r3, [r7, #28]
 800c1a8:	e023      	b.n	800c1f2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	4b15      	ldr	r3, [pc, #84]	@ (800c204 <xTaskCheckForTimeOut+0xc4>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d007      	beq.n	800c1c6 <xTaskCheckForTimeOut+0x86>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	69ba      	ldr	r2, [r7, #24]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d302      	bcc.n	800c1c6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	61fb      	str	r3, [r7, #28]
 800c1c4:	e015      	b.n	800c1f2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	697a      	ldr	r2, [r7, #20]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d20b      	bcs.n	800c1e8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	1ad2      	subs	r2, r2, r3
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f7ff ff99 	bl	800c114 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	61fb      	str	r3, [r7, #28]
 800c1e6:	e004      	b.n	800c1f2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c1f2:	f000 fb5b 	bl	800c8ac <vPortExitCritical>

	return xReturn;
 800c1f6:	69fb      	ldr	r3, [r7, #28]
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3720      	adds	r7, #32
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	2000070c 	.word	0x2000070c
 800c204:	20000720 	.word	0x20000720

0800c208 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c208:	b480      	push	{r7}
 800c20a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c20c:	4b03      	ldr	r3, [pc, #12]	@ (800c21c <vTaskMissedYield+0x14>)
 800c20e:	2201      	movs	r2, #1
 800c210:	601a      	str	r2, [r3, #0]
}
 800c212:	bf00      	nop
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr
 800c21c:	2000071c 	.word	0x2000071c

0800c220 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b082      	sub	sp, #8
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c228:	f000 f854 	bl	800c2d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c22c:	4b07      	ldr	r3, [pc, #28]	@ (800c24c <prvIdleTask+0x2c>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2b01      	cmp	r3, #1
 800c232:	d907      	bls.n	800c244 <prvIdleTask+0x24>
			{
				taskYIELD();
 800c234:	4b06      	ldr	r3, [pc, #24]	@ (800c250 <prvIdleTask+0x30>)
 800c236:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c23a:	601a      	str	r2, [r3, #0]
 800c23c:	f3bf 8f4f 	dsb	sy
 800c240:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800c244:	f7f4 f94c 	bl	80004e0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800c248:	e7ee      	b.n	800c228 <prvIdleTask+0x8>
 800c24a:	bf00      	nop
 800c24c:	2000060c 	.word	0x2000060c
 800c250:	e000ed04 	.word	0xe000ed04

0800c254 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c25a:	2300      	movs	r3, #0
 800c25c:	607b      	str	r3, [r7, #4]
 800c25e:	e00c      	b.n	800c27a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	4613      	mov	r3, r2
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	4413      	add	r3, r2
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	4a12      	ldr	r2, [pc, #72]	@ (800c2b4 <prvInitialiseTaskLists+0x60>)
 800c26c:	4413      	add	r3, r2
 800c26e:	4618      	mov	r0, r3
 800c270:	f7fe fc9a 	bl	800aba8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	3301      	adds	r3, #1
 800c278:	607b      	str	r3, [r7, #4]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2b06      	cmp	r3, #6
 800c27e:	d9ef      	bls.n	800c260 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c280:	480d      	ldr	r0, [pc, #52]	@ (800c2b8 <prvInitialiseTaskLists+0x64>)
 800c282:	f7fe fc91 	bl	800aba8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c286:	480d      	ldr	r0, [pc, #52]	@ (800c2bc <prvInitialiseTaskLists+0x68>)
 800c288:	f7fe fc8e 	bl	800aba8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c28c:	480c      	ldr	r0, [pc, #48]	@ (800c2c0 <prvInitialiseTaskLists+0x6c>)
 800c28e:	f7fe fc8b 	bl	800aba8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c292:	480c      	ldr	r0, [pc, #48]	@ (800c2c4 <prvInitialiseTaskLists+0x70>)
 800c294:	f7fe fc88 	bl	800aba8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c298:	480b      	ldr	r0, [pc, #44]	@ (800c2c8 <prvInitialiseTaskLists+0x74>)
 800c29a:	f7fe fc85 	bl	800aba8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c29e:	4b0b      	ldr	r3, [pc, #44]	@ (800c2cc <prvInitialiseTaskLists+0x78>)
 800c2a0:	4a05      	ldr	r2, [pc, #20]	@ (800c2b8 <prvInitialiseTaskLists+0x64>)
 800c2a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c2a4:	4b0a      	ldr	r3, [pc, #40]	@ (800c2d0 <prvInitialiseTaskLists+0x7c>)
 800c2a6:	4a05      	ldr	r2, [pc, #20]	@ (800c2bc <prvInitialiseTaskLists+0x68>)
 800c2a8:	601a      	str	r2, [r3, #0]
}
 800c2aa:	bf00      	nop
 800c2ac:	3708      	adds	r7, #8
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	2000060c 	.word	0x2000060c
 800c2b8:	20000698 	.word	0x20000698
 800c2bc:	200006ac 	.word	0x200006ac
 800c2c0:	200006c8 	.word	0x200006c8
 800c2c4:	200006dc 	.word	0x200006dc
 800c2c8:	200006f4 	.word	0x200006f4
 800c2cc:	200006c0 	.word	0x200006c0
 800c2d0:	200006c4 	.word	0x200006c4

0800c2d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c2da:	e019      	b.n	800c310 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c2dc:	f000 fab4 	bl	800c848 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2e0:	4b10      	ldr	r3, [pc, #64]	@ (800c324 <prvCheckTasksWaitingTermination+0x50>)
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	3304      	adds	r3, #4
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f7fe fce5 	bl	800acbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c2f2:	4b0d      	ldr	r3, [pc, #52]	@ (800c328 <prvCheckTasksWaitingTermination+0x54>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	3b01      	subs	r3, #1
 800c2f8:	4a0b      	ldr	r2, [pc, #44]	@ (800c328 <prvCheckTasksWaitingTermination+0x54>)
 800c2fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c2fc:	4b0b      	ldr	r3, [pc, #44]	@ (800c32c <prvCheckTasksWaitingTermination+0x58>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	3b01      	subs	r3, #1
 800c302:	4a0a      	ldr	r2, [pc, #40]	@ (800c32c <prvCheckTasksWaitingTermination+0x58>)
 800c304:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c306:	f000 fad1 	bl	800c8ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 f810 	bl	800c330 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c310:	4b06      	ldr	r3, [pc, #24]	@ (800c32c <prvCheckTasksWaitingTermination+0x58>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d1e1      	bne.n	800c2dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c318:	bf00      	nop
 800c31a:	bf00      	nop
 800c31c:	3708      	adds	r7, #8
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop
 800c324:	200006dc 	.word	0x200006dc
 800c328:	20000708 	.word	0x20000708
 800c32c:	200006f0 	.word	0x200006f0

0800c330 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d108      	bne.n	800c354 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c346:	4618      	mov	r0, r3
 800c348:	f000 fc74 	bl	800cc34 <vPortFree>
				vPortFree( pxTCB );
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 fc71 	bl	800cc34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c352:	e019      	b.n	800c388 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d103      	bne.n	800c366 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f000 fc68 	bl	800cc34 <vPortFree>
	}
 800c364:	e010      	b.n	800c388 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800c36c:	2b02      	cmp	r3, #2
 800c36e:	d00b      	beq.n	800c388 <prvDeleteTCB+0x58>
	__asm volatile
 800c370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c374:	f383 8811 	msr	BASEPRI, r3
 800c378:	f3bf 8f6f 	isb	sy
 800c37c:	f3bf 8f4f 	dsb	sy
 800c380:	60fb      	str	r3, [r7, #12]
}
 800c382:	bf00      	nop
 800c384:	bf00      	nop
 800c386:	e7fd      	b.n	800c384 <prvDeleteTCB+0x54>
	}
 800c388:	bf00      	nop
 800c38a:	3710      	adds	r7, #16
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c390:	b480      	push	{r7}
 800c392:	b083      	sub	sp, #12
 800c394:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c396:	4b0c      	ldr	r3, [pc, #48]	@ (800c3c8 <prvResetNextTaskUnblockTime+0x38>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d104      	bne.n	800c3aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c3a0:	4b0a      	ldr	r3, [pc, #40]	@ (800c3cc <prvResetNextTaskUnblockTime+0x3c>)
 800c3a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c3a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c3a8:	e008      	b.n	800c3bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3aa:	4b07      	ldr	r3, [pc, #28]	@ (800c3c8 <prvResetNextTaskUnblockTime+0x38>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	68db      	ldr	r3, [r3, #12]
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	4a04      	ldr	r2, [pc, #16]	@ (800c3cc <prvResetNextTaskUnblockTime+0x3c>)
 800c3ba:	6013      	str	r3, [r2, #0]
}
 800c3bc:	bf00      	nop
 800c3be:	370c      	adds	r7, #12
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr
 800c3c8:	200006c0 	.word	0x200006c0
 800c3cc:	20000728 	.word	0x20000728

0800c3d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c3d6:	4b0b      	ldr	r3, [pc, #44]	@ (800c404 <xTaskGetSchedulerState+0x34>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d102      	bne.n	800c3e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c3de:	2301      	movs	r3, #1
 800c3e0:	607b      	str	r3, [r7, #4]
 800c3e2:	e008      	b.n	800c3f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3e4:	4b08      	ldr	r3, [pc, #32]	@ (800c408 <xTaskGetSchedulerState+0x38>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d102      	bne.n	800c3f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c3ec:	2302      	movs	r3, #2
 800c3ee:	607b      	str	r3, [r7, #4]
 800c3f0:	e001      	b.n	800c3f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c3f6:	687b      	ldr	r3, [r7, #4]
	}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	370c      	adds	r7, #12
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr
 800c404:	20000714 	.word	0x20000714
 800c408:	20000730 	.word	0x20000730

0800c40c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b086      	sub	sp, #24
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c418:	2300      	movs	r3, #0
 800c41a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d070      	beq.n	800c504 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c422:	4b3b      	ldr	r3, [pc, #236]	@ (800c510 <xTaskPriorityDisinherit+0x104>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	693a      	ldr	r2, [r7, #16]
 800c428:	429a      	cmp	r2, r3
 800c42a:	d00b      	beq.n	800c444 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c430:	f383 8811 	msr	BASEPRI, r3
 800c434:	f3bf 8f6f 	isb	sy
 800c438:	f3bf 8f4f 	dsb	sy
 800c43c:	60fb      	str	r3, [r7, #12]
}
 800c43e:	bf00      	nop
 800c440:	bf00      	nop
 800c442:	e7fd      	b.n	800c440 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d10b      	bne.n	800c464 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c450:	f383 8811 	msr	BASEPRI, r3
 800c454:	f3bf 8f6f 	isb	sy
 800c458:	f3bf 8f4f 	dsb	sy
 800c45c:	60bb      	str	r3, [r7, #8]
}
 800c45e:	bf00      	nop
 800c460:	bf00      	nop
 800c462:	e7fd      	b.n	800c460 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c468:	1e5a      	subs	r2, r3, #1
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c476:	429a      	cmp	r2, r3
 800c478:	d044      	beq.n	800c504 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d140      	bne.n	800c504 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	3304      	adds	r3, #4
 800c486:	4618      	mov	r0, r3
 800c488:	f7fe fc18 	bl	800acbc <uxListRemove>
 800c48c:	4603      	mov	r3, r0
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d115      	bne.n	800c4be <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c496:	491f      	ldr	r1, [pc, #124]	@ (800c514 <xTaskPriorityDisinherit+0x108>)
 800c498:	4613      	mov	r3, r2
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	4413      	add	r3, r2
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	440b      	add	r3, r1
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d10a      	bne.n	800c4be <xTaskPriorityDisinherit+0xb2>
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4ac:	2201      	movs	r2, #1
 800c4ae:	fa02 f303 	lsl.w	r3, r2, r3
 800c4b2:	43da      	mvns	r2, r3
 800c4b4:	4b18      	ldr	r3, [pc, #96]	@ (800c518 <xTaskPriorityDisinherit+0x10c>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4013      	ands	r3, r2
 800c4ba:	4a17      	ldr	r2, [pc, #92]	@ (800c518 <xTaskPriorityDisinherit+0x10c>)
 800c4bc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4ca:	f1c3 0207 	rsb	r2, r3, #7
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	409a      	lsls	r2, r3
 800c4da:	4b0f      	ldr	r3, [pc, #60]	@ (800c518 <xTaskPriorityDisinherit+0x10c>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	4a0d      	ldr	r2, [pc, #52]	@ (800c518 <xTaskPriorityDisinherit+0x10c>)
 800c4e2:	6013      	str	r3, [r2, #0]
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4e8:	4613      	mov	r3, r2
 800c4ea:	009b      	lsls	r3, r3, #2
 800c4ec:	4413      	add	r3, r2
 800c4ee:	009b      	lsls	r3, r3, #2
 800c4f0:	4a08      	ldr	r2, [pc, #32]	@ (800c514 <xTaskPriorityDisinherit+0x108>)
 800c4f2:	441a      	add	r2, r3
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	3304      	adds	r3, #4
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	4610      	mov	r0, r2
 800c4fc:	f7fe fb81 	bl	800ac02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c500:	2301      	movs	r3, #1
 800c502:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c504:	697b      	ldr	r3, [r7, #20]
	}
 800c506:	4618      	mov	r0, r3
 800c508:	3718      	adds	r7, #24
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	20000608 	.word	0x20000608
 800c514:	2000060c 	.word	0x2000060c
 800c518:	20000710 	.word	0x20000710

0800c51c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c526:	4b29      	ldr	r3, [pc, #164]	@ (800c5cc <prvAddCurrentTaskToDelayedList+0xb0>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c52c:	4b28      	ldr	r3, [pc, #160]	@ (800c5d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	3304      	adds	r3, #4
 800c532:	4618      	mov	r0, r3
 800c534:	f7fe fbc2 	bl	800acbc <uxListRemove>
 800c538:	4603      	mov	r3, r0
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d10b      	bne.n	800c556 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c53e:	4b24      	ldr	r3, [pc, #144]	@ (800c5d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c544:	2201      	movs	r2, #1
 800c546:	fa02 f303 	lsl.w	r3, r2, r3
 800c54a:	43da      	mvns	r2, r3
 800c54c:	4b21      	ldr	r3, [pc, #132]	@ (800c5d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4013      	ands	r3, r2
 800c552:	4a20      	ldr	r2, [pc, #128]	@ (800c5d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c554:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c55c:	d10a      	bne.n	800c574 <prvAddCurrentTaskToDelayedList+0x58>
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d007      	beq.n	800c574 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c564:	4b1a      	ldr	r3, [pc, #104]	@ (800c5d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	3304      	adds	r3, #4
 800c56a:	4619      	mov	r1, r3
 800c56c:	481a      	ldr	r0, [pc, #104]	@ (800c5d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c56e:	f7fe fb48 	bl	800ac02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c572:	e026      	b.n	800c5c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c574:	68fa      	ldr	r2, [r7, #12]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	4413      	add	r3, r2
 800c57a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c57c:	4b14      	ldr	r3, [pc, #80]	@ (800c5d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	68ba      	ldr	r2, [r7, #8]
 800c582:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c584:	68ba      	ldr	r2, [r7, #8]
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d209      	bcs.n	800c5a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c58c:	4b13      	ldr	r3, [pc, #76]	@ (800c5dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800c58e:	681a      	ldr	r2, [r3, #0]
 800c590:	4b0f      	ldr	r3, [pc, #60]	@ (800c5d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	3304      	adds	r3, #4
 800c596:	4619      	mov	r1, r3
 800c598:	4610      	mov	r0, r2
 800c59a:	f7fe fb56 	bl	800ac4a <vListInsert>
}
 800c59e:	e010      	b.n	800c5c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5a0:	4b0f      	ldr	r3, [pc, #60]	@ (800c5e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	4b0a      	ldr	r3, [pc, #40]	@ (800c5d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	3304      	adds	r3, #4
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	4610      	mov	r0, r2
 800c5ae:	f7fe fb4c 	bl	800ac4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c5b2:	4b0c      	ldr	r3, [pc, #48]	@ (800c5e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	68ba      	ldr	r2, [r7, #8]
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d202      	bcs.n	800c5c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c5bc:	4a09      	ldr	r2, [pc, #36]	@ (800c5e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	6013      	str	r3, [r2, #0]
}
 800c5c2:	bf00      	nop
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	2000070c 	.word	0x2000070c
 800c5d0:	20000608 	.word	0x20000608
 800c5d4:	20000710 	.word	0x20000710
 800c5d8:	200006f4 	.word	0x200006f4
 800c5dc:	200006c4 	.word	0x200006c4
 800c5e0:	200006c0 	.word	0x200006c0
 800c5e4:	20000728 	.word	0x20000728

0800c5e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b085      	sub	sp, #20
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	3b04      	subs	r3, #4
 800c5f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c600:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	3b04      	subs	r3, #4
 800c606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	f023 0201 	bic.w	r2, r3, #1
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	3b04      	subs	r3, #4
 800c616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c618:	4a0c      	ldr	r2, [pc, #48]	@ (800c64c <pxPortInitialiseStack+0x64>)
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	3b14      	subs	r3, #20
 800c622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	3b04      	subs	r3, #4
 800c62e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f06f 0202 	mvn.w	r2, #2
 800c636:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	3b20      	subs	r3, #32
 800c63c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c63e:	68fb      	ldr	r3, [r7, #12]
}
 800c640:	4618      	mov	r0, r3
 800c642:	3714      	adds	r7, #20
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr
 800c64c:	0800c651 	.word	0x0800c651

0800c650 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c650:	b480      	push	{r7}
 800c652:	b085      	sub	sp, #20
 800c654:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c656:	2300      	movs	r3, #0
 800c658:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c65a:	4b13      	ldr	r3, [pc, #76]	@ (800c6a8 <prvTaskExitError+0x58>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c662:	d00b      	beq.n	800c67c <prvTaskExitError+0x2c>
	__asm volatile
 800c664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c668:	f383 8811 	msr	BASEPRI, r3
 800c66c:	f3bf 8f6f 	isb	sy
 800c670:	f3bf 8f4f 	dsb	sy
 800c674:	60fb      	str	r3, [r7, #12]
}
 800c676:	bf00      	nop
 800c678:	bf00      	nop
 800c67a:	e7fd      	b.n	800c678 <prvTaskExitError+0x28>
	__asm volatile
 800c67c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c680:	f383 8811 	msr	BASEPRI, r3
 800c684:	f3bf 8f6f 	isb	sy
 800c688:	f3bf 8f4f 	dsb	sy
 800c68c:	60bb      	str	r3, [r7, #8]
}
 800c68e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c690:	bf00      	nop
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d0fc      	beq.n	800c692 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c698:	bf00      	nop
 800c69a:	bf00      	nop
 800c69c:	3714      	adds	r7, #20
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a4:	4770      	bx	lr
 800c6a6:	bf00      	nop
 800c6a8:	20000034 	.word	0x20000034
 800c6ac:	00000000 	.word	0x00000000

0800c6b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c6b0:	4b07      	ldr	r3, [pc, #28]	@ (800c6d0 <pxCurrentTCBConst2>)
 800c6b2:	6819      	ldr	r1, [r3, #0]
 800c6b4:	6808      	ldr	r0, [r1, #0]
 800c6b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ba:	f380 8809 	msr	PSP, r0
 800c6be:	f3bf 8f6f 	isb	sy
 800c6c2:	f04f 0000 	mov.w	r0, #0
 800c6c6:	f380 8811 	msr	BASEPRI, r0
 800c6ca:	4770      	bx	lr
 800c6cc:	f3af 8000 	nop.w

0800c6d0 <pxCurrentTCBConst2>:
 800c6d0:	20000608 	.word	0x20000608
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c6d4:	bf00      	nop
 800c6d6:	bf00      	nop

0800c6d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c6d8:	4808      	ldr	r0, [pc, #32]	@ (800c6fc <prvPortStartFirstTask+0x24>)
 800c6da:	6800      	ldr	r0, [r0, #0]
 800c6dc:	6800      	ldr	r0, [r0, #0]
 800c6de:	f380 8808 	msr	MSP, r0
 800c6e2:	f04f 0000 	mov.w	r0, #0
 800c6e6:	f380 8814 	msr	CONTROL, r0
 800c6ea:	b662      	cpsie	i
 800c6ec:	b661      	cpsie	f
 800c6ee:	f3bf 8f4f 	dsb	sy
 800c6f2:	f3bf 8f6f 	isb	sy
 800c6f6:	df00      	svc	0
 800c6f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c6fa:	bf00      	nop
 800c6fc:	e000ed08 	.word	0xe000ed08

0800c700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b086      	sub	sp, #24
 800c704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c706:	4b47      	ldr	r3, [pc, #284]	@ (800c824 <xPortStartScheduler+0x124>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4a47      	ldr	r2, [pc, #284]	@ (800c828 <xPortStartScheduler+0x128>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d10b      	bne.n	800c728 <xPortStartScheduler+0x28>
	__asm volatile
 800c710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c714:	f383 8811 	msr	BASEPRI, r3
 800c718:	f3bf 8f6f 	isb	sy
 800c71c:	f3bf 8f4f 	dsb	sy
 800c720:	613b      	str	r3, [r7, #16]
}
 800c722:	bf00      	nop
 800c724:	bf00      	nop
 800c726:	e7fd      	b.n	800c724 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c728:	4b3e      	ldr	r3, [pc, #248]	@ (800c824 <xPortStartScheduler+0x124>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4a3f      	ldr	r2, [pc, #252]	@ (800c82c <xPortStartScheduler+0x12c>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d10b      	bne.n	800c74a <xPortStartScheduler+0x4a>
	__asm volatile
 800c732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c736:	f383 8811 	msr	BASEPRI, r3
 800c73a:	f3bf 8f6f 	isb	sy
 800c73e:	f3bf 8f4f 	dsb	sy
 800c742:	60fb      	str	r3, [r7, #12]
}
 800c744:	bf00      	nop
 800c746:	bf00      	nop
 800c748:	e7fd      	b.n	800c746 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c74a:	4b39      	ldr	r3, [pc, #228]	@ (800c830 <xPortStartScheduler+0x130>)
 800c74c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	b2db      	uxtb	r3, r3
 800c754:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	22ff      	movs	r2, #255	@ 0xff
 800c75a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	b2db      	uxtb	r3, r3
 800c762:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c764:	78fb      	ldrb	r3, [r7, #3]
 800c766:	b2db      	uxtb	r3, r3
 800c768:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c76c:	b2da      	uxtb	r2, r3
 800c76e:	4b31      	ldr	r3, [pc, #196]	@ (800c834 <xPortStartScheduler+0x134>)
 800c770:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c772:	4b31      	ldr	r3, [pc, #196]	@ (800c838 <xPortStartScheduler+0x138>)
 800c774:	2207      	movs	r2, #7
 800c776:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c778:	e009      	b.n	800c78e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c77a:	4b2f      	ldr	r3, [pc, #188]	@ (800c838 <xPortStartScheduler+0x138>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	3b01      	subs	r3, #1
 800c780:	4a2d      	ldr	r2, [pc, #180]	@ (800c838 <xPortStartScheduler+0x138>)
 800c782:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c784:	78fb      	ldrb	r3, [r7, #3]
 800c786:	b2db      	uxtb	r3, r3
 800c788:	005b      	lsls	r3, r3, #1
 800c78a:	b2db      	uxtb	r3, r3
 800c78c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c78e:	78fb      	ldrb	r3, [r7, #3]
 800c790:	b2db      	uxtb	r3, r3
 800c792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c796:	2b80      	cmp	r3, #128	@ 0x80
 800c798:	d0ef      	beq.n	800c77a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c79a:	4b27      	ldr	r3, [pc, #156]	@ (800c838 <xPortStartScheduler+0x138>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f1c3 0307 	rsb	r3, r3, #7
 800c7a2:	2b04      	cmp	r3, #4
 800c7a4:	d00b      	beq.n	800c7be <xPortStartScheduler+0xbe>
	__asm volatile
 800c7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7aa:	f383 8811 	msr	BASEPRI, r3
 800c7ae:	f3bf 8f6f 	isb	sy
 800c7b2:	f3bf 8f4f 	dsb	sy
 800c7b6:	60bb      	str	r3, [r7, #8]
}
 800c7b8:	bf00      	nop
 800c7ba:	bf00      	nop
 800c7bc:	e7fd      	b.n	800c7ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c7be:	4b1e      	ldr	r3, [pc, #120]	@ (800c838 <xPortStartScheduler+0x138>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	021b      	lsls	r3, r3, #8
 800c7c4:	4a1c      	ldr	r2, [pc, #112]	@ (800c838 <xPortStartScheduler+0x138>)
 800c7c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c7c8:	4b1b      	ldr	r3, [pc, #108]	@ (800c838 <xPortStartScheduler+0x138>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c7d0:	4a19      	ldr	r2, [pc, #100]	@ (800c838 <xPortStartScheduler+0x138>)
 800c7d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	b2da      	uxtb	r2, r3
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c7dc:	4b17      	ldr	r3, [pc, #92]	@ (800c83c <xPortStartScheduler+0x13c>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4a16      	ldr	r2, [pc, #88]	@ (800c83c <xPortStartScheduler+0x13c>)
 800c7e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c7e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c7e8:	4b14      	ldr	r3, [pc, #80]	@ (800c83c <xPortStartScheduler+0x13c>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4a13      	ldr	r2, [pc, #76]	@ (800c83c <xPortStartScheduler+0x13c>)
 800c7ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c7f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c7f4:	f000 f8da 	bl	800c9ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c7f8:	4b11      	ldr	r3, [pc, #68]	@ (800c840 <xPortStartScheduler+0x140>)
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c7fe:	f000 f8f9 	bl	800c9f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c802:	4b10      	ldr	r3, [pc, #64]	@ (800c844 <xPortStartScheduler+0x144>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	4a0f      	ldr	r2, [pc, #60]	@ (800c844 <xPortStartScheduler+0x144>)
 800c808:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c80c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c80e:	f7ff ff63 	bl	800c6d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c812:	f7ff fb73 	bl	800befc <vTaskSwitchContext>
	prvTaskExitError();
 800c816:	f7ff ff1b 	bl	800c650 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c81a:	2300      	movs	r3, #0
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3718      	adds	r7, #24
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}
 800c824:	e000ed00 	.word	0xe000ed00
 800c828:	410fc271 	.word	0x410fc271
 800c82c:	410fc270 	.word	0x410fc270
 800c830:	e000e400 	.word	0xe000e400
 800c834:	20000734 	.word	0x20000734
 800c838:	20000738 	.word	0x20000738
 800c83c:	e000ed20 	.word	0xe000ed20
 800c840:	20000034 	.word	0x20000034
 800c844:	e000ef34 	.word	0xe000ef34

0800c848 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
	__asm volatile
 800c84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c852:	f383 8811 	msr	BASEPRI, r3
 800c856:	f3bf 8f6f 	isb	sy
 800c85a:	f3bf 8f4f 	dsb	sy
 800c85e:	607b      	str	r3, [r7, #4]
}
 800c860:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c862:	4b10      	ldr	r3, [pc, #64]	@ (800c8a4 <vPortEnterCritical+0x5c>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	3301      	adds	r3, #1
 800c868:	4a0e      	ldr	r2, [pc, #56]	@ (800c8a4 <vPortEnterCritical+0x5c>)
 800c86a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c86c:	4b0d      	ldr	r3, [pc, #52]	@ (800c8a4 <vPortEnterCritical+0x5c>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2b01      	cmp	r3, #1
 800c872:	d110      	bne.n	800c896 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c874:	4b0c      	ldr	r3, [pc, #48]	@ (800c8a8 <vPortEnterCritical+0x60>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	b2db      	uxtb	r3, r3
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d00b      	beq.n	800c896 <vPortEnterCritical+0x4e>
	__asm volatile
 800c87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c882:	f383 8811 	msr	BASEPRI, r3
 800c886:	f3bf 8f6f 	isb	sy
 800c88a:	f3bf 8f4f 	dsb	sy
 800c88e:	603b      	str	r3, [r7, #0]
}
 800c890:	bf00      	nop
 800c892:	bf00      	nop
 800c894:	e7fd      	b.n	800c892 <vPortEnterCritical+0x4a>
	}
}
 800c896:	bf00      	nop
 800c898:	370c      	adds	r7, #12
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr
 800c8a2:	bf00      	nop
 800c8a4:	20000034 	.word	0x20000034
 800c8a8:	e000ed04 	.word	0xe000ed04

0800c8ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b083      	sub	sp, #12
 800c8b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c8b2:	4b12      	ldr	r3, [pc, #72]	@ (800c8fc <vPortExitCritical+0x50>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d10b      	bne.n	800c8d2 <vPortExitCritical+0x26>
	__asm volatile
 800c8ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8be:	f383 8811 	msr	BASEPRI, r3
 800c8c2:	f3bf 8f6f 	isb	sy
 800c8c6:	f3bf 8f4f 	dsb	sy
 800c8ca:	607b      	str	r3, [r7, #4]
}
 800c8cc:	bf00      	nop
 800c8ce:	bf00      	nop
 800c8d0:	e7fd      	b.n	800c8ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c8d2:	4b0a      	ldr	r3, [pc, #40]	@ (800c8fc <vPortExitCritical+0x50>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	4a08      	ldr	r2, [pc, #32]	@ (800c8fc <vPortExitCritical+0x50>)
 800c8da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c8dc:	4b07      	ldr	r3, [pc, #28]	@ (800c8fc <vPortExitCritical+0x50>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d105      	bne.n	800c8f0 <vPortExitCritical+0x44>
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	f383 8811 	msr	BASEPRI, r3
}
 800c8ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c8f0:	bf00      	nop
 800c8f2:	370c      	adds	r7, #12
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr
 800c8fc:	20000034 	.word	0x20000034

0800c900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c900:	f3ef 8009 	mrs	r0, PSP
 800c904:	f3bf 8f6f 	isb	sy
 800c908:	4b15      	ldr	r3, [pc, #84]	@ (800c960 <pxCurrentTCBConst>)
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	f01e 0f10 	tst.w	lr, #16
 800c910:	bf08      	it	eq
 800c912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c91a:	6010      	str	r0, [r2, #0]
 800c91c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c920:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c924:	f380 8811 	msr	BASEPRI, r0
 800c928:	f3bf 8f4f 	dsb	sy
 800c92c:	f3bf 8f6f 	isb	sy
 800c930:	f7ff fae4 	bl	800befc <vTaskSwitchContext>
 800c934:	f04f 0000 	mov.w	r0, #0
 800c938:	f380 8811 	msr	BASEPRI, r0
 800c93c:	bc09      	pop	{r0, r3}
 800c93e:	6819      	ldr	r1, [r3, #0]
 800c940:	6808      	ldr	r0, [r1, #0]
 800c942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c946:	f01e 0f10 	tst.w	lr, #16
 800c94a:	bf08      	it	eq
 800c94c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c950:	f380 8809 	msr	PSP, r0
 800c954:	f3bf 8f6f 	isb	sy
 800c958:	4770      	bx	lr
 800c95a:	bf00      	nop
 800c95c:	f3af 8000 	nop.w

0800c960 <pxCurrentTCBConst>:
 800c960:	20000608 	.word	0x20000608
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c964:	bf00      	nop
 800c966:	bf00      	nop

0800c968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af00      	add	r7, sp, #0
	__asm volatile
 800c96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c972:	f383 8811 	msr	BASEPRI, r3
 800c976:	f3bf 8f6f 	isb	sy
 800c97a:	f3bf 8f4f 	dsb	sy
 800c97e:	607b      	str	r3, [r7, #4]
}
 800c980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c982:	f7ff fa01 	bl	800bd88 <xTaskIncrementTick>
 800c986:	4603      	mov	r3, r0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d003      	beq.n	800c994 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c98c:	4b06      	ldr	r3, [pc, #24]	@ (800c9a8 <SysTick_Handler+0x40>)
 800c98e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c992:	601a      	str	r2, [r3, #0]
 800c994:	2300      	movs	r3, #0
 800c996:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	f383 8811 	msr	BASEPRI, r3
}
 800c99e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c9a0:	bf00      	nop
 800c9a2:	3708      	adds	r7, #8
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	e000ed04 	.word	0xe000ed04

0800c9ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c9b0:	4b0b      	ldr	r3, [pc, #44]	@ (800c9e0 <vPortSetupTimerInterrupt+0x34>)
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c9b6:	4b0b      	ldr	r3, [pc, #44]	@ (800c9e4 <vPortSetupTimerInterrupt+0x38>)
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c9bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c9e8 <vPortSetupTimerInterrupt+0x3c>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a0a      	ldr	r2, [pc, #40]	@ (800c9ec <vPortSetupTimerInterrupt+0x40>)
 800c9c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9c6:	099b      	lsrs	r3, r3, #6
 800c9c8:	4a09      	ldr	r2, [pc, #36]	@ (800c9f0 <vPortSetupTimerInterrupt+0x44>)
 800c9ca:	3b01      	subs	r3, #1
 800c9cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c9ce:	4b04      	ldr	r3, [pc, #16]	@ (800c9e0 <vPortSetupTimerInterrupt+0x34>)
 800c9d0:	2207      	movs	r2, #7
 800c9d2:	601a      	str	r2, [r3, #0]
}
 800c9d4:	bf00      	nop
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9dc:	4770      	bx	lr
 800c9de:	bf00      	nop
 800c9e0:	e000e010 	.word	0xe000e010
 800c9e4:	e000e018 	.word	0xe000e018
 800c9e8:	20000008 	.word	0x20000008
 800c9ec:	10624dd3 	.word	0x10624dd3
 800c9f0:	e000e014 	.word	0xe000e014

0800c9f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c9f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ca04 <vPortEnableVFP+0x10>
 800c9f8:	6801      	ldr	r1, [r0, #0]
 800c9fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c9fe:	6001      	str	r1, [r0, #0]
 800ca00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ca02:	bf00      	nop
 800ca04:	e000ed88 	.word	0xe000ed88

0800ca08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ca08:	b480      	push	{r7}
 800ca0a:	b085      	sub	sp, #20
 800ca0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ca0e:	f3ef 8305 	mrs	r3, IPSR
 800ca12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2b0f      	cmp	r3, #15
 800ca18:	d915      	bls.n	800ca46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ca1a:	4a18      	ldr	r2, [pc, #96]	@ (800ca7c <vPortValidateInterruptPriority+0x74>)
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	4413      	add	r3, r2
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ca24:	4b16      	ldr	r3, [pc, #88]	@ (800ca80 <vPortValidateInterruptPriority+0x78>)
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	7afa      	ldrb	r2, [r7, #11]
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d20b      	bcs.n	800ca46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ca2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca32:	f383 8811 	msr	BASEPRI, r3
 800ca36:	f3bf 8f6f 	isb	sy
 800ca3a:	f3bf 8f4f 	dsb	sy
 800ca3e:	607b      	str	r3, [r7, #4]
}
 800ca40:	bf00      	nop
 800ca42:	bf00      	nop
 800ca44:	e7fd      	b.n	800ca42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ca46:	4b0f      	ldr	r3, [pc, #60]	@ (800ca84 <vPortValidateInterruptPriority+0x7c>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ca4e:	4b0e      	ldr	r3, [pc, #56]	@ (800ca88 <vPortValidateInterruptPriority+0x80>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d90b      	bls.n	800ca6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ca56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca5a:	f383 8811 	msr	BASEPRI, r3
 800ca5e:	f3bf 8f6f 	isb	sy
 800ca62:	f3bf 8f4f 	dsb	sy
 800ca66:	603b      	str	r3, [r7, #0]
}
 800ca68:	bf00      	nop
 800ca6a:	bf00      	nop
 800ca6c:	e7fd      	b.n	800ca6a <vPortValidateInterruptPriority+0x62>
	}
 800ca6e:	bf00      	nop
 800ca70:	3714      	adds	r7, #20
 800ca72:	46bd      	mov	sp, r7
 800ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca78:	4770      	bx	lr
 800ca7a:	bf00      	nop
 800ca7c:	e000e3f0 	.word	0xe000e3f0
 800ca80:	20000734 	.word	0x20000734
 800ca84:	e000ed0c 	.word	0xe000ed0c
 800ca88:	20000738 	.word	0x20000738

0800ca8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b08a      	sub	sp, #40	@ 0x28
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ca94:	2300      	movs	r3, #0
 800ca96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ca98:	f7ff f8ca 	bl	800bc30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ca9c:	4b5f      	ldr	r3, [pc, #380]	@ (800cc1c <pvPortMalloc+0x190>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d101      	bne.n	800caa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800caa4:	f000 f92a 	bl	800ccfc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800caa8:	4b5d      	ldr	r3, [pc, #372]	@ (800cc20 <pvPortMalloc+0x194>)
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	4013      	ands	r3, r2
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	f040 8095 	bne.w	800cbe0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d01e      	beq.n	800cafa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cabc:	2208      	movs	r2, #8
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4413      	add	r3, r2
 800cac2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f003 0307 	and.w	r3, r3, #7
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d015      	beq.n	800cafa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f023 0307 	bic.w	r3, r3, #7
 800cad4:	3308      	adds	r3, #8
 800cad6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f003 0307 	and.w	r3, r3, #7
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d00b      	beq.n	800cafa <pvPortMalloc+0x6e>
	__asm volatile
 800cae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cae6:	f383 8811 	msr	BASEPRI, r3
 800caea:	f3bf 8f6f 	isb	sy
 800caee:	f3bf 8f4f 	dsb	sy
 800caf2:	617b      	str	r3, [r7, #20]
}
 800caf4:	bf00      	nop
 800caf6:	bf00      	nop
 800caf8:	e7fd      	b.n	800caf6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d06f      	beq.n	800cbe0 <pvPortMalloc+0x154>
 800cb00:	4b48      	ldr	r3, [pc, #288]	@ (800cc24 <pvPortMalloc+0x198>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d86a      	bhi.n	800cbe0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cb0a:	4b47      	ldr	r3, [pc, #284]	@ (800cc28 <pvPortMalloc+0x19c>)
 800cb0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cb0e:	4b46      	ldr	r3, [pc, #280]	@ (800cc28 <pvPortMalloc+0x19c>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb14:	e004      	b.n	800cb20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cb16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb22:	685b      	ldr	r3, [r3, #4]
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d903      	bls.n	800cb32 <pvPortMalloc+0xa6>
 800cb2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d1f1      	bne.n	800cb16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cb32:	4b3a      	ldr	r3, [pc, #232]	@ (800cc1c <pvPortMalloc+0x190>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d051      	beq.n	800cbe0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cb3c:	6a3b      	ldr	r3, [r7, #32]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	2208      	movs	r2, #8
 800cb42:	4413      	add	r3, r2
 800cb44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cb46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	6a3b      	ldr	r3, [r7, #32]
 800cb4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cb4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb50:	685a      	ldr	r2, [r3, #4]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	1ad2      	subs	r2, r2, r3
 800cb56:	2308      	movs	r3, #8
 800cb58:	005b      	lsls	r3, r3, #1
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d920      	bls.n	800cba0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cb5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	4413      	add	r3, r2
 800cb64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb66:	69bb      	ldr	r3, [r7, #24]
 800cb68:	f003 0307 	and.w	r3, r3, #7
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d00b      	beq.n	800cb88 <pvPortMalloc+0xfc>
	__asm volatile
 800cb70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb74:	f383 8811 	msr	BASEPRI, r3
 800cb78:	f3bf 8f6f 	isb	sy
 800cb7c:	f3bf 8f4f 	dsb	sy
 800cb80:	613b      	str	r3, [r7, #16]
}
 800cb82:	bf00      	nop
 800cb84:	bf00      	nop
 800cb86:	e7fd      	b.n	800cb84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cb88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb8a:	685a      	ldr	r2, [r3, #4]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	1ad2      	subs	r2, r2, r3
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cb94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb96:	687a      	ldr	r2, [r7, #4]
 800cb98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cb9a:	69b8      	ldr	r0, [r7, #24]
 800cb9c:	f000 f910 	bl	800cdc0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cba0:	4b20      	ldr	r3, [pc, #128]	@ (800cc24 <pvPortMalloc+0x198>)
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	1ad3      	subs	r3, r2, r3
 800cbaa:	4a1e      	ldr	r2, [pc, #120]	@ (800cc24 <pvPortMalloc+0x198>)
 800cbac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cbae:	4b1d      	ldr	r3, [pc, #116]	@ (800cc24 <pvPortMalloc+0x198>)
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	4b1e      	ldr	r3, [pc, #120]	@ (800cc2c <pvPortMalloc+0x1a0>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d203      	bcs.n	800cbc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cbba:	4b1a      	ldr	r3, [pc, #104]	@ (800cc24 <pvPortMalloc+0x198>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	4a1b      	ldr	r2, [pc, #108]	@ (800cc2c <pvPortMalloc+0x1a0>)
 800cbc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc4:	685a      	ldr	r2, [r3, #4]
 800cbc6:	4b16      	ldr	r3, [pc, #88]	@ (800cc20 <pvPortMalloc+0x194>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	431a      	orrs	r2, r3
 800cbcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cbd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cbd6:	4b16      	ldr	r3, [pc, #88]	@ (800cc30 <pvPortMalloc+0x1a4>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	3301      	adds	r3, #1
 800cbdc:	4a14      	ldr	r2, [pc, #80]	@ (800cc30 <pvPortMalloc+0x1a4>)
 800cbde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cbe0:	f7ff f834 	bl	800bc4c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d101      	bne.n	800cbee <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800cbea:	f7f3 fc8b 	bl	8000504 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbee:	69fb      	ldr	r3, [r7, #28]
 800cbf0:	f003 0307 	and.w	r3, r3, #7
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d00b      	beq.n	800cc10 <pvPortMalloc+0x184>
	__asm volatile
 800cbf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbfc:	f383 8811 	msr	BASEPRI, r3
 800cc00:	f3bf 8f6f 	isb	sy
 800cc04:	f3bf 8f4f 	dsb	sy
 800cc08:	60fb      	str	r3, [r7, #12]
}
 800cc0a:	bf00      	nop
 800cc0c:	bf00      	nop
 800cc0e:	e7fd      	b.n	800cc0c <pvPortMalloc+0x180>
	return pvReturn;
 800cc10:	69fb      	ldr	r3, [r7, #28]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3728      	adds	r7, #40	@ 0x28
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	20008744 	.word	0x20008744
 800cc20:	20008758 	.word	0x20008758
 800cc24:	20008748 	.word	0x20008748
 800cc28:	2000873c 	.word	0x2000873c
 800cc2c:	2000874c 	.word	0x2000874c
 800cc30:	20008750 	.word	0x20008750

0800cc34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b086      	sub	sp, #24
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d04f      	beq.n	800cce6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cc46:	2308      	movs	r3, #8
 800cc48:	425b      	negs	r3, r3
 800cc4a:	697a      	ldr	r2, [r7, #20]
 800cc4c:	4413      	add	r3, r2
 800cc4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	685a      	ldr	r2, [r3, #4]
 800cc58:	4b25      	ldr	r3, [pc, #148]	@ (800ccf0 <vPortFree+0xbc>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4013      	ands	r3, r2
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d10b      	bne.n	800cc7a <vPortFree+0x46>
	__asm volatile
 800cc62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc66:	f383 8811 	msr	BASEPRI, r3
 800cc6a:	f3bf 8f6f 	isb	sy
 800cc6e:	f3bf 8f4f 	dsb	sy
 800cc72:	60fb      	str	r3, [r7, #12]
}
 800cc74:	bf00      	nop
 800cc76:	bf00      	nop
 800cc78:	e7fd      	b.n	800cc76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d00b      	beq.n	800cc9a <vPortFree+0x66>
	__asm volatile
 800cc82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc86:	f383 8811 	msr	BASEPRI, r3
 800cc8a:	f3bf 8f6f 	isb	sy
 800cc8e:	f3bf 8f4f 	dsb	sy
 800cc92:	60bb      	str	r3, [r7, #8]
}
 800cc94:	bf00      	nop
 800cc96:	bf00      	nop
 800cc98:	e7fd      	b.n	800cc96 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	685a      	ldr	r2, [r3, #4]
 800cc9e:	4b14      	ldr	r3, [pc, #80]	@ (800ccf0 <vPortFree+0xbc>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	4013      	ands	r3, r2
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d01e      	beq.n	800cce6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d11a      	bne.n	800cce6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	685a      	ldr	r2, [r3, #4]
 800ccb4:	4b0e      	ldr	r3, [pc, #56]	@ (800ccf0 <vPortFree+0xbc>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	43db      	mvns	r3, r3
 800ccba:	401a      	ands	r2, r3
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ccc0:	f7fe ffb6 	bl	800bc30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	685a      	ldr	r2, [r3, #4]
 800ccc8:	4b0a      	ldr	r3, [pc, #40]	@ (800ccf4 <vPortFree+0xc0>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	4413      	add	r3, r2
 800ccce:	4a09      	ldr	r2, [pc, #36]	@ (800ccf4 <vPortFree+0xc0>)
 800ccd0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ccd2:	6938      	ldr	r0, [r7, #16]
 800ccd4:	f000 f874 	bl	800cdc0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ccd8:	4b07      	ldr	r3, [pc, #28]	@ (800ccf8 <vPortFree+0xc4>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	3301      	adds	r3, #1
 800ccde:	4a06      	ldr	r2, [pc, #24]	@ (800ccf8 <vPortFree+0xc4>)
 800cce0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cce2:	f7fe ffb3 	bl	800bc4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cce6:	bf00      	nop
 800cce8:	3718      	adds	r7, #24
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	20008758 	.word	0x20008758
 800ccf4:	20008748 	.word	0x20008748
 800ccf8:	20008754 	.word	0x20008754

0800ccfc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b085      	sub	sp, #20
 800cd00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cd02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cd08:	4b27      	ldr	r3, [pc, #156]	@ (800cda8 <prvHeapInit+0xac>)
 800cd0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f003 0307 	and.w	r3, r3, #7
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d00c      	beq.n	800cd30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	3307      	adds	r3, #7
 800cd1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f023 0307 	bic.w	r3, r3, #7
 800cd22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cd24:	68ba      	ldr	r2, [r7, #8]
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	1ad3      	subs	r3, r2, r3
 800cd2a:	4a1f      	ldr	r2, [pc, #124]	@ (800cda8 <prvHeapInit+0xac>)
 800cd2c:	4413      	add	r3, r2
 800cd2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cd34:	4a1d      	ldr	r2, [pc, #116]	@ (800cdac <prvHeapInit+0xb0>)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cd3a:	4b1c      	ldr	r3, [pc, #112]	@ (800cdac <prvHeapInit+0xb0>)
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	68ba      	ldr	r2, [r7, #8]
 800cd44:	4413      	add	r3, r2
 800cd46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cd48:	2208      	movs	r2, #8
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	1a9b      	subs	r3, r3, r2
 800cd4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f023 0307 	bic.w	r3, r3, #7
 800cd56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	4a15      	ldr	r2, [pc, #84]	@ (800cdb0 <prvHeapInit+0xb4>)
 800cd5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cd5e:	4b14      	ldr	r3, [pc, #80]	@ (800cdb0 <prvHeapInit+0xb4>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	2200      	movs	r2, #0
 800cd64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cd66:	4b12      	ldr	r3, [pc, #72]	@ (800cdb0 <prvHeapInit+0xb4>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	68fa      	ldr	r2, [r7, #12]
 800cd76:	1ad2      	subs	r2, r2, r3
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd7c:	4b0c      	ldr	r3, [pc, #48]	@ (800cdb0 <prvHeapInit+0xb4>)
 800cd7e:	681a      	ldr	r2, [r3, #0]
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	4a0a      	ldr	r2, [pc, #40]	@ (800cdb4 <prvHeapInit+0xb8>)
 800cd8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	685b      	ldr	r3, [r3, #4]
 800cd90:	4a09      	ldr	r2, [pc, #36]	@ (800cdb8 <prvHeapInit+0xbc>)
 800cd92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cd94:	4b09      	ldr	r3, [pc, #36]	@ (800cdbc <prvHeapInit+0xc0>)
 800cd96:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cd9a:	601a      	str	r2, [r3, #0]
}
 800cd9c:	bf00      	nop
 800cd9e:	3714      	adds	r7, #20
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr
 800cda8:	2000073c 	.word	0x2000073c
 800cdac:	2000873c 	.word	0x2000873c
 800cdb0:	20008744 	.word	0x20008744
 800cdb4:	2000874c 	.word	0x2000874c
 800cdb8:	20008748 	.word	0x20008748
 800cdbc:	20008758 	.word	0x20008758

0800cdc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cdc8:	4b28      	ldr	r3, [pc, #160]	@ (800ce6c <prvInsertBlockIntoFreeList+0xac>)
 800cdca:	60fb      	str	r3, [r7, #12]
 800cdcc:	e002      	b.n	800cdd4 <prvInsertBlockIntoFreeList+0x14>
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	60fb      	str	r3, [r7, #12]
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	687a      	ldr	r2, [r7, #4]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d8f7      	bhi.n	800cdce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	68ba      	ldr	r2, [r7, #8]
 800cde8:	4413      	add	r3, r2
 800cdea:	687a      	ldr	r2, [r7, #4]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d108      	bne.n	800ce02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	685a      	ldr	r2, [r3, #4]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	441a      	add	r2, r3
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	68ba      	ldr	r2, [r7, #8]
 800ce0c:	441a      	add	r2, r3
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d118      	bne.n	800ce48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	4b15      	ldr	r3, [pc, #84]	@ (800ce70 <prvInsertBlockIntoFreeList+0xb0>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d00d      	beq.n	800ce3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	685a      	ldr	r2, [r3, #4]
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	441a      	add	r2, r3
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	601a      	str	r2, [r3, #0]
 800ce3c:	e008      	b.n	800ce50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ce3e:	4b0c      	ldr	r3, [pc, #48]	@ (800ce70 <prvInsertBlockIntoFreeList+0xb0>)
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	601a      	str	r2, [r3, #0]
 800ce46:	e003      	b.n	800ce50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681a      	ldr	r2, [r3, #0]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ce50:	68fa      	ldr	r2, [r7, #12]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d002      	beq.n	800ce5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce5e:	bf00      	nop
 800ce60:	3714      	adds	r7, #20
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr
 800ce6a:	bf00      	nop
 800ce6c:	2000873c 	.word	0x2000873c
 800ce70:	20008744 	.word	0x20008744

0800ce74 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800ce78:	2200      	movs	r2, #0
 800ce7a:	490e      	ldr	r1, [pc, #56]	@ (800ceb4 <MX_USB_HOST_Init+0x40>)
 800ce7c:	480e      	ldr	r0, [pc, #56]	@ (800ceb8 <MX_USB_HOST_Init+0x44>)
 800ce7e:	f7fb fe0d 	bl	8008a9c <USBH_Init>
 800ce82:	4603      	mov	r3, r0
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d001      	beq.n	800ce8c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ce88:	f7f3 ffe6 	bl	8000e58 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800ce8c:	490b      	ldr	r1, [pc, #44]	@ (800cebc <MX_USB_HOST_Init+0x48>)
 800ce8e:	480a      	ldr	r0, [pc, #40]	@ (800ceb8 <MX_USB_HOST_Init+0x44>)
 800ce90:	f7fb fed9 	bl	8008c46 <USBH_RegisterClass>
 800ce94:	4603      	mov	r3, r0
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d001      	beq.n	800ce9e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ce9a:	f7f3 ffdd 	bl	8000e58 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800ce9e:	4806      	ldr	r0, [pc, #24]	@ (800ceb8 <MX_USB_HOST_Init+0x44>)
 800cea0:	f7fb ff5d 	bl	8008d5e <USBH_Start>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d001      	beq.n	800ceae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ceaa:	f7f3 ffd5 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ceae:	bf00      	nop
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	0800cec1 	.word	0x0800cec1
 800ceb8:	2000875c 	.word	0x2000875c
 800cebc:	20000014 	.word	0x20000014

0800cec0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	460b      	mov	r3, r1
 800ceca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800cecc:	78fb      	ldrb	r3, [r7, #3]
 800cece:	3b01      	subs	r3, #1
 800ced0:	2b04      	cmp	r3, #4
 800ced2:	d819      	bhi.n	800cf08 <USBH_UserProcess+0x48>
 800ced4:	a201      	add	r2, pc, #4	@ (adr r2, 800cedc <USBH_UserProcess+0x1c>)
 800ced6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceda:	bf00      	nop
 800cedc:	0800cf09 	.word	0x0800cf09
 800cee0:	0800cef9 	.word	0x0800cef9
 800cee4:	0800cf09 	.word	0x0800cf09
 800cee8:	0800cf01 	.word	0x0800cf01
 800ceec:	0800cef1 	.word	0x0800cef1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800cef0:	4b09      	ldr	r3, [pc, #36]	@ (800cf18 <USBH_UserProcess+0x58>)
 800cef2:	2203      	movs	r2, #3
 800cef4:	701a      	strb	r2, [r3, #0]
  break;
 800cef6:	e008      	b.n	800cf0a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800cef8:	4b07      	ldr	r3, [pc, #28]	@ (800cf18 <USBH_UserProcess+0x58>)
 800cefa:	2202      	movs	r2, #2
 800cefc:	701a      	strb	r2, [r3, #0]
  break;
 800cefe:	e004      	b.n	800cf0a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800cf00:	4b05      	ldr	r3, [pc, #20]	@ (800cf18 <USBH_UserProcess+0x58>)
 800cf02:	2201      	movs	r2, #1
 800cf04:	701a      	strb	r2, [r3, #0]
  break;
 800cf06:	e000      	b.n	800cf0a <USBH_UserProcess+0x4a>

  default:
  break;
 800cf08:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800cf0a:	bf00      	nop
 800cf0c:	370c      	adds	r7, #12
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr
 800cf16:	bf00      	nop
 800cf18:	20008b40 	.word	0x20008b40

0800cf1c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b08a      	sub	sp, #40	@ 0x28
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf24:	f107 0314 	add.w	r3, r7, #20
 800cf28:	2200      	movs	r2, #0
 800cf2a:	601a      	str	r2, [r3, #0]
 800cf2c:	605a      	str	r2, [r3, #4]
 800cf2e:	609a      	str	r2, [r3, #8]
 800cf30:	60da      	str	r2, [r3, #12]
 800cf32:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	4a24      	ldr	r2, [pc, #144]	@ (800cfcc <HAL_HCD_MspInit+0xb0>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d141      	bne.n	800cfc2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cf3e:	2300      	movs	r3, #0
 800cf40:	613b      	str	r3, [r7, #16]
 800cf42:	4b23      	ldr	r3, [pc, #140]	@ (800cfd0 <HAL_HCD_MspInit+0xb4>)
 800cf44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf46:	4a22      	ldr	r2, [pc, #136]	@ (800cfd0 <HAL_HCD_MspInit+0xb4>)
 800cf48:	f043 0302 	orr.w	r3, r3, #2
 800cf4c:	6313      	str	r3, [r2, #48]	@ 0x30
 800cf4e:	4b20      	ldr	r3, [pc, #128]	@ (800cfd0 <HAL_HCD_MspInit+0xb4>)
 800cf50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf52:	f003 0302 	and.w	r3, r3, #2
 800cf56:	613b      	str	r3, [r7, #16]
 800cf58:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800cf5a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800cf5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf60:	2302      	movs	r3, #2
 800cf62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf64:	2300      	movs	r3, #0
 800cf66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800cf6c:	230c      	movs	r3, #12
 800cf6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cf70:	f107 0314 	add.w	r3, r7, #20
 800cf74:	4619      	mov	r1, r3
 800cf76:	4817      	ldr	r0, [pc, #92]	@ (800cfd4 <HAL_HCD_MspInit+0xb8>)
 800cf78:	f7f4 ffac 	bl	8001ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800cf7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cf80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cf82:	2300      	movs	r3, #0
 800cf84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf86:	2300      	movs	r3, #0
 800cf88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800cf8a:	f107 0314 	add.w	r3, r7, #20
 800cf8e:	4619      	mov	r1, r3
 800cf90:	4810      	ldr	r0, [pc, #64]	@ (800cfd4 <HAL_HCD_MspInit+0xb8>)
 800cf92:	f7f4 ff9f 	bl	8001ed4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800cf96:	2300      	movs	r3, #0
 800cf98:	60fb      	str	r3, [r7, #12]
 800cf9a:	4b0d      	ldr	r3, [pc, #52]	@ (800cfd0 <HAL_HCD_MspInit+0xb4>)
 800cf9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf9e:	4a0c      	ldr	r2, [pc, #48]	@ (800cfd0 <HAL_HCD_MspInit+0xb4>)
 800cfa0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800cfa4:	6313      	str	r3, [r2, #48]	@ 0x30
 800cfa6:	4b0a      	ldr	r3, [pc, #40]	@ (800cfd0 <HAL_HCD_MspInit+0xb4>)
 800cfa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cfae:	60fb      	str	r3, [r7, #12]
 800cfb0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	2105      	movs	r1, #5
 800cfb6:	204d      	movs	r0, #77	@ 0x4d
 800cfb8:	f7f4 fd5a 	bl	8001a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800cfbc:	204d      	movs	r0, #77	@ 0x4d
 800cfbe:	f7f4 fd73 	bl	8001aa8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800cfc2:	bf00      	nop
 800cfc4:	3728      	adds	r7, #40	@ 0x28
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	40040000 	.word	0x40040000
 800cfd0:	40023800 	.word	0x40023800
 800cfd4:	40020400 	.word	0x40020400

0800cfd8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7fc fb6b 	bl	80096c2 <USBH_LL_IncTimer>
}
 800cfec:	bf00      	nop
 800cfee:	3708      	adds	r7, #8
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b082      	sub	sp, #8
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d002:	4618      	mov	r0, r3
 800d004:	f7fc fbaf 	bl	8009766 <USBH_LL_Connect>
}
 800d008:	bf00      	nop
 800d00a:	3708      	adds	r7, #8
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b082      	sub	sp, #8
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d01e:	4618      	mov	r0, r3
 800d020:	f7fc fbc4 	bl	80097ac <USBH_LL_Disconnect>
}
 800d024:	bf00      	nop
 800d026:	3708      	adds	r7, #8
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	460b      	mov	r3, r1
 800d036:	70fb      	strb	r3, [r7, #3]
 800d038:	4613      	mov	r3, r2
 800d03a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d042:	4618      	mov	r0, r3
 800d044:	f7fc fbf9 	bl	800983a <USBH_LL_NotifyURBChange>
#endif
}
 800d048:	bf00      	nop
 800d04a:	3708      	adds	r7, #8
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}

0800d050 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d05e:	4618      	mov	r0, r3
 800d060:	f7fc fb59 	bl	8009716 <USBH_LL_PortEnabled>
}
 800d064:	bf00      	nop
 800d066:	3708      	adds	r7, #8
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}

0800d06c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d07a:	4618      	mov	r0, r3
 800d07c:	f7fc fb65 	bl	800974a <USBH_LL_PortDisabled>
}
 800d080:	bf00      	nop
 800d082:	3708      	adds	r7, #8
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b082      	sub	sp, #8
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800d096:	2b00      	cmp	r3, #0
 800d098:	d132      	bne.n	800d100 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800d09a:	4a1c      	ldr	r2, [pc, #112]	@ (800d10c <USBH_LL_Init+0x84>)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	4a19      	ldr	r2, [pc, #100]	@ (800d10c <USBH_LL_Init+0x84>)
 800d0a6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800d0aa:	4b18      	ldr	r3, [pc, #96]	@ (800d10c <USBH_LL_Init+0x84>)
 800d0ac:	4a18      	ldr	r2, [pc, #96]	@ (800d110 <USBH_LL_Init+0x88>)
 800d0ae:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800d0b0:	4b16      	ldr	r3, [pc, #88]	@ (800d10c <USBH_LL_Init+0x84>)
 800d0b2:	220c      	movs	r2, #12
 800d0b4:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800d0b6:	4b15      	ldr	r3, [pc, #84]	@ (800d10c <USBH_LL_Init+0x84>)
 800d0b8:	2201      	movs	r2, #1
 800d0ba:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800d0bc:	4b13      	ldr	r3, [pc, #76]	@ (800d10c <USBH_LL_Init+0x84>)
 800d0be:	2200      	movs	r2, #0
 800d0c0:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800d0c2:	4b12      	ldr	r3, [pc, #72]	@ (800d10c <USBH_LL_Init+0x84>)
 800d0c4:	2202      	movs	r2, #2
 800d0c6:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800d0c8:	4b10      	ldr	r3, [pc, #64]	@ (800d10c <USBH_LL_Init+0x84>)
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800d0ce:	4b0f      	ldr	r3, [pc, #60]	@ (800d10c <USBH_LL_Init+0x84>)
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800d0d4:	4b0d      	ldr	r3, [pc, #52]	@ (800d10c <USBH_LL_Init+0x84>)
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800d0da:	4b0c      	ldr	r3, [pc, #48]	@ (800d10c <USBH_LL_Init+0x84>)
 800d0dc:	2200      	movs	r2, #0
 800d0de:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800d0e0:	480a      	ldr	r0, [pc, #40]	@ (800d10c <USBH_LL_Init+0x84>)
 800d0e2:	f7f5 f8d6 	bl	8002292 <HAL_HCD_Init>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d001      	beq.n	800d0f0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800d0ec:	f7f3 feb4 	bl	8000e58 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800d0f0:	4806      	ldr	r0, [pc, #24]	@ (800d10c <USBH_LL_Init+0x84>)
 800d0f2:	f7f5 fd37 	bl	8002b64 <HAL_HCD_GetCurrentFrame>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7fc fad2 	bl	80096a4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d100:	2300      	movs	r3, #0
}
 800d102:	4618      	mov	r0, r3
 800d104:	3708      	adds	r7, #8
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	20008b44 	.word	0x20008b44
 800d110:	40040000 	.word	0x40040000

0800d114 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b084      	sub	sp, #16
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d11c:	2300      	movs	r3, #0
 800d11e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d120:	2300      	movs	r3, #0
 800d122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7f5 fca2 	bl	8002a74 <HAL_HCD_Start>
 800d130:	4603      	mov	r3, r0
 800d132:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d134:	7bfb      	ldrb	r3, [r7, #15]
 800d136:	4618      	mov	r0, r3
 800d138:	f000 f95e 	bl	800d3f8 <USBH_Get_USB_Status>
 800d13c:	4603      	mov	r3, r0
 800d13e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d140:	7bbb      	ldrb	r3, [r7, #14]
}
 800d142:	4618      	mov	r0, r3
 800d144:	3710      	adds	r7, #16
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}

0800d14a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d14a:	b580      	push	{r7, lr}
 800d14c:	b084      	sub	sp, #16
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d152:	2300      	movs	r3, #0
 800d154:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d156:	2300      	movs	r3, #0
 800d158:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d160:	4618      	mov	r0, r3
 800d162:	f7f5 fcaa 	bl	8002aba <HAL_HCD_Stop>
 800d166:	4603      	mov	r3, r0
 800d168:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d16a:	7bfb      	ldrb	r3, [r7, #15]
 800d16c:	4618      	mov	r0, r3
 800d16e:	f000 f943 	bl	800d3f8 <USBH_Get_USB_Status>
 800d172:	4603      	mov	r3, r0
 800d174:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d176:	7bbb      	ldrb	r3, [r7, #14]
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3710      	adds	r7, #16
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d188:	2301      	movs	r3, #1
 800d18a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d192:	4618      	mov	r0, r3
 800d194:	f7f5 fcf4 	bl	8002b80 <HAL_HCD_GetCurrentSpeed>
 800d198:	4603      	mov	r3, r0
 800d19a:	2b02      	cmp	r3, #2
 800d19c:	d00c      	beq.n	800d1b8 <USBH_LL_GetSpeed+0x38>
 800d19e:	2b02      	cmp	r3, #2
 800d1a0:	d80d      	bhi.n	800d1be <USBH_LL_GetSpeed+0x3e>
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d002      	beq.n	800d1ac <USBH_LL_GetSpeed+0x2c>
 800d1a6:	2b01      	cmp	r3, #1
 800d1a8:	d003      	beq.n	800d1b2 <USBH_LL_GetSpeed+0x32>
 800d1aa:	e008      	b.n	800d1be <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	73fb      	strb	r3, [r7, #15]
    break;
 800d1b0:	e008      	b.n	800d1c4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	73fb      	strb	r3, [r7, #15]
    break;
 800d1b6:	e005      	b.n	800d1c4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d1b8:	2302      	movs	r3, #2
 800d1ba:	73fb      	strb	r3, [r7, #15]
    break;
 800d1bc:	e002      	b.n	800d1c4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d1be:	2301      	movs	r3, #1
 800d1c0:	73fb      	strb	r3, [r7, #15]
    break;
 800d1c2:	bf00      	nop
  }
  return  speed;
 800d1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3710      	adds	r7, #16
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b084      	sub	sp, #16
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f7f5 fc85 	bl	8002af4 <HAL_HCD_ResetPort>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d1ee:	7bfb      	ldrb	r3, [r7, #15]
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f000 f901 	bl	800d3f8 <USBH_Get_USB_Status>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3710      	adds	r7, #16
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}

0800d204 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b082      	sub	sp, #8
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	460b      	mov	r3, r1
 800d20e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d216:	78fa      	ldrb	r2, [r7, #3]
 800d218:	4611      	mov	r1, r2
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7f5 fc8d 	bl	8002b3a <HAL_HCD_HC_GetXferCount>
 800d220:	4603      	mov	r3, r0
}
 800d222:	4618      	mov	r0, r3
 800d224:	3708      	adds	r7, #8
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}

0800d22a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d22a:	b590      	push	{r4, r7, lr}
 800d22c:	b089      	sub	sp, #36	@ 0x24
 800d22e:	af04      	add	r7, sp, #16
 800d230:	6078      	str	r0, [r7, #4]
 800d232:	4608      	mov	r0, r1
 800d234:	4611      	mov	r1, r2
 800d236:	461a      	mov	r2, r3
 800d238:	4603      	mov	r3, r0
 800d23a:	70fb      	strb	r3, [r7, #3]
 800d23c:	460b      	mov	r3, r1
 800d23e:	70bb      	strb	r3, [r7, #2]
 800d240:	4613      	mov	r3, r2
 800d242:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d244:	2300      	movs	r3, #0
 800d246:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d248:	2300      	movs	r3, #0
 800d24a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800d252:	787c      	ldrb	r4, [r7, #1]
 800d254:	78ba      	ldrb	r2, [r7, #2]
 800d256:	78f9      	ldrb	r1, [r7, #3]
 800d258:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d25a:	9302      	str	r3, [sp, #8]
 800d25c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d260:	9301      	str	r3, [sp, #4]
 800d262:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d266:	9300      	str	r3, [sp, #0]
 800d268:	4623      	mov	r3, r4
 800d26a:	f7f5 f879 	bl	8002360 <HAL_HCD_HC_Init>
 800d26e:	4603      	mov	r3, r0
 800d270:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d272:	7bfb      	ldrb	r3, [r7, #15]
 800d274:	4618      	mov	r0, r3
 800d276:	f000 f8bf 	bl	800d3f8 <USBH_Get_USB_Status>
 800d27a:	4603      	mov	r3, r0
 800d27c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d27e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d280:	4618      	mov	r0, r3
 800d282:	3714      	adds	r7, #20
 800d284:	46bd      	mov	sp, r7
 800d286:	bd90      	pop	{r4, r7, pc}

0800d288 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b084      	sub	sp, #16
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	460b      	mov	r3, r1
 800d292:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d294:	2300      	movs	r3, #0
 800d296:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d298:	2300      	movs	r3, #0
 800d29a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d2a2:	78fa      	ldrb	r2, [r7, #3]
 800d2a4:	4611      	mov	r1, r2
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7f5 f912 	bl	80024d0 <HAL_HCD_HC_Halt>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d2b0:	7bfb      	ldrb	r3, [r7, #15]
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f000 f8a0 	bl	800d3f8 <USBH_Get_USB_Status>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3710      	adds	r7, #16
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}

0800d2c6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d2c6:	b590      	push	{r4, r7, lr}
 800d2c8:	b089      	sub	sp, #36	@ 0x24
 800d2ca:	af04      	add	r7, sp, #16
 800d2cc:	6078      	str	r0, [r7, #4]
 800d2ce:	4608      	mov	r0, r1
 800d2d0:	4611      	mov	r1, r2
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	70fb      	strb	r3, [r7, #3]
 800d2d8:	460b      	mov	r3, r1
 800d2da:	70bb      	strb	r3, [r7, #2]
 800d2dc:	4613      	mov	r3, r2
 800d2de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800d2ee:	787c      	ldrb	r4, [r7, #1]
 800d2f0:	78ba      	ldrb	r2, [r7, #2]
 800d2f2:	78f9      	ldrb	r1, [r7, #3]
 800d2f4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d2f8:	9303      	str	r3, [sp, #12]
 800d2fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d2fc:	9302      	str	r3, [sp, #8]
 800d2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d300:	9301      	str	r3, [sp, #4]
 800d302:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d306:	9300      	str	r3, [sp, #0]
 800d308:	4623      	mov	r3, r4
 800d30a:	f7f5 f905 	bl	8002518 <HAL_HCD_HC_SubmitRequest>
 800d30e:	4603      	mov	r3, r0
 800d310:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d312:	7bfb      	ldrb	r3, [r7, #15]
 800d314:	4618      	mov	r0, r3
 800d316:	f000 f86f 	bl	800d3f8 <USBH_Get_USB_Status>
 800d31a:	4603      	mov	r3, r0
 800d31c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d31e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d320:	4618      	mov	r0, r3
 800d322:	3714      	adds	r7, #20
 800d324:	46bd      	mov	sp, r7
 800d326:	bd90      	pop	{r4, r7, pc}

0800d328 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	460b      	mov	r3, r1
 800d332:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d33a:	78fa      	ldrb	r2, [r7, #3]
 800d33c:	4611      	mov	r1, r2
 800d33e:	4618      	mov	r0, r3
 800d340:	f7f5 fbe6 	bl	8002b10 <HAL_HCD_HC_GetURBState>
 800d344:	4603      	mov	r3, r0
}
 800d346:	4618      	mov	r0, r3
 800d348:	3708      	adds	r7, #8
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}

0800d34e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d34e:	b580      	push	{r7, lr}
 800d350:	b082      	sub	sp, #8
 800d352:	af00      	add	r7, sp, #0
 800d354:	6078      	str	r0, [r7, #4]
 800d356:	460b      	mov	r3, r1
 800d358:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800d360:	2b00      	cmp	r3, #0
 800d362:	d103      	bne.n	800d36c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800d364:	78fb      	ldrb	r3, [r7, #3]
 800d366:	4618      	mov	r0, r3
 800d368:	f000 f872 	bl	800d450 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d36c:	20c8      	movs	r0, #200	@ 0xc8
 800d36e:	f7f4 faa3 	bl	80018b8 <HAL_Delay>
  return USBH_OK;
 800d372:	2300      	movs	r3, #0
}
 800d374:	4618      	mov	r0, r3
 800d376:	3708      	adds	r7, #8
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}

0800d37c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b085      	sub	sp, #20
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	460b      	mov	r3, r1
 800d386:	70fb      	strb	r3, [r7, #3]
 800d388:	4613      	mov	r3, r2
 800d38a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d392:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d394:	78fa      	ldrb	r2, [r7, #3]
 800d396:	68f9      	ldr	r1, [r7, #12]
 800d398:	4613      	mov	r3, r2
 800d39a:	011b      	lsls	r3, r3, #4
 800d39c:	1a9b      	subs	r3, r3, r2
 800d39e:	009b      	lsls	r3, r3, #2
 800d3a0:	440b      	add	r3, r1
 800d3a2:	3317      	adds	r3, #23
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d00a      	beq.n	800d3c0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d3aa:	78fa      	ldrb	r2, [r7, #3]
 800d3ac:	68f9      	ldr	r1, [r7, #12]
 800d3ae:	4613      	mov	r3, r2
 800d3b0:	011b      	lsls	r3, r3, #4
 800d3b2:	1a9b      	subs	r3, r3, r2
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	440b      	add	r3, r1
 800d3b8:	333c      	adds	r3, #60	@ 0x3c
 800d3ba:	78ba      	ldrb	r2, [r7, #2]
 800d3bc:	701a      	strb	r2, [r3, #0]
 800d3be:	e009      	b.n	800d3d4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d3c0:	78fa      	ldrb	r2, [r7, #3]
 800d3c2:	68f9      	ldr	r1, [r7, #12]
 800d3c4:	4613      	mov	r3, r2
 800d3c6:	011b      	lsls	r3, r3, #4
 800d3c8:	1a9b      	subs	r3, r3, r2
 800d3ca:	009b      	lsls	r3, r3, #2
 800d3cc:	440b      	add	r3, r1
 800d3ce:	333d      	adds	r3, #61	@ 0x3d
 800d3d0:	78ba      	ldrb	r2, [r7, #2]
 800d3d2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d3d4:	2300      	movs	r3, #0
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3714      	adds	r7, #20
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr

0800d3e2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d3e2:	b580      	push	{r7, lr}
 800d3e4:	b082      	sub	sp, #8
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f7f4 fa64 	bl	80018b8 <HAL_Delay>
}
 800d3f0:	bf00      	nop
 800d3f2:	3708      	adds	r7, #8
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}

0800d3f8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b085      	sub	sp, #20
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	4603      	mov	r3, r0
 800d400:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d402:	2300      	movs	r3, #0
 800d404:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d406:	79fb      	ldrb	r3, [r7, #7]
 800d408:	2b03      	cmp	r3, #3
 800d40a:	d817      	bhi.n	800d43c <USBH_Get_USB_Status+0x44>
 800d40c:	a201      	add	r2, pc, #4	@ (adr r2, 800d414 <USBH_Get_USB_Status+0x1c>)
 800d40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d412:	bf00      	nop
 800d414:	0800d425 	.word	0x0800d425
 800d418:	0800d42b 	.word	0x0800d42b
 800d41c:	0800d431 	.word	0x0800d431
 800d420:	0800d437 	.word	0x0800d437
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d424:	2300      	movs	r3, #0
 800d426:	73fb      	strb	r3, [r7, #15]
    break;
 800d428:	e00b      	b.n	800d442 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d42a:	2302      	movs	r3, #2
 800d42c:	73fb      	strb	r3, [r7, #15]
    break;
 800d42e:	e008      	b.n	800d442 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d430:	2301      	movs	r3, #1
 800d432:	73fb      	strb	r3, [r7, #15]
    break;
 800d434:	e005      	b.n	800d442 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d436:	2302      	movs	r3, #2
 800d438:	73fb      	strb	r3, [r7, #15]
    break;
 800d43a:	e002      	b.n	800d442 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d43c:	2302      	movs	r3, #2
 800d43e:	73fb      	strb	r3, [r7, #15]
    break;
 800d440:	bf00      	nop
  }
  return usb_status;
 800d442:	7bfb      	ldrb	r3, [r7, #15]
}
 800d444:	4618      	mov	r0, r3
 800d446:	3714      	adds	r7, #20
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr

0800d450 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b084      	sub	sp, #16
 800d454:	af00      	add	r7, sp, #0
 800d456:	4603      	mov	r3, r0
 800d458:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d45a:	79fb      	ldrb	r3, [r7, #7]
 800d45c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800d45e:	79fb      	ldrb	r3, [r7, #7]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d102      	bne.n	800d46a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800d464:	2301      	movs	r3, #1
 800d466:	73fb      	strb	r3, [r7, #15]
 800d468:	e001      	b.n	800d46e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800d46a:	2300      	movs	r3, #0
 800d46c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800d46e:	7bfb      	ldrb	r3, [r7, #15]
 800d470:	461a      	mov	r2, r3
 800d472:	2110      	movs	r1, #16
 800d474:	4803      	ldr	r0, [pc, #12]	@ (800d484 <MX_DriverVbusHS+0x34>)
 800d476:	f7f4 fed9 	bl	800222c <HAL_GPIO_WritePin>
}
 800d47a:	bf00      	nop
 800d47c:	3710      	adds	r7, #16
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	bf00      	nop
 800d484:	40020800 	.word	0x40020800

0800d488 <malloc>:
 800d488:	4b02      	ldr	r3, [pc, #8]	@ (800d494 <malloc+0xc>)
 800d48a:	4601      	mov	r1, r0
 800d48c:	6818      	ldr	r0, [r3, #0]
 800d48e:	f000 b82d 	b.w	800d4ec <_malloc_r>
 800d492:	bf00      	nop
 800d494:	20000038 	.word	0x20000038

0800d498 <free>:
 800d498:	4b02      	ldr	r3, [pc, #8]	@ (800d4a4 <free+0xc>)
 800d49a:	4601      	mov	r1, r0
 800d49c:	6818      	ldr	r0, [r3, #0]
 800d49e:	f000 b903 	b.w	800d6a8 <_free_r>
 800d4a2:	bf00      	nop
 800d4a4:	20000038 	.word	0x20000038

0800d4a8 <sbrk_aligned>:
 800d4a8:	b570      	push	{r4, r5, r6, lr}
 800d4aa:	4e0f      	ldr	r6, [pc, #60]	@ (800d4e8 <sbrk_aligned+0x40>)
 800d4ac:	460c      	mov	r4, r1
 800d4ae:	6831      	ldr	r1, [r6, #0]
 800d4b0:	4605      	mov	r5, r0
 800d4b2:	b911      	cbnz	r1, 800d4ba <sbrk_aligned+0x12>
 800d4b4:	f000 f8ae 	bl	800d614 <_sbrk_r>
 800d4b8:	6030      	str	r0, [r6, #0]
 800d4ba:	4621      	mov	r1, r4
 800d4bc:	4628      	mov	r0, r5
 800d4be:	f000 f8a9 	bl	800d614 <_sbrk_r>
 800d4c2:	1c43      	adds	r3, r0, #1
 800d4c4:	d103      	bne.n	800d4ce <sbrk_aligned+0x26>
 800d4c6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	bd70      	pop	{r4, r5, r6, pc}
 800d4ce:	1cc4      	adds	r4, r0, #3
 800d4d0:	f024 0403 	bic.w	r4, r4, #3
 800d4d4:	42a0      	cmp	r0, r4
 800d4d6:	d0f8      	beq.n	800d4ca <sbrk_aligned+0x22>
 800d4d8:	1a21      	subs	r1, r4, r0
 800d4da:	4628      	mov	r0, r5
 800d4dc:	f000 f89a 	bl	800d614 <_sbrk_r>
 800d4e0:	3001      	adds	r0, #1
 800d4e2:	d1f2      	bne.n	800d4ca <sbrk_aligned+0x22>
 800d4e4:	e7ef      	b.n	800d4c6 <sbrk_aligned+0x1e>
 800d4e6:	bf00      	nop
 800d4e8:	20008f24 	.word	0x20008f24

0800d4ec <_malloc_r>:
 800d4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4f0:	1ccd      	adds	r5, r1, #3
 800d4f2:	f025 0503 	bic.w	r5, r5, #3
 800d4f6:	3508      	adds	r5, #8
 800d4f8:	2d0c      	cmp	r5, #12
 800d4fa:	bf38      	it	cc
 800d4fc:	250c      	movcc	r5, #12
 800d4fe:	2d00      	cmp	r5, #0
 800d500:	4606      	mov	r6, r0
 800d502:	db01      	blt.n	800d508 <_malloc_r+0x1c>
 800d504:	42a9      	cmp	r1, r5
 800d506:	d904      	bls.n	800d512 <_malloc_r+0x26>
 800d508:	230c      	movs	r3, #12
 800d50a:	6033      	str	r3, [r6, #0]
 800d50c:	2000      	movs	r0, #0
 800d50e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d512:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d5e8 <_malloc_r+0xfc>
 800d516:	f000 f869 	bl	800d5ec <__malloc_lock>
 800d51a:	f8d8 3000 	ldr.w	r3, [r8]
 800d51e:	461c      	mov	r4, r3
 800d520:	bb44      	cbnz	r4, 800d574 <_malloc_r+0x88>
 800d522:	4629      	mov	r1, r5
 800d524:	4630      	mov	r0, r6
 800d526:	f7ff ffbf 	bl	800d4a8 <sbrk_aligned>
 800d52a:	1c43      	adds	r3, r0, #1
 800d52c:	4604      	mov	r4, r0
 800d52e:	d158      	bne.n	800d5e2 <_malloc_r+0xf6>
 800d530:	f8d8 4000 	ldr.w	r4, [r8]
 800d534:	4627      	mov	r7, r4
 800d536:	2f00      	cmp	r7, #0
 800d538:	d143      	bne.n	800d5c2 <_malloc_r+0xd6>
 800d53a:	2c00      	cmp	r4, #0
 800d53c:	d04b      	beq.n	800d5d6 <_malloc_r+0xea>
 800d53e:	6823      	ldr	r3, [r4, #0]
 800d540:	4639      	mov	r1, r7
 800d542:	4630      	mov	r0, r6
 800d544:	eb04 0903 	add.w	r9, r4, r3
 800d548:	f000 f864 	bl	800d614 <_sbrk_r>
 800d54c:	4581      	cmp	r9, r0
 800d54e:	d142      	bne.n	800d5d6 <_malloc_r+0xea>
 800d550:	6821      	ldr	r1, [r4, #0]
 800d552:	1a6d      	subs	r5, r5, r1
 800d554:	4629      	mov	r1, r5
 800d556:	4630      	mov	r0, r6
 800d558:	f7ff ffa6 	bl	800d4a8 <sbrk_aligned>
 800d55c:	3001      	adds	r0, #1
 800d55e:	d03a      	beq.n	800d5d6 <_malloc_r+0xea>
 800d560:	6823      	ldr	r3, [r4, #0]
 800d562:	442b      	add	r3, r5
 800d564:	6023      	str	r3, [r4, #0]
 800d566:	f8d8 3000 	ldr.w	r3, [r8]
 800d56a:	685a      	ldr	r2, [r3, #4]
 800d56c:	bb62      	cbnz	r2, 800d5c8 <_malloc_r+0xdc>
 800d56e:	f8c8 7000 	str.w	r7, [r8]
 800d572:	e00f      	b.n	800d594 <_malloc_r+0xa8>
 800d574:	6822      	ldr	r2, [r4, #0]
 800d576:	1b52      	subs	r2, r2, r5
 800d578:	d420      	bmi.n	800d5bc <_malloc_r+0xd0>
 800d57a:	2a0b      	cmp	r2, #11
 800d57c:	d917      	bls.n	800d5ae <_malloc_r+0xc2>
 800d57e:	1961      	adds	r1, r4, r5
 800d580:	42a3      	cmp	r3, r4
 800d582:	6025      	str	r5, [r4, #0]
 800d584:	bf18      	it	ne
 800d586:	6059      	strne	r1, [r3, #4]
 800d588:	6863      	ldr	r3, [r4, #4]
 800d58a:	bf08      	it	eq
 800d58c:	f8c8 1000 	streq.w	r1, [r8]
 800d590:	5162      	str	r2, [r4, r5]
 800d592:	604b      	str	r3, [r1, #4]
 800d594:	4630      	mov	r0, r6
 800d596:	f000 f82f 	bl	800d5f8 <__malloc_unlock>
 800d59a:	f104 000b 	add.w	r0, r4, #11
 800d59e:	1d23      	adds	r3, r4, #4
 800d5a0:	f020 0007 	bic.w	r0, r0, #7
 800d5a4:	1ac2      	subs	r2, r0, r3
 800d5a6:	bf1c      	itt	ne
 800d5a8:	1a1b      	subne	r3, r3, r0
 800d5aa:	50a3      	strne	r3, [r4, r2]
 800d5ac:	e7af      	b.n	800d50e <_malloc_r+0x22>
 800d5ae:	6862      	ldr	r2, [r4, #4]
 800d5b0:	42a3      	cmp	r3, r4
 800d5b2:	bf0c      	ite	eq
 800d5b4:	f8c8 2000 	streq.w	r2, [r8]
 800d5b8:	605a      	strne	r2, [r3, #4]
 800d5ba:	e7eb      	b.n	800d594 <_malloc_r+0xa8>
 800d5bc:	4623      	mov	r3, r4
 800d5be:	6864      	ldr	r4, [r4, #4]
 800d5c0:	e7ae      	b.n	800d520 <_malloc_r+0x34>
 800d5c2:	463c      	mov	r4, r7
 800d5c4:	687f      	ldr	r7, [r7, #4]
 800d5c6:	e7b6      	b.n	800d536 <_malloc_r+0x4a>
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	42a3      	cmp	r3, r4
 800d5ce:	d1fb      	bne.n	800d5c8 <_malloc_r+0xdc>
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	6053      	str	r3, [r2, #4]
 800d5d4:	e7de      	b.n	800d594 <_malloc_r+0xa8>
 800d5d6:	230c      	movs	r3, #12
 800d5d8:	6033      	str	r3, [r6, #0]
 800d5da:	4630      	mov	r0, r6
 800d5dc:	f000 f80c 	bl	800d5f8 <__malloc_unlock>
 800d5e0:	e794      	b.n	800d50c <_malloc_r+0x20>
 800d5e2:	6005      	str	r5, [r0, #0]
 800d5e4:	e7d6      	b.n	800d594 <_malloc_r+0xa8>
 800d5e6:	bf00      	nop
 800d5e8:	20008f28 	.word	0x20008f28

0800d5ec <__malloc_lock>:
 800d5ec:	4801      	ldr	r0, [pc, #4]	@ (800d5f4 <__malloc_lock+0x8>)
 800d5ee:	f000 b84b 	b.w	800d688 <__retarget_lock_acquire_recursive>
 800d5f2:	bf00      	nop
 800d5f4:	20009068 	.word	0x20009068

0800d5f8 <__malloc_unlock>:
 800d5f8:	4801      	ldr	r0, [pc, #4]	@ (800d600 <__malloc_unlock+0x8>)
 800d5fa:	f000 b846 	b.w	800d68a <__retarget_lock_release_recursive>
 800d5fe:	bf00      	nop
 800d600:	20009068 	.word	0x20009068

0800d604 <memset>:
 800d604:	4402      	add	r2, r0
 800d606:	4603      	mov	r3, r0
 800d608:	4293      	cmp	r3, r2
 800d60a:	d100      	bne.n	800d60e <memset+0xa>
 800d60c:	4770      	bx	lr
 800d60e:	f803 1b01 	strb.w	r1, [r3], #1
 800d612:	e7f9      	b.n	800d608 <memset+0x4>

0800d614 <_sbrk_r>:
 800d614:	b538      	push	{r3, r4, r5, lr}
 800d616:	4d06      	ldr	r5, [pc, #24]	@ (800d630 <_sbrk_r+0x1c>)
 800d618:	2300      	movs	r3, #0
 800d61a:	4604      	mov	r4, r0
 800d61c:	4608      	mov	r0, r1
 800d61e:	602b      	str	r3, [r5, #0]
 800d620:	f7f4 f896 	bl	8001750 <_sbrk>
 800d624:	1c43      	adds	r3, r0, #1
 800d626:	d102      	bne.n	800d62e <_sbrk_r+0x1a>
 800d628:	682b      	ldr	r3, [r5, #0]
 800d62a:	b103      	cbz	r3, 800d62e <_sbrk_r+0x1a>
 800d62c:	6023      	str	r3, [r4, #0]
 800d62e:	bd38      	pop	{r3, r4, r5, pc}
 800d630:	20009064 	.word	0x20009064

0800d634 <__errno>:
 800d634:	4b01      	ldr	r3, [pc, #4]	@ (800d63c <__errno+0x8>)
 800d636:	6818      	ldr	r0, [r3, #0]
 800d638:	4770      	bx	lr
 800d63a:	bf00      	nop
 800d63c:	20000038 	.word	0x20000038

0800d640 <__libc_init_array>:
 800d640:	b570      	push	{r4, r5, r6, lr}
 800d642:	4d0d      	ldr	r5, [pc, #52]	@ (800d678 <__libc_init_array+0x38>)
 800d644:	4c0d      	ldr	r4, [pc, #52]	@ (800d67c <__libc_init_array+0x3c>)
 800d646:	1b64      	subs	r4, r4, r5
 800d648:	10a4      	asrs	r4, r4, #2
 800d64a:	2600      	movs	r6, #0
 800d64c:	42a6      	cmp	r6, r4
 800d64e:	d109      	bne.n	800d664 <__libc_init_array+0x24>
 800d650:	4d0b      	ldr	r5, [pc, #44]	@ (800d680 <__libc_init_array+0x40>)
 800d652:	4c0c      	ldr	r4, [pc, #48]	@ (800d684 <__libc_init_array+0x44>)
 800d654:	f000 f872 	bl	800d73c <_init>
 800d658:	1b64      	subs	r4, r4, r5
 800d65a:	10a4      	asrs	r4, r4, #2
 800d65c:	2600      	movs	r6, #0
 800d65e:	42a6      	cmp	r6, r4
 800d660:	d105      	bne.n	800d66e <__libc_init_array+0x2e>
 800d662:	bd70      	pop	{r4, r5, r6, pc}
 800d664:	f855 3b04 	ldr.w	r3, [r5], #4
 800d668:	4798      	blx	r3
 800d66a:	3601      	adds	r6, #1
 800d66c:	e7ee      	b.n	800d64c <__libc_init_array+0xc>
 800d66e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d672:	4798      	blx	r3
 800d674:	3601      	adds	r6, #1
 800d676:	e7f2      	b.n	800d65e <__libc_init_array+0x1e>
 800d678:	08119ad0 	.word	0x08119ad0
 800d67c:	08119ad0 	.word	0x08119ad0
 800d680:	08119ad0 	.word	0x08119ad0
 800d684:	08119ad4 	.word	0x08119ad4

0800d688 <__retarget_lock_acquire_recursive>:
 800d688:	4770      	bx	lr

0800d68a <__retarget_lock_release_recursive>:
 800d68a:	4770      	bx	lr

0800d68c <memcpy>:
 800d68c:	440a      	add	r2, r1
 800d68e:	4291      	cmp	r1, r2
 800d690:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d694:	d100      	bne.n	800d698 <memcpy+0xc>
 800d696:	4770      	bx	lr
 800d698:	b510      	push	{r4, lr}
 800d69a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d69e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6a2:	4291      	cmp	r1, r2
 800d6a4:	d1f9      	bne.n	800d69a <memcpy+0xe>
 800d6a6:	bd10      	pop	{r4, pc}

0800d6a8 <_free_r>:
 800d6a8:	b538      	push	{r3, r4, r5, lr}
 800d6aa:	4605      	mov	r5, r0
 800d6ac:	2900      	cmp	r1, #0
 800d6ae:	d041      	beq.n	800d734 <_free_r+0x8c>
 800d6b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6b4:	1f0c      	subs	r4, r1, #4
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	bfb8      	it	lt
 800d6ba:	18e4      	addlt	r4, r4, r3
 800d6bc:	f7ff ff96 	bl	800d5ec <__malloc_lock>
 800d6c0:	4a1d      	ldr	r2, [pc, #116]	@ (800d738 <_free_r+0x90>)
 800d6c2:	6813      	ldr	r3, [r2, #0]
 800d6c4:	b933      	cbnz	r3, 800d6d4 <_free_r+0x2c>
 800d6c6:	6063      	str	r3, [r4, #4]
 800d6c8:	6014      	str	r4, [r2, #0]
 800d6ca:	4628      	mov	r0, r5
 800d6cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6d0:	f7ff bf92 	b.w	800d5f8 <__malloc_unlock>
 800d6d4:	42a3      	cmp	r3, r4
 800d6d6:	d908      	bls.n	800d6ea <_free_r+0x42>
 800d6d8:	6820      	ldr	r0, [r4, #0]
 800d6da:	1821      	adds	r1, r4, r0
 800d6dc:	428b      	cmp	r3, r1
 800d6de:	bf01      	itttt	eq
 800d6e0:	6819      	ldreq	r1, [r3, #0]
 800d6e2:	685b      	ldreq	r3, [r3, #4]
 800d6e4:	1809      	addeq	r1, r1, r0
 800d6e6:	6021      	streq	r1, [r4, #0]
 800d6e8:	e7ed      	b.n	800d6c6 <_free_r+0x1e>
 800d6ea:	461a      	mov	r2, r3
 800d6ec:	685b      	ldr	r3, [r3, #4]
 800d6ee:	b10b      	cbz	r3, 800d6f4 <_free_r+0x4c>
 800d6f0:	42a3      	cmp	r3, r4
 800d6f2:	d9fa      	bls.n	800d6ea <_free_r+0x42>
 800d6f4:	6811      	ldr	r1, [r2, #0]
 800d6f6:	1850      	adds	r0, r2, r1
 800d6f8:	42a0      	cmp	r0, r4
 800d6fa:	d10b      	bne.n	800d714 <_free_r+0x6c>
 800d6fc:	6820      	ldr	r0, [r4, #0]
 800d6fe:	4401      	add	r1, r0
 800d700:	1850      	adds	r0, r2, r1
 800d702:	4283      	cmp	r3, r0
 800d704:	6011      	str	r1, [r2, #0]
 800d706:	d1e0      	bne.n	800d6ca <_free_r+0x22>
 800d708:	6818      	ldr	r0, [r3, #0]
 800d70a:	685b      	ldr	r3, [r3, #4]
 800d70c:	6053      	str	r3, [r2, #4]
 800d70e:	4408      	add	r0, r1
 800d710:	6010      	str	r0, [r2, #0]
 800d712:	e7da      	b.n	800d6ca <_free_r+0x22>
 800d714:	d902      	bls.n	800d71c <_free_r+0x74>
 800d716:	230c      	movs	r3, #12
 800d718:	602b      	str	r3, [r5, #0]
 800d71a:	e7d6      	b.n	800d6ca <_free_r+0x22>
 800d71c:	6820      	ldr	r0, [r4, #0]
 800d71e:	1821      	adds	r1, r4, r0
 800d720:	428b      	cmp	r3, r1
 800d722:	bf04      	itt	eq
 800d724:	6819      	ldreq	r1, [r3, #0]
 800d726:	685b      	ldreq	r3, [r3, #4]
 800d728:	6063      	str	r3, [r4, #4]
 800d72a:	bf04      	itt	eq
 800d72c:	1809      	addeq	r1, r1, r0
 800d72e:	6021      	streq	r1, [r4, #0]
 800d730:	6054      	str	r4, [r2, #4]
 800d732:	e7ca      	b.n	800d6ca <_free_r+0x22>
 800d734:	bd38      	pop	{r3, r4, r5, pc}
 800d736:	bf00      	nop
 800d738:	20008f28 	.word	0x20008f28

0800d73c <_init>:
 800d73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d73e:	bf00      	nop
 800d740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d742:	bc08      	pop	{r3}
 800d744:	469e      	mov	lr, r3
 800d746:	4770      	bx	lr

0800d748 <_fini>:
 800d748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d74a:	bf00      	nop
 800d74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d74e:	bc08      	pop	{r3}
 800d750:	469e      	mov	lr, r3
 800d752:	4770      	bx	lr
